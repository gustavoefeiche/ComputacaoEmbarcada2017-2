
Avaliacao1-menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fa4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406fa4  00406fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b4  20400000  00406fac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001a0  204009b4  00407960  000209b4  2**2
                  ALLOC
  4 .stack        00002004  20400b54  00407b00  000209b4  2**0
                  ALLOC
  5 .heap         00000200  20402b58  00409b04  000209b4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00013285  00000000  00000000  00020a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002398  00000000  00000000  00033cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007618  00000000  00000000  00036058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c58  00000000  00000000  0003d670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bf0  00000000  00000000  0003e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e214  00000000  00000000  0003eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000aa28  00000000  00000000  0005d0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008b1b7  00000000  00000000  00067af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004178  00000000  00000000  000f2cac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 2b 40 20 3d 17 40 00 ed 17 40 00 ed 17 40 00     X+@ =.@...@...@.
  400010:	ed 17 40 00 ed 17 40 00 ed 17 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ed 17 40 00 ed 17 40 00 00 00 00 00 ed 17 40 00     ..@...@.......@.
  40003c:	ed 17 40 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  40004c:	ed 17 40 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  40005c:	ed 17 40 00 ed 17 40 00 00 00 00 00 75 0d 40 00     ..@...@.....u.@.
  40006c:	8d 0d 40 00 a5 0d 40 00 ed 17 40 00 d5 1f 40 00     ..@...@...@...@.
  40007c:	ed 17 40 00 bd 0d 40 00 d5 0d 40 00 ed 17 40 00     ..@...@...@...@.
  40008c:	ed 17 40 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  40009c:	ed 17 40 00 91 1f 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  4000ac:	ed 17 40 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  4000bc:	ed 17 40 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  4000cc:	ed 17 40 00 00 00 00 00 ed 17 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ed 17 40 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  4000ec:	ed 17 40 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  4000fc:	ed 17 40 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ..@...@...@...@.
  40010c:	ed 17 40 00 ed 17 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ed 17 40 00 ed 17 40 00 ed 17 40 00     ......@...@...@.
  40012c:	ed 17 40 00 ed 17 40 00 00 00 00 00 ed 17 40 00     ..@...@.......@.
  40013c:	ed 17 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b4 	.word	0x204009b4
  40015c:	00000000 	.word	0x00000000
  400160:	00406fac 	.word	0x00406fac

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406fac 	.word	0x00406fac
  4001a0:	204009b8 	.word	0x204009b8
  4001a4:	00406fac 	.word	0x00406fac
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400eed 	.word	0x00400eed
  40022c:	00400f59 	.word	0x00400f59
  400230:	00400fc9 	.word	0x00400fc9

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400f25 	.word	0x00400f25
  4002a0:	00401041 	.word	0x00401041

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	0040105d 	.word	0x0040105d
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00401079 	.word	0x00401079
  400418:	00401095 	.word	0x00401095

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	0040195d 	.word	0x0040195d
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400ded 	.word	0x00400ded
  40051c:	00400e69 	.word	0x00400e69
  400520:	004017f5 	.word	0x004017f5
  400524:	00400499 	.word	0x00400499

00400528 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  400528:	b480      	push	{r7}
  40052a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40052c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400530:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400534:	4b09      	ldr	r3, [pc, #36]	; (40055c <SCB_EnableICache+0x34>)
  400536:	2200      	movs	r2, #0
  400538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40053c:	4a07      	ldr	r2, [pc, #28]	; (40055c <SCB_EnableICache+0x34>)
  40053e:	4b07      	ldr	r3, [pc, #28]	; (40055c <SCB_EnableICache+0x34>)
  400540:	695b      	ldr	r3, [r3, #20]
  400542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400546:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  400548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40054c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  400550:	bf00      	nop
  400552:	46bd      	mov	sp, r7
  400554:	f85d 7b04 	ldr.w	r7, [sp], #4
  400558:	4770      	bx	lr
  40055a:	bf00      	nop
  40055c:	e000ed00 	.word	0xe000ed00

00400560 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  400560:	b480      	push	{r7}
  400562:	b08b      	sub	sp, #44	; 0x2c
  400564:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400566:	4b26      	ldr	r3, [pc, #152]	; (400600 <SCB_EnableDCache+0xa0>)
  400568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40056c:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40056e:	69fb      	ldr	r3, [r7, #28]
  400570:	0b5b      	lsrs	r3, r3, #13
  400572:	f3c3 030e 	ubfx	r3, r3, #0, #15
  400576:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400578:	69fb      	ldr	r3, [r7, #28]
  40057a:	f003 0307 	and.w	r3, r3, #7
  40057e:	3304      	adds	r3, #4
  400580:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  400582:	69fb      	ldr	r3, [r7, #28]
  400584:	08db      	lsrs	r3, r3, #3
  400586:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40058a:	617b      	str	r3, [r7, #20]
  40058c:	697b      	ldr	r3, [r7, #20]
  40058e:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400590:	68bb      	ldr	r3, [r7, #8]
  400592:	fab3 f383 	clz	r3, r3
  400596:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  400598:	687b      	ldr	r3, [r7, #4]
  40059a:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  40059c:	f003 031f 	and.w	r3, r3, #31
  4005a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  4005a2:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4005a6:	697b      	ldr	r3, [r7, #20]
  4005a8:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4005aa:	6a3a      	ldr	r2, [r7, #32]
  4005ac:	693b      	ldr	r3, [r7, #16]
  4005ae:	fa02 f303 	lsl.w	r3, r2, r3
  4005b2:	4619      	mov	r1, r3
  4005b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4005b6:	69bb      	ldr	r3, [r7, #24]
  4005b8:	fa02 f303 	lsl.w	r3, r2, r3
  4005bc:	430b      	orrs	r3, r1
  4005be:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  4005c0:	4a0f      	ldr	r2, [pc, #60]	; (400600 <SCB_EnableDCache+0xa0>)
  4005c2:	68fb      	ldr	r3, [r7, #12]
  4005c4:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  4005c8:	6a3b      	ldr	r3, [r7, #32]
  4005ca:	1e5a      	subs	r2, r3, #1
  4005cc:	623a      	str	r2, [r7, #32]
  4005ce:	2b00      	cmp	r3, #0
  4005d0:	d1eb      	bne.n	4005aa <SCB_EnableDCache+0x4a>
        } while(sets--);
  4005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4005d4:	1e5a      	subs	r2, r3, #1
  4005d6:	627a      	str	r2, [r7, #36]	; 0x24
  4005d8:	2b00      	cmp	r3, #0
  4005da:	d1e4      	bne.n	4005a6 <SCB_EnableDCache+0x46>
  4005dc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4005e0:	4a07      	ldr	r2, [pc, #28]	; (400600 <SCB_EnableDCache+0xa0>)
  4005e2:	4b07      	ldr	r3, [pc, #28]	; (400600 <SCB_EnableDCache+0xa0>)
  4005e4:	695b      	ldr	r3, [r3, #20]
  4005e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4005ea:	6153      	str	r3, [r2, #20]
  4005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4005f0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4005f4:	bf00      	nop
  4005f6:	372c      	adds	r7, #44	; 0x2c
  4005f8:	46bd      	mov	sp, r7
  4005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005fe:	4770      	bx	lr
  400600:	e000ed00 	.word	0xe000ed00

00400604 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400604:	b580      	push	{r7, lr}
  400606:	b082      	sub	sp, #8
  400608:	af00      	add	r7, sp, #0
  40060a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40060c:	6878      	ldr	r0, [r7, #4]
  40060e:	4b03      	ldr	r3, [pc, #12]	; (40061c <sysclk_enable_peripheral_clock+0x18>)
  400610:	4798      	blx	r3
}
  400612:	bf00      	nop
  400614:	3708      	adds	r7, #8
  400616:	46bd      	mov	sp, r7
  400618:	bd80      	pop	{r7, pc}
  40061a:	bf00      	nop
  40061c:	004010b1 	.word	0x004010b1

00400620 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400620:	b580      	push	{r7, lr}
  400622:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400624:	200a      	movs	r0, #10
  400626:	4b08      	ldr	r3, [pc, #32]	; (400648 <ioport_init+0x28>)
  400628:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40062a:	200b      	movs	r0, #11
  40062c:	4b06      	ldr	r3, [pc, #24]	; (400648 <ioport_init+0x28>)
  40062e:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400630:	200c      	movs	r0, #12
  400632:	4b05      	ldr	r3, [pc, #20]	; (400648 <ioport_init+0x28>)
  400634:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400636:	2010      	movs	r0, #16
  400638:	4b03      	ldr	r3, [pc, #12]	; (400648 <ioport_init+0x28>)
  40063a:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  40063c:	2011      	movs	r0, #17
  40063e:	4b02      	ldr	r3, [pc, #8]	; (400648 <ioport_init+0x28>)
  400640:	4798      	blx	r3
	arch_ioport_init();
}
  400642:	bf00      	nop
  400644:	bd80      	pop	{r7, pc}
  400646:	bf00      	nop
  400648:	00400605 	.word	0x00400605

0040064c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  40064c:	b480      	push	{r7}
  40064e:	b089      	sub	sp, #36	; 0x24
  400650:	af00      	add	r7, sp, #0
  400652:	6078      	str	r0, [r7, #4]
  400654:	687b      	ldr	r3, [r7, #4]
  400656:	61fb      	str	r3, [r7, #28]
  400658:	69fb      	ldr	r3, [r7, #28]
  40065a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40065c:	69bb      	ldr	r3, [r7, #24]
  40065e:	095a      	lsrs	r2, r3, #5
  400660:	69fb      	ldr	r3, [r7, #28]
  400662:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400664:	697b      	ldr	r3, [r7, #20]
  400666:	f003 031f 	and.w	r3, r3, #31
  40066a:	2101      	movs	r1, #1
  40066c:	fa01 f303 	lsl.w	r3, r1, r3
  400670:	613a      	str	r2, [r7, #16]
  400672:	60fb      	str	r3, [r7, #12]
  400674:	693b      	ldr	r3, [r7, #16]
  400676:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400678:	68ba      	ldr	r2, [r7, #8]
  40067a:	4b06      	ldr	r3, [pc, #24]	; (400694 <ioport_disable_pin+0x48>)
  40067c:	4413      	add	r3, r2
  40067e:	025b      	lsls	r3, r3, #9
  400680:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400686:	bf00      	nop
  400688:	3724      	adds	r7, #36	; 0x24
  40068a:	46bd      	mov	sp, r7
  40068c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	00200707 	.word	0x00200707

00400698 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400698:	b480      	push	{r7}
  40069a:	b08d      	sub	sp, #52	; 0x34
  40069c:	af00      	add	r7, sp, #0
  40069e:	6078      	str	r0, [r7, #4]
  4006a0:	6039      	str	r1, [r7, #0]
  4006a2:	687b      	ldr	r3, [r7, #4]
  4006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006a6:	683b      	ldr	r3, [r7, #0]
  4006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  4006aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006ac:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4006ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006b0:	095a      	lsrs	r2, r3, #5
  4006b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006b4:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4006b6:	6a3b      	ldr	r3, [r7, #32]
  4006b8:	f003 031f 	and.w	r3, r3, #31
  4006bc:	2101      	movs	r1, #1
  4006be:	fa01 f303 	lsl.w	r3, r1, r3
  4006c2:	61fa      	str	r2, [r7, #28]
  4006c4:	61bb      	str	r3, [r7, #24]
  4006c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4006c8:	617b      	str	r3, [r7, #20]
  4006ca:	69fb      	ldr	r3, [r7, #28]
  4006cc:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ce:	693a      	ldr	r2, [r7, #16]
  4006d0:	4b37      	ldr	r3, [pc, #220]	; (4007b0 <ioport_set_pin_mode+0x118>)
  4006d2:	4413      	add	r3, r2
  4006d4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006d6:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	f003 0308 	and.w	r3, r3, #8
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d003      	beq.n	4006ea <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	69ba      	ldr	r2, [r7, #24]
  4006e6:	665a      	str	r2, [r3, #100]	; 0x64
  4006e8:	e002      	b.n	4006f0 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4006ea:	68fb      	ldr	r3, [r7, #12]
  4006ec:	69ba      	ldr	r2, [r7, #24]
  4006ee:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006f0:	697b      	ldr	r3, [r7, #20]
  4006f2:	f003 0310 	and.w	r3, r3, #16
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d004      	beq.n	400704 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4006fa:	68fb      	ldr	r3, [r7, #12]
  4006fc:	69ba      	ldr	r2, [r7, #24]
  4006fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400702:	e003      	b.n	40070c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	69ba      	ldr	r2, [r7, #24]
  400708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	f003 0320 	and.w	r3, r3, #32
  400712:	2b00      	cmp	r3, #0
  400714:	d003      	beq.n	40071e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	69ba      	ldr	r2, [r7, #24]
  40071a:	651a      	str	r2, [r3, #80]	; 0x50
  40071c:	e002      	b.n	400724 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40071e:	68fb      	ldr	r3, [r7, #12]
  400720:	69ba      	ldr	r2, [r7, #24]
  400722:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40072a:	2b00      	cmp	r3, #0
  40072c:	d003      	beq.n	400736 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40072e:	68fb      	ldr	r3, [r7, #12]
  400730:	69ba      	ldr	r2, [r7, #24]
  400732:	621a      	str	r2, [r3, #32]
  400734:	e002      	b.n	40073c <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400736:	68fb      	ldr	r3, [r7, #12]
  400738:	69ba      	ldr	r2, [r7, #24]
  40073a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400742:	2b00      	cmp	r3, #0
  400744:	d004      	beq.n	400750 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400746:	68fb      	ldr	r3, [r7, #12]
  400748:	69ba      	ldr	r2, [r7, #24]
  40074a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40074e:	e003      	b.n	400758 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400750:	68fb      	ldr	r3, [r7, #12]
  400752:	69ba      	ldr	r2, [r7, #24]
  400754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	f003 0301 	and.w	r3, r3, #1
  40075e:	2b00      	cmp	r3, #0
  400760:	d006      	beq.n	400770 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400762:	68fb      	ldr	r3, [r7, #12]
  400764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400766:	69bb      	ldr	r3, [r7, #24]
  400768:	431a      	orrs	r2, r3
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	671a      	str	r2, [r3, #112]	; 0x70
  40076e:	e006      	b.n	40077e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400770:	68fb      	ldr	r3, [r7, #12]
  400772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400774:	69bb      	ldr	r3, [r7, #24]
  400776:	43db      	mvns	r3, r3
  400778:	401a      	ands	r2, r3
  40077a:	68fb      	ldr	r3, [r7, #12]
  40077c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	f003 0302 	and.w	r3, r3, #2
  400784:	2b00      	cmp	r3, #0
  400786:	d006      	beq.n	400796 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400788:	68fb      	ldr	r3, [r7, #12]
  40078a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40078c:	69bb      	ldr	r3, [r7, #24]
  40078e:	431a      	orrs	r2, r3
  400790:	68fb      	ldr	r3, [r7, #12]
  400792:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400794:	e006      	b.n	4007a4 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400796:	68fb      	ldr	r3, [r7, #12]
  400798:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40079a:	69bb      	ldr	r3, [r7, #24]
  40079c:	43db      	mvns	r3, r3
  40079e:	401a      	ands	r2, r3
  4007a0:	68fb      	ldr	r3, [r7, #12]
  4007a2:	675a      	str	r2, [r3, #116]	; 0x74
  4007a4:	bf00      	nop
  4007a6:	3734      	adds	r7, #52	; 0x34
  4007a8:	46bd      	mov	sp, r7
  4007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ae:	4770      	bx	lr
  4007b0:	00200707 	.word	0x00200707

004007b4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4007b4:	b480      	push	{r7}
  4007b6:	b08d      	sub	sp, #52	; 0x34
  4007b8:	af00      	add	r7, sp, #0
  4007ba:	6078      	str	r0, [r7, #4]
  4007bc:	460b      	mov	r3, r1
  4007be:	70fb      	strb	r3, [r7, #3]
  4007c0:	687b      	ldr	r3, [r7, #4]
  4007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007c4:	78fb      	ldrb	r3, [r7, #3]
  4007c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4007ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007cc:	627b      	str	r3, [r7, #36]	; 0x24
  4007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007d0:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4007d2:	6a3b      	ldr	r3, [r7, #32]
  4007d4:	095b      	lsrs	r3, r3, #5
  4007d6:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007d8:	69fa      	ldr	r2, [r7, #28]
  4007da:	4b17      	ldr	r3, [pc, #92]	; (400838 <ioport_set_pin_dir+0x84>)
  4007dc:	4413      	add	r3, r2
  4007de:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007e0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4007e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007e6:	2b01      	cmp	r3, #1
  4007e8:	d109      	bne.n	4007fe <ioport_set_pin_dir+0x4a>
  4007ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ec:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4007ee:	697b      	ldr	r3, [r7, #20]
  4007f0:	f003 031f 	and.w	r3, r3, #31
  4007f4:	2201      	movs	r2, #1
  4007f6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007f8:	69bb      	ldr	r3, [r7, #24]
  4007fa:	611a      	str	r2, [r3, #16]
  4007fc:	e00c      	b.n	400818 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4007fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400802:	2b00      	cmp	r3, #0
  400804:	d108      	bne.n	400818 <ioport_set_pin_dir+0x64>
  400806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400808:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40080a:	693b      	ldr	r3, [r7, #16]
  40080c:	f003 031f 	and.w	r3, r3, #31
  400810:	2201      	movs	r2, #1
  400812:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400814:	69bb      	ldr	r3, [r7, #24]
  400816:	615a      	str	r2, [r3, #20]
  400818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40081a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40081c:	68fb      	ldr	r3, [r7, #12]
  40081e:	f003 031f 	and.w	r3, r3, #31
  400822:	2201      	movs	r2, #1
  400824:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400826:	69bb      	ldr	r3, [r7, #24]
  400828:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40082c:	bf00      	nop
  40082e:	3734      	adds	r7, #52	; 0x34
  400830:	46bd      	mov	sp, r7
  400832:	f85d 7b04 	ldr.w	r7, [sp], #4
  400836:	4770      	bx	lr
  400838:	00200707 	.word	0x00200707

0040083c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40083c:	b480      	push	{r7}
  40083e:	b08b      	sub	sp, #44	; 0x2c
  400840:	af00      	add	r7, sp, #0
  400842:	6078      	str	r0, [r7, #4]
  400844:	460b      	mov	r3, r1
  400846:	70fb      	strb	r3, [r7, #3]
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	627b      	str	r3, [r7, #36]	; 0x24
  40084c:	78fb      	ldrb	r3, [r7, #3]
  40084e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400854:	61fb      	str	r3, [r7, #28]
  400856:	69fb      	ldr	r3, [r7, #28]
  400858:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40085a:	69bb      	ldr	r3, [r7, #24]
  40085c:	095b      	lsrs	r3, r3, #5
  40085e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400860:	697a      	ldr	r2, [r7, #20]
  400862:	4b10      	ldr	r3, [pc, #64]	; (4008a4 <ioport_set_pin_level+0x68>)
  400864:	4413      	add	r3, r2
  400866:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400868:	613b      	str	r3, [r7, #16]

	if (level) {
  40086a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40086e:	2b00      	cmp	r3, #0
  400870:	d009      	beq.n	400886 <ioport_set_pin_level+0x4a>
  400872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400874:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400876:	68fb      	ldr	r3, [r7, #12]
  400878:	f003 031f 	and.w	r3, r3, #31
  40087c:	2201      	movs	r2, #1
  40087e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400880:	693b      	ldr	r3, [r7, #16]
  400882:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400884:	e008      	b.n	400898 <ioport_set_pin_level+0x5c>
  400886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400888:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40088a:	68bb      	ldr	r3, [r7, #8]
  40088c:	f003 031f 	and.w	r3, r3, #31
  400890:	2201      	movs	r2, #1
  400892:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400894:	693b      	ldr	r3, [r7, #16]
  400896:	635a      	str	r2, [r3, #52]	; 0x34
  400898:	bf00      	nop
  40089a:	372c      	adds	r7, #44	; 0x2c
  40089c:	46bd      	mov	sp, r7
  40089e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a2:	4770      	bx	lr
  4008a4:	00200707 	.word	0x00200707

004008a8 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4008a8:	b480      	push	{r7}
  4008aa:	b08d      	sub	sp, #52	; 0x34
  4008ac:	af00      	add	r7, sp, #0
  4008ae:	6078      	str	r0, [r7, #4]
  4008b0:	460b      	mov	r3, r1
  4008b2:	70fb      	strb	r3, [r7, #3]
  4008b4:	687b      	ldr	r3, [r7, #4]
  4008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008b8:	78fb      	ldrb	r3, [r7, #3]
  4008ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c4:	095a      	lsrs	r2, r3, #5
  4008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	f003 031f 	and.w	r3, r3, #31
  4008d0:	2101      	movs	r1, #1
  4008d2:	fa01 f303 	lsl.w	r3, r1, r3
  4008d6:	61fa      	str	r2, [r7, #28]
  4008d8:	61bb      	str	r3, [r7, #24]
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	75fb      	strb	r3, [r7, #23]
  4008e0:	69fb      	ldr	r3, [r7, #28]
  4008e2:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008e4:	693a      	ldr	r2, [r7, #16]
  4008e6:	4b23      	ldr	r3, [pc, #140]	; (400974 <ioport_set_pin_sense_mode+0xcc>)
  4008e8:	4413      	add	r3, r2
  4008ea:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4008ec:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4008ee:	7dfb      	ldrb	r3, [r7, #23]
  4008f0:	3b01      	subs	r3, #1
  4008f2:	2b03      	cmp	r3, #3
  4008f4:	d82e      	bhi.n	400954 <ioport_set_pin_sense_mode+0xac>
  4008f6:	a201      	add	r2, pc, #4	; (adr r2, 4008fc <ioport_set_pin_sense_mode+0x54>)
  4008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008fc:	00400931 	.word	0x00400931
  400900:	00400943 	.word	0x00400943
  400904:	0040090d 	.word	0x0040090d
  400908:	0040091f 	.word	0x0040091f
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  40090c:	68fb      	ldr	r3, [r7, #12]
  40090e:	69ba      	ldr	r2, [r7, #24]
  400910:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	69ba      	ldr	r2, [r7, #24]
  400918:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40091c:	e01f      	b.n	40095e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40091e:	68fb      	ldr	r3, [r7, #12]
  400920:	69ba      	ldr	r2, [r7, #24]
  400922:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400926:	68fb      	ldr	r3, [r7, #12]
  400928:	69ba      	ldr	r2, [r7, #24]
  40092a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40092e:	e016      	b.n	40095e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400930:	68fb      	ldr	r3, [r7, #12]
  400932:	69ba      	ldr	r2, [r7, #24]
  400934:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400938:	68fb      	ldr	r3, [r7, #12]
  40093a:	69ba      	ldr	r2, [r7, #24]
  40093c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400940:	e00d      	b.n	40095e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400942:	68fb      	ldr	r3, [r7, #12]
  400944:	69ba      	ldr	r2, [r7, #24]
  400946:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40094a:	68fb      	ldr	r3, [r7, #12]
  40094c:	69ba      	ldr	r2, [r7, #24]
  40094e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400952:	e004      	b.n	40095e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400954:	68fb      	ldr	r3, [r7, #12]
  400956:	69ba      	ldr	r2, [r7, #24]
  400958:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  40095c:	e003      	b.n	400966 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  40095e:	68fb      	ldr	r3, [r7, #12]
  400960:	69ba      	ldr	r2, [r7, #24]
  400962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400966:	bf00      	nop
  400968:	3734      	adds	r7, #52	; 0x34
  40096a:	46bd      	mov	sp, r7
  40096c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400970:	4770      	bx	lr
  400972:	bf00      	nop
  400974:	00200707 	.word	0x00200707

00400978 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400978:	b480      	push	{r7}
  40097a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  40097c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400980:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400984:	4a0c      	ldr	r2, [pc, #48]	; (4009b8 <tcm_disable+0x40>)
  400986:	4b0c      	ldr	r3, [pc, #48]	; (4009b8 <tcm_disable+0x40>)
  400988:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  40098c:	f023 0301 	bic.w	r3, r3, #1
  400990:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400994:	4a08      	ldr	r2, [pc, #32]	; (4009b8 <tcm_disable+0x40>)
  400996:	4b08      	ldr	r3, [pc, #32]	; (4009b8 <tcm_disable+0x40>)
  400998:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  40099c:	f023 0301 	bic.w	r3, r3, #1
  4009a0:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  4009a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009a8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4009ac:	bf00      	nop
  4009ae:	46bd      	mov	sp, r7
  4009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009b4:	4770      	bx	lr
  4009b6:	bf00      	nop
  4009b8:	e000ed00 	.word	0xe000ed00

004009bc <board_init>:
#endif

void board_init(void)
{
  4009bc:	b580      	push	{r7, lr}
  4009be:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009c0:	4b1e      	ldr	r3, [pc, #120]	; (400a3c <board_init+0x80>)
  4009c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009c6:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  4009c8:	4b1d      	ldr	r3, [pc, #116]	; (400a40 <board_init+0x84>)
  4009ca:	4798      	blx	r3
	SCB_EnableDCache();
  4009cc:	4b1d      	ldr	r3, [pc, #116]	; (400a44 <board_init+0x88>)
  4009ce:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009d0:	4b1d      	ldr	r3, [pc, #116]	; (400a48 <board_init+0x8c>)
  4009d2:	4a1e      	ldr	r2, [pc, #120]	; (400a4c <board_init+0x90>)
  4009d4:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009d6:	4b1c      	ldr	r3, [pc, #112]	; (400a48 <board_init+0x8c>)
  4009d8:	4a1d      	ldr	r2, [pc, #116]	; (400a50 <board_init+0x94>)
  4009da:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  4009dc:	4b1d      	ldr	r3, [pc, #116]	; (400a54 <board_init+0x98>)
  4009de:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  4009e0:	4b1d      	ldr	r3, [pc, #116]	; (400a58 <board_init+0x9c>)
  4009e2:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  4009e4:	2101      	movs	r1, #1
  4009e6:	2048      	movs	r0, #72	; 0x48
  4009e8:	4b1c      	ldr	r3, [pc, #112]	; (400a5c <board_init+0xa0>)
  4009ea:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  4009ec:	2101      	movs	r1, #1
  4009ee:	2048      	movs	r0, #72	; 0x48
  4009f0:	4b1b      	ldr	r3, [pc, #108]	; (400a60 <board_init+0xa4>)
  4009f2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  4009f4:	2100      	movs	r1, #0
  4009f6:	200b      	movs	r0, #11
  4009f8:	4b18      	ldr	r3, [pc, #96]	; (400a5c <board_init+0xa0>)
  4009fa:	4798      	blx	r3
  4009fc:	2188      	movs	r1, #136	; 0x88
  4009fe:	200b      	movs	r0, #11
  400a00:	4b18      	ldr	r3, [pc, #96]	; (400a64 <board_init+0xa8>)
  400a02:	4798      	blx	r3
  400a04:	2102      	movs	r1, #2
  400a06:	200b      	movs	r0, #11
  400a08:	4b17      	ldr	r3, [pc, #92]	; (400a68 <board_init+0xac>)
  400a0a:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400a0c:	2100      	movs	r1, #0
  400a0e:	2015      	movs	r0, #21
  400a10:	4b14      	ldr	r3, [pc, #80]	; (400a64 <board_init+0xa8>)
  400a12:	4798      	blx	r3
  400a14:	2015      	movs	r0, #21
  400a16:	4b15      	ldr	r3, [pc, #84]	; (400a6c <board_init+0xb0>)
  400a18:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400a1a:	4a15      	ldr	r2, [pc, #84]	; (400a70 <board_init+0xb4>)
  400a1c:	4b14      	ldr	r3, [pc, #80]	; (400a70 <board_init+0xb4>)
  400a1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400a22:	f043 0310 	orr.w	r3, r3, #16
  400a26:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400a2a:	2103      	movs	r1, #3
  400a2c:	2024      	movs	r0, #36	; 0x24
  400a2e:	4b0d      	ldr	r3, [pc, #52]	; (400a64 <board_init+0xa8>)
  400a30:	4798      	blx	r3
  400a32:	2024      	movs	r0, #36	; 0x24
  400a34:	4b0d      	ldr	r3, [pc, #52]	; (400a6c <board_init+0xb0>)
  400a36:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400a38:	bf00      	nop
  400a3a:	bd80      	pop	{r7, pc}
  400a3c:	400e1850 	.word	0x400e1850
  400a40:	00400529 	.word	0x00400529
  400a44:	00400561 	.word	0x00400561
  400a48:	400e0c00 	.word	0x400e0c00
  400a4c:	5a00080c 	.word	0x5a00080c
  400a50:	5a00070c 	.word	0x5a00070c
  400a54:	00400979 	.word	0x00400979
  400a58:	00400621 	.word	0x00400621
  400a5c:	004007b5 	.word	0x004007b5
  400a60:	0040083d 	.word	0x0040083d
  400a64:	00400699 	.word	0x00400699
  400a68:	004008a9 	.word	0x004008a9
  400a6c:	0040064d 	.word	0x0040064d
  400a70:	40088000 	.word	0x40088000

00400a74 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400a74:	b480      	push	{r7}
  400a76:	b085      	sub	sp, #20
  400a78:	af00      	add	r7, sp, #0
  400a7a:	60f8      	str	r0, [r7, #12]
  400a7c:	60b9      	str	r1, [r7, #8]
  400a7e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a80:	687b      	ldr	r3, [r7, #4]
  400a82:	2b00      	cmp	r3, #0
  400a84:	d003      	beq.n	400a8e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400a86:	68fb      	ldr	r3, [r7, #12]
  400a88:	68ba      	ldr	r2, [r7, #8]
  400a8a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400a8c:	e002      	b.n	400a94 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400a8e:	68fb      	ldr	r3, [r7, #12]
  400a90:	68ba      	ldr	r2, [r7, #8]
  400a92:	661a      	str	r2, [r3, #96]	; 0x60
}
  400a94:	bf00      	nop
  400a96:	3714      	adds	r7, #20
  400a98:	46bd      	mov	sp, r7
  400a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a9e:	4770      	bx	lr

00400aa0 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400aa0:	b480      	push	{r7}
  400aa2:	b083      	sub	sp, #12
  400aa4:	af00      	add	r7, sp, #0
  400aa6:	6078      	str	r0, [r7, #4]
  400aa8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  400aaa:	687b      	ldr	r3, [r7, #4]
  400aac:	683a      	ldr	r2, [r7, #0]
  400aae:	631a      	str	r2, [r3, #48]	; 0x30
}
  400ab0:	bf00      	nop
  400ab2:	370c      	adds	r7, #12
  400ab4:	46bd      	mov	sp, r7
  400ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aba:	4770      	bx	lr

00400abc <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400abc:	b480      	push	{r7}
  400abe:	b083      	sub	sp, #12
  400ac0:	af00      	add	r7, sp, #0
  400ac2:	6078      	str	r0, [r7, #4]
  400ac4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  400ac6:	687b      	ldr	r3, [r7, #4]
  400ac8:	683a      	ldr	r2, [r7, #0]
  400aca:	635a      	str	r2, [r3, #52]	; 0x34
}
  400acc:	bf00      	nop
  400ace:	370c      	adds	r7, #12
  400ad0:	46bd      	mov	sp, r7
  400ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ad6:	4770      	bx	lr

00400ad8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400ad8:	b480      	push	{r7}
  400ada:	b087      	sub	sp, #28
  400adc:	af00      	add	r7, sp, #0
  400ade:	60f8      	str	r0, [r7, #12]
  400ae0:	60b9      	str	r1, [r7, #8]
  400ae2:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400ae4:	68fb      	ldr	r3, [r7, #12]
  400ae6:	687a      	ldr	r2, [r7, #4]
  400ae8:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400aea:	68bb      	ldr	r3, [r7, #8]
  400aec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400af0:	d04a      	beq.n	400b88 <pio_set_peripheral+0xb0>
  400af2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400af6:	d808      	bhi.n	400b0a <pio_set_peripheral+0x32>
  400af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400afc:	d016      	beq.n	400b2c <pio_set_peripheral+0x54>
  400afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400b02:	d02c      	beq.n	400b5e <pio_set_peripheral+0x86>
  400b04:	2b00      	cmp	r3, #0
  400b06:	d069      	beq.n	400bdc <pio_set_peripheral+0x104>
  400b08:	e064      	b.n	400bd4 <pio_set_peripheral+0xfc>
  400b0a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b0e:	d065      	beq.n	400bdc <pio_set_peripheral+0x104>
  400b10:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b14:	d803      	bhi.n	400b1e <pio_set_peripheral+0x46>
  400b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400b1a:	d04a      	beq.n	400bb2 <pio_set_peripheral+0xda>
  400b1c:	e05a      	b.n	400bd4 <pio_set_peripheral+0xfc>
  400b1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400b22:	d05b      	beq.n	400bdc <pio_set_peripheral+0x104>
  400b24:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400b28:	d058      	beq.n	400bdc <pio_set_peripheral+0x104>
  400b2a:	e053      	b.n	400bd4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b2c:	68fb      	ldr	r3, [r7, #12]
  400b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400b30:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b32:	68fb      	ldr	r3, [r7, #12]
  400b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b36:	687b      	ldr	r3, [r7, #4]
  400b38:	43d9      	mvns	r1, r3
  400b3a:	697b      	ldr	r3, [r7, #20]
  400b3c:	400b      	ands	r3, r1
  400b3e:	401a      	ands	r2, r3
  400b40:	68fb      	ldr	r3, [r7, #12]
  400b42:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b44:	68fb      	ldr	r3, [r7, #12]
  400b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400b48:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b4a:	68fb      	ldr	r3, [r7, #12]
  400b4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b4e:	687b      	ldr	r3, [r7, #4]
  400b50:	43d9      	mvns	r1, r3
  400b52:	697b      	ldr	r3, [r7, #20]
  400b54:	400b      	ands	r3, r1
  400b56:	401a      	ands	r2, r3
  400b58:	68fb      	ldr	r3, [r7, #12]
  400b5a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400b5c:	e03a      	b.n	400bd4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b5e:	68fb      	ldr	r3, [r7, #12]
  400b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400b62:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b64:	687a      	ldr	r2, [r7, #4]
  400b66:	697b      	ldr	r3, [r7, #20]
  400b68:	431a      	orrs	r2, r3
  400b6a:	68fb      	ldr	r3, [r7, #12]
  400b6c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b6e:	68fb      	ldr	r3, [r7, #12]
  400b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400b72:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b74:	68fb      	ldr	r3, [r7, #12]
  400b76:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b78:	687b      	ldr	r3, [r7, #4]
  400b7a:	43d9      	mvns	r1, r3
  400b7c:	697b      	ldr	r3, [r7, #20]
  400b7e:	400b      	ands	r3, r1
  400b80:	401a      	ands	r2, r3
  400b82:	68fb      	ldr	r3, [r7, #12]
  400b84:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400b86:	e025      	b.n	400bd4 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b88:	68fb      	ldr	r3, [r7, #12]
  400b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400b8c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b8e:	68fb      	ldr	r3, [r7, #12]
  400b90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b92:	687b      	ldr	r3, [r7, #4]
  400b94:	43d9      	mvns	r1, r3
  400b96:	697b      	ldr	r3, [r7, #20]
  400b98:	400b      	ands	r3, r1
  400b9a:	401a      	ands	r2, r3
  400b9c:	68fb      	ldr	r3, [r7, #12]
  400b9e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ba0:	68fb      	ldr	r3, [r7, #12]
  400ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ba4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ba6:	687a      	ldr	r2, [r7, #4]
  400ba8:	697b      	ldr	r3, [r7, #20]
  400baa:	431a      	orrs	r2, r3
  400bac:	68fb      	ldr	r3, [r7, #12]
  400bae:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400bb0:	e010      	b.n	400bd4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400bb2:	68fb      	ldr	r3, [r7, #12]
  400bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400bb6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400bb8:	687a      	ldr	r2, [r7, #4]
  400bba:	697b      	ldr	r3, [r7, #20]
  400bbc:	431a      	orrs	r2, r3
  400bbe:	68fb      	ldr	r3, [r7, #12]
  400bc0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400bc2:	68fb      	ldr	r3, [r7, #12]
  400bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400bc6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400bc8:	687a      	ldr	r2, [r7, #4]
  400bca:	697b      	ldr	r3, [r7, #20]
  400bcc:	431a      	orrs	r2, r3
  400bce:	68fb      	ldr	r3, [r7, #12]
  400bd0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400bd2:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	687a      	ldr	r2, [r7, #4]
  400bd8:	605a      	str	r2, [r3, #4]
  400bda:	e000      	b.n	400bde <pio_set_peripheral+0x106>
		return;
  400bdc:	bf00      	nop
}
  400bde:	371c      	adds	r7, #28
  400be0:	46bd      	mov	sp, r7
  400be2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be6:	4770      	bx	lr

00400be8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400be8:	b580      	push	{r7, lr}
  400bea:	b084      	sub	sp, #16
  400bec:	af00      	add	r7, sp, #0
  400bee:	60f8      	str	r0, [r7, #12]
  400bf0:	60b9      	str	r1, [r7, #8]
  400bf2:	607a      	str	r2, [r7, #4]
  400bf4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400bf6:	68b9      	ldr	r1, [r7, #8]
  400bf8:	68f8      	ldr	r0, [r7, #12]
  400bfa:	4b12      	ldr	r3, [pc, #72]	; (400c44 <pio_set_output+0x5c>)
  400bfc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400bfe:	69ba      	ldr	r2, [r7, #24]
  400c00:	68b9      	ldr	r1, [r7, #8]
  400c02:	68f8      	ldr	r0, [r7, #12]
  400c04:	4b10      	ldr	r3, [pc, #64]	; (400c48 <pio_set_output+0x60>)
  400c06:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400c08:	683b      	ldr	r3, [r7, #0]
  400c0a:	2b00      	cmp	r3, #0
  400c0c:	d003      	beq.n	400c16 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400c0e:	68fb      	ldr	r3, [r7, #12]
  400c10:	68ba      	ldr	r2, [r7, #8]
  400c12:	651a      	str	r2, [r3, #80]	; 0x50
  400c14:	e002      	b.n	400c1c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400c16:	68fb      	ldr	r3, [r7, #12]
  400c18:	68ba      	ldr	r2, [r7, #8]
  400c1a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400c1c:	687b      	ldr	r3, [r7, #4]
  400c1e:	2b00      	cmp	r3, #0
  400c20:	d003      	beq.n	400c2a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400c22:	68fb      	ldr	r3, [r7, #12]
  400c24:	68ba      	ldr	r2, [r7, #8]
  400c26:	631a      	str	r2, [r3, #48]	; 0x30
  400c28:	e002      	b.n	400c30 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400c2a:	68fb      	ldr	r3, [r7, #12]
  400c2c:	68ba      	ldr	r2, [r7, #8]
  400c2e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400c30:	68fb      	ldr	r3, [r7, #12]
  400c32:	68ba      	ldr	r2, [r7, #8]
  400c34:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400c36:	68fb      	ldr	r3, [r7, #12]
  400c38:	68ba      	ldr	r2, [r7, #8]
  400c3a:	601a      	str	r2, [r3, #0]
}
  400c3c:	bf00      	nop
  400c3e:	3710      	adds	r7, #16
  400c40:	46bd      	mov	sp, r7
  400c42:	bd80      	pop	{r7, pc}
  400c44:	00400c75 	.word	0x00400c75
  400c48:	00400a75 	.word	0x00400a75

00400c4c <pio_get_output_data_status>:
 * \retval 1 At least one PIO is configured to output a high level.
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
  400c4c:	b480      	push	{r7}
  400c4e:	b083      	sub	sp, #12
  400c50:	af00      	add	r7, sp, #0
  400c52:	6078      	str	r0, [r7, #4]
  400c54:	6039      	str	r1, [r7, #0]
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400c56:	687b      	ldr	r3, [r7, #4]
  400c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400c5a:	683b      	ldr	r3, [r7, #0]
  400c5c:	4013      	ands	r3, r2
  400c5e:	2b00      	cmp	r3, #0
  400c60:	d101      	bne.n	400c66 <pio_get_output_data_status+0x1a>
		return 0;
  400c62:	2300      	movs	r3, #0
  400c64:	e000      	b.n	400c68 <pio_get_output_data_status+0x1c>
	} else {
		return 1;
  400c66:	2301      	movs	r3, #1
	}
}
  400c68:	4618      	mov	r0, r3
  400c6a:	370c      	adds	r7, #12
  400c6c:	46bd      	mov	sp, r7
  400c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c72:	4770      	bx	lr

00400c74 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
  400c7c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400c7e:	687b      	ldr	r3, [r7, #4]
  400c80:	683a      	ldr	r2, [r7, #0]
  400c82:	645a      	str	r2, [r3, #68]	; 0x44
}
  400c84:	bf00      	nop
  400c86:	370c      	adds	r7, #12
  400c88:	46bd      	mov	sp, r7
  400c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c8e:	4770      	bx	lr

00400c90 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400c90:	b480      	push	{r7}
  400c92:	b083      	sub	sp, #12
  400c94:	af00      	add	r7, sp, #0
  400c96:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400c98:	687b      	ldr	r3, [r7, #4]
  400c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400c9c:	4618      	mov	r0, r3
  400c9e:	370c      	adds	r7, #12
  400ca0:	46bd      	mov	sp, r7
  400ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ca6:	4770      	bx	lr

00400ca8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400ca8:	b480      	push	{r7}
  400caa:	b083      	sub	sp, #12
  400cac:	af00      	add	r7, sp, #0
  400cae:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400cb0:	687b      	ldr	r3, [r7, #4]
  400cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	370c      	adds	r7, #12
  400cb8:	46bd      	mov	sp, r7
  400cba:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cbe:	4770      	bx	lr

00400cc0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400cc0:	b580      	push	{r7, lr}
  400cc2:	b084      	sub	sp, #16
  400cc4:	af00      	add	r7, sp, #0
  400cc6:	6078      	str	r0, [r7, #4]
  400cc8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400cca:	6878      	ldr	r0, [r7, #4]
  400ccc:	4b26      	ldr	r3, [pc, #152]	; (400d68 <pio_handler_process+0xa8>)
  400cce:	4798      	blx	r3
  400cd0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400cd2:	6878      	ldr	r0, [r7, #4]
  400cd4:	4b25      	ldr	r3, [pc, #148]	; (400d6c <pio_handler_process+0xac>)
  400cd6:	4798      	blx	r3
  400cd8:	4602      	mov	r2, r0
  400cda:	68fb      	ldr	r3, [r7, #12]
  400cdc:	4013      	ands	r3, r2
  400cde:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400ce0:	68fb      	ldr	r3, [r7, #12]
  400ce2:	2b00      	cmp	r3, #0
  400ce4:	d03c      	beq.n	400d60 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400ce6:	2300      	movs	r3, #0
  400ce8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400cea:	e034      	b.n	400d56 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400cec:	4a20      	ldr	r2, [pc, #128]	; (400d70 <pio_handler_process+0xb0>)
  400cee:	68bb      	ldr	r3, [r7, #8]
  400cf0:	011b      	lsls	r3, r3, #4
  400cf2:	4413      	add	r3, r2
  400cf4:	681a      	ldr	r2, [r3, #0]
  400cf6:	683b      	ldr	r3, [r7, #0]
  400cf8:	429a      	cmp	r2, r3
  400cfa:	d126      	bne.n	400d4a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400cfc:	4a1c      	ldr	r2, [pc, #112]	; (400d70 <pio_handler_process+0xb0>)
  400cfe:	68bb      	ldr	r3, [r7, #8]
  400d00:	011b      	lsls	r3, r3, #4
  400d02:	4413      	add	r3, r2
  400d04:	3304      	adds	r3, #4
  400d06:	681a      	ldr	r2, [r3, #0]
  400d08:	68fb      	ldr	r3, [r7, #12]
  400d0a:	4013      	ands	r3, r2
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d01c      	beq.n	400d4a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d10:	4a17      	ldr	r2, [pc, #92]	; (400d70 <pio_handler_process+0xb0>)
  400d12:	68bb      	ldr	r3, [r7, #8]
  400d14:	011b      	lsls	r3, r3, #4
  400d16:	4413      	add	r3, r2
  400d18:	330c      	adds	r3, #12
  400d1a:	681b      	ldr	r3, [r3, #0]
  400d1c:	4914      	ldr	r1, [pc, #80]	; (400d70 <pio_handler_process+0xb0>)
  400d1e:	68ba      	ldr	r2, [r7, #8]
  400d20:	0112      	lsls	r2, r2, #4
  400d22:	440a      	add	r2, r1
  400d24:	6810      	ldr	r0, [r2, #0]
  400d26:	4912      	ldr	r1, [pc, #72]	; (400d70 <pio_handler_process+0xb0>)
  400d28:	68ba      	ldr	r2, [r7, #8]
  400d2a:	0112      	lsls	r2, r2, #4
  400d2c:	440a      	add	r2, r1
  400d2e:	3204      	adds	r2, #4
  400d30:	6812      	ldr	r2, [r2, #0]
  400d32:	4611      	mov	r1, r2
  400d34:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d36:	4a0e      	ldr	r2, [pc, #56]	; (400d70 <pio_handler_process+0xb0>)
  400d38:	68bb      	ldr	r3, [r7, #8]
  400d3a:	011b      	lsls	r3, r3, #4
  400d3c:	4413      	add	r3, r2
  400d3e:	3304      	adds	r3, #4
  400d40:	681b      	ldr	r3, [r3, #0]
  400d42:	43db      	mvns	r3, r3
  400d44:	68fa      	ldr	r2, [r7, #12]
  400d46:	4013      	ands	r3, r2
  400d48:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400d4a:	68bb      	ldr	r3, [r7, #8]
  400d4c:	3301      	adds	r3, #1
  400d4e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d50:	68bb      	ldr	r3, [r7, #8]
  400d52:	2b06      	cmp	r3, #6
  400d54:	d803      	bhi.n	400d5e <pio_handler_process+0x9e>
		while (status != 0) {
  400d56:	68fb      	ldr	r3, [r7, #12]
  400d58:	2b00      	cmp	r3, #0
  400d5a:	d1c7      	bne.n	400cec <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400d5c:	e000      	b.n	400d60 <pio_handler_process+0xa0>
				break;
  400d5e:	bf00      	nop
}
  400d60:	bf00      	nop
  400d62:	3710      	adds	r7, #16
  400d64:	46bd      	mov	sp, r7
  400d66:	bd80      	pop	{r7, pc}
  400d68:	00400c91 	.word	0x00400c91
  400d6c:	00400ca9 	.word	0x00400ca9
  400d70:	204009d0 	.word	0x204009d0

00400d74 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d74:	b580      	push	{r7, lr}
  400d76:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400d78:	210a      	movs	r1, #10
  400d7a:	4802      	ldr	r0, [pc, #8]	; (400d84 <PIOA_Handler+0x10>)
  400d7c:	4b02      	ldr	r3, [pc, #8]	; (400d88 <PIOA_Handler+0x14>)
  400d7e:	4798      	blx	r3
}
  400d80:	bf00      	nop
  400d82:	bd80      	pop	{r7, pc}
  400d84:	400e0e00 	.word	0x400e0e00
  400d88:	00400cc1 	.word	0x00400cc1

00400d8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d8c:	b580      	push	{r7, lr}
  400d8e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400d90:	210b      	movs	r1, #11
  400d92:	4802      	ldr	r0, [pc, #8]	; (400d9c <PIOB_Handler+0x10>)
  400d94:	4b02      	ldr	r3, [pc, #8]	; (400da0 <PIOB_Handler+0x14>)
  400d96:	4798      	blx	r3
}
  400d98:	bf00      	nop
  400d9a:	bd80      	pop	{r7, pc}
  400d9c:	400e1000 	.word	0x400e1000
  400da0:	00400cc1 	.word	0x00400cc1

00400da4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400da4:	b580      	push	{r7, lr}
  400da6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400da8:	210c      	movs	r1, #12
  400daa:	4802      	ldr	r0, [pc, #8]	; (400db4 <PIOC_Handler+0x10>)
  400dac:	4b02      	ldr	r3, [pc, #8]	; (400db8 <PIOC_Handler+0x14>)
  400dae:	4798      	blx	r3
}
  400db0:	bf00      	nop
  400db2:	bd80      	pop	{r7, pc}
  400db4:	400e1200 	.word	0x400e1200
  400db8:	00400cc1 	.word	0x00400cc1

00400dbc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400dbc:	b580      	push	{r7, lr}
  400dbe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400dc0:	2110      	movs	r1, #16
  400dc2:	4802      	ldr	r0, [pc, #8]	; (400dcc <PIOD_Handler+0x10>)
  400dc4:	4b02      	ldr	r3, [pc, #8]	; (400dd0 <PIOD_Handler+0x14>)
  400dc6:	4798      	blx	r3
}
  400dc8:	bf00      	nop
  400dca:	bd80      	pop	{r7, pc}
  400dcc:	400e1400 	.word	0x400e1400
  400dd0:	00400cc1 	.word	0x00400cc1

00400dd4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400dd4:	b580      	push	{r7, lr}
  400dd6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400dd8:	2111      	movs	r1, #17
  400dda:	4802      	ldr	r0, [pc, #8]	; (400de4 <PIOE_Handler+0x10>)
  400ddc:	4b02      	ldr	r3, [pc, #8]	; (400de8 <PIOE_Handler+0x14>)
  400dde:	4798      	blx	r3
}
  400de0:	bf00      	nop
  400de2:	bd80      	pop	{r7, pc}
  400de4:	400e1600 	.word	0x400e1600
  400de8:	00400cc1 	.word	0x00400cc1

00400dec <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400dec:	b480      	push	{r7}
  400dee:	b083      	sub	sp, #12
  400df0:	af00      	add	r7, sp, #0
  400df2:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400df4:	687b      	ldr	r3, [r7, #4]
  400df6:	3b01      	subs	r3, #1
  400df8:	2b03      	cmp	r3, #3
  400dfa:	d81a      	bhi.n	400e32 <pmc_mck_set_division+0x46>
  400dfc:	a201      	add	r2, pc, #4	; (adr r2, 400e04 <pmc_mck_set_division+0x18>)
  400dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e02:	bf00      	nop
  400e04:	00400e15 	.word	0x00400e15
  400e08:	00400e1b 	.word	0x00400e1b
  400e0c:	00400e23 	.word	0x00400e23
  400e10:	00400e2b 	.word	0x00400e2b
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400e14:	2300      	movs	r3, #0
  400e16:	607b      	str	r3, [r7, #4]
			break;
  400e18:	e00e      	b.n	400e38 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e1e:	607b      	str	r3, [r7, #4]
			break;
  400e20:	e00a      	b.n	400e38 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400e22:	f44f 7340 	mov.w	r3, #768	; 0x300
  400e26:	607b      	str	r3, [r7, #4]
			break;
  400e28:	e006      	b.n	400e38 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
  400e2e:	607b      	str	r3, [r7, #4]
			break;
  400e30:	e002      	b.n	400e38 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400e32:	2300      	movs	r3, #0
  400e34:	607b      	str	r3, [r7, #4]
			break;
  400e36:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400e38:	490a      	ldr	r1, [pc, #40]	; (400e64 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400e3a:	4b0a      	ldr	r3, [pc, #40]	; (400e64 <pmc_mck_set_division+0x78>)
  400e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400e42:	687b      	ldr	r3, [r7, #4]
  400e44:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400e46:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e48:	bf00      	nop
  400e4a:	4b06      	ldr	r3, [pc, #24]	; (400e64 <pmc_mck_set_division+0x78>)
  400e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e4e:	f003 0308 	and.w	r3, r3, #8
  400e52:	2b00      	cmp	r3, #0
  400e54:	d0f9      	beq.n	400e4a <pmc_mck_set_division+0x5e>
}
  400e56:	bf00      	nop
  400e58:	370c      	adds	r7, #12
  400e5a:	46bd      	mov	sp, r7
  400e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e60:	4770      	bx	lr
  400e62:	bf00      	nop
  400e64:	400e0600 	.word	0x400e0600

00400e68 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400e68:	b480      	push	{r7}
  400e6a:	b085      	sub	sp, #20
  400e6c:	af00      	add	r7, sp, #0
  400e6e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400e70:	491d      	ldr	r1, [pc, #116]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400e72:	4b1d      	ldr	r3, [pc, #116]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400e7a:	687b      	ldr	r3, [r7, #4]
  400e7c:	4313      	orrs	r3, r2
  400e7e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e84:	60fb      	str	r3, [r7, #12]
  400e86:	e007      	b.n	400e98 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e88:	68fb      	ldr	r3, [r7, #12]
  400e8a:	2b00      	cmp	r3, #0
  400e8c:	d101      	bne.n	400e92 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400e8e:	2301      	movs	r3, #1
  400e90:	e023      	b.n	400eda <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e92:	68fb      	ldr	r3, [r7, #12]
  400e94:	3b01      	subs	r3, #1
  400e96:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e98:	4b13      	ldr	r3, [pc, #76]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e9c:	f003 0308 	and.w	r3, r3, #8
  400ea0:	2b00      	cmp	r3, #0
  400ea2:	d0f1      	beq.n	400e88 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ea4:	4a10      	ldr	r2, [pc, #64]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400ea6:	4b10      	ldr	r3, [pc, #64]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400eaa:	f023 0303 	bic.w	r3, r3, #3
  400eae:	f043 0302 	orr.w	r3, r3, #2
  400eb2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400eb8:	60fb      	str	r3, [r7, #12]
  400eba:	e007      	b.n	400ecc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ebc:	68fb      	ldr	r3, [r7, #12]
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d101      	bne.n	400ec6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400ec2:	2301      	movs	r3, #1
  400ec4:	e009      	b.n	400eda <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400ec6:	68fb      	ldr	r3, [r7, #12]
  400ec8:	3b01      	subs	r3, #1
  400eca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ecc:	4b06      	ldr	r3, [pc, #24]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ed0:	f003 0308 	and.w	r3, r3, #8
  400ed4:	2b00      	cmp	r3, #0
  400ed6:	d0f1      	beq.n	400ebc <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400ed8:	2300      	movs	r3, #0
}
  400eda:	4618      	mov	r0, r3
  400edc:	3714      	adds	r7, #20
  400ede:	46bd      	mov	sp, r7
  400ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee4:	4770      	bx	lr
  400ee6:	bf00      	nop
  400ee8:	400e0600 	.word	0x400e0600

00400eec <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400eec:	b480      	push	{r7}
  400eee:	b083      	sub	sp, #12
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400ef4:	687b      	ldr	r3, [r7, #4]
  400ef6:	2b01      	cmp	r3, #1
  400ef8:	d105      	bne.n	400f06 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400efa:	4907      	ldr	r1, [pc, #28]	; (400f18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400efc:	4b06      	ldr	r3, [pc, #24]	; (400f18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400efe:	689a      	ldr	r2, [r3, #8]
  400f00:	4b06      	ldr	r3, [pc, #24]	; (400f1c <pmc_switch_sclk_to_32kxtal+0x30>)
  400f02:	4313      	orrs	r3, r2
  400f04:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400f06:	4b04      	ldr	r3, [pc, #16]	; (400f18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400f08:	4a05      	ldr	r2, [pc, #20]	; (400f20 <pmc_switch_sclk_to_32kxtal+0x34>)
  400f0a:	601a      	str	r2, [r3, #0]
}
  400f0c:	bf00      	nop
  400f0e:	370c      	adds	r7, #12
  400f10:	46bd      	mov	sp, r7
  400f12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f16:	4770      	bx	lr
  400f18:	400e1810 	.word	0x400e1810
  400f1c:	a5100000 	.word	0xa5100000
  400f20:	a5000008 	.word	0xa5000008

00400f24 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400f24:	b480      	push	{r7}
  400f26:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400f28:	4b09      	ldr	r3, [pc, #36]	; (400f50 <pmc_osc_is_ready_32kxtal+0x2c>)
  400f2a:	695b      	ldr	r3, [r3, #20]
  400f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400f30:	2b00      	cmp	r3, #0
  400f32:	d007      	beq.n	400f44 <pmc_osc_is_ready_32kxtal+0x20>
  400f34:	4b07      	ldr	r3, [pc, #28]	; (400f54 <pmc_osc_is_ready_32kxtal+0x30>)
  400f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	d001      	beq.n	400f44 <pmc_osc_is_ready_32kxtal+0x20>
  400f40:	2301      	movs	r3, #1
  400f42:	e000      	b.n	400f46 <pmc_osc_is_ready_32kxtal+0x22>
  400f44:	2300      	movs	r3, #0
}
  400f46:	4618      	mov	r0, r3
  400f48:	46bd      	mov	sp, r7
  400f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4e:	4770      	bx	lr
  400f50:	400e1810 	.word	0x400e1810
  400f54:	400e0600 	.word	0x400e0600

00400f58 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400f58:	b480      	push	{r7}
  400f5a:	b083      	sub	sp, #12
  400f5c:	af00      	add	r7, sp, #0
  400f5e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400f60:	4915      	ldr	r1, [pc, #84]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f62:	4b15      	ldr	r3, [pc, #84]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f64:	6a1a      	ldr	r2, [r3, #32]
  400f66:	4b15      	ldr	r3, [pc, #84]	; (400fbc <pmc_switch_mainck_to_fastrc+0x64>)
  400f68:	4313      	orrs	r3, r2
  400f6a:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f6c:	bf00      	nop
  400f6e:	4b12      	ldr	r3, [pc, #72]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f76:	2b00      	cmp	r3, #0
  400f78:	d0f9      	beq.n	400f6e <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f7a:	490f      	ldr	r1, [pc, #60]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f7c:	4b0e      	ldr	r3, [pc, #56]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f7e:	6a1a      	ldr	r2, [r3, #32]
  400f80:	4b0f      	ldr	r3, [pc, #60]	; (400fc0 <pmc_switch_mainck_to_fastrc+0x68>)
  400f82:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400f84:	687a      	ldr	r2, [r7, #4]
  400f86:	4313      	orrs	r3, r2
  400f88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f8c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f8e:	bf00      	nop
  400f90:	4b09      	ldr	r3, [pc, #36]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d0f9      	beq.n	400f90 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400f9c:	4906      	ldr	r1, [pc, #24]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f9e:	4b06      	ldr	r3, [pc, #24]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400fa0:	6a1a      	ldr	r2, [r3, #32]
  400fa2:	4b08      	ldr	r3, [pc, #32]	; (400fc4 <pmc_switch_mainck_to_fastrc+0x6c>)
  400fa4:	4013      	ands	r3, r2
  400fa6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400faa:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400fac:	bf00      	nop
  400fae:	370c      	adds	r7, #12
  400fb0:	46bd      	mov	sp, r7
  400fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb6:	4770      	bx	lr
  400fb8:	400e0600 	.word	0x400e0600
  400fbc:	00370008 	.word	0x00370008
  400fc0:	ffc8ff8f 	.word	0xffc8ff8f
  400fc4:	fec8ffff 	.word	0xfec8ffff

00400fc8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400fc8:	b480      	push	{r7}
  400fca:	b083      	sub	sp, #12
  400fcc:	af00      	add	r7, sp, #0
  400fce:	6078      	str	r0, [r7, #4]
  400fd0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400fd2:	687b      	ldr	r3, [r7, #4]
  400fd4:	2b00      	cmp	r3, #0
  400fd6:	d008      	beq.n	400fea <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fd8:	4913      	ldr	r1, [pc, #76]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  400fda:	4b13      	ldr	r3, [pc, #76]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  400fdc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fde:	4a13      	ldr	r2, [pc, #76]	; (40102c <pmc_switch_mainck_to_xtal+0x64>)
  400fe0:	401a      	ands	r2, r3
  400fe2:	4b13      	ldr	r3, [pc, #76]	; (401030 <pmc_switch_mainck_to_xtal+0x68>)
  400fe4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fe6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400fe8:	e018      	b.n	40101c <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fea:	490f      	ldr	r1, [pc, #60]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  400fec:	4b0e      	ldr	r3, [pc, #56]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  400fee:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400ff0:	4b10      	ldr	r3, [pc, #64]	; (401034 <pmc_switch_mainck_to_xtal+0x6c>)
  400ff2:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400ff4:	683a      	ldr	r2, [r7, #0]
  400ff6:	0212      	lsls	r2, r2, #8
  400ff8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400ffa:	431a      	orrs	r2, r3
  400ffc:	4b0e      	ldr	r3, [pc, #56]	; (401038 <pmc_switch_mainck_to_xtal+0x70>)
  400ffe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401000:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401002:	bf00      	nop
  401004:	4b08      	ldr	r3, [pc, #32]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  401006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401008:	f003 0301 	and.w	r3, r3, #1
  40100c:	2b00      	cmp	r3, #0
  40100e:	d0f9      	beq.n	401004 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401010:	4905      	ldr	r1, [pc, #20]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  401012:	4b05      	ldr	r3, [pc, #20]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  401014:	6a1a      	ldr	r2, [r3, #32]
  401016:	4b09      	ldr	r3, [pc, #36]	; (40103c <pmc_switch_mainck_to_xtal+0x74>)
  401018:	4313      	orrs	r3, r2
  40101a:	620b      	str	r3, [r1, #32]
}
  40101c:	bf00      	nop
  40101e:	370c      	adds	r7, #12
  401020:	46bd      	mov	sp, r7
  401022:	f85d 7b04 	ldr.w	r7, [sp], #4
  401026:	4770      	bx	lr
  401028:	400e0600 	.word	0x400e0600
  40102c:	fec8fffc 	.word	0xfec8fffc
  401030:	01370002 	.word	0x01370002
  401034:	ffc8fffc 	.word	0xffc8fffc
  401038:	00370001 	.word	0x00370001
  40103c:	01370000 	.word	0x01370000

00401040 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401040:	b480      	push	{r7}
  401042:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401044:	4b04      	ldr	r3, [pc, #16]	; (401058 <pmc_osc_is_ready_mainck+0x18>)
  401046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40104c:	4618      	mov	r0, r3
  40104e:	46bd      	mov	sp, r7
  401050:	f85d 7b04 	ldr.w	r7, [sp], #4
  401054:	4770      	bx	lr
  401056:	bf00      	nop
  401058:	400e0600 	.word	0x400e0600

0040105c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40105c:	b480      	push	{r7}
  40105e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401060:	4b04      	ldr	r3, [pc, #16]	; (401074 <pmc_disable_pllack+0x18>)
  401062:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401066:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401068:	bf00      	nop
  40106a:	46bd      	mov	sp, r7
  40106c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401070:	4770      	bx	lr
  401072:	bf00      	nop
  401074:	400e0600 	.word	0x400e0600

00401078 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401078:	b480      	push	{r7}
  40107a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40107c:	4b04      	ldr	r3, [pc, #16]	; (401090 <pmc_is_locked_pllack+0x18>)
  40107e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401080:	f003 0302 	and.w	r3, r3, #2
}
  401084:	4618      	mov	r0, r3
  401086:	46bd      	mov	sp, r7
  401088:	f85d 7b04 	ldr.w	r7, [sp], #4
  40108c:	4770      	bx	lr
  40108e:	bf00      	nop
  401090:	400e0600 	.word	0x400e0600

00401094 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401094:	b480      	push	{r7}
  401096:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401098:	4b04      	ldr	r3, [pc, #16]	; (4010ac <pmc_is_locked_upll+0x18>)
  40109a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4010a0:	4618      	mov	r0, r3
  4010a2:	46bd      	mov	sp, r7
  4010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010a8:	4770      	bx	lr
  4010aa:	bf00      	nop
  4010ac:	400e0600 	.word	0x400e0600

004010b0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4010b0:	b480      	push	{r7}
  4010b2:	b083      	sub	sp, #12
  4010b4:	af00      	add	r7, sp, #0
  4010b6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4010b8:	687b      	ldr	r3, [r7, #4]
  4010ba:	2b3f      	cmp	r3, #63	; 0x3f
  4010bc:	d901      	bls.n	4010c2 <pmc_enable_periph_clk+0x12>
		return 1;
  4010be:	2301      	movs	r3, #1
  4010c0:	e02f      	b.n	401122 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	2b1f      	cmp	r3, #31
  4010c6:	d813      	bhi.n	4010f0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4010c8:	4b19      	ldr	r3, [pc, #100]	; (401130 <pmc_enable_periph_clk+0x80>)
  4010ca:	699a      	ldr	r2, [r3, #24]
  4010cc:	2101      	movs	r1, #1
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	fa01 f303 	lsl.w	r3, r1, r3
  4010d4:	401a      	ands	r2, r3
  4010d6:	2101      	movs	r1, #1
  4010d8:	687b      	ldr	r3, [r7, #4]
  4010da:	fa01 f303 	lsl.w	r3, r1, r3
  4010de:	429a      	cmp	r2, r3
  4010e0:	d01e      	beq.n	401120 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4010e2:	4a13      	ldr	r2, [pc, #76]	; (401130 <pmc_enable_periph_clk+0x80>)
  4010e4:	2101      	movs	r1, #1
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	fa01 f303 	lsl.w	r3, r1, r3
  4010ec:	6113      	str	r3, [r2, #16]
  4010ee:	e017      	b.n	401120 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4010f0:	687b      	ldr	r3, [r7, #4]
  4010f2:	3b20      	subs	r3, #32
  4010f4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010f6:	4b0e      	ldr	r3, [pc, #56]	; (401130 <pmc_enable_periph_clk+0x80>)
  4010f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4010fc:	2101      	movs	r1, #1
  4010fe:	687b      	ldr	r3, [r7, #4]
  401100:	fa01 f303 	lsl.w	r3, r1, r3
  401104:	401a      	ands	r2, r3
  401106:	2101      	movs	r1, #1
  401108:	687b      	ldr	r3, [r7, #4]
  40110a:	fa01 f303 	lsl.w	r3, r1, r3
  40110e:	429a      	cmp	r2, r3
  401110:	d006      	beq.n	401120 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401112:	4a07      	ldr	r2, [pc, #28]	; (401130 <pmc_enable_periph_clk+0x80>)
  401114:	2101      	movs	r1, #1
  401116:	687b      	ldr	r3, [r7, #4]
  401118:	fa01 f303 	lsl.w	r3, r1, r3
  40111c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401120:	2300      	movs	r3, #0
}
  401122:	4618      	mov	r0, r3
  401124:	370c      	adds	r7, #12
  401126:	46bd      	mov	sp, r7
  401128:	f85d 7b04 	ldr.w	r7, [sp], #4
  40112c:	4770      	bx	lr
  40112e:	bf00      	nop
  401130:	400e0600 	.word	0x400e0600

00401134 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401134:	b480      	push	{r7}
  401136:	b087      	sub	sp, #28
  401138:	af00      	add	r7, sp, #0
  40113a:	60f8      	str	r0, [r7, #12]
  40113c:	60b9      	str	r1, [r7, #8]
  40113e:	607a      	str	r2, [r7, #4]
  401140:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401142:	68fb      	ldr	r3, [r7, #12]
  401144:	689b      	ldr	r3, [r3, #8]
  401146:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  401148:	e002      	b.n	401150 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  40114a:	68fb      	ldr	r3, [r7, #12]
  40114c:	689b      	ldr	r3, [r3, #8]
  40114e:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  401150:	68fb      	ldr	r3, [r7, #12]
  401152:	689a      	ldr	r2, [r3, #8]
  401154:	697b      	ldr	r3, [r7, #20]
  401156:	429a      	cmp	r2, r3
  401158:	d1f7      	bne.n	40114a <rtc_get_time+0x16>
	}

	/* Hour */
	if (pul_hour) {
  40115a:	68bb      	ldr	r3, [r7, #8]
  40115c:	2b00      	cmp	r3, #0
  40115e:	d01c      	beq.n	40119a <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  401160:	697b      	ldr	r3, [r7, #20]
  401162:	0c1b      	lsrs	r3, r3, #16
  401164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  401168:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40116a:	693b      	ldr	r3, [r7, #16]
  40116c:	091a      	lsrs	r2, r3, #4
  40116e:	4613      	mov	r3, r2
  401170:	009b      	lsls	r3, r3, #2
  401172:	4413      	add	r3, r2
  401174:	005b      	lsls	r3, r3, #1
  401176:	461a      	mov	r2, r3
  401178:	693b      	ldr	r3, [r7, #16]
  40117a:	f003 030f 	and.w	r3, r3, #15
  40117e:	441a      	add	r2, r3
  401180:	68bb      	ldr	r3, [r7, #8]
  401182:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401184:	697b      	ldr	r3, [r7, #20]
  401186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  40118a:	2b00      	cmp	r3, #0
  40118c:	d005      	beq.n	40119a <rtc_get_time+0x66>
			*pul_hour += 12;
  40118e:	68bb      	ldr	r3, [r7, #8]
  401190:	681b      	ldr	r3, [r3, #0]
  401192:	f103 020c 	add.w	r2, r3, #12
  401196:	68bb      	ldr	r3, [r7, #8]
  401198:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40119a:	687b      	ldr	r3, [r7, #4]
  40119c:	2b00      	cmp	r3, #0
  40119e:	d011      	beq.n	4011c4 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  4011a0:	697b      	ldr	r3, [r7, #20]
  4011a2:	0a1b      	lsrs	r3, r3, #8
  4011a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4011a8:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4011aa:	693b      	ldr	r3, [r7, #16]
  4011ac:	091a      	lsrs	r2, r3, #4
  4011ae:	4613      	mov	r3, r2
  4011b0:	009b      	lsls	r3, r3, #2
  4011b2:	4413      	add	r3, r2
  4011b4:	005b      	lsls	r3, r3, #1
  4011b6:	461a      	mov	r2, r3
  4011b8:	693b      	ldr	r3, [r7, #16]
  4011ba:	f003 030f 	and.w	r3, r3, #15
  4011be:	441a      	add	r2, r3
  4011c0:	687b      	ldr	r3, [r7, #4]
  4011c2:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  4011c4:	683b      	ldr	r3, [r7, #0]
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d010      	beq.n	4011ec <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  4011ca:	697b      	ldr	r3, [r7, #20]
  4011cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4011d0:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4011d2:	693b      	ldr	r3, [r7, #16]
  4011d4:	091a      	lsrs	r2, r3, #4
  4011d6:	4613      	mov	r3, r2
  4011d8:	009b      	lsls	r3, r3, #2
  4011da:	4413      	add	r3, r2
  4011dc:	005b      	lsls	r3, r3, #1
  4011de:	461a      	mov	r2, r3
  4011e0:	693b      	ldr	r3, [r7, #16]
  4011e2:	f003 030f 	and.w	r3, r3, #15
  4011e6:	441a      	add	r2, r3
  4011e8:	683b      	ldr	r3, [r7, #0]
  4011ea:	601a      	str	r2, [r3, #0]
	}
}
  4011ec:	bf00      	nop
  4011ee:	371c      	adds	r7, #28
  4011f0:	46bd      	mov	sp, r7
  4011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011f6:	4770      	bx	lr

004011f8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4011f8:	b480      	push	{r7}
  4011fa:	b087      	sub	sp, #28
  4011fc:	af00      	add	r7, sp, #0
  4011fe:	60f8      	str	r0, [r7, #12]
  401200:	60b9      	str	r1, [r7, #8]
  401202:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401204:	68fa      	ldr	r2, [r7, #12]
  401206:	68bb      	ldr	r3, [r7, #8]
  401208:	019b      	lsls	r3, r3, #6
  40120a:	4413      	add	r3, r2
  40120c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40120e:	697b      	ldr	r3, [r7, #20]
  401210:	2202      	movs	r2, #2
  401212:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401214:	697b      	ldr	r3, [r7, #20]
  401216:	f04f 32ff 	mov.w	r2, #4294967295
  40121a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40121c:	697b      	ldr	r3, [r7, #20]
  40121e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401220:	697b      	ldr	r3, [r7, #20]
  401222:	687a      	ldr	r2, [r7, #4]
  401224:	605a      	str	r2, [r3, #4]
}
  401226:	bf00      	nop
  401228:	371c      	adds	r7, #28
  40122a:	46bd      	mov	sp, r7
  40122c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401230:	4770      	bx	lr

00401232 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  401232:	b480      	push	{r7}
  401234:	b083      	sub	sp, #12
  401236:	af00      	add	r7, sp, #0
  401238:	6078      	str	r0, [r7, #4]
  40123a:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40123c:	687a      	ldr	r2, [r7, #4]
  40123e:	683b      	ldr	r3, [r7, #0]
  401240:	019b      	lsls	r3, r3, #6
  401242:	4413      	add	r3, r2
  401244:	2205      	movs	r2, #5
  401246:	601a      	str	r2, [r3, #0]
}
  401248:	bf00      	nop
  40124a:	370c      	adds	r7, #12
  40124c:	46bd      	mov	sp, r7
  40124e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401252:	4770      	bx	lr

00401254 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  401254:	b480      	push	{r7}
  401256:	b085      	sub	sp, #20
  401258:	af00      	add	r7, sp, #0
  40125a:	60f8      	str	r0, [r7, #12]
  40125c:	60b9      	str	r1, [r7, #8]
  40125e:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401260:	68fa      	ldr	r2, [r7, #12]
  401262:	68bb      	ldr	r3, [r7, #8]
  401264:	019b      	lsls	r3, r3, #6
  401266:	4413      	add	r3, r2
  401268:	331c      	adds	r3, #28
  40126a:	687a      	ldr	r2, [r7, #4]
  40126c:	601a      	str	r2, [r3, #0]
}
  40126e:	bf00      	nop
  401270:	3714      	adds	r7, #20
  401272:	46bd      	mov	sp, r7
  401274:	f85d 7b04 	ldr.w	r7, [sp], #4
  401278:	4770      	bx	lr

0040127a <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  40127a:	b480      	push	{r7}
  40127c:	b087      	sub	sp, #28
  40127e:	af00      	add	r7, sp, #0
  401280:	60f8      	str	r0, [r7, #12]
  401282:	60b9      	str	r1, [r7, #8]
  401284:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401286:	68fa      	ldr	r2, [r7, #12]
  401288:	68bb      	ldr	r3, [r7, #8]
  40128a:	019b      	lsls	r3, r3, #6
  40128c:	4413      	add	r3, r2
  40128e:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  401290:	697b      	ldr	r3, [r7, #20]
  401292:	687a      	ldr	r2, [r7, #4]
  401294:	625a      	str	r2, [r3, #36]	; 0x24
}
  401296:	bf00      	nop
  401298:	371c      	adds	r7, #28
  40129a:	46bd      	mov	sp, r7
  40129c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012a0:	4770      	bx	lr

004012a2 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4012a2:	b480      	push	{r7}
  4012a4:	b085      	sub	sp, #20
  4012a6:	af00      	add	r7, sp, #0
  4012a8:	6078      	str	r0, [r7, #4]
  4012aa:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4012ac:	687a      	ldr	r2, [r7, #4]
  4012ae:	683b      	ldr	r3, [r7, #0]
  4012b0:	019b      	lsls	r3, r3, #6
  4012b2:	4413      	add	r3, r2
  4012b4:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4012b6:	68fb      	ldr	r3, [r7, #12]
  4012b8:	6a1b      	ldr	r3, [r3, #32]
}
  4012ba:	4618      	mov	r0, r3
  4012bc:	3714      	adds	r7, #20
  4012be:	46bd      	mov	sp, r7
  4012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012c4:	4770      	bx	lr

004012c6 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4012c6:	b480      	push	{r7}
  4012c8:	b08d      	sub	sp, #52	; 0x34
  4012ca:	af00      	add	r7, sp, #0
  4012cc:	60f8      	str	r0, [r7, #12]
  4012ce:	60b9      	str	r1, [r7, #8]
  4012d0:	607a      	str	r2, [r7, #4]
  4012d2:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4012d4:	2302      	movs	r3, #2
  4012d6:	613b      	str	r3, [r7, #16]
  4012d8:	2308      	movs	r3, #8
  4012da:	617b      	str	r3, [r7, #20]
  4012dc:	2320      	movs	r3, #32
  4012de:	61bb      	str	r3, [r7, #24]
  4012e0:	2380      	movs	r3, #128	; 0x80
  4012e2:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4012e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4012e6:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4012e8:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4012ea:	2300      	movs	r3, #0
  4012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  4012ee:	e01a      	b.n	401326 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4012f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4012f2:	009b      	lsls	r3, r3, #2
  4012f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4012f8:	4413      	add	r3, r2
  4012fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4012fe:	68ba      	ldr	r2, [r7, #8]
  401300:	fbb2 f3f3 	udiv	r3, r2, r3
  401304:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  401306:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401308:	0c1b      	lsrs	r3, r3, #16
  40130a:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  40130c:	68fa      	ldr	r2, [r7, #12]
  40130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401310:	429a      	cmp	r2, r3
  401312:	d901      	bls.n	401318 <tc_find_mck_divisor+0x52>
			return 0;
  401314:	2300      	movs	r3, #0
  401316:	e023      	b.n	401360 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  401318:	68fa      	ldr	r2, [r7, #12]
  40131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40131c:	429a      	cmp	r2, r3
  40131e:	d206      	bcs.n	40132e <tc_find_mck_divisor+0x68>
			ul_index++) {
  401320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401322:	3301      	adds	r3, #1
  401324:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  401326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401328:	2b04      	cmp	r3, #4
  40132a:	d9e1      	bls.n	4012f0 <tc_find_mck_divisor+0x2a>
  40132c:	e000      	b.n	401330 <tc_find_mck_divisor+0x6a>
			break;
  40132e:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  401330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401332:	2b04      	cmp	r3, #4
  401334:	d901      	bls.n	40133a <tc_find_mck_divisor+0x74>
		return 0;
  401336:	2300      	movs	r3, #0
  401338:	e012      	b.n	401360 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  40133a:	687b      	ldr	r3, [r7, #4]
  40133c:	2b00      	cmp	r3, #0
  40133e:	d008      	beq.n	401352 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  401340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401342:	009b      	lsls	r3, r3, #2
  401344:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401348:	4413      	add	r3, r2
  40134a:	f853 2c20 	ldr.w	r2, [r3, #-32]
  40134e:	687b      	ldr	r3, [r7, #4]
  401350:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  401352:	683b      	ldr	r3, [r7, #0]
  401354:	2b00      	cmp	r3, #0
  401356:	d002      	beq.n	40135e <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  401358:	683b      	ldr	r3, [r7, #0]
  40135a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40135c:	601a      	str	r2, [r3, #0]
	}

	return 1;
  40135e:	2301      	movs	r3, #1
}
  401360:	4618      	mov	r0, r3
  401362:	3734      	adds	r7, #52	; 0x34
  401364:	46bd      	mov	sp, r7
  401366:	f85d 7b04 	ldr.w	r7, [sp], #4
  40136a:	4770      	bx	lr

0040136c <uart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
  40136c:	b480      	push	{r7}
  40136e:	b083      	sub	sp, #12
  401370:	af00      	add	r7, sp, #0
  401372:	6078      	str	r0, [r7, #4]
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  401374:	687b      	ldr	r3, [r7, #4]
  401376:	695b      	ldr	r3, [r3, #20]
  401378:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40137c:	2b00      	cmp	r3, #0
  40137e:	bf14      	ite	ne
  401380:	2301      	movne	r3, #1
  401382:	2300      	moveq	r3, #0
  401384:	b2db      	uxtb	r3, r3
}
  401386:	4618      	mov	r0, r3
  401388:	370c      	adds	r7, #12
  40138a:	46bd      	mov	sp, r7
  40138c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401390:	4770      	bx	lr

00401392 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401392:	b480      	push	{r7}
  401394:	b083      	sub	sp, #12
  401396:	af00      	add	r7, sp, #0
  401398:	6078      	str	r0, [r7, #4]
  40139a:	460b      	mov	r3, r1
  40139c:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40139e:	687b      	ldr	r3, [r7, #4]
  4013a0:	695b      	ldr	r3, [r3, #20]
  4013a2:	f003 0302 	and.w	r3, r3, #2
  4013a6:	2b00      	cmp	r3, #0
  4013a8:	d101      	bne.n	4013ae <uart_write+0x1c>
		return 1;
  4013aa:	2301      	movs	r3, #1
  4013ac:	e003      	b.n	4013b6 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4013ae:	78fa      	ldrb	r2, [r7, #3]
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	61da      	str	r2, [r3, #28]
	return 0;
  4013b4:	2300      	movs	r3, #0
}
  4013b6:	4618      	mov	r0, r3
  4013b8:	370c      	adds	r7, #12
  4013ba:	46bd      	mov	sp, r7
  4013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013c0:	4770      	bx	lr

004013c2 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  4013c2:	b480      	push	{r7}
  4013c4:	b083      	sub	sp, #12
  4013c6:	af00      	add	r7, sp, #0
  4013c8:	6078      	str	r0, [r7, #4]
  4013ca:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	695b      	ldr	r3, [r3, #20]
  4013d0:	f003 0301 	and.w	r3, r3, #1
  4013d4:	2b00      	cmp	r3, #0
  4013d6:	d101      	bne.n	4013dc <uart_read+0x1a>
		return 1;
  4013d8:	2301      	movs	r3, #1
  4013da:	e005      	b.n	4013e8 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4013dc:	687b      	ldr	r3, [r7, #4]
  4013de:	699b      	ldr	r3, [r3, #24]
  4013e0:	b2da      	uxtb	r2, r3
  4013e2:	683b      	ldr	r3, [r7, #0]
  4013e4:	701a      	strb	r2, [r3, #0]
	return 0;
  4013e6:	2300      	movs	r3, #0
}
  4013e8:	4618      	mov	r0, r3
  4013ea:	370c      	adds	r7, #12
  4013ec:	46bd      	mov	sp, r7
  4013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013f2:	4770      	bx	lr

004013f4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4013f4:	b480      	push	{r7}
  4013f6:	b089      	sub	sp, #36	; 0x24
  4013f8:	af00      	add	r7, sp, #0
  4013fa:	60f8      	str	r0, [r7, #12]
  4013fc:	60b9      	str	r1, [r7, #8]
  4013fe:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401400:	68bb      	ldr	r3, [r7, #8]
  401402:	011a      	lsls	r2, r3, #4
  401404:	687b      	ldr	r3, [r7, #4]
  401406:	429a      	cmp	r2, r3
  401408:	d802      	bhi.n	401410 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40140a:	2310      	movs	r3, #16
  40140c:	61fb      	str	r3, [r7, #28]
  40140e:	e001      	b.n	401414 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401410:	2308      	movs	r3, #8
  401412:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401414:	687b      	ldr	r3, [r7, #4]
  401416:	00da      	lsls	r2, r3, #3
  401418:	69fb      	ldr	r3, [r7, #28]
  40141a:	68b9      	ldr	r1, [r7, #8]
  40141c:	fb01 f303 	mul.w	r3, r1, r3
  401420:	085b      	lsrs	r3, r3, #1
  401422:	441a      	add	r2, r3
  401424:	69fb      	ldr	r3, [r7, #28]
  401426:	68b9      	ldr	r1, [r7, #8]
  401428:	fb01 f303 	mul.w	r3, r1, r3
  40142c:	fbb2 f3f3 	udiv	r3, r2, r3
  401430:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401432:	69bb      	ldr	r3, [r7, #24]
  401434:	08db      	lsrs	r3, r3, #3
  401436:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401438:	69bb      	ldr	r3, [r7, #24]
  40143a:	f003 0307 	and.w	r3, r3, #7
  40143e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401440:	697b      	ldr	r3, [r7, #20]
  401442:	2b00      	cmp	r3, #0
  401444:	d003      	beq.n	40144e <usart_set_async_baudrate+0x5a>
  401446:	697b      	ldr	r3, [r7, #20]
  401448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40144c:	d301      	bcc.n	401452 <usart_set_async_baudrate+0x5e>
		return 1;
  40144e:	2301      	movs	r3, #1
  401450:	e00f      	b.n	401472 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401452:	69fb      	ldr	r3, [r7, #28]
  401454:	2b08      	cmp	r3, #8
  401456:	d105      	bne.n	401464 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401458:	68fb      	ldr	r3, [r7, #12]
  40145a:	685b      	ldr	r3, [r3, #4]
  40145c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401460:	68fb      	ldr	r3, [r7, #12]
  401462:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401464:	693b      	ldr	r3, [r7, #16]
  401466:	041a      	lsls	r2, r3, #16
  401468:	697b      	ldr	r3, [r7, #20]
  40146a:	431a      	orrs	r2, r3
  40146c:	68fb      	ldr	r3, [r7, #12]
  40146e:	621a      	str	r2, [r3, #32]

	return 0;
  401470:	2300      	movs	r3, #0
}
  401472:	4618      	mov	r0, r3
  401474:	3724      	adds	r7, #36	; 0x24
  401476:	46bd      	mov	sp, r7
  401478:	f85d 7b04 	ldr.w	r7, [sp], #4
  40147c:	4770      	bx	lr
	...

00401480 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401480:	b580      	push	{r7, lr}
  401482:	b082      	sub	sp, #8
  401484:	af00      	add	r7, sp, #0
  401486:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401488:	6878      	ldr	r0, [r7, #4]
  40148a:	4b0d      	ldr	r3, [pc, #52]	; (4014c0 <usart_reset+0x40>)
  40148c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40148e:	687b      	ldr	r3, [r7, #4]
  401490:	2200      	movs	r2, #0
  401492:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401494:	687b      	ldr	r3, [r7, #4]
  401496:	2200      	movs	r2, #0
  401498:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40149a:	687b      	ldr	r3, [r7, #4]
  40149c:	2200      	movs	r2, #0
  40149e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4014a0:	6878      	ldr	r0, [r7, #4]
  4014a2:	4b08      	ldr	r3, [pc, #32]	; (4014c4 <usart_reset+0x44>)
  4014a4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4014a6:	6878      	ldr	r0, [r7, #4]
  4014a8:	4b07      	ldr	r3, [pc, #28]	; (4014c8 <usart_reset+0x48>)
  4014aa:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4014ac:	6878      	ldr	r0, [r7, #4]
  4014ae:	4b07      	ldr	r3, [pc, #28]	; (4014cc <usart_reset+0x4c>)
  4014b0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4014b2:	6878      	ldr	r0, [r7, #4]
  4014b4:	4b06      	ldr	r3, [pc, #24]	; (4014d0 <usart_reset+0x50>)
  4014b6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4014b8:	bf00      	nop
  4014ba:	3708      	adds	r7, #8
  4014bc:	46bd      	mov	sp, r7
  4014be:	bd80      	pop	{r7, pc}
  4014c0:	00401695 	.word	0x00401695
  4014c4:	00401573 	.word	0x00401573
  4014c8:	004015a7 	.word	0x004015a7
  4014cc:	004015f5 	.word	0x004015f5
  4014d0:	00401611 	.word	0x00401611

004014d4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4014d4:	b580      	push	{r7, lr}
  4014d6:	b084      	sub	sp, #16
  4014d8:	af00      	add	r7, sp, #0
  4014da:	60f8      	str	r0, [r7, #12]
  4014dc:	60b9      	str	r1, [r7, #8]
  4014de:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4014e0:	68f8      	ldr	r0, [r7, #12]
  4014e2:	4b1a      	ldr	r3, [pc, #104]	; (40154c <usart_init_rs232+0x78>)
  4014e4:	4798      	blx	r3

	ul_reg_val = 0;
  4014e6:	4b1a      	ldr	r3, [pc, #104]	; (401550 <usart_init_rs232+0x7c>)
  4014e8:	2200      	movs	r2, #0
  4014ea:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4014ec:	68bb      	ldr	r3, [r7, #8]
  4014ee:	2b00      	cmp	r3, #0
  4014f0:	d009      	beq.n	401506 <usart_init_rs232+0x32>
  4014f2:	68bb      	ldr	r3, [r7, #8]
  4014f4:	681b      	ldr	r3, [r3, #0]
  4014f6:	687a      	ldr	r2, [r7, #4]
  4014f8:	4619      	mov	r1, r3
  4014fa:	68f8      	ldr	r0, [r7, #12]
  4014fc:	4b15      	ldr	r3, [pc, #84]	; (401554 <usart_init_rs232+0x80>)
  4014fe:	4798      	blx	r3
  401500:	4603      	mov	r3, r0
  401502:	2b00      	cmp	r3, #0
  401504:	d001      	beq.n	40150a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401506:	2301      	movs	r3, #1
  401508:	e01b      	b.n	401542 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40150a:	68bb      	ldr	r3, [r7, #8]
  40150c:	685a      	ldr	r2, [r3, #4]
  40150e:	68bb      	ldr	r3, [r7, #8]
  401510:	689b      	ldr	r3, [r3, #8]
  401512:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401514:	68bb      	ldr	r3, [r7, #8]
  401516:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401518:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40151a:	68bb      	ldr	r3, [r7, #8]
  40151c:	68db      	ldr	r3, [r3, #12]
  40151e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401520:	4b0b      	ldr	r3, [pc, #44]	; (401550 <usart_init_rs232+0x7c>)
  401522:	681b      	ldr	r3, [r3, #0]
  401524:	4313      	orrs	r3, r2
  401526:	4a0a      	ldr	r2, [pc, #40]	; (401550 <usart_init_rs232+0x7c>)
  401528:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40152a:	4b09      	ldr	r3, [pc, #36]	; (401550 <usart_init_rs232+0x7c>)
  40152c:	681b      	ldr	r3, [r3, #0]
  40152e:	4a08      	ldr	r2, [pc, #32]	; (401550 <usart_init_rs232+0x7c>)
  401530:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401532:	68fb      	ldr	r3, [r7, #12]
  401534:	685a      	ldr	r2, [r3, #4]
  401536:	4b06      	ldr	r3, [pc, #24]	; (401550 <usart_init_rs232+0x7c>)
  401538:	681b      	ldr	r3, [r3, #0]
  40153a:	431a      	orrs	r2, r3
  40153c:	68fb      	ldr	r3, [r7, #12]
  40153e:	605a      	str	r2, [r3, #4]

	return 0;
  401540:	2300      	movs	r3, #0
}
  401542:	4618      	mov	r0, r3
  401544:	3710      	adds	r7, #16
  401546:	46bd      	mov	sp, r7
  401548:	bd80      	pop	{r7, pc}
  40154a:	bf00      	nop
  40154c:	00401481 	.word	0x00401481
  401550:	20400a40 	.word	0x20400a40
  401554:	004013f5 	.word	0x004013f5

00401558 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401558:	b480      	push	{r7}
  40155a:	b083      	sub	sp, #12
  40155c:	af00      	add	r7, sp, #0
  40155e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401560:	687b      	ldr	r3, [r7, #4]
  401562:	2240      	movs	r2, #64	; 0x40
  401564:	601a      	str	r2, [r3, #0]
}
  401566:	bf00      	nop
  401568:	370c      	adds	r7, #12
  40156a:	46bd      	mov	sp, r7
  40156c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401570:	4770      	bx	lr

00401572 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401572:	b480      	push	{r7}
  401574:	b083      	sub	sp, #12
  401576:	af00      	add	r7, sp, #0
  401578:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40157a:	687b      	ldr	r3, [r7, #4]
  40157c:	2288      	movs	r2, #136	; 0x88
  40157e:	601a      	str	r2, [r3, #0]
}
  401580:	bf00      	nop
  401582:	370c      	adds	r7, #12
  401584:	46bd      	mov	sp, r7
  401586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40158a:	4770      	bx	lr

0040158c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  40158c:	b480      	push	{r7}
  40158e:	b083      	sub	sp, #12
  401590:	af00      	add	r7, sp, #0
  401592:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401594:	687b      	ldr	r3, [r7, #4]
  401596:	2210      	movs	r2, #16
  401598:	601a      	str	r2, [r3, #0]
}
  40159a:	bf00      	nop
  40159c:	370c      	adds	r7, #12
  40159e:	46bd      	mov	sp, r7
  4015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015a4:	4770      	bx	lr

004015a6 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4015a6:	b480      	push	{r7}
  4015a8:	b083      	sub	sp, #12
  4015aa:	af00      	add	r7, sp, #0
  4015ac:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4015ae:	687b      	ldr	r3, [r7, #4]
  4015b0:	2224      	movs	r2, #36	; 0x24
  4015b2:	601a      	str	r2, [r3, #0]
}
  4015b4:	bf00      	nop
  4015b6:	370c      	adds	r7, #12
  4015b8:	46bd      	mov	sp, r7
  4015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015be:	4770      	bx	lr

004015c0 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4015c0:	b480      	push	{r7}
  4015c2:	b083      	sub	sp, #12
  4015c4:	af00      	add	r7, sp, #0
  4015c6:	6078      	str	r0, [r7, #4]
  4015c8:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4015ca:	687b      	ldr	r3, [r7, #4]
  4015cc:	683a      	ldr	r2, [r7, #0]
  4015ce:	609a      	str	r2, [r3, #8]
}
  4015d0:	bf00      	nop
  4015d2:	370c      	adds	r7, #12
  4015d4:	46bd      	mov	sp, r7
  4015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015da:	4770      	bx	lr

004015dc <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4015dc:	b480      	push	{r7}
  4015de:	b083      	sub	sp, #12
  4015e0:	af00      	add	r7, sp, #0
  4015e2:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  4015e4:	687b      	ldr	r3, [r7, #4]
  4015e6:	695b      	ldr	r3, [r3, #20]
}
  4015e8:	4618      	mov	r0, r3
  4015ea:	370c      	adds	r7, #12
  4015ec:	46bd      	mov	sp, r7
  4015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015f2:	4770      	bx	lr

004015f4 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4015f4:	b480      	push	{r7}
  4015f6:	b083      	sub	sp, #12
  4015f8:	af00      	add	r7, sp, #0
  4015fa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4015fc:	687b      	ldr	r3, [r7, #4]
  4015fe:	f44f 7280 	mov.w	r2, #256	; 0x100
  401602:	601a      	str	r2, [r3, #0]
}
  401604:	bf00      	nop
  401606:	370c      	adds	r7, #12
  401608:	46bd      	mov	sp, r7
  40160a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40160e:	4770      	bx	lr

00401610 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401610:	b480      	push	{r7}
  401612:	b083      	sub	sp, #12
  401614:	af00      	add	r7, sp, #0
  401616:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401618:	687b      	ldr	r3, [r7, #4]
  40161a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40161e:	601a      	str	r2, [r3, #0]
}
  401620:	bf00      	nop
  401622:	370c      	adds	r7, #12
  401624:	46bd      	mov	sp, r7
  401626:	f85d 7b04 	ldr.w	r7, [sp], #4
  40162a:	4770      	bx	lr

0040162c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  40162c:	b480      	push	{r7}
  40162e:	b083      	sub	sp, #12
  401630:	af00      	add	r7, sp, #0
  401632:	6078      	str	r0, [r7, #4]
  401634:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401636:	687b      	ldr	r3, [r7, #4]
  401638:	695b      	ldr	r3, [r3, #20]
  40163a:	f003 0302 	and.w	r3, r3, #2
  40163e:	2b00      	cmp	r3, #0
  401640:	d101      	bne.n	401646 <usart_write+0x1a>
		return 1;
  401642:	2301      	movs	r3, #1
  401644:	e005      	b.n	401652 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401646:	683b      	ldr	r3, [r7, #0]
  401648:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40164c:	687b      	ldr	r3, [r7, #4]
  40164e:	61da      	str	r2, [r3, #28]
	return 0;
  401650:	2300      	movs	r3, #0
}
  401652:	4618      	mov	r0, r3
  401654:	370c      	adds	r7, #12
  401656:	46bd      	mov	sp, r7
  401658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40165c:	4770      	bx	lr

0040165e <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40165e:	b480      	push	{r7}
  401660:	b083      	sub	sp, #12
  401662:	af00      	add	r7, sp, #0
  401664:	6078      	str	r0, [r7, #4]
  401666:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401668:	687b      	ldr	r3, [r7, #4]
  40166a:	695b      	ldr	r3, [r3, #20]
  40166c:	f003 0301 	and.w	r3, r3, #1
  401670:	2b00      	cmp	r3, #0
  401672:	d101      	bne.n	401678 <usart_read+0x1a>
		return 1;
  401674:	2301      	movs	r3, #1
  401676:	e006      	b.n	401686 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401678:	687b      	ldr	r3, [r7, #4]
  40167a:	699b      	ldr	r3, [r3, #24]
  40167c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401680:	683b      	ldr	r3, [r7, #0]
  401682:	601a      	str	r2, [r3, #0]

	return 0;
  401684:	2300      	movs	r3, #0
}
  401686:	4618      	mov	r0, r3
  401688:	370c      	adds	r7, #12
  40168a:	46bd      	mov	sp, r7
  40168c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401690:	4770      	bx	lr
	...

00401694 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401694:	b480      	push	{r7}
  401696:	b083      	sub	sp, #12
  401698:	af00      	add	r7, sp, #0
  40169a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40169c:	687b      	ldr	r3, [r7, #4]
  40169e:	4a04      	ldr	r2, [pc, #16]	; (4016b0 <usart_disable_writeprotect+0x1c>)
  4016a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4016a4:	bf00      	nop
  4016a6:	370c      	adds	r7, #12
  4016a8:	46bd      	mov	sp, r7
  4016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016ae:	4770      	bx	lr
  4016b0:	55534100 	.word	0x55534100

004016b4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4016b4:	b480      	push	{r7}
  4016b6:	b083      	sub	sp, #12
  4016b8:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4016ba:	f3ef 8310 	mrs	r3, PRIMASK
  4016be:	607b      	str	r3, [r7, #4]
  return(result);
  4016c0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4016c2:	2b00      	cmp	r3, #0
  4016c4:	bf0c      	ite	eq
  4016c6:	2301      	moveq	r3, #1
  4016c8:	2300      	movne	r3, #0
  4016ca:	b2db      	uxtb	r3, r3
  4016cc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4016ce:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4016d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4016d4:	4b04      	ldr	r3, [pc, #16]	; (4016e8 <cpu_irq_save+0x34>)
  4016d6:	2200      	movs	r2, #0
  4016d8:	701a      	strb	r2, [r3, #0]
	return flags;
  4016da:	683b      	ldr	r3, [r7, #0]
}
  4016dc:	4618      	mov	r0, r3
  4016de:	370c      	adds	r7, #12
  4016e0:	46bd      	mov	sp, r7
  4016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016e6:	4770      	bx	lr
  4016e8:	20400000 	.word	0x20400000

004016ec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4016ec:	b480      	push	{r7}
  4016ee:	b083      	sub	sp, #12
  4016f0:	af00      	add	r7, sp, #0
  4016f2:	6078      	str	r0, [r7, #4]
	return (flags);
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	2b00      	cmp	r3, #0
  4016f8:	bf14      	ite	ne
  4016fa:	2301      	movne	r3, #1
  4016fc:	2300      	moveq	r3, #0
  4016fe:	b2db      	uxtb	r3, r3
}
  401700:	4618      	mov	r0, r3
  401702:	370c      	adds	r7, #12
  401704:	46bd      	mov	sp, r7
  401706:	f85d 7b04 	ldr.w	r7, [sp], #4
  40170a:	4770      	bx	lr

0040170c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  40170c:	b580      	push	{r7, lr}
  40170e:	b082      	sub	sp, #8
  401710:	af00      	add	r7, sp, #0
  401712:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401714:	6878      	ldr	r0, [r7, #4]
  401716:	4b07      	ldr	r3, [pc, #28]	; (401734 <cpu_irq_restore+0x28>)
  401718:	4798      	blx	r3
  40171a:	4603      	mov	r3, r0
  40171c:	2b00      	cmp	r3, #0
  40171e:	d005      	beq.n	40172c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401720:	4b05      	ldr	r3, [pc, #20]	; (401738 <cpu_irq_restore+0x2c>)
  401722:	2201      	movs	r2, #1
  401724:	701a      	strb	r2, [r3, #0]
  401726:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40172a:	b662      	cpsie	i
}
  40172c:	bf00      	nop
  40172e:	3708      	adds	r7, #8
  401730:	46bd      	mov	sp, r7
  401732:	bd80      	pop	{r7, pc}
  401734:	004016ed 	.word	0x004016ed
  401738:	20400000 	.word	0x20400000

0040173c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40173c:	b580      	push	{r7, lr}
  40173e:	b084      	sub	sp, #16
  401740:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401742:	4b1e      	ldr	r3, [pc, #120]	; (4017bc <Reset_Handler+0x80>)
  401744:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401746:	4b1e      	ldr	r3, [pc, #120]	; (4017c0 <Reset_Handler+0x84>)
  401748:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  40174a:	68fa      	ldr	r2, [r7, #12]
  40174c:	68bb      	ldr	r3, [r7, #8]
  40174e:	429a      	cmp	r2, r3
  401750:	d00c      	beq.n	40176c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401752:	e007      	b.n	401764 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401754:	68bb      	ldr	r3, [r7, #8]
  401756:	1d1a      	adds	r2, r3, #4
  401758:	60ba      	str	r2, [r7, #8]
  40175a:	68fa      	ldr	r2, [r7, #12]
  40175c:	1d11      	adds	r1, r2, #4
  40175e:	60f9      	str	r1, [r7, #12]
  401760:	6812      	ldr	r2, [r2, #0]
  401762:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401764:	68bb      	ldr	r3, [r7, #8]
  401766:	4a17      	ldr	r2, [pc, #92]	; (4017c4 <Reset_Handler+0x88>)
  401768:	4293      	cmp	r3, r2
  40176a:	d3f3      	bcc.n	401754 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40176c:	4b16      	ldr	r3, [pc, #88]	; (4017c8 <Reset_Handler+0x8c>)
  40176e:	60bb      	str	r3, [r7, #8]
  401770:	e004      	b.n	40177c <Reset_Handler+0x40>
                *pDest++ = 0;
  401772:	68bb      	ldr	r3, [r7, #8]
  401774:	1d1a      	adds	r2, r3, #4
  401776:	60ba      	str	r2, [r7, #8]
  401778:	2200      	movs	r2, #0
  40177a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  40177c:	68bb      	ldr	r3, [r7, #8]
  40177e:	4a13      	ldr	r2, [pc, #76]	; (4017cc <Reset_Handler+0x90>)
  401780:	4293      	cmp	r3, r2
  401782:	d3f6      	bcc.n	401772 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401784:	4b12      	ldr	r3, [pc, #72]	; (4017d0 <Reset_Handler+0x94>)
  401786:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401788:	4a12      	ldr	r2, [pc, #72]	; (4017d4 <Reset_Handler+0x98>)
  40178a:	68fb      	ldr	r3, [r7, #12]
  40178c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401790:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401792:	4b11      	ldr	r3, [pc, #68]	; (4017d8 <Reset_Handler+0x9c>)
  401794:	4798      	blx	r3
  401796:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401798:	4a10      	ldr	r2, [pc, #64]	; (4017dc <Reset_Handler+0xa0>)
  40179a:	4b10      	ldr	r3, [pc, #64]	; (4017dc <Reset_Handler+0xa0>)
  40179c:	681b      	ldr	r3, [r3, #0]
  40179e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017a2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4017a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017a8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4017ac:	6878      	ldr	r0, [r7, #4]
  4017ae:	4b0c      	ldr	r3, [pc, #48]	; (4017e0 <Reset_Handler+0xa4>)
  4017b0:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4017b2:	4b0c      	ldr	r3, [pc, #48]	; (4017e4 <Reset_Handler+0xa8>)
  4017b4:	4798      	blx	r3

        /* Branch to main function */
        main();
  4017b6:	4b0c      	ldr	r3, [pc, #48]	; (4017e8 <Reset_Handler+0xac>)
  4017b8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4017ba:	e7fe      	b.n	4017ba <Reset_Handler+0x7e>
  4017bc:	00406fac 	.word	0x00406fac
  4017c0:	20400000 	.word	0x20400000
  4017c4:	204009b4 	.word	0x204009b4
  4017c8:	204009b4 	.word	0x204009b4
  4017cc:	20400b54 	.word	0x20400b54
  4017d0:	00400000 	.word	0x00400000
  4017d4:	e000ed00 	.word	0xe000ed00
  4017d8:	004016b5 	.word	0x004016b5
  4017dc:	e000ed88 	.word	0xe000ed88
  4017e0:	0040170d 	.word	0x0040170d
  4017e4:	004021f1 	.word	0x004021f1
  4017e8:	0040209d 	.word	0x0040209d

004017ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4017ec:	b480      	push	{r7}
  4017ee:	af00      	add	r7, sp, #0
        while (1) {
  4017f0:	e7fe      	b.n	4017f0 <Dummy_Handler+0x4>
	...

004017f4 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4017f4:	b480      	push	{r7}
  4017f6:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4017f8:	4b52      	ldr	r3, [pc, #328]	; (401944 <SystemCoreClockUpdate+0x150>)
  4017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017fc:	f003 0303 	and.w	r3, r3, #3
  401800:	2b01      	cmp	r3, #1
  401802:	d014      	beq.n	40182e <SystemCoreClockUpdate+0x3a>
  401804:	2b01      	cmp	r3, #1
  401806:	d302      	bcc.n	40180e <SystemCoreClockUpdate+0x1a>
  401808:	2b02      	cmp	r3, #2
  40180a:	d038      	beq.n	40187e <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  40180c:	e07a      	b.n	401904 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40180e:	4b4e      	ldr	r3, [pc, #312]	; (401948 <SystemCoreClockUpdate+0x154>)
  401810:	695b      	ldr	r3, [r3, #20]
  401812:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401816:	2b00      	cmp	r3, #0
  401818:	d004      	beq.n	401824 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40181a:	4b4c      	ldr	r3, [pc, #304]	; (40194c <SystemCoreClockUpdate+0x158>)
  40181c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401820:	601a      	str	r2, [r3, #0]
    break;
  401822:	e06f      	b.n	401904 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401824:	4b49      	ldr	r3, [pc, #292]	; (40194c <SystemCoreClockUpdate+0x158>)
  401826:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40182a:	601a      	str	r2, [r3, #0]
    break;
  40182c:	e06a      	b.n	401904 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40182e:	4b45      	ldr	r3, [pc, #276]	; (401944 <SystemCoreClockUpdate+0x150>)
  401830:	6a1b      	ldr	r3, [r3, #32]
  401832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401836:	2b00      	cmp	r3, #0
  401838:	d003      	beq.n	401842 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40183a:	4b44      	ldr	r3, [pc, #272]	; (40194c <SystemCoreClockUpdate+0x158>)
  40183c:	4a44      	ldr	r2, [pc, #272]	; (401950 <SystemCoreClockUpdate+0x15c>)
  40183e:	601a      	str	r2, [r3, #0]
    break;
  401840:	e060      	b.n	401904 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401842:	4b42      	ldr	r3, [pc, #264]	; (40194c <SystemCoreClockUpdate+0x158>)
  401844:	4a43      	ldr	r2, [pc, #268]	; (401954 <SystemCoreClockUpdate+0x160>)
  401846:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401848:	4b3e      	ldr	r3, [pc, #248]	; (401944 <SystemCoreClockUpdate+0x150>)
  40184a:	6a1b      	ldr	r3, [r3, #32]
  40184c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401850:	2b10      	cmp	r3, #16
  401852:	d004      	beq.n	40185e <SystemCoreClockUpdate+0x6a>
  401854:	2b20      	cmp	r3, #32
  401856:	d008      	beq.n	40186a <SystemCoreClockUpdate+0x76>
  401858:	2b00      	cmp	r3, #0
  40185a:	d00e      	beq.n	40187a <SystemCoreClockUpdate+0x86>
          break;
  40185c:	e00e      	b.n	40187c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  40185e:	4b3b      	ldr	r3, [pc, #236]	; (40194c <SystemCoreClockUpdate+0x158>)
  401860:	681b      	ldr	r3, [r3, #0]
  401862:	005b      	lsls	r3, r3, #1
  401864:	4a39      	ldr	r2, [pc, #228]	; (40194c <SystemCoreClockUpdate+0x158>)
  401866:	6013      	str	r3, [r2, #0]
          break;
  401868:	e008      	b.n	40187c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  40186a:	4b38      	ldr	r3, [pc, #224]	; (40194c <SystemCoreClockUpdate+0x158>)
  40186c:	681a      	ldr	r2, [r3, #0]
  40186e:	4613      	mov	r3, r2
  401870:	005b      	lsls	r3, r3, #1
  401872:	4413      	add	r3, r2
  401874:	4a35      	ldr	r2, [pc, #212]	; (40194c <SystemCoreClockUpdate+0x158>)
  401876:	6013      	str	r3, [r2, #0]
          break;
  401878:	e000      	b.n	40187c <SystemCoreClockUpdate+0x88>
          break;
  40187a:	bf00      	nop
    break;
  40187c:	e042      	b.n	401904 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40187e:	4b31      	ldr	r3, [pc, #196]	; (401944 <SystemCoreClockUpdate+0x150>)
  401880:	6a1b      	ldr	r3, [r3, #32]
  401882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401886:	2b00      	cmp	r3, #0
  401888:	d003      	beq.n	401892 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40188a:	4b30      	ldr	r3, [pc, #192]	; (40194c <SystemCoreClockUpdate+0x158>)
  40188c:	4a30      	ldr	r2, [pc, #192]	; (401950 <SystemCoreClockUpdate+0x15c>)
  40188e:	601a      	str	r2, [r3, #0]
  401890:	e01c      	b.n	4018cc <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401892:	4b2e      	ldr	r3, [pc, #184]	; (40194c <SystemCoreClockUpdate+0x158>)
  401894:	4a2f      	ldr	r2, [pc, #188]	; (401954 <SystemCoreClockUpdate+0x160>)
  401896:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401898:	4b2a      	ldr	r3, [pc, #168]	; (401944 <SystemCoreClockUpdate+0x150>)
  40189a:	6a1b      	ldr	r3, [r3, #32]
  40189c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018a0:	2b10      	cmp	r3, #16
  4018a2:	d004      	beq.n	4018ae <SystemCoreClockUpdate+0xba>
  4018a4:	2b20      	cmp	r3, #32
  4018a6:	d008      	beq.n	4018ba <SystemCoreClockUpdate+0xc6>
  4018a8:	2b00      	cmp	r3, #0
  4018aa:	d00e      	beq.n	4018ca <SystemCoreClockUpdate+0xd6>
          break;
  4018ac:	e00e      	b.n	4018cc <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  4018ae:	4b27      	ldr	r3, [pc, #156]	; (40194c <SystemCoreClockUpdate+0x158>)
  4018b0:	681b      	ldr	r3, [r3, #0]
  4018b2:	005b      	lsls	r3, r3, #1
  4018b4:	4a25      	ldr	r2, [pc, #148]	; (40194c <SystemCoreClockUpdate+0x158>)
  4018b6:	6013      	str	r3, [r2, #0]
          break;
  4018b8:	e008      	b.n	4018cc <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  4018ba:	4b24      	ldr	r3, [pc, #144]	; (40194c <SystemCoreClockUpdate+0x158>)
  4018bc:	681a      	ldr	r2, [r3, #0]
  4018be:	4613      	mov	r3, r2
  4018c0:	005b      	lsls	r3, r3, #1
  4018c2:	4413      	add	r3, r2
  4018c4:	4a21      	ldr	r2, [pc, #132]	; (40194c <SystemCoreClockUpdate+0x158>)
  4018c6:	6013      	str	r3, [r2, #0]
          break;
  4018c8:	e000      	b.n	4018cc <SystemCoreClockUpdate+0xd8>
          break;
  4018ca:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4018cc:	4b1d      	ldr	r3, [pc, #116]	; (401944 <SystemCoreClockUpdate+0x150>)
  4018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018d0:	f003 0303 	and.w	r3, r3, #3
  4018d4:	2b02      	cmp	r3, #2
  4018d6:	d114      	bne.n	401902 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018d8:	4b1a      	ldr	r3, [pc, #104]	; (401944 <SystemCoreClockUpdate+0x150>)
  4018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4018dc:	0c1b      	lsrs	r3, r3, #16
  4018de:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4018e2:	3301      	adds	r3, #1
  4018e4:	4a19      	ldr	r2, [pc, #100]	; (40194c <SystemCoreClockUpdate+0x158>)
  4018e6:	6812      	ldr	r2, [r2, #0]
  4018e8:	fb02 f303 	mul.w	r3, r2, r3
  4018ec:	4a17      	ldr	r2, [pc, #92]	; (40194c <SystemCoreClockUpdate+0x158>)
  4018ee:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018f0:	4b14      	ldr	r3, [pc, #80]	; (401944 <SystemCoreClockUpdate+0x150>)
  4018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4018f4:	b2db      	uxtb	r3, r3
  4018f6:	4a15      	ldr	r2, [pc, #84]	; (40194c <SystemCoreClockUpdate+0x158>)
  4018f8:	6812      	ldr	r2, [r2, #0]
  4018fa:	fbb2 f3f3 	udiv	r3, r2, r3
  4018fe:	4a13      	ldr	r2, [pc, #76]	; (40194c <SystemCoreClockUpdate+0x158>)
  401900:	6013      	str	r3, [r2, #0]
    break;
  401902:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401904:	4b0f      	ldr	r3, [pc, #60]	; (401944 <SystemCoreClockUpdate+0x150>)
  401906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401908:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40190c:	2b70      	cmp	r3, #112	; 0x70
  40190e:	d108      	bne.n	401922 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401910:	4b0e      	ldr	r3, [pc, #56]	; (40194c <SystemCoreClockUpdate+0x158>)
  401912:	681b      	ldr	r3, [r3, #0]
  401914:	4a10      	ldr	r2, [pc, #64]	; (401958 <SystemCoreClockUpdate+0x164>)
  401916:	fba2 2303 	umull	r2, r3, r2, r3
  40191a:	085b      	lsrs	r3, r3, #1
  40191c:	4a0b      	ldr	r2, [pc, #44]	; (40194c <SystemCoreClockUpdate+0x158>)
  40191e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401920:	e00a      	b.n	401938 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401922:	4b08      	ldr	r3, [pc, #32]	; (401944 <SystemCoreClockUpdate+0x150>)
  401924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401926:	091b      	lsrs	r3, r3, #4
  401928:	f003 0307 	and.w	r3, r3, #7
  40192c:	4a07      	ldr	r2, [pc, #28]	; (40194c <SystemCoreClockUpdate+0x158>)
  40192e:	6812      	ldr	r2, [r2, #0]
  401930:	fa22 f303 	lsr.w	r3, r2, r3
  401934:	4a05      	ldr	r2, [pc, #20]	; (40194c <SystemCoreClockUpdate+0x158>)
  401936:	6013      	str	r3, [r2, #0]
}
  401938:	bf00      	nop
  40193a:	46bd      	mov	sp, r7
  40193c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401940:	4770      	bx	lr
  401942:	bf00      	nop
  401944:	400e0600 	.word	0x400e0600
  401948:	400e1810 	.word	0x400e1810
  40194c:	20400004 	.word	0x20400004
  401950:	00b71b00 	.word	0x00b71b00
  401954:	003d0900 	.word	0x003d0900
  401958:	aaaaaaab 	.word	0xaaaaaaab

0040195c <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  40195c:	b480      	push	{r7}
  40195e:	b083      	sub	sp, #12
  401960:	af00      	add	r7, sp, #0
  401962:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401964:	687b      	ldr	r3, [r7, #4]
  401966:	4a19      	ldr	r2, [pc, #100]	; (4019cc <system_init_flash+0x70>)
  401968:	4293      	cmp	r3, r2
  40196a:	d804      	bhi.n	401976 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40196c:	4b18      	ldr	r3, [pc, #96]	; (4019d0 <system_init_flash+0x74>)
  40196e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401972:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401974:	e023      	b.n	4019be <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  401976:	687b      	ldr	r3, [r7, #4]
  401978:	4a16      	ldr	r2, [pc, #88]	; (4019d4 <system_init_flash+0x78>)
  40197a:	4293      	cmp	r3, r2
  40197c:	d803      	bhi.n	401986 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40197e:	4b14      	ldr	r3, [pc, #80]	; (4019d0 <system_init_flash+0x74>)
  401980:	4a15      	ldr	r2, [pc, #84]	; (4019d8 <system_init_flash+0x7c>)
  401982:	601a      	str	r2, [r3, #0]
}
  401984:	e01b      	b.n	4019be <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	4a14      	ldr	r2, [pc, #80]	; (4019dc <system_init_flash+0x80>)
  40198a:	4293      	cmp	r3, r2
  40198c:	d803      	bhi.n	401996 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40198e:	4b10      	ldr	r3, [pc, #64]	; (4019d0 <system_init_flash+0x74>)
  401990:	4a13      	ldr	r2, [pc, #76]	; (4019e0 <system_init_flash+0x84>)
  401992:	601a      	str	r2, [r3, #0]
}
  401994:	e013      	b.n	4019be <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401996:	687b      	ldr	r3, [r7, #4]
  401998:	4a12      	ldr	r2, [pc, #72]	; (4019e4 <system_init_flash+0x88>)
  40199a:	4293      	cmp	r3, r2
  40199c:	d803      	bhi.n	4019a6 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40199e:	4b0c      	ldr	r3, [pc, #48]	; (4019d0 <system_init_flash+0x74>)
  4019a0:	4a11      	ldr	r2, [pc, #68]	; (4019e8 <system_init_flash+0x8c>)
  4019a2:	601a      	str	r2, [r3, #0]
}
  4019a4:	e00b      	b.n	4019be <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4019a6:	687b      	ldr	r3, [r7, #4]
  4019a8:	4a10      	ldr	r2, [pc, #64]	; (4019ec <system_init_flash+0x90>)
  4019aa:	4293      	cmp	r3, r2
  4019ac:	d804      	bhi.n	4019b8 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019ae:	4b08      	ldr	r3, [pc, #32]	; (4019d0 <system_init_flash+0x74>)
  4019b0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4019b4:	601a      	str	r2, [r3, #0]
}
  4019b6:	e002      	b.n	4019be <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4019b8:	4b05      	ldr	r3, [pc, #20]	; (4019d0 <system_init_flash+0x74>)
  4019ba:	4a0d      	ldr	r2, [pc, #52]	; (4019f0 <system_init_flash+0x94>)
  4019bc:	601a      	str	r2, [r3, #0]
}
  4019be:	bf00      	nop
  4019c0:	370c      	adds	r7, #12
  4019c2:	46bd      	mov	sp, r7
  4019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019c8:	4770      	bx	lr
  4019ca:	bf00      	nop
  4019cc:	01312cff 	.word	0x01312cff
  4019d0:	400e0c00 	.word	0x400e0c00
  4019d4:	026259ff 	.word	0x026259ff
  4019d8:	04000100 	.word	0x04000100
  4019dc:	039386ff 	.word	0x039386ff
  4019e0:	04000200 	.word	0x04000200
  4019e4:	04c4b3ff 	.word	0x04c4b3ff
  4019e8:	04000300 	.word	0x04000300
  4019ec:	05f5e0ff 	.word	0x05f5e0ff
  4019f0:	04000500 	.word	0x04000500

004019f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4019f4:	b480      	push	{r7}
  4019f6:	b085      	sub	sp, #20
  4019f8:	af00      	add	r7, sp, #0
  4019fa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4019fc:	4b10      	ldr	r3, [pc, #64]	; (401a40 <_sbrk+0x4c>)
  4019fe:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401a00:	4b10      	ldr	r3, [pc, #64]	; (401a44 <_sbrk+0x50>)
  401a02:	681b      	ldr	r3, [r3, #0]
  401a04:	2b00      	cmp	r3, #0
  401a06:	d102      	bne.n	401a0e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401a08:	4b0e      	ldr	r3, [pc, #56]	; (401a44 <_sbrk+0x50>)
  401a0a:	4a0f      	ldr	r2, [pc, #60]	; (401a48 <_sbrk+0x54>)
  401a0c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401a0e:	4b0d      	ldr	r3, [pc, #52]	; (401a44 <_sbrk+0x50>)
  401a10:	681b      	ldr	r3, [r3, #0]
  401a12:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401a14:	68ba      	ldr	r2, [r7, #8]
  401a16:	687b      	ldr	r3, [r7, #4]
  401a18:	441a      	add	r2, r3
  401a1a:	68fb      	ldr	r3, [r7, #12]
  401a1c:	429a      	cmp	r2, r3
  401a1e:	dd02      	ble.n	401a26 <_sbrk+0x32>
		return (caddr_t) -1;	
  401a20:	f04f 33ff 	mov.w	r3, #4294967295
  401a24:	e006      	b.n	401a34 <_sbrk+0x40>
	}

	heap += incr;
  401a26:	4b07      	ldr	r3, [pc, #28]	; (401a44 <_sbrk+0x50>)
  401a28:	681a      	ldr	r2, [r3, #0]
  401a2a:	687b      	ldr	r3, [r7, #4]
  401a2c:	4413      	add	r3, r2
  401a2e:	4a05      	ldr	r2, [pc, #20]	; (401a44 <_sbrk+0x50>)
  401a30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401a32:	68bb      	ldr	r3, [r7, #8]
}
  401a34:	4618      	mov	r0, r3
  401a36:	3714      	adds	r7, #20
  401a38:	46bd      	mov	sp, r7
  401a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a3e:	4770      	bx	lr
  401a40:	2045fffc 	.word	0x2045fffc
  401a44:	20400a44 	.word	0x20400a44
  401a48:	20402d58 	.word	0x20402d58

00401a4c <NVIC_EnableIRQ>:
{
  401a4c:	b480      	push	{r7}
  401a4e:	b083      	sub	sp, #12
  401a50:	af00      	add	r7, sp, #0
  401a52:	4603      	mov	r3, r0
  401a54:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a56:	4909      	ldr	r1, [pc, #36]	; (401a7c <NVIC_EnableIRQ+0x30>)
  401a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a5c:	095b      	lsrs	r3, r3, #5
  401a5e:	79fa      	ldrb	r2, [r7, #7]
  401a60:	f002 021f 	and.w	r2, r2, #31
  401a64:	2001      	movs	r0, #1
  401a66:	fa00 f202 	lsl.w	r2, r0, r2
  401a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401a6e:	bf00      	nop
  401a70:	370c      	adds	r7, #12
  401a72:	46bd      	mov	sp, r7
  401a74:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a78:	4770      	bx	lr
  401a7a:	bf00      	nop
  401a7c:	e000e100 	.word	0xe000e100

00401a80 <osc_get_rate>:
{
  401a80:	b480      	push	{r7}
  401a82:	b083      	sub	sp, #12
  401a84:	af00      	add	r7, sp, #0
  401a86:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401a88:	687b      	ldr	r3, [r7, #4]
  401a8a:	2b07      	cmp	r3, #7
  401a8c:	d825      	bhi.n	401ada <osc_get_rate+0x5a>
  401a8e:	a201      	add	r2, pc, #4	; (adr r2, 401a94 <osc_get_rate+0x14>)
  401a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a94:	00401ab5 	.word	0x00401ab5
  401a98:	00401abb 	.word	0x00401abb
  401a9c:	00401ac1 	.word	0x00401ac1
  401aa0:	00401ac7 	.word	0x00401ac7
  401aa4:	00401acb 	.word	0x00401acb
  401aa8:	00401acf 	.word	0x00401acf
  401aac:	00401ad3 	.word	0x00401ad3
  401ab0:	00401ad7 	.word	0x00401ad7
		return OSC_SLCK_32K_RC_HZ;
  401ab4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401ab8:	e010      	b.n	401adc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401abe:	e00d      	b.n	401adc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401ac4:	e00a      	b.n	401adc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401ac6:	4b08      	ldr	r3, [pc, #32]	; (401ae8 <osc_get_rate+0x68>)
  401ac8:	e008      	b.n	401adc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401aca:	4b08      	ldr	r3, [pc, #32]	; (401aec <osc_get_rate+0x6c>)
  401acc:	e006      	b.n	401adc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401ace:	4b08      	ldr	r3, [pc, #32]	; (401af0 <osc_get_rate+0x70>)
  401ad0:	e004      	b.n	401adc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401ad2:	4b07      	ldr	r3, [pc, #28]	; (401af0 <osc_get_rate+0x70>)
  401ad4:	e002      	b.n	401adc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401ad6:	4b06      	ldr	r3, [pc, #24]	; (401af0 <osc_get_rate+0x70>)
  401ad8:	e000      	b.n	401adc <osc_get_rate+0x5c>
	return 0;
  401ada:	2300      	movs	r3, #0
}
  401adc:	4618      	mov	r0, r3
  401ade:	370c      	adds	r7, #12
  401ae0:	46bd      	mov	sp, r7
  401ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae6:	4770      	bx	lr
  401ae8:	003d0900 	.word	0x003d0900
  401aec:	007a1200 	.word	0x007a1200
  401af0:	00b71b00 	.word	0x00b71b00

00401af4 <sysclk_get_main_hz>:
{
  401af4:	b580      	push	{r7, lr}
  401af6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401af8:	2006      	movs	r0, #6
  401afa:	4b05      	ldr	r3, [pc, #20]	; (401b10 <sysclk_get_main_hz+0x1c>)
  401afc:	4798      	blx	r3
  401afe:	4602      	mov	r2, r0
  401b00:	4613      	mov	r3, r2
  401b02:	009b      	lsls	r3, r3, #2
  401b04:	4413      	add	r3, r2
  401b06:	009a      	lsls	r2, r3, #2
  401b08:	4413      	add	r3, r2
}
  401b0a:	4618      	mov	r0, r3
  401b0c:	bd80      	pop	{r7, pc}
  401b0e:	bf00      	nop
  401b10:	00401a81 	.word	0x00401a81

00401b14 <sysclk_get_cpu_hz>:
{
  401b14:	b580      	push	{r7, lr}
  401b16:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401b18:	4b02      	ldr	r3, [pc, #8]	; (401b24 <sysclk_get_cpu_hz+0x10>)
  401b1a:	4798      	blx	r3
  401b1c:	4603      	mov	r3, r0
}
  401b1e:	4618      	mov	r0, r3
  401b20:	bd80      	pop	{r7, pc}
  401b22:	bf00      	nop
  401b24:	00401af5 	.word	0x00401af5

00401b28 <sysclk_get_peripheral_hz>:
{
  401b28:	b580      	push	{r7, lr}
  401b2a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401b2c:	4b02      	ldr	r3, [pc, #8]	; (401b38 <sysclk_get_peripheral_hz+0x10>)
  401b2e:	4798      	blx	r3
  401b30:	4603      	mov	r3, r0
  401b32:	085b      	lsrs	r3, r3, #1
}
  401b34:	4618      	mov	r0, r3
  401b36:	bd80      	pop	{r7, pc}
  401b38:	00401af5 	.word	0x00401af5

00401b3c <sysclk_enable_peripheral_clock>:
{
  401b3c:	b580      	push	{r7, lr}
  401b3e:	b082      	sub	sp, #8
  401b40:	af00      	add	r7, sp, #0
  401b42:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401b44:	6878      	ldr	r0, [r7, #4]
  401b46:	4b03      	ldr	r3, [pc, #12]	; (401b54 <sysclk_enable_peripheral_clock+0x18>)
  401b48:	4798      	blx	r3
}
  401b4a:	bf00      	nop
  401b4c:	3708      	adds	r7, #8
  401b4e:	46bd      	mov	sp, r7
  401b50:	bd80      	pop	{r7, pc}
  401b52:	bf00      	nop
  401b54:	004010b1 	.word	0x004010b1

00401b58 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401b58:	b580      	push	{r7, lr}
  401b5a:	b082      	sub	sp, #8
  401b5c:	af00      	add	r7, sp, #0
  401b5e:	6078      	str	r0, [r7, #4]
  401b60:	460b      	mov	r3, r1
  401b62:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401b64:	687b      	ldr	r3, [r7, #4]
  401b66:	4a36      	ldr	r2, [pc, #216]	; (401c40 <usart_serial_putchar+0xe8>)
  401b68:	4293      	cmp	r3, r2
  401b6a:	d10a      	bne.n	401b82 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401b6c:	bf00      	nop
  401b6e:	78fb      	ldrb	r3, [r7, #3]
  401b70:	4619      	mov	r1, r3
  401b72:	6878      	ldr	r0, [r7, #4]
  401b74:	4b33      	ldr	r3, [pc, #204]	; (401c44 <usart_serial_putchar+0xec>)
  401b76:	4798      	blx	r3
  401b78:	4603      	mov	r3, r0
  401b7a:	2b00      	cmp	r3, #0
  401b7c:	d1f7      	bne.n	401b6e <usart_serial_putchar+0x16>
		return 1;
  401b7e:	2301      	movs	r3, #1
  401b80:	e05a      	b.n	401c38 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401b82:	687b      	ldr	r3, [r7, #4]
  401b84:	4a30      	ldr	r2, [pc, #192]	; (401c48 <usart_serial_putchar+0xf0>)
  401b86:	4293      	cmp	r3, r2
  401b88:	d10a      	bne.n	401ba0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401b8a:	bf00      	nop
  401b8c:	78fb      	ldrb	r3, [r7, #3]
  401b8e:	4619      	mov	r1, r3
  401b90:	6878      	ldr	r0, [r7, #4]
  401b92:	4b2c      	ldr	r3, [pc, #176]	; (401c44 <usart_serial_putchar+0xec>)
  401b94:	4798      	blx	r3
  401b96:	4603      	mov	r3, r0
  401b98:	2b00      	cmp	r3, #0
  401b9a:	d1f7      	bne.n	401b8c <usart_serial_putchar+0x34>
		return 1;
  401b9c:	2301      	movs	r3, #1
  401b9e:	e04b      	b.n	401c38 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401ba0:	687b      	ldr	r3, [r7, #4]
  401ba2:	4a2a      	ldr	r2, [pc, #168]	; (401c4c <usart_serial_putchar+0xf4>)
  401ba4:	4293      	cmp	r3, r2
  401ba6:	d10a      	bne.n	401bbe <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401ba8:	bf00      	nop
  401baa:	78fb      	ldrb	r3, [r7, #3]
  401bac:	4619      	mov	r1, r3
  401bae:	6878      	ldr	r0, [r7, #4]
  401bb0:	4b24      	ldr	r3, [pc, #144]	; (401c44 <usart_serial_putchar+0xec>)
  401bb2:	4798      	blx	r3
  401bb4:	4603      	mov	r3, r0
  401bb6:	2b00      	cmp	r3, #0
  401bb8:	d1f7      	bne.n	401baa <usart_serial_putchar+0x52>
		return 1;
  401bba:	2301      	movs	r3, #1
  401bbc:	e03c      	b.n	401c38 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401bbe:	687b      	ldr	r3, [r7, #4]
  401bc0:	4a23      	ldr	r2, [pc, #140]	; (401c50 <usart_serial_putchar+0xf8>)
  401bc2:	4293      	cmp	r3, r2
  401bc4:	d10a      	bne.n	401bdc <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401bc6:	bf00      	nop
  401bc8:	78fb      	ldrb	r3, [r7, #3]
  401bca:	4619      	mov	r1, r3
  401bcc:	6878      	ldr	r0, [r7, #4]
  401bce:	4b1d      	ldr	r3, [pc, #116]	; (401c44 <usart_serial_putchar+0xec>)
  401bd0:	4798      	blx	r3
  401bd2:	4603      	mov	r3, r0
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d1f7      	bne.n	401bc8 <usart_serial_putchar+0x70>
		return 1;
  401bd8:	2301      	movs	r3, #1
  401bda:	e02d      	b.n	401c38 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401bdc:	687b      	ldr	r3, [r7, #4]
  401bde:	4a1d      	ldr	r2, [pc, #116]	; (401c54 <usart_serial_putchar+0xfc>)
  401be0:	4293      	cmp	r3, r2
  401be2:	d10a      	bne.n	401bfa <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401be4:	bf00      	nop
  401be6:	78fb      	ldrb	r3, [r7, #3]
  401be8:	4619      	mov	r1, r3
  401bea:	6878      	ldr	r0, [r7, #4]
  401bec:	4b1a      	ldr	r3, [pc, #104]	; (401c58 <usart_serial_putchar+0x100>)
  401bee:	4798      	blx	r3
  401bf0:	4603      	mov	r3, r0
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	d1f7      	bne.n	401be6 <usart_serial_putchar+0x8e>
		return 1;
  401bf6:	2301      	movs	r3, #1
  401bf8:	e01e      	b.n	401c38 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401bfa:	687b      	ldr	r3, [r7, #4]
  401bfc:	4a17      	ldr	r2, [pc, #92]	; (401c5c <usart_serial_putchar+0x104>)
  401bfe:	4293      	cmp	r3, r2
  401c00:	d10a      	bne.n	401c18 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401c02:	bf00      	nop
  401c04:	78fb      	ldrb	r3, [r7, #3]
  401c06:	4619      	mov	r1, r3
  401c08:	6878      	ldr	r0, [r7, #4]
  401c0a:	4b13      	ldr	r3, [pc, #76]	; (401c58 <usart_serial_putchar+0x100>)
  401c0c:	4798      	blx	r3
  401c0e:	4603      	mov	r3, r0
  401c10:	2b00      	cmp	r3, #0
  401c12:	d1f7      	bne.n	401c04 <usart_serial_putchar+0xac>
		return 1;
  401c14:	2301      	movs	r3, #1
  401c16:	e00f      	b.n	401c38 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401c18:	687b      	ldr	r3, [r7, #4]
  401c1a:	4a11      	ldr	r2, [pc, #68]	; (401c60 <usart_serial_putchar+0x108>)
  401c1c:	4293      	cmp	r3, r2
  401c1e:	d10a      	bne.n	401c36 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401c20:	bf00      	nop
  401c22:	78fb      	ldrb	r3, [r7, #3]
  401c24:	4619      	mov	r1, r3
  401c26:	6878      	ldr	r0, [r7, #4]
  401c28:	4b0b      	ldr	r3, [pc, #44]	; (401c58 <usart_serial_putchar+0x100>)
  401c2a:	4798      	blx	r3
  401c2c:	4603      	mov	r3, r0
  401c2e:	2b00      	cmp	r3, #0
  401c30:	d1f7      	bne.n	401c22 <usart_serial_putchar+0xca>
		return 1;
  401c32:	2301      	movs	r3, #1
  401c34:	e000      	b.n	401c38 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401c36:	2300      	movs	r3, #0
}
  401c38:	4618      	mov	r0, r3
  401c3a:	3708      	adds	r7, #8
  401c3c:	46bd      	mov	sp, r7
  401c3e:	bd80      	pop	{r7, pc}
  401c40:	400e0800 	.word	0x400e0800
  401c44:	00401393 	.word	0x00401393
  401c48:	400e0a00 	.word	0x400e0a00
  401c4c:	400e1a00 	.word	0x400e1a00
  401c50:	400e1c00 	.word	0x400e1c00
  401c54:	40024000 	.word	0x40024000
  401c58:	0040162d 	.word	0x0040162d
  401c5c:	40028000 	.word	0x40028000
  401c60:	4002c000 	.word	0x4002c000

00401c64 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401c64:	b580      	push	{r7, lr}
  401c66:	b084      	sub	sp, #16
  401c68:	af00      	add	r7, sp, #0
  401c6a:	6078      	str	r0, [r7, #4]
  401c6c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401c6e:	2300      	movs	r3, #0
  401c70:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c72:	687b      	ldr	r3, [r7, #4]
  401c74:	4a34      	ldr	r2, [pc, #208]	; (401d48 <usart_serial_getchar+0xe4>)
  401c76:	4293      	cmp	r3, r2
  401c78:	d107      	bne.n	401c8a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401c7a:	bf00      	nop
  401c7c:	6839      	ldr	r1, [r7, #0]
  401c7e:	6878      	ldr	r0, [r7, #4]
  401c80:	4b32      	ldr	r3, [pc, #200]	; (401d4c <usart_serial_getchar+0xe8>)
  401c82:	4798      	blx	r3
  401c84:	4603      	mov	r3, r0
  401c86:	2b00      	cmp	r3, #0
  401c88:	d1f8      	bne.n	401c7c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c8a:	687b      	ldr	r3, [r7, #4]
  401c8c:	4a30      	ldr	r2, [pc, #192]	; (401d50 <usart_serial_getchar+0xec>)
  401c8e:	4293      	cmp	r3, r2
  401c90:	d107      	bne.n	401ca2 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401c92:	bf00      	nop
  401c94:	6839      	ldr	r1, [r7, #0]
  401c96:	6878      	ldr	r0, [r7, #4]
  401c98:	4b2c      	ldr	r3, [pc, #176]	; (401d4c <usart_serial_getchar+0xe8>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b00      	cmp	r3, #0
  401ca0:	d1f8      	bne.n	401c94 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401ca2:	687b      	ldr	r3, [r7, #4]
  401ca4:	4a2b      	ldr	r2, [pc, #172]	; (401d54 <usart_serial_getchar+0xf0>)
  401ca6:	4293      	cmp	r3, r2
  401ca8:	d107      	bne.n	401cba <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401caa:	bf00      	nop
  401cac:	6839      	ldr	r1, [r7, #0]
  401cae:	6878      	ldr	r0, [r7, #4]
  401cb0:	4b26      	ldr	r3, [pc, #152]	; (401d4c <usart_serial_getchar+0xe8>)
  401cb2:	4798      	blx	r3
  401cb4:	4603      	mov	r3, r0
  401cb6:	2b00      	cmp	r3, #0
  401cb8:	d1f8      	bne.n	401cac <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401cba:	687b      	ldr	r3, [r7, #4]
  401cbc:	4a26      	ldr	r2, [pc, #152]	; (401d58 <usart_serial_getchar+0xf4>)
  401cbe:	4293      	cmp	r3, r2
  401cc0:	d107      	bne.n	401cd2 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401cc2:	bf00      	nop
  401cc4:	6839      	ldr	r1, [r7, #0]
  401cc6:	6878      	ldr	r0, [r7, #4]
  401cc8:	4b20      	ldr	r3, [pc, #128]	; (401d4c <usart_serial_getchar+0xe8>)
  401cca:	4798      	blx	r3
  401ccc:	4603      	mov	r3, r0
  401cce:	2b00      	cmp	r3, #0
  401cd0:	d1f8      	bne.n	401cc4 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401cd2:	687b      	ldr	r3, [r7, #4]
  401cd4:	4a21      	ldr	r2, [pc, #132]	; (401d5c <usart_serial_getchar+0xf8>)
  401cd6:	4293      	cmp	r3, r2
  401cd8:	d10d      	bne.n	401cf6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401cda:	bf00      	nop
  401cdc:	f107 030c 	add.w	r3, r7, #12
  401ce0:	4619      	mov	r1, r3
  401ce2:	6878      	ldr	r0, [r7, #4]
  401ce4:	4b1e      	ldr	r3, [pc, #120]	; (401d60 <usart_serial_getchar+0xfc>)
  401ce6:	4798      	blx	r3
  401ce8:	4603      	mov	r3, r0
  401cea:	2b00      	cmp	r3, #0
  401cec:	d1f6      	bne.n	401cdc <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401cee:	68fb      	ldr	r3, [r7, #12]
  401cf0:	b2da      	uxtb	r2, r3
  401cf2:	683b      	ldr	r3, [r7, #0]
  401cf4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401cf6:	687b      	ldr	r3, [r7, #4]
  401cf8:	4a1a      	ldr	r2, [pc, #104]	; (401d64 <usart_serial_getchar+0x100>)
  401cfa:	4293      	cmp	r3, r2
  401cfc:	d10d      	bne.n	401d1a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401cfe:	bf00      	nop
  401d00:	f107 030c 	add.w	r3, r7, #12
  401d04:	4619      	mov	r1, r3
  401d06:	6878      	ldr	r0, [r7, #4]
  401d08:	4b15      	ldr	r3, [pc, #84]	; (401d60 <usart_serial_getchar+0xfc>)
  401d0a:	4798      	blx	r3
  401d0c:	4603      	mov	r3, r0
  401d0e:	2b00      	cmp	r3, #0
  401d10:	d1f6      	bne.n	401d00 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401d12:	68fb      	ldr	r3, [r7, #12]
  401d14:	b2da      	uxtb	r2, r3
  401d16:	683b      	ldr	r3, [r7, #0]
  401d18:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401d1a:	687b      	ldr	r3, [r7, #4]
  401d1c:	4a12      	ldr	r2, [pc, #72]	; (401d68 <usart_serial_getchar+0x104>)
  401d1e:	4293      	cmp	r3, r2
  401d20:	d10d      	bne.n	401d3e <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401d22:	bf00      	nop
  401d24:	f107 030c 	add.w	r3, r7, #12
  401d28:	4619      	mov	r1, r3
  401d2a:	6878      	ldr	r0, [r7, #4]
  401d2c:	4b0c      	ldr	r3, [pc, #48]	; (401d60 <usart_serial_getchar+0xfc>)
  401d2e:	4798      	blx	r3
  401d30:	4603      	mov	r3, r0
  401d32:	2b00      	cmp	r3, #0
  401d34:	d1f6      	bne.n	401d24 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401d36:	68fb      	ldr	r3, [r7, #12]
  401d38:	b2da      	uxtb	r2, r3
  401d3a:	683b      	ldr	r3, [r7, #0]
  401d3c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401d3e:	bf00      	nop
  401d40:	3710      	adds	r7, #16
  401d42:	46bd      	mov	sp, r7
  401d44:	bd80      	pop	{r7, pc}
  401d46:	bf00      	nop
  401d48:	400e0800 	.word	0x400e0800
  401d4c:	004013c3 	.word	0x004013c3
  401d50:	400e0a00 	.word	0x400e0a00
  401d54:	400e1a00 	.word	0x400e1a00
  401d58:	400e1c00 	.word	0x400e1c00
  401d5c:	40024000 	.word	0x40024000
  401d60:	0040165f 	.word	0x0040165f
  401d64:	40028000 	.word	0x40028000
  401d68:	4002c000 	.word	0x4002c000

00401d6c <display_menu>:
uint32_t usart_puts(uint8_t *pstring);
uint32_t usart_gets(uint8_t *pstring);
// END PROTOTYPES

// FUNCTIONS
void display_menu() {
  401d6c:	b580      	push	{r7, lr}
  401d6e:	af00      	add	r7, sp, #0
	usart_puts("Menu --------------------\n");
  401d70:	480b      	ldr	r0, [pc, #44]	; (401da0 <display_menu+0x34>)
  401d72:	4b0c      	ldr	r3, [pc, #48]	; (401da4 <display_menu+0x38>)
  401d74:	4798      	blx	r3
	usart_puts("[1] Turn On/Off\n");
  401d76:	480c      	ldr	r0, [pc, #48]	; (401da8 <display_menu+0x3c>)
  401d78:	4b0a      	ldr	r3, [pc, #40]	; (401da4 <display_menu+0x38>)
  401d7a:	4798      	blx	r3
	usart_puts("[2] Increase LED frequency\n");
  401d7c:	480b      	ldr	r0, [pc, #44]	; (401dac <display_menu+0x40>)
  401d7e:	4b09      	ldr	r3, [pc, #36]	; (401da4 <display_menu+0x38>)
  401d80:	4798      	blx	r3
	usart_puts("[3] Decrease LED frequency\n");
  401d82:	480b      	ldr	r0, [pc, #44]	; (401db0 <display_menu+0x44>)
  401d84:	4b07      	ldr	r3, [pc, #28]	; (401da4 <display_menu+0x38>)
  401d86:	4798      	blx	r3
	usart_puts("[4] Set LED frequency\n");
  401d88:	480a      	ldr	r0, [pc, #40]	; (401db4 <display_menu+0x48>)
  401d8a:	4b06      	ldr	r3, [pc, #24]	; (401da4 <display_menu+0x38>)
  401d8c:	4798      	blx	r3
	usart_puts("[5] Time\n");
  401d8e:	480a      	ldr	r0, [pc, #40]	; (401db8 <display_menu+0x4c>)
  401d90:	4b04      	ldr	r3, [pc, #16]	; (401da4 <display_menu+0x38>)
  401d92:	4798      	blx	r3
	usart_puts("[h] Show this menu\n");
  401d94:	4809      	ldr	r0, [pc, #36]	; (401dbc <display_menu+0x50>)
  401d96:	4b03      	ldr	r3, [pc, #12]	; (401da4 <display_menu+0x38>)
  401d98:	4798      	blx	r3
}
  401d9a:	bf00      	nop
  401d9c:	bd80      	pop	{r7, pc}
  401d9e:	bf00      	nop
  401da0:	00406c28 	.word	0x00406c28
  401da4:	00402049 	.word	0x00402049
  401da8:	00406c44 	.word	0x00406c44
  401dac:	00406c58 	.word	0x00406c58
  401db0:	00406c74 	.word	0x00406c74
  401db4:	00406c90 	.word	0x00406c90
  401db8:	00406ca8 	.word	0x00406ca8
  401dbc:	00406cb4 	.word	0x00406cb4

00401dc0 <pin_toggle>:

void pin_toggle(Pio *pio, uint32_t mask){
  401dc0:	b580      	push	{r7, lr}
  401dc2:	b082      	sub	sp, #8
  401dc4:	af00      	add	r7, sp, #0
  401dc6:	6078      	str	r0, [r7, #4]
  401dc8:	6039      	str	r1, [r7, #0]
	if(pio_get_output_data_status(pio, mask))
  401dca:	6839      	ldr	r1, [r7, #0]
  401dcc:	6878      	ldr	r0, [r7, #4]
  401dce:	4b09      	ldr	r3, [pc, #36]	; (401df4 <pin_toggle+0x34>)
  401dd0:	4798      	blx	r3
  401dd2:	4603      	mov	r3, r0
  401dd4:	2b00      	cmp	r3, #0
  401dd6:	d004      	beq.n	401de2 <pin_toggle+0x22>
		pio_clear(pio, mask);
  401dd8:	6839      	ldr	r1, [r7, #0]
  401dda:	6878      	ldr	r0, [r7, #4]
  401ddc:	4b06      	ldr	r3, [pc, #24]	; (401df8 <pin_toggle+0x38>)
  401dde:	4798      	blx	r3
	else
		pio_set(pio,mask);
}
  401de0:	e003      	b.n	401dea <pin_toggle+0x2a>
		pio_set(pio,mask);
  401de2:	6839      	ldr	r1, [r7, #0]
  401de4:	6878      	ldr	r0, [r7, #4]
  401de6:	4b05      	ldr	r3, [pc, #20]	; (401dfc <pin_toggle+0x3c>)
  401de8:	4798      	blx	r3
}
  401dea:	bf00      	nop
  401dec:	3708      	adds	r7, #8
  401dee:	46bd      	mov	sp, r7
  401df0:	bd80      	pop	{r7, pc}
  401df2:	bf00      	nop
  401df4:	00400c4d 	.word	0x00400c4d
  401df8:	00400abd 	.word	0x00400abd
  401dfc:	00400aa1 	.word	0x00400aa1

00401e00 <LED_init>:

	/* Configura data e hora manualmente */
	rtc_set_time(RTC, RTC_HOUR, RTC_MINUTE, RTC_SECOND);
}

void LED_init(int state) {
  401e00:	b590      	push	{r4, r7, lr}
  401e02:	b085      	sub	sp, #20
  401e04:	af02      	add	r7, sp, #8
  401e06:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(LED_PIO_ID);
  401e08:	200c      	movs	r0, #12
  401e0a:	4b07      	ldr	r3, [pc, #28]	; (401e28 <LED_init+0x28>)
  401e0c:	4798      	blx	r3
	pio_set_output(LED_PIO, LED_PIN_MASK, state, 0, 0);
  401e0e:	687a      	ldr	r2, [r7, #4]
  401e10:	2300      	movs	r3, #0
  401e12:	9300      	str	r3, [sp, #0]
  401e14:	2300      	movs	r3, #0
  401e16:	f44f 7180 	mov.w	r1, #256	; 0x100
  401e1a:	4804      	ldr	r0, [pc, #16]	; (401e2c <LED_init+0x2c>)
  401e1c:	4c04      	ldr	r4, [pc, #16]	; (401e30 <LED_init+0x30>)
  401e1e:	47a0      	blx	r4
};
  401e20:	bf00      	nop
  401e22:	370c      	adds	r7, #12
  401e24:	46bd      	mov	sp, r7
  401e26:	bd90      	pop	{r4, r7, pc}
  401e28:	004010b1 	.word	0x004010b1
  401e2c:	400e1200 	.word	0x400e1200
  401e30:	00400be9 	.word	0x00400be9

00401e34 <USART1_init>:

static void USART1_init(void) {
  401e34:	b580      	push	{r7, lr}
  401e36:	b086      	sub	sp, #24
  401e38:	af00      	add	r7, sp, #0
	/* Configura USART1 Pinos */
	sysclk_enable_peripheral_clock(ID_PIOB);
  401e3a:	200b      	movs	r0, #11
  401e3c:	4b22      	ldr	r3, [pc, #136]	; (401ec8 <USART1_init+0x94>)
  401e3e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOA);
  401e40:	200a      	movs	r0, #10
  401e42:	4b21      	ldr	r3, [pc, #132]	; (401ec8 <USART1_init+0x94>)
  401e44:	4798      	blx	r3
	pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  401e46:	2210      	movs	r2, #16
  401e48:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401e4c:	481f      	ldr	r0, [pc, #124]	; (401ecc <USART1_init+0x98>)
  401e4e:	4b20      	ldr	r3, [pc, #128]	; (401ed0 <USART1_init+0x9c>)
  401e50:	4798      	blx	r3
	pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  401e52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401e56:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e5a:	481e      	ldr	r0, [pc, #120]	; (401ed4 <USART1_init+0xa0>)
  401e5c:	4b1c      	ldr	r3, [pc, #112]	; (401ed0 <USART1_init+0x9c>)
  401e5e:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401e60:	4a1d      	ldr	r2, [pc, #116]	; (401ed8 <USART1_init+0xa4>)
  401e62:	4b1d      	ldr	r3, [pc, #116]	; (401ed8 <USART1_init+0xa4>)
  401e64:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  401e68:	f043 0310 	orr.w	r3, r3, #16
  401e6c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	/* Configura opcoes USART */
	const sam_usart_opt_t usart_settings = {
  401e70:	463b      	mov	r3, r7
  401e72:	2200      	movs	r2, #0
  401e74:	601a      	str	r2, [r3, #0]
  401e76:	605a      	str	r2, [r3, #4]
  401e78:	609a      	str	r2, [r3, #8]
  401e7a:	60da      	str	r2, [r3, #12]
  401e7c:	611a      	str	r2, [r3, #16]
  401e7e:	615a      	str	r2, [r3, #20]
  401e80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401e84:	603b      	str	r3, [r7, #0]
  401e86:	23c0      	movs	r3, #192	; 0xc0
  401e88:	607b      	str	r3, [r7, #4]
  401e8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401e8e:	60bb      	str	r3, [r7, #8]
	.stop_bits    = US_MR_NBSTOP_1_BIT    ,
	.channel_mode = US_MR_CHMODE_NORMAL
	};

	/* Ativa Clock periferico USART0 */
	sysclk_enable_peripheral_clock(USART_COM_ID);
  401e90:	200e      	movs	r0, #14
  401e92:	4b0d      	ldr	r3, [pc, #52]	; (401ec8 <USART1_init+0x94>)
  401e94:	4798      	blx	r3

	/* Configura USART para operar em modo RS232 */
	usart_init_rs232(USART_COM, &usart_settings, sysclk_get_peripheral_hz());
  401e96:	4b11      	ldr	r3, [pc, #68]	; (401edc <USART1_init+0xa8>)
  401e98:	4798      	blx	r3
  401e9a:	4602      	mov	r2, r0
  401e9c:	463b      	mov	r3, r7
  401e9e:	4619      	mov	r1, r3
  401ea0:	480f      	ldr	r0, [pc, #60]	; (401ee0 <USART1_init+0xac>)
  401ea2:	4b10      	ldr	r3, [pc, #64]	; (401ee4 <USART1_init+0xb0>)
  401ea4:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(USART_COM);
  401ea6:	480e      	ldr	r0, [pc, #56]	; (401ee0 <USART1_init+0xac>)
  401ea8:	4b0f      	ldr	r3, [pc, #60]	; (401ee8 <USART1_init+0xb4>)
  401eaa:	4798      	blx	r3
	usart_enable_rx(USART_COM);
  401eac:	480c      	ldr	r0, [pc, #48]	; (401ee0 <USART1_init+0xac>)
  401eae:	4b0f      	ldr	r3, [pc, #60]	; (401eec <USART1_init+0xb8>)
  401eb0:	4798      	blx	r3
	
	usart_enable_interrupt(USART_COM, US_IER_RXRDY);
  401eb2:	2101      	movs	r1, #1
  401eb4:	480a      	ldr	r0, [pc, #40]	; (401ee0 <USART1_init+0xac>)
  401eb6:	4b0e      	ldr	r3, [pc, #56]	; (401ef0 <USART1_init+0xbc>)
  401eb8:	4798      	blx	r3
	NVIC_EnableIRQ(USART_COM_ID);
  401eba:	200e      	movs	r0, #14
  401ebc:	4b0d      	ldr	r3, [pc, #52]	; (401ef4 <USART1_init+0xc0>)
  401ebe:	4798      	blx	r3
}
  401ec0:	bf00      	nop
  401ec2:	3718      	adds	r7, #24
  401ec4:	46bd      	mov	sp, r7
  401ec6:	bd80      	pop	{r7, pc}
  401ec8:	00401b3d 	.word	0x00401b3d
  401ecc:	400e1000 	.word	0x400e1000
  401ed0:	00400ad9 	.word	0x00400ad9
  401ed4:	400e0e00 	.word	0x400e0e00
  401ed8:	40088000 	.word	0x40088000
  401edc:	00401b29 	.word	0x00401b29
  401ee0:	40028000 	.word	0x40028000
  401ee4:	004014d5 	.word	0x004014d5
  401ee8:	00401559 	.word	0x00401559
  401eec:	0040158d 	.word	0x0040158d
  401ef0:	004015c1 	.word	0x004015c1
  401ef4:	00401a4d 	.word	0x00401a4d

00401ef8 <TC1_init>:

static void TC1_init(uint32_t frequency) {
  401ef8:	b590      	push	{r4, r7, lr}
  401efa:	b089      	sub	sp, #36	; 0x24
  401efc:	af02      	add	r7, sp, #8
  401efe:	6078      	str	r0, [r7, #4]
	uint32_t ul_div, ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  401f00:	4b1a      	ldr	r3, [pc, #104]	; (401f6c <TC1_init+0x74>)
  401f02:	4798      	blx	r3
  401f04:	6178      	str	r0, [r7, #20]

	pmc_enable_periph_clk(ID_TC1);
  401f06:	2018      	movs	r0, #24
  401f08:	4b19      	ldr	r3, [pc, #100]	; (401f70 <TC1_init+0x78>)
  401f0a:	4798      	blx	r3

	// Configura o TC para operar em 1S e interrupcao no RC compare
	tc_find_mck_divisor(frequency, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401f0c:	f107 010c 	add.w	r1, r7, #12
  401f10:	f107 0210 	add.w	r2, r7, #16
  401f14:	697b      	ldr	r3, [r7, #20]
  401f16:	9300      	str	r3, [sp, #0]
  401f18:	460b      	mov	r3, r1
  401f1a:	6979      	ldr	r1, [r7, #20]
  401f1c:	6878      	ldr	r0, [r7, #4]
  401f1e:	4c15      	ldr	r4, [pc, #84]	; (401f74 <TC1_init+0x7c>)
  401f20:	47a0      	blx	r4
	tc_init(TC0, 1, ul_tcclks | TC_CMR_CPCTRG);
  401f22:	68fb      	ldr	r3, [r7, #12]
  401f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  401f28:	461a      	mov	r2, r3
  401f2a:	2101      	movs	r1, #1
  401f2c:	4812      	ldr	r0, [pc, #72]	; (401f78 <TC1_init+0x80>)
  401f2e:	4b13      	ldr	r3, [pc, #76]	; (401f7c <TC1_init+0x84>)
  401f30:	4798      	blx	r3
	tc_write_rc(TC0, 1, (ul_sysclk / ul_div) / frequency);
  401f32:	693b      	ldr	r3, [r7, #16]
  401f34:	697a      	ldr	r2, [r7, #20]
  401f36:	fbb2 f2f3 	udiv	r2, r2, r3
  401f3a:	687b      	ldr	r3, [r7, #4]
  401f3c:	fbb2 f3f3 	udiv	r3, r2, r3
  401f40:	461a      	mov	r2, r3
  401f42:	2101      	movs	r1, #1
  401f44:	480c      	ldr	r0, [pc, #48]	; (401f78 <TC1_init+0x80>)
  401f46:	4b0e      	ldr	r3, [pc, #56]	; (401f80 <TC1_init+0x88>)
  401f48:	4798      	blx	r3

	NVIC_EnableIRQ((IRQn_Type) ID_TC1);
  401f4a:	2018      	movs	r0, #24
  401f4c:	4b0d      	ldr	r3, [pc, #52]	; (401f84 <TC1_init+0x8c>)
  401f4e:	4798      	blx	r3
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  401f50:	2210      	movs	r2, #16
  401f52:	2101      	movs	r1, #1
  401f54:	4808      	ldr	r0, [pc, #32]	; (401f78 <TC1_init+0x80>)
  401f56:	4b0c      	ldr	r3, [pc, #48]	; (401f88 <TC1_init+0x90>)
  401f58:	4798      	blx	r3

	tc_start(TC0, 1);
  401f5a:	2101      	movs	r1, #1
  401f5c:	4806      	ldr	r0, [pc, #24]	; (401f78 <TC1_init+0x80>)
  401f5e:	4b0b      	ldr	r3, [pc, #44]	; (401f8c <TC1_init+0x94>)
  401f60:	4798      	blx	r3
}
  401f62:	bf00      	nop
  401f64:	371c      	adds	r7, #28
  401f66:	46bd      	mov	sp, r7
  401f68:	bd90      	pop	{r4, r7, pc}
  401f6a:	bf00      	nop
  401f6c:	00401b15 	.word	0x00401b15
  401f70:	004010b1 	.word	0x004010b1
  401f74:	004012c7 	.word	0x004012c7
  401f78:	4000c000 	.word	0x4000c000
  401f7c:	004011f9 	.word	0x004011f9
  401f80:	00401255 	.word	0x00401255
  401f84:	00401a4d 	.word	0x00401a4d
  401f88:	0040127b 	.word	0x0040127b
  401f8c:	00401233 	.word	0x00401233

00401f90 <TC1_Handler>:
// END FUNCTIONS

// HANDLERS
void TC1_Handler(void) {
  401f90:	b580      	push	{r7, lr}
  401f92:	b082      	sub	sp, #8
  401f94:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;
	ul_dummy = tc_get_status(TC0, 1);
  401f96:	2101      	movs	r1, #1
  401f98:	4809      	ldr	r0, [pc, #36]	; (401fc0 <TC1_Handler+0x30>)
  401f9a:	4b0a      	ldr	r3, [pc, #40]	; (401fc4 <TC1_Handler+0x34>)
  401f9c:	4798      	blx	r3
  401f9e:	4603      	mov	r3, r0
  401fa0:	607b      	str	r3, [r7, #4]
	UNUSED(ul_dummy);
  401fa2:	687b      	ldr	r3, [r7, #4]
	
	if (led_blink)
  401fa4:	4b08      	ldr	r3, [pc, #32]	; (401fc8 <TC1_Handler+0x38>)
  401fa6:	681b      	ldr	r3, [r3, #0]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d004      	beq.n	401fb6 <TC1_Handler+0x26>
		pin_toggle(LED_PIO, LED_PIN_MASK);
  401fac:	f44f 7180 	mov.w	r1, #256	; 0x100
  401fb0:	4806      	ldr	r0, [pc, #24]	; (401fcc <TC1_Handler+0x3c>)
  401fb2:	4b07      	ldr	r3, [pc, #28]	; (401fd0 <TC1_Handler+0x40>)
  401fb4:	4798      	blx	r3
}
  401fb6:	bf00      	nop
  401fb8:	3708      	adds	r7, #8
  401fba:	46bd      	mov	sp, r7
  401fbc:	bd80      	pop	{r7, pc}
  401fbe:	bf00      	nop
  401fc0:	4000c000 	.word	0x4000c000
  401fc4:	004012a3 	.word	0x004012a3
  401fc8:	20400a50 	.word	0x20400a50
  401fcc:	400e1200 	.word	0x400e1200
  401fd0:	00401dc1 	.word	0x00401dc1

00401fd4 <USART1_Handler>:

void USART1_Handler(void) {
  401fd4:	b580      	push	{r7, lr}
  401fd6:	b082      	sub	sp, #8
  401fd8:	af00      	add	r7, sp, #0
	uint32_t ret = usart_get_status(USART_COM);
  401fda:	4815      	ldr	r0, [pc, #84]	; (402030 <USART1_Handler+0x5c>)
  401fdc:	4b15      	ldr	r3, [pc, #84]	; (402034 <USART1_Handler+0x60>)
  401fde:	4798      	blx	r3
  401fe0:	6078      	str	r0, [r7, #4]
	uint8_t c = NULL;
  401fe2:	2300      	movs	r3, #0
  401fe4:	70fb      	strb	r3, [r7, #3]
	
	if(ret & US_IER_RXRDY) {
  401fe6:	687b      	ldr	r3, [r7, #4]
  401fe8:	f003 0301 	and.w	r3, r3, #1
  401fec:	2b00      	cmp	r3, #0
  401fee:	d01b      	beq.n	402028 <USART1_Handler+0x54>
		usart_serial_getchar(USART_COM, &c);
  401ff0:	1cfb      	adds	r3, r7, #3
  401ff2:	4619      	mov	r1, r3
  401ff4:	480e      	ldr	r0, [pc, #56]	; (402030 <USART1_Handler+0x5c>)
  401ff6:	4b10      	ldr	r3, [pc, #64]	; (402038 <USART1_Handler+0x64>)
  401ff8:	4798      	blx	r3
		if(c != '\n') {
  401ffa:	78fb      	ldrb	r3, [r7, #3]
  401ffc:	2b0a      	cmp	r3, #10
  401ffe:	d008      	beq.n	402012 <USART1_Handler+0x3e>
			bufferRX[count++] = c;
  402000:	4b0e      	ldr	r3, [pc, #56]	; (40203c <USART1_Handler+0x68>)
  402002:	681b      	ldr	r3, [r3, #0]
  402004:	1c5a      	adds	r2, r3, #1
  402006:	490d      	ldr	r1, [pc, #52]	; (40203c <USART1_Handler+0x68>)
  402008:	600a      	str	r2, [r1, #0]
  40200a:	78f9      	ldrb	r1, [r7, #3]
  40200c:	4a0c      	ldr	r2, [pc, #48]	; (402040 <USART1_Handler+0x6c>)
  40200e:	54d1      	strb	r1, [r2, r3]
			bufferRX[count] = 0x00;
			usart_transmission_done = 1;
			count = 0;
		}
	}
}
  402010:	e00a      	b.n	402028 <USART1_Handler+0x54>
			bufferRX[count] = 0x00;
  402012:	4b0a      	ldr	r3, [pc, #40]	; (40203c <USART1_Handler+0x68>)
  402014:	681b      	ldr	r3, [r3, #0]
  402016:	4a0a      	ldr	r2, [pc, #40]	; (402040 <USART1_Handler+0x6c>)
  402018:	2100      	movs	r1, #0
  40201a:	54d1      	strb	r1, [r2, r3]
			usart_transmission_done = 1;
  40201c:	4b09      	ldr	r3, [pc, #36]	; (402044 <USART1_Handler+0x70>)
  40201e:	2201      	movs	r2, #1
  402020:	601a      	str	r2, [r3, #0]
			count = 0;
  402022:	4b06      	ldr	r3, [pc, #24]	; (40203c <USART1_Handler+0x68>)
  402024:	2200      	movs	r2, #0
  402026:	601a      	str	r2, [r3, #0]
}
  402028:	bf00      	nop
  40202a:	3708      	adds	r7, #8
  40202c:	46bd      	mov	sp, r7
  40202e:	bd80      	pop	{r7, pc}
  402030:	40028000 	.word	0x40028000
  402034:	004015dd 	.word	0x004015dd
  402038:	00401c65 	.word	0x00401c65
  40203c:	20400a48 	.word	0x20400a48
  402040:	20400a88 	.word	0x20400a88
  402044:	20400a4c 	.word	0x20400a4c

00402048 <usart_puts>:

uint32_t usart_puts(uint8_t *pstring){
  402048:	b580      	push	{r7, lr}
  40204a:	b084      	sub	sp, #16
  40204c:	af00      	add	r7, sp, #0
  40204e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  402050:	2300      	movs	r3, #0
  402052:	60fb      	str	r3, [r7, #12]

  while(*(pstring + i)){
  402054:	e010      	b.n	402078 <usart_puts+0x30>
    usart_serial_putchar(USART_COM, *(pstring+i++));
  402056:	68fb      	ldr	r3, [r7, #12]
  402058:	1c5a      	adds	r2, r3, #1
  40205a:	60fa      	str	r2, [r7, #12]
  40205c:	687a      	ldr	r2, [r7, #4]
  40205e:	4413      	add	r3, r2
  402060:	781b      	ldrb	r3, [r3, #0]
  402062:	4619      	mov	r1, r3
  402064:	480a      	ldr	r0, [pc, #40]	; (402090 <usart_puts+0x48>)
  402066:	4b0b      	ldr	r3, [pc, #44]	; (402094 <usart_puts+0x4c>)
  402068:	4798      	blx	r3
    while(!uart_is_tx_empty(USART_COM)){};
  40206a:	bf00      	nop
  40206c:	4808      	ldr	r0, [pc, #32]	; (402090 <usart_puts+0x48>)
  40206e:	4b0a      	ldr	r3, [pc, #40]	; (402098 <usart_puts+0x50>)
  402070:	4798      	blx	r3
  402072:	4603      	mov	r3, r0
  402074:	2b00      	cmp	r3, #0
  402076:	d0f9      	beq.n	40206c <usart_puts+0x24>
  while(*(pstring + i)){
  402078:	687a      	ldr	r2, [r7, #4]
  40207a:	68fb      	ldr	r3, [r7, #12]
  40207c:	4413      	add	r3, r2
  40207e:	781b      	ldrb	r3, [r3, #0]
  402080:	2b00      	cmp	r3, #0
  402082:	d1e8      	bne.n	402056 <usart_puts+0xe>
  }
  return(i);
  402084:	68fb      	ldr	r3, [r7, #12]
}
  402086:	4618      	mov	r0, r3
  402088:	3710      	adds	r7, #16
  40208a:	46bd      	mov	sp, r7
  40208c:	bd80      	pop	{r7, pc}
  40208e:	bf00      	nop
  402090:	40028000 	.word	0x40028000
  402094:	00401b59 	.word	0x00401b59
  402098:	0040136d 	.word	0x0040136d

0040209c <main>:
}

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void) {
  40209c:	b590      	push	{r4, r7, lr}
  40209e:	b089      	sub	sp, #36	; 0x24
  4020a0:	af02      	add	r7, sp, #8
	
	board_init();
  4020a2:	4b3f      	ldr	r3, [pc, #252]	; (4021a0 <main+0x104>)
  4020a4:	4798      	blx	r3
	sysclk_init();
  4020a6:	4b3f      	ldr	r3, [pc, #252]	; (4021a4 <main+0x108>)
  4020a8:	4798      	blx	r3

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4020aa:	4b3f      	ldr	r3, [pc, #252]	; (4021a8 <main+0x10c>)
  4020ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4020b0:	605a      	str	r2, [r3, #4]

	/** Inicializa USART */
	USART1_init();
  4020b2:	4b3e      	ldr	r3, [pc, #248]	; (4021ac <main+0x110>)
  4020b4:	4798      	blx	r3
	TC1_init(10);
  4020b6:	200a      	movs	r0, #10
  4020b8:	4b3d      	ldr	r3, [pc, #244]	; (4021b0 <main+0x114>)
  4020ba:	4798      	blx	r3
	LED_init(0);
  4020bc:	2000      	movs	r0, #0
  4020be:	4b3d      	ldr	r3, [pc, #244]	; (4021b4 <main+0x118>)
  4020c0:	4798      	blx	r3
	display_menu();
  4020c2:	4b3d      	ldr	r3, [pc, #244]	; (4021b8 <main+0x11c>)
  4020c4:	4798      	blx	r3
	led_blink = 1;
  4020c6:	4b3d      	ldr	r3, [pc, #244]	; (4021bc <main+0x120>)
  4020c8:	2201      	movs	r2, #1
  4020ca:	601a      	str	r2, [r3, #0]
	uint32_t tc_frequency = 10;
  4020cc:	230a      	movs	r3, #10
  4020ce:	617b      	str	r3, [r7, #20]

	/** Super loop */
	while (1) {
		if(usart_transmission_done) {
  4020d0:	4b3b      	ldr	r3, [pc, #236]	; (4021c0 <main+0x124>)
  4020d2:	681b      	ldr	r3, [r3, #0]
  4020d4:	2b00      	cmp	r3, #0
  4020d6:	d0fb      	beq.n	4020d0 <main+0x34>
			if (bufferRX[0] == '1')
  4020d8:	4b3a      	ldr	r3, [pc, #232]	; (4021c4 <main+0x128>)
  4020da:	781b      	ldrb	r3, [r3, #0]
  4020dc:	2b31      	cmp	r3, #49	; 0x31
  4020de:	d10a      	bne.n	4020f6 <main+0x5a>
				led_blink = !led_blink;
  4020e0:	4b36      	ldr	r3, [pc, #216]	; (4021bc <main+0x120>)
  4020e2:	681b      	ldr	r3, [r3, #0]
  4020e4:	2b00      	cmp	r3, #0
  4020e6:	bf0c      	ite	eq
  4020e8:	2301      	moveq	r3, #1
  4020ea:	2300      	movne	r3, #0
  4020ec:	b2db      	uxtb	r3, r3
  4020ee:	461a      	mov	r2, r3
  4020f0:	4b32      	ldr	r3, [pc, #200]	; (4021bc <main+0x120>)
  4020f2:	601a      	str	r2, [r3, #0]
  4020f4:	e050      	b.n	402198 <main+0xfc>
			else if (bufferRX[0] == '2') {
  4020f6:	4b33      	ldr	r3, [pc, #204]	; (4021c4 <main+0x128>)
  4020f8:	781b      	ldrb	r3, [r3, #0]
  4020fa:	2b32      	cmp	r3, #50	; 0x32
  4020fc:	d106      	bne.n	40210c <main+0x70>
				tc_frequency += 2;
  4020fe:	697b      	ldr	r3, [r7, #20]
  402100:	3302      	adds	r3, #2
  402102:	617b      	str	r3, [r7, #20]
				TC1_init(tc_frequency);
  402104:	6978      	ldr	r0, [r7, #20]
  402106:	4b2a      	ldr	r3, [pc, #168]	; (4021b0 <main+0x114>)
  402108:	4798      	blx	r3
  40210a:	e045      	b.n	402198 <main+0xfc>
			}
			else if (bufferRX[0] == '3') {
  40210c:	4b2d      	ldr	r3, [pc, #180]	; (4021c4 <main+0x128>)
  40210e:	781b      	ldrb	r3, [r3, #0]
  402110:	2b33      	cmp	r3, #51	; 0x33
  402112:	d106      	bne.n	402122 <main+0x86>
				tc_frequency -= 2;
  402114:	697b      	ldr	r3, [r7, #20]
  402116:	3b02      	subs	r3, #2
  402118:	617b      	str	r3, [r7, #20]
				TC1_init(tc_frequency);
  40211a:	6978      	ldr	r0, [r7, #20]
  40211c:	4b24      	ldr	r3, [pc, #144]	; (4021b0 <main+0x114>)
  40211e:	4798      	blx	r3
  402120:	e03a      	b.n	402198 <main+0xfc>
			}
			else if (bufferRX[0] == '4') {
  402122:	4b28      	ldr	r3, [pc, #160]	; (4021c4 <main+0x128>)
  402124:	781b      	ldrb	r3, [r3, #0]
  402126:	2b34      	cmp	r3, #52	; 0x34
  402128:	d11b      	bne.n	402162 <main+0xc6>
				usart_puts("Enter the new frequency: ");
  40212a:	4827      	ldr	r0, [pc, #156]	; (4021c8 <main+0x12c>)
  40212c:	4b27      	ldr	r3, [pc, #156]	; (4021cc <main+0x130>)
  40212e:	4798      	blx	r3
				usart_transmission_done = 0;
  402130:	4b23      	ldr	r3, [pc, #140]	; (4021c0 <main+0x124>)
  402132:	2200      	movs	r2, #0
  402134:	601a      	str	r2, [r3, #0]
				while(!usart_transmission_done);
  402136:	bf00      	nop
  402138:	4b21      	ldr	r3, [pc, #132]	; (4021c0 <main+0x124>)
  40213a:	681b      	ldr	r3, [r3, #0]
  40213c:	2b00      	cmp	r3, #0
  40213e:	d0fb      	beq.n	402138 <main+0x9c>
				usart_puts(bufferRX);
  402140:	4820      	ldr	r0, [pc, #128]	; (4021c4 <main+0x128>)
  402142:	4b22      	ldr	r3, [pc, #136]	; (4021cc <main+0x130>)
  402144:	4798      	blx	r3
				usart_puts("\n");
  402146:	4822      	ldr	r0, [pc, #136]	; (4021d0 <main+0x134>)
  402148:	4b20      	ldr	r3, [pc, #128]	; (4021cc <main+0x130>)
  40214a:	4798      	blx	r3
				usart_transmission_done = 0;
  40214c:	4b1c      	ldr	r3, [pc, #112]	; (4021c0 <main+0x124>)
  40214e:	2200      	movs	r2, #0
  402150:	601a      	str	r2, [r3, #0]
				TC1_init(atoi(bufferRX));
  402152:	481c      	ldr	r0, [pc, #112]	; (4021c4 <main+0x128>)
  402154:	4b1f      	ldr	r3, [pc, #124]	; (4021d4 <main+0x138>)
  402156:	4798      	blx	r3
  402158:	4603      	mov	r3, r0
  40215a:	4618      	mov	r0, r3
  40215c:	4b14      	ldr	r3, [pc, #80]	; (4021b0 <main+0x114>)
  40215e:	4798      	blx	r3
  402160:	e01a      	b.n	402198 <main+0xfc>
			}
			else if (bufferRX[0] == '5') {
  402162:	4b18      	ldr	r3, [pc, #96]	; (4021c4 <main+0x128>)
  402164:	781b      	ldrb	r3, [r3, #0]
  402166:	2b35      	cmp	r3, #53	; 0x35
  402168:	d114      	bne.n	402194 <main+0xf8>
				uint32_t hour, minute, second;
				rtc_get_time(RTC, &hour, &minute, &second);
  40216a:	1d3b      	adds	r3, r7, #4
  40216c:	f107 0208 	add.w	r2, r7, #8
  402170:	f107 010c 	add.w	r1, r7, #12
  402174:	4818      	ldr	r0, [pc, #96]	; (4021d8 <main+0x13c>)
  402176:	4c19      	ldr	r4, [pc, #100]	; (4021dc <main+0x140>)
  402178:	47a0      	blx	r4
				uint8_t *string;
				sprintf(string, "TIME: %d:%d:%d\n", hour, minute, second);
  40217a:	68fa      	ldr	r2, [r7, #12]
  40217c:	68b9      	ldr	r1, [r7, #8]
  40217e:	687b      	ldr	r3, [r7, #4]
  402180:	9300      	str	r3, [sp, #0]
  402182:	460b      	mov	r3, r1
  402184:	4916      	ldr	r1, [pc, #88]	; (4021e0 <main+0x144>)
  402186:	6938      	ldr	r0, [r7, #16]
  402188:	4c16      	ldr	r4, [pc, #88]	; (4021e4 <main+0x148>)
  40218a:	47a0      	blx	r4
				usart_puts(string);
  40218c:	6938      	ldr	r0, [r7, #16]
  40218e:	4b0f      	ldr	r3, [pc, #60]	; (4021cc <main+0x130>)
  402190:	4798      	blx	r3
  402192:	e001      	b.n	402198 <main+0xfc>
			}
			else {
				display_menu();
  402194:	4b08      	ldr	r3, [pc, #32]	; (4021b8 <main+0x11c>)
  402196:	4798      	blx	r3
			}
			usart_transmission_done = 0;
  402198:	4b09      	ldr	r3, [pc, #36]	; (4021c0 <main+0x124>)
  40219a:	2200      	movs	r2, #0
  40219c:	601a      	str	r2, [r3, #0]
		if(usart_transmission_done) {
  40219e:	e797      	b.n	4020d0 <main+0x34>
  4021a0:	004009bd 	.word	0x004009bd
  4021a4:	004004ad 	.word	0x004004ad
  4021a8:	400e1850 	.word	0x400e1850
  4021ac:	00401e35 	.word	0x00401e35
  4021b0:	00401ef9 	.word	0x00401ef9
  4021b4:	00401e01 	.word	0x00401e01
  4021b8:	00401d6d 	.word	0x00401d6d
  4021bc:	20400a50 	.word	0x20400a50
  4021c0:	20400a4c 	.word	0x20400a4c
  4021c4:	20400a88 	.word	0x20400a88
  4021c8:	00406cc8 	.word	0x00406cc8
  4021cc:	00402049 	.word	0x00402049
  4021d0:	00406ce4 	.word	0x00406ce4
  4021d4:	004021e9 	.word	0x004021e9
  4021d8:	400e1860 	.word	0x400e1860
  4021dc:	00401135 	.word	0x00401135
  4021e0:	00406ce8 	.word	0x00406ce8
  4021e4:	004022dd 	.word	0x004022dd

004021e8 <atoi>:
  4021e8:	220a      	movs	r2, #10
  4021ea:	2100      	movs	r1, #0
  4021ec:	f000 b930 	b.w	402450 <strtol>

004021f0 <__libc_init_array>:
  4021f0:	b570      	push	{r4, r5, r6, lr}
  4021f2:	4e0f      	ldr	r6, [pc, #60]	; (402230 <__libc_init_array+0x40>)
  4021f4:	4d0f      	ldr	r5, [pc, #60]	; (402234 <__libc_init_array+0x44>)
  4021f6:	1b76      	subs	r6, r6, r5
  4021f8:	10b6      	asrs	r6, r6, #2
  4021fa:	bf18      	it	ne
  4021fc:	2400      	movne	r4, #0
  4021fe:	d005      	beq.n	40220c <__libc_init_array+0x1c>
  402200:	3401      	adds	r4, #1
  402202:	f855 3b04 	ldr.w	r3, [r5], #4
  402206:	4798      	blx	r3
  402208:	42a6      	cmp	r6, r4
  40220a:	d1f9      	bne.n	402200 <__libc_init_array+0x10>
  40220c:	4e0a      	ldr	r6, [pc, #40]	; (402238 <__libc_init_array+0x48>)
  40220e:	4d0b      	ldr	r5, [pc, #44]	; (40223c <__libc_init_array+0x4c>)
  402210:	1b76      	subs	r6, r6, r5
  402212:	f004 feb5 	bl	406f80 <_init>
  402216:	10b6      	asrs	r6, r6, #2
  402218:	bf18      	it	ne
  40221a:	2400      	movne	r4, #0
  40221c:	d006      	beq.n	40222c <__libc_init_array+0x3c>
  40221e:	3401      	adds	r4, #1
  402220:	f855 3b04 	ldr.w	r3, [r5], #4
  402224:	4798      	blx	r3
  402226:	42a6      	cmp	r6, r4
  402228:	d1f9      	bne.n	40221e <__libc_init_array+0x2e>
  40222a:	bd70      	pop	{r4, r5, r6, pc}
  40222c:	bd70      	pop	{r4, r5, r6, pc}
  40222e:	bf00      	nop
  402230:	00406f8c 	.word	0x00406f8c
  402234:	00406f8c 	.word	0x00406f8c
  402238:	00406f94 	.word	0x00406f94
  40223c:	00406f8c 	.word	0x00406f8c

00402240 <memset>:
  402240:	b470      	push	{r4, r5, r6}
  402242:	0786      	lsls	r6, r0, #30
  402244:	d046      	beq.n	4022d4 <memset+0x94>
  402246:	1e54      	subs	r4, r2, #1
  402248:	2a00      	cmp	r2, #0
  40224a:	d041      	beq.n	4022d0 <memset+0x90>
  40224c:	b2ca      	uxtb	r2, r1
  40224e:	4603      	mov	r3, r0
  402250:	e002      	b.n	402258 <memset+0x18>
  402252:	f114 34ff 	adds.w	r4, r4, #4294967295
  402256:	d33b      	bcc.n	4022d0 <memset+0x90>
  402258:	f803 2b01 	strb.w	r2, [r3], #1
  40225c:	079d      	lsls	r5, r3, #30
  40225e:	d1f8      	bne.n	402252 <memset+0x12>
  402260:	2c03      	cmp	r4, #3
  402262:	d92e      	bls.n	4022c2 <memset+0x82>
  402264:	b2cd      	uxtb	r5, r1
  402266:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40226a:	2c0f      	cmp	r4, #15
  40226c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402270:	d919      	bls.n	4022a6 <memset+0x66>
  402272:	f103 0210 	add.w	r2, r3, #16
  402276:	4626      	mov	r6, r4
  402278:	3e10      	subs	r6, #16
  40227a:	2e0f      	cmp	r6, #15
  40227c:	f842 5c10 	str.w	r5, [r2, #-16]
  402280:	f842 5c0c 	str.w	r5, [r2, #-12]
  402284:	f842 5c08 	str.w	r5, [r2, #-8]
  402288:	f842 5c04 	str.w	r5, [r2, #-4]
  40228c:	f102 0210 	add.w	r2, r2, #16
  402290:	d8f2      	bhi.n	402278 <memset+0x38>
  402292:	f1a4 0210 	sub.w	r2, r4, #16
  402296:	f022 020f 	bic.w	r2, r2, #15
  40229a:	f004 040f 	and.w	r4, r4, #15
  40229e:	3210      	adds	r2, #16
  4022a0:	2c03      	cmp	r4, #3
  4022a2:	4413      	add	r3, r2
  4022a4:	d90d      	bls.n	4022c2 <memset+0x82>
  4022a6:	461e      	mov	r6, r3
  4022a8:	4622      	mov	r2, r4
  4022aa:	3a04      	subs	r2, #4
  4022ac:	2a03      	cmp	r2, #3
  4022ae:	f846 5b04 	str.w	r5, [r6], #4
  4022b2:	d8fa      	bhi.n	4022aa <memset+0x6a>
  4022b4:	1f22      	subs	r2, r4, #4
  4022b6:	f022 0203 	bic.w	r2, r2, #3
  4022ba:	3204      	adds	r2, #4
  4022bc:	4413      	add	r3, r2
  4022be:	f004 0403 	and.w	r4, r4, #3
  4022c2:	b12c      	cbz	r4, 4022d0 <memset+0x90>
  4022c4:	b2c9      	uxtb	r1, r1
  4022c6:	441c      	add	r4, r3
  4022c8:	f803 1b01 	strb.w	r1, [r3], #1
  4022cc:	429c      	cmp	r4, r3
  4022ce:	d1fb      	bne.n	4022c8 <memset+0x88>
  4022d0:	bc70      	pop	{r4, r5, r6}
  4022d2:	4770      	bx	lr
  4022d4:	4614      	mov	r4, r2
  4022d6:	4603      	mov	r3, r0
  4022d8:	e7c2      	b.n	402260 <memset+0x20>
  4022da:	bf00      	nop

004022dc <sprintf>:
  4022dc:	b40e      	push	{r1, r2, r3}
  4022de:	b5f0      	push	{r4, r5, r6, r7, lr}
  4022e0:	b09c      	sub	sp, #112	; 0x70
  4022e2:	ab21      	add	r3, sp, #132	; 0x84
  4022e4:	490f      	ldr	r1, [pc, #60]	; (402324 <sprintf+0x48>)
  4022e6:	f853 2b04 	ldr.w	r2, [r3], #4
  4022ea:	9301      	str	r3, [sp, #4]
  4022ec:	4605      	mov	r5, r0
  4022ee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4022f2:	6808      	ldr	r0, [r1, #0]
  4022f4:	9502      	str	r5, [sp, #8]
  4022f6:	f44f 7702 	mov.w	r7, #520	; 0x208
  4022fa:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4022fe:	a902      	add	r1, sp, #8
  402300:	9506      	str	r5, [sp, #24]
  402302:	f8ad 7014 	strh.w	r7, [sp, #20]
  402306:	9404      	str	r4, [sp, #16]
  402308:	9407      	str	r4, [sp, #28]
  40230a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40230e:	f000 f8b5 	bl	40247c <_svfprintf_r>
  402312:	9b02      	ldr	r3, [sp, #8]
  402314:	2200      	movs	r2, #0
  402316:	701a      	strb	r2, [r3, #0]
  402318:	b01c      	add	sp, #112	; 0x70
  40231a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40231e:	b003      	add	sp, #12
  402320:	4770      	bx	lr
  402322:	bf00      	nop
  402324:	20400008 	.word	0x20400008

00402328 <_strtol_l.isra.0>:
  402328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40232c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  402330:	460f      	mov	r7, r1
  402332:	4680      	mov	r8, r0
  402334:	4616      	mov	r6, r2
  402336:	461d      	mov	r5, r3
  402338:	468a      	mov	sl, r1
  40233a:	e000      	b.n	40233e <_strtol_l.isra.0+0x16>
  40233c:	46a2      	mov	sl, r4
  40233e:	4654      	mov	r4, sl
  402340:	4648      	mov	r0, r9
  402342:	f814 bb01 	ldrb.w	fp, [r4], #1
  402346:	f002 faa7 	bl	404898 <__locale_ctype_ptr_l>
  40234a:	4458      	add	r0, fp
  40234c:	7842      	ldrb	r2, [r0, #1]
  40234e:	f012 0208 	ands.w	r2, r2, #8
  402352:	d1f3      	bne.n	40233c <_strtol_l.isra.0+0x14>
  402354:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  402358:	d04f      	beq.n	4023fa <_strtol_l.isra.0+0xd2>
  40235a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  40235e:	bf04      	itt	eq
  402360:	f894 b000 	ldrbeq.w	fp, [r4]
  402364:	f10a 0402 	addeq.w	r4, sl, #2
  402368:	b11d      	cbz	r5, 402372 <_strtol_l.isra.0+0x4a>
  40236a:	2d10      	cmp	r5, #16
  40236c:	d056      	beq.n	40241c <_strtol_l.isra.0+0xf4>
  40236e:	46ac      	mov	ip, r5
  402370:	e004      	b.n	40237c <_strtol_l.isra.0+0x54>
  402372:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  402376:	d060      	beq.n	40243a <_strtol_l.isra.0+0x112>
  402378:	250a      	movs	r5, #10
  40237a:	46ac      	mov	ip, r5
  40237c:	2a00      	cmp	r2, #0
  40237e:	bf0c      	ite	eq
  402380:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  402384:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  402388:	2100      	movs	r1, #0
  40238a:	fbb9 fefc 	udiv	lr, r9, ip
  40238e:	4608      	mov	r0, r1
  402390:	fb0c 9a1e 	mls	sl, ip, lr, r9
  402394:	e005      	b.n	4023a2 <_strtol_l.isra.0+0x7a>
  402396:	d029      	beq.n	4023ec <_strtol_l.isra.0+0xc4>
  402398:	fb0c 3000 	mla	r0, ip, r0, r3
  40239c:	2101      	movs	r1, #1
  40239e:	f814 bb01 	ldrb.w	fp, [r4], #1
  4023a2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  4023a6:	2b09      	cmp	r3, #9
  4023a8:	d905      	bls.n	4023b6 <_strtol_l.isra.0+0x8e>
  4023aa:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  4023ae:	2b19      	cmp	r3, #25
  4023b0:	d80b      	bhi.n	4023ca <_strtol_l.isra.0+0xa2>
  4023b2:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  4023b6:	429d      	cmp	r5, r3
  4023b8:	dd0f      	ble.n	4023da <_strtol_l.isra.0+0xb2>
  4023ba:	f1b1 3fff 	cmp.w	r1, #4294967295
  4023be:	d0ee      	beq.n	40239e <_strtol_l.isra.0+0x76>
  4023c0:	4586      	cmp	lr, r0
  4023c2:	d2e8      	bcs.n	402396 <_strtol_l.isra.0+0x6e>
  4023c4:	f04f 31ff 	mov.w	r1, #4294967295
  4023c8:	e7e9      	b.n	40239e <_strtol_l.isra.0+0x76>
  4023ca:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  4023ce:	2b19      	cmp	r3, #25
  4023d0:	d803      	bhi.n	4023da <_strtol_l.isra.0+0xb2>
  4023d2:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  4023d6:	429d      	cmp	r5, r3
  4023d8:	dcef      	bgt.n	4023ba <_strtol_l.isra.0+0x92>
  4023da:	1c4b      	adds	r3, r1, #1
  4023dc:	d013      	beq.n	402406 <_strtol_l.isra.0+0xde>
  4023de:	b102      	cbz	r2, 4023e2 <_strtol_l.isra.0+0xba>
  4023e0:	4240      	negs	r0, r0
  4023e2:	b146      	cbz	r6, 4023f6 <_strtol_l.isra.0+0xce>
  4023e4:	b9c1      	cbnz	r1, 402418 <_strtol_l.isra.0+0xf0>
  4023e6:	6037      	str	r7, [r6, #0]
  4023e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023ec:	459a      	cmp	sl, r3
  4023ee:	dad3      	bge.n	402398 <_strtol_l.isra.0+0x70>
  4023f0:	f04f 31ff 	mov.w	r1, #4294967295
  4023f4:	e7d3      	b.n	40239e <_strtol_l.isra.0+0x76>
  4023f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023fa:	f894 b000 	ldrb.w	fp, [r4]
  4023fe:	2201      	movs	r2, #1
  402400:	f10a 0402 	add.w	r4, sl, #2
  402404:	e7b0      	b.n	402368 <_strtol_l.isra.0+0x40>
  402406:	2322      	movs	r3, #34	; 0x22
  402408:	f8c8 3000 	str.w	r3, [r8]
  40240c:	b1ee      	cbz	r6, 40244a <_strtol_l.isra.0+0x122>
  40240e:	1e67      	subs	r7, r4, #1
  402410:	4648      	mov	r0, r9
  402412:	6037      	str	r7, [r6, #0]
  402414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402418:	4681      	mov	r9, r0
  40241a:	e7f8      	b.n	40240e <_strtol_l.isra.0+0xe6>
  40241c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  402420:	d1a5      	bne.n	40236e <_strtol_l.isra.0+0x46>
  402422:	7823      	ldrb	r3, [r4, #0]
  402424:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  402428:	2b58      	cmp	r3, #88	; 0x58
  40242a:	d1a0      	bne.n	40236e <_strtol_l.isra.0+0x46>
  40242c:	f04f 0c10 	mov.w	ip, #16
  402430:	f894 b001 	ldrb.w	fp, [r4, #1]
  402434:	4665      	mov	r5, ip
  402436:	3402      	adds	r4, #2
  402438:	e7a0      	b.n	40237c <_strtol_l.isra.0+0x54>
  40243a:	7823      	ldrb	r3, [r4, #0]
  40243c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  402440:	2b58      	cmp	r3, #88	; 0x58
  402442:	d0f3      	beq.n	40242c <_strtol_l.isra.0+0x104>
  402444:	2508      	movs	r5, #8
  402446:	46ac      	mov	ip, r5
  402448:	e798      	b.n	40237c <_strtol_l.isra.0+0x54>
  40244a:	4648      	mov	r0, r9
  40244c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402450 <strtol>:
  402450:	b530      	push	{r4, r5, lr}
  402452:	4c08      	ldr	r4, [pc, #32]	; (402474 <strtol+0x24>)
  402454:	4b08      	ldr	r3, [pc, #32]	; (402478 <strtol+0x28>)
  402456:	6825      	ldr	r5, [r4, #0]
  402458:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  40245a:	b083      	sub	sp, #12
  40245c:	2c00      	cmp	r4, #0
  40245e:	bf08      	it	eq
  402460:	461c      	moveq	r4, r3
  402462:	9400      	str	r4, [sp, #0]
  402464:	4613      	mov	r3, r2
  402466:	460a      	mov	r2, r1
  402468:	4601      	mov	r1, r0
  40246a:	4628      	mov	r0, r5
  40246c:	f7ff ff5c 	bl	402328 <_strtol_l.isra.0>
  402470:	b003      	add	sp, #12
  402472:	bd30      	pop	{r4, r5, pc}
  402474:	20400008 	.word	0x20400008
  402478:	20400438 	.word	0x20400438

0040247c <_svfprintf_r>:
  40247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402480:	b0c3      	sub	sp, #268	; 0x10c
  402482:	460c      	mov	r4, r1
  402484:	910b      	str	r1, [sp, #44]	; 0x2c
  402486:	4692      	mov	sl, r2
  402488:	930f      	str	r3, [sp, #60]	; 0x3c
  40248a:	900c      	str	r0, [sp, #48]	; 0x30
  40248c:	f002 fa08 	bl	4048a0 <_localeconv_r>
  402490:	6803      	ldr	r3, [r0, #0]
  402492:	931a      	str	r3, [sp, #104]	; 0x68
  402494:	4618      	mov	r0, r3
  402496:	f003 f8f3 	bl	405680 <strlen>
  40249a:	89a3      	ldrh	r3, [r4, #12]
  40249c:	9019      	str	r0, [sp, #100]	; 0x64
  40249e:	0619      	lsls	r1, r3, #24
  4024a0:	d503      	bpl.n	4024aa <_svfprintf_r+0x2e>
  4024a2:	6923      	ldr	r3, [r4, #16]
  4024a4:	2b00      	cmp	r3, #0
  4024a6:	f001 8001 	beq.w	4034ac <_svfprintf_r+0x1030>
  4024aa:	2300      	movs	r3, #0
  4024ac:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4024b0:	9313      	str	r3, [sp, #76]	; 0x4c
  4024b2:	9314      	str	r3, [sp, #80]	; 0x50
  4024b4:	9315      	str	r3, [sp, #84]	; 0x54
  4024b6:	9327      	str	r3, [sp, #156]	; 0x9c
  4024b8:	9326      	str	r3, [sp, #152]	; 0x98
  4024ba:	9318      	str	r3, [sp, #96]	; 0x60
  4024bc:	931b      	str	r3, [sp, #108]	; 0x6c
  4024be:	9309      	str	r3, [sp, #36]	; 0x24
  4024c0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4024c4:	46c8      	mov	r8, r9
  4024c6:	9316      	str	r3, [sp, #88]	; 0x58
  4024c8:	9317      	str	r3, [sp, #92]	; 0x5c
  4024ca:	f89a 3000 	ldrb.w	r3, [sl]
  4024ce:	4654      	mov	r4, sl
  4024d0:	b1e3      	cbz	r3, 40250c <_svfprintf_r+0x90>
  4024d2:	2b25      	cmp	r3, #37	; 0x25
  4024d4:	d102      	bne.n	4024dc <_svfprintf_r+0x60>
  4024d6:	e019      	b.n	40250c <_svfprintf_r+0x90>
  4024d8:	2b25      	cmp	r3, #37	; 0x25
  4024da:	d003      	beq.n	4024e4 <_svfprintf_r+0x68>
  4024dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4024e0:	2b00      	cmp	r3, #0
  4024e2:	d1f9      	bne.n	4024d8 <_svfprintf_r+0x5c>
  4024e4:	eba4 050a 	sub.w	r5, r4, sl
  4024e8:	b185      	cbz	r5, 40250c <_svfprintf_r+0x90>
  4024ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4024ec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4024ee:	f8c8 a000 	str.w	sl, [r8]
  4024f2:	3301      	adds	r3, #1
  4024f4:	442a      	add	r2, r5
  4024f6:	2b07      	cmp	r3, #7
  4024f8:	f8c8 5004 	str.w	r5, [r8, #4]
  4024fc:	9227      	str	r2, [sp, #156]	; 0x9c
  4024fe:	9326      	str	r3, [sp, #152]	; 0x98
  402500:	dc7f      	bgt.n	402602 <_svfprintf_r+0x186>
  402502:	f108 0808 	add.w	r8, r8, #8
  402506:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402508:	442b      	add	r3, r5
  40250a:	9309      	str	r3, [sp, #36]	; 0x24
  40250c:	7823      	ldrb	r3, [r4, #0]
  40250e:	2b00      	cmp	r3, #0
  402510:	d07f      	beq.n	402612 <_svfprintf_r+0x196>
  402512:	2300      	movs	r3, #0
  402514:	461a      	mov	r2, r3
  402516:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40251a:	4619      	mov	r1, r3
  40251c:	930d      	str	r3, [sp, #52]	; 0x34
  40251e:	469b      	mov	fp, r3
  402520:	f04f 30ff 	mov.w	r0, #4294967295
  402524:	7863      	ldrb	r3, [r4, #1]
  402526:	900a      	str	r0, [sp, #40]	; 0x28
  402528:	f104 0a01 	add.w	sl, r4, #1
  40252c:	f10a 0a01 	add.w	sl, sl, #1
  402530:	f1a3 0020 	sub.w	r0, r3, #32
  402534:	2858      	cmp	r0, #88	; 0x58
  402536:	f200 83c0 	bhi.w	402cba <_svfprintf_r+0x83e>
  40253a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40253e:	0238      	.short	0x0238
  402540:	03be03be 	.word	0x03be03be
  402544:	03be0240 	.word	0x03be0240
  402548:	03be03be 	.word	0x03be03be
  40254c:	03be03be 	.word	0x03be03be
  402550:	024503be 	.word	0x024503be
  402554:	03be0203 	.word	0x03be0203
  402558:	026b005d 	.word	0x026b005d
  40255c:	028603be 	.word	0x028603be
  402560:	039c039c 	.word	0x039c039c
  402564:	039c039c 	.word	0x039c039c
  402568:	039c039c 	.word	0x039c039c
  40256c:	039c039c 	.word	0x039c039c
  402570:	03be039c 	.word	0x03be039c
  402574:	03be03be 	.word	0x03be03be
  402578:	03be03be 	.word	0x03be03be
  40257c:	03be03be 	.word	0x03be03be
  402580:	03be03be 	.word	0x03be03be
  402584:	033703be 	.word	0x033703be
  402588:	03be0357 	.word	0x03be0357
  40258c:	03be0357 	.word	0x03be0357
  402590:	03be03be 	.word	0x03be03be
  402594:	039703be 	.word	0x039703be
  402598:	03be03be 	.word	0x03be03be
  40259c:	03be03ac 	.word	0x03be03ac
  4025a0:	03be03be 	.word	0x03be03be
  4025a4:	03be03be 	.word	0x03be03be
  4025a8:	03be0259 	.word	0x03be0259
  4025ac:	031e03be 	.word	0x031e03be
  4025b0:	03be03be 	.word	0x03be03be
  4025b4:	03be03be 	.word	0x03be03be
  4025b8:	03be03be 	.word	0x03be03be
  4025bc:	03be03be 	.word	0x03be03be
  4025c0:	03be03be 	.word	0x03be03be
  4025c4:	02db02c6 	.word	0x02db02c6
  4025c8:	03570357 	.word	0x03570357
  4025cc:	028b0357 	.word	0x028b0357
  4025d0:	03be02db 	.word	0x03be02db
  4025d4:	029003be 	.word	0x029003be
  4025d8:	029d03be 	.word	0x029d03be
  4025dc:	02b401cc 	.word	0x02b401cc
  4025e0:	03be0208 	.word	0x03be0208
  4025e4:	03be01e1 	.word	0x03be01e1
  4025e8:	03be007e 	.word	0x03be007e
  4025ec:	020d03be 	.word	0x020d03be
  4025f0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4025f2:	930f      	str	r3, [sp, #60]	; 0x3c
  4025f4:	4240      	negs	r0, r0
  4025f6:	900d      	str	r0, [sp, #52]	; 0x34
  4025f8:	f04b 0b04 	orr.w	fp, fp, #4
  4025fc:	f89a 3000 	ldrb.w	r3, [sl]
  402600:	e794      	b.n	40252c <_svfprintf_r+0xb0>
  402602:	aa25      	add	r2, sp, #148	; 0x94
  402604:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402606:	980c      	ldr	r0, [sp, #48]	; 0x30
  402608:	f003 f8a8 	bl	40575c <__ssprint_r>
  40260c:	b940      	cbnz	r0, 402620 <_svfprintf_r+0x1a4>
  40260e:	46c8      	mov	r8, r9
  402610:	e779      	b.n	402506 <_svfprintf_r+0x8a>
  402612:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402614:	b123      	cbz	r3, 402620 <_svfprintf_r+0x1a4>
  402616:	980c      	ldr	r0, [sp, #48]	; 0x30
  402618:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40261a:	aa25      	add	r2, sp, #148	; 0x94
  40261c:	f003 f89e 	bl	40575c <__ssprint_r>
  402620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402622:	899b      	ldrh	r3, [r3, #12]
  402624:	f013 0f40 	tst.w	r3, #64	; 0x40
  402628:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40262a:	bf18      	it	ne
  40262c:	f04f 33ff 	movne.w	r3, #4294967295
  402630:	9309      	str	r3, [sp, #36]	; 0x24
  402632:	9809      	ldr	r0, [sp, #36]	; 0x24
  402634:	b043      	add	sp, #268	; 0x10c
  402636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40263a:	f01b 0f20 	tst.w	fp, #32
  40263e:	9311      	str	r3, [sp, #68]	; 0x44
  402640:	f040 81dd 	bne.w	4029fe <_svfprintf_r+0x582>
  402644:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402646:	f01b 0f10 	tst.w	fp, #16
  40264a:	4613      	mov	r3, r2
  40264c:	f040 856c 	bne.w	403128 <_svfprintf_r+0xcac>
  402650:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402654:	f000 8568 	beq.w	403128 <_svfprintf_r+0xcac>
  402658:	8814      	ldrh	r4, [r2, #0]
  40265a:	3204      	adds	r2, #4
  40265c:	2500      	movs	r5, #0
  40265e:	2301      	movs	r3, #1
  402660:	920f      	str	r2, [sp, #60]	; 0x3c
  402662:	2700      	movs	r7, #0
  402664:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402668:	990a      	ldr	r1, [sp, #40]	; 0x28
  40266a:	1c4a      	adds	r2, r1, #1
  40266c:	f000 8265 	beq.w	402b3a <_svfprintf_r+0x6be>
  402670:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  402674:	9207      	str	r2, [sp, #28]
  402676:	ea54 0205 	orrs.w	r2, r4, r5
  40267a:	f040 8264 	bne.w	402b46 <_svfprintf_r+0x6ca>
  40267e:	2900      	cmp	r1, #0
  402680:	f040 8439 	bne.w	402ef6 <_svfprintf_r+0xa7a>
  402684:	2b00      	cmp	r3, #0
  402686:	f040 84d4 	bne.w	403032 <_svfprintf_r+0xbb6>
  40268a:	f01b 0301 	ands.w	r3, fp, #1
  40268e:	930e      	str	r3, [sp, #56]	; 0x38
  402690:	f000 8602 	beq.w	403298 <_svfprintf_r+0xe1c>
  402694:	ae42      	add	r6, sp, #264	; 0x108
  402696:	2330      	movs	r3, #48	; 0x30
  402698:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40269c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40269e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4026a0:	4293      	cmp	r3, r2
  4026a2:	bfb8      	it	lt
  4026a4:	4613      	movlt	r3, r2
  4026a6:	9308      	str	r3, [sp, #32]
  4026a8:	2300      	movs	r3, #0
  4026aa:	9312      	str	r3, [sp, #72]	; 0x48
  4026ac:	b117      	cbz	r7, 4026b4 <_svfprintf_r+0x238>
  4026ae:	9b08      	ldr	r3, [sp, #32]
  4026b0:	3301      	adds	r3, #1
  4026b2:	9308      	str	r3, [sp, #32]
  4026b4:	9b07      	ldr	r3, [sp, #28]
  4026b6:	f013 0302 	ands.w	r3, r3, #2
  4026ba:	9310      	str	r3, [sp, #64]	; 0x40
  4026bc:	d002      	beq.n	4026c4 <_svfprintf_r+0x248>
  4026be:	9b08      	ldr	r3, [sp, #32]
  4026c0:	3302      	adds	r3, #2
  4026c2:	9308      	str	r3, [sp, #32]
  4026c4:	9b07      	ldr	r3, [sp, #28]
  4026c6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4026ca:	f040 830d 	bne.w	402ce8 <_svfprintf_r+0x86c>
  4026ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4026d0:	9a08      	ldr	r2, [sp, #32]
  4026d2:	eba3 0b02 	sub.w	fp, r3, r2
  4026d6:	f1bb 0f00 	cmp.w	fp, #0
  4026da:	f340 8305 	ble.w	402ce8 <_svfprintf_r+0x86c>
  4026de:	f1bb 0f10 	cmp.w	fp, #16
  4026e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4026e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4026e6:	dd29      	ble.n	40273c <_svfprintf_r+0x2c0>
  4026e8:	4643      	mov	r3, r8
  4026ea:	4621      	mov	r1, r4
  4026ec:	46a8      	mov	r8, r5
  4026ee:	2710      	movs	r7, #16
  4026f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4026f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4026f4:	e006      	b.n	402704 <_svfprintf_r+0x288>
  4026f6:	f1ab 0b10 	sub.w	fp, fp, #16
  4026fa:	f1bb 0f10 	cmp.w	fp, #16
  4026fe:	f103 0308 	add.w	r3, r3, #8
  402702:	dd18      	ble.n	402736 <_svfprintf_r+0x2ba>
  402704:	3201      	adds	r2, #1
  402706:	48b7      	ldr	r0, [pc, #732]	; (4029e4 <_svfprintf_r+0x568>)
  402708:	9226      	str	r2, [sp, #152]	; 0x98
  40270a:	3110      	adds	r1, #16
  40270c:	2a07      	cmp	r2, #7
  40270e:	9127      	str	r1, [sp, #156]	; 0x9c
  402710:	e883 0081 	stmia.w	r3, {r0, r7}
  402714:	ddef      	ble.n	4026f6 <_svfprintf_r+0x27a>
  402716:	aa25      	add	r2, sp, #148	; 0x94
  402718:	4629      	mov	r1, r5
  40271a:	4620      	mov	r0, r4
  40271c:	f003 f81e 	bl	40575c <__ssprint_r>
  402720:	2800      	cmp	r0, #0
  402722:	f47f af7d 	bne.w	402620 <_svfprintf_r+0x1a4>
  402726:	f1ab 0b10 	sub.w	fp, fp, #16
  40272a:	f1bb 0f10 	cmp.w	fp, #16
  40272e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402730:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402732:	464b      	mov	r3, r9
  402734:	dce6      	bgt.n	402704 <_svfprintf_r+0x288>
  402736:	4645      	mov	r5, r8
  402738:	460c      	mov	r4, r1
  40273a:	4698      	mov	r8, r3
  40273c:	3201      	adds	r2, #1
  40273e:	4ba9      	ldr	r3, [pc, #676]	; (4029e4 <_svfprintf_r+0x568>)
  402740:	9226      	str	r2, [sp, #152]	; 0x98
  402742:	445c      	add	r4, fp
  402744:	2a07      	cmp	r2, #7
  402746:	9427      	str	r4, [sp, #156]	; 0x9c
  402748:	e888 0808 	stmia.w	r8, {r3, fp}
  40274c:	f300 8495 	bgt.w	40307a <_svfprintf_r+0xbfe>
  402750:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402754:	f108 0808 	add.w	r8, r8, #8
  402758:	b177      	cbz	r7, 402778 <_svfprintf_r+0x2fc>
  40275a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40275c:	3301      	adds	r3, #1
  40275e:	3401      	adds	r4, #1
  402760:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  402764:	2201      	movs	r2, #1
  402766:	2b07      	cmp	r3, #7
  402768:	9427      	str	r4, [sp, #156]	; 0x9c
  40276a:	9326      	str	r3, [sp, #152]	; 0x98
  40276c:	e888 0006 	stmia.w	r8, {r1, r2}
  402770:	f300 83d8 	bgt.w	402f24 <_svfprintf_r+0xaa8>
  402774:	f108 0808 	add.w	r8, r8, #8
  402778:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40277a:	b16b      	cbz	r3, 402798 <_svfprintf_r+0x31c>
  40277c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40277e:	3301      	adds	r3, #1
  402780:	3402      	adds	r4, #2
  402782:	a91e      	add	r1, sp, #120	; 0x78
  402784:	2202      	movs	r2, #2
  402786:	2b07      	cmp	r3, #7
  402788:	9427      	str	r4, [sp, #156]	; 0x9c
  40278a:	9326      	str	r3, [sp, #152]	; 0x98
  40278c:	e888 0006 	stmia.w	r8, {r1, r2}
  402790:	f300 83d3 	bgt.w	402f3a <_svfprintf_r+0xabe>
  402794:	f108 0808 	add.w	r8, r8, #8
  402798:	2d80      	cmp	r5, #128	; 0x80
  40279a:	f000 8313 	beq.w	402dc4 <_svfprintf_r+0x948>
  40279e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4027a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4027a2:	1a9f      	subs	r7, r3, r2
  4027a4:	2f00      	cmp	r7, #0
  4027a6:	dd36      	ble.n	402816 <_svfprintf_r+0x39a>
  4027a8:	2f10      	cmp	r7, #16
  4027aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027ac:	4d8e      	ldr	r5, [pc, #568]	; (4029e8 <_svfprintf_r+0x56c>)
  4027ae:	dd27      	ble.n	402800 <_svfprintf_r+0x384>
  4027b0:	4642      	mov	r2, r8
  4027b2:	4621      	mov	r1, r4
  4027b4:	46b0      	mov	r8, r6
  4027b6:	f04f 0b10 	mov.w	fp, #16
  4027ba:	462e      	mov	r6, r5
  4027bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4027be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4027c0:	e004      	b.n	4027cc <_svfprintf_r+0x350>
  4027c2:	3f10      	subs	r7, #16
  4027c4:	2f10      	cmp	r7, #16
  4027c6:	f102 0208 	add.w	r2, r2, #8
  4027ca:	dd15      	ble.n	4027f8 <_svfprintf_r+0x37c>
  4027cc:	3301      	adds	r3, #1
  4027ce:	3110      	adds	r1, #16
  4027d0:	2b07      	cmp	r3, #7
  4027d2:	9127      	str	r1, [sp, #156]	; 0x9c
  4027d4:	9326      	str	r3, [sp, #152]	; 0x98
  4027d6:	e882 0840 	stmia.w	r2, {r6, fp}
  4027da:	ddf2      	ble.n	4027c2 <_svfprintf_r+0x346>
  4027dc:	aa25      	add	r2, sp, #148	; 0x94
  4027de:	4629      	mov	r1, r5
  4027e0:	4620      	mov	r0, r4
  4027e2:	f002 ffbb 	bl	40575c <__ssprint_r>
  4027e6:	2800      	cmp	r0, #0
  4027e8:	f47f af1a 	bne.w	402620 <_svfprintf_r+0x1a4>
  4027ec:	3f10      	subs	r7, #16
  4027ee:	2f10      	cmp	r7, #16
  4027f0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4027f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027f4:	464a      	mov	r2, r9
  4027f6:	dce9      	bgt.n	4027cc <_svfprintf_r+0x350>
  4027f8:	4635      	mov	r5, r6
  4027fa:	460c      	mov	r4, r1
  4027fc:	4646      	mov	r6, r8
  4027fe:	4690      	mov	r8, r2
  402800:	3301      	adds	r3, #1
  402802:	443c      	add	r4, r7
  402804:	2b07      	cmp	r3, #7
  402806:	9427      	str	r4, [sp, #156]	; 0x9c
  402808:	9326      	str	r3, [sp, #152]	; 0x98
  40280a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40280e:	f300 837e 	bgt.w	402f0e <_svfprintf_r+0xa92>
  402812:	f108 0808 	add.w	r8, r8, #8
  402816:	9b07      	ldr	r3, [sp, #28]
  402818:	05df      	lsls	r7, r3, #23
  40281a:	f100 8267 	bmi.w	402cec <_svfprintf_r+0x870>
  40281e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402820:	990e      	ldr	r1, [sp, #56]	; 0x38
  402822:	f8c8 6000 	str.w	r6, [r8]
  402826:	3301      	adds	r3, #1
  402828:	440c      	add	r4, r1
  40282a:	2b07      	cmp	r3, #7
  40282c:	9427      	str	r4, [sp, #156]	; 0x9c
  40282e:	f8c8 1004 	str.w	r1, [r8, #4]
  402832:	9326      	str	r3, [sp, #152]	; 0x98
  402834:	f300 834a 	bgt.w	402ecc <_svfprintf_r+0xa50>
  402838:	f108 0808 	add.w	r8, r8, #8
  40283c:	9b07      	ldr	r3, [sp, #28]
  40283e:	075b      	lsls	r3, r3, #29
  402840:	d53a      	bpl.n	4028b8 <_svfprintf_r+0x43c>
  402842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402844:	9a08      	ldr	r2, [sp, #32]
  402846:	1a9d      	subs	r5, r3, r2
  402848:	2d00      	cmp	r5, #0
  40284a:	dd35      	ble.n	4028b8 <_svfprintf_r+0x43c>
  40284c:	2d10      	cmp	r5, #16
  40284e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402850:	dd20      	ble.n	402894 <_svfprintf_r+0x418>
  402852:	2610      	movs	r6, #16
  402854:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  402856:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40285a:	e004      	b.n	402866 <_svfprintf_r+0x3ea>
  40285c:	3d10      	subs	r5, #16
  40285e:	2d10      	cmp	r5, #16
  402860:	f108 0808 	add.w	r8, r8, #8
  402864:	dd16      	ble.n	402894 <_svfprintf_r+0x418>
  402866:	3301      	adds	r3, #1
  402868:	4a5e      	ldr	r2, [pc, #376]	; (4029e4 <_svfprintf_r+0x568>)
  40286a:	9326      	str	r3, [sp, #152]	; 0x98
  40286c:	3410      	adds	r4, #16
  40286e:	2b07      	cmp	r3, #7
  402870:	9427      	str	r4, [sp, #156]	; 0x9c
  402872:	e888 0044 	stmia.w	r8, {r2, r6}
  402876:	ddf1      	ble.n	40285c <_svfprintf_r+0x3e0>
  402878:	aa25      	add	r2, sp, #148	; 0x94
  40287a:	4659      	mov	r1, fp
  40287c:	4638      	mov	r0, r7
  40287e:	f002 ff6d 	bl	40575c <__ssprint_r>
  402882:	2800      	cmp	r0, #0
  402884:	f47f aecc 	bne.w	402620 <_svfprintf_r+0x1a4>
  402888:	3d10      	subs	r5, #16
  40288a:	2d10      	cmp	r5, #16
  40288c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40288e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402890:	46c8      	mov	r8, r9
  402892:	dce8      	bgt.n	402866 <_svfprintf_r+0x3ea>
  402894:	3301      	adds	r3, #1
  402896:	4a53      	ldr	r2, [pc, #332]	; (4029e4 <_svfprintf_r+0x568>)
  402898:	9326      	str	r3, [sp, #152]	; 0x98
  40289a:	442c      	add	r4, r5
  40289c:	2b07      	cmp	r3, #7
  40289e:	9427      	str	r4, [sp, #156]	; 0x9c
  4028a0:	e888 0024 	stmia.w	r8, {r2, r5}
  4028a4:	dd08      	ble.n	4028b8 <_svfprintf_r+0x43c>
  4028a6:	aa25      	add	r2, sp, #148	; 0x94
  4028a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4028aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4028ac:	f002 ff56 	bl	40575c <__ssprint_r>
  4028b0:	2800      	cmp	r0, #0
  4028b2:	f47f aeb5 	bne.w	402620 <_svfprintf_r+0x1a4>
  4028b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4028b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4028ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4028bc:	9908      	ldr	r1, [sp, #32]
  4028be:	428a      	cmp	r2, r1
  4028c0:	bfac      	ite	ge
  4028c2:	189b      	addge	r3, r3, r2
  4028c4:	185b      	addlt	r3, r3, r1
  4028c6:	9309      	str	r3, [sp, #36]	; 0x24
  4028c8:	2c00      	cmp	r4, #0
  4028ca:	f040 830a 	bne.w	402ee2 <_svfprintf_r+0xa66>
  4028ce:	2300      	movs	r3, #0
  4028d0:	9326      	str	r3, [sp, #152]	; 0x98
  4028d2:	46c8      	mov	r8, r9
  4028d4:	e5f9      	b.n	4024ca <_svfprintf_r+0x4e>
  4028d6:	9311      	str	r3, [sp, #68]	; 0x44
  4028d8:	f01b 0320 	ands.w	r3, fp, #32
  4028dc:	f040 81e2 	bne.w	402ca4 <_svfprintf_r+0x828>
  4028e0:	f01b 0210 	ands.w	r2, fp, #16
  4028e4:	f040 842c 	bne.w	403140 <_svfprintf_r+0xcc4>
  4028e8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4028ec:	f000 8428 	beq.w	403140 <_svfprintf_r+0xcc4>
  4028f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4028f2:	4613      	mov	r3, r2
  4028f4:	460a      	mov	r2, r1
  4028f6:	3204      	adds	r2, #4
  4028f8:	880c      	ldrh	r4, [r1, #0]
  4028fa:	920f      	str	r2, [sp, #60]	; 0x3c
  4028fc:	2500      	movs	r5, #0
  4028fe:	e6b0      	b.n	402662 <_svfprintf_r+0x1e6>
  402900:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402902:	9311      	str	r3, [sp, #68]	; 0x44
  402904:	6816      	ldr	r6, [r2, #0]
  402906:	2400      	movs	r4, #0
  402908:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40290c:	1d15      	adds	r5, r2, #4
  40290e:	2e00      	cmp	r6, #0
  402910:	f000 86a5 	beq.w	40365e <_svfprintf_r+0x11e2>
  402914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402916:	1c53      	adds	r3, r2, #1
  402918:	f000 8607 	beq.w	40352a <_svfprintf_r+0x10ae>
  40291c:	4621      	mov	r1, r4
  40291e:	4630      	mov	r0, r6
  402920:	f002 fa96 	bl	404e50 <memchr>
  402924:	2800      	cmp	r0, #0
  402926:	f000 86df 	beq.w	4036e8 <_svfprintf_r+0x126c>
  40292a:	1b83      	subs	r3, r0, r6
  40292c:	930e      	str	r3, [sp, #56]	; 0x38
  40292e:	940a      	str	r4, [sp, #40]	; 0x28
  402930:	950f      	str	r5, [sp, #60]	; 0x3c
  402932:	f8cd b01c 	str.w	fp, [sp, #28]
  402936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40293a:	9308      	str	r3, [sp, #32]
  40293c:	9412      	str	r4, [sp, #72]	; 0x48
  40293e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402942:	e6b3      	b.n	4026ac <_svfprintf_r+0x230>
  402944:	f89a 3000 	ldrb.w	r3, [sl]
  402948:	2201      	movs	r2, #1
  40294a:	212b      	movs	r1, #43	; 0x2b
  40294c:	e5ee      	b.n	40252c <_svfprintf_r+0xb0>
  40294e:	f04b 0b20 	orr.w	fp, fp, #32
  402952:	f89a 3000 	ldrb.w	r3, [sl]
  402956:	e5e9      	b.n	40252c <_svfprintf_r+0xb0>
  402958:	9311      	str	r3, [sp, #68]	; 0x44
  40295a:	2a00      	cmp	r2, #0
  40295c:	f040 878d 	bne.w	40387a <_svfprintf_r+0x13fe>
  402960:	4b22      	ldr	r3, [pc, #136]	; (4029ec <_svfprintf_r+0x570>)
  402962:	9318      	str	r3, [sp, #96]	; 0x60
  402964:	f01b 0f20 	tst.w	fp, #32
  402968:	f040 8111 	bne.w	402b8e <_svfprintf_r+0x712>
  40296c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40296e:	f01b 0f10 	tst.w	fp, #16
  402972:	4613      	mov	r3, r2
  402974:	f040 83df 	bne.w	403136 <_svfprintf_r+0xcba>
  402978:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40297c:	f000 83db 	beq.w	403136 <_svfprintf_r+0xcba>
  402980:	3304      	adds	r3, #4
  402982:	8814      	ldrh	r4, [r2, #0]
  402984:	930f      	str	r3, [sp, #60]	; 0x3c
  402986:	2500      	movs	r5, #0
  402988:	f01b 0f01 	tst.w	fp, #1
  40298c:	f000 810c 	beq.w	402ba8 <_svfprintf_r+0x72c>
  402990:	ea54 0305 	orrs.w	r3, r4, r5
  402994:	f000 8108 	beq.w	402ba8 <_svfprintf_r+0x72c>
  402998:	2330      	movs	r3, #48	; 0x30
  40299a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40299e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4029a2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4029a6:	f04b 0b02 	orr.w	fp, fp, #2
  4029aa:	2302      	movs	r3, #2
  4029ac:	e659      	b.n	402662 <_svfprintf_r+0x1e6>
  4029ae:	f89a 3000 	ldrb.w	r3, [sl]
  4029b2:	2900      	cmp	r1, #0
  4029b4:	f47f adba 	bne.w	40252c <_svfprintf_r+0xb0>
  4029b8:	2201      	movs	r2, #1
  4029ba:	2120      	movs	r1, #32
  4029bc:	e5b6      	b.n	40252c <_svfprintf_r+0xb0>
  4029be:	f04b 0b01 	orr.w	fp, fp, #1
  4029c2:	f89a 3000 	ldrb.w	r3, [sl]
  4029c6:	e5b1      	b.n	40252c <_svfprintf_r+0xb0>
  4029c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4029ca:	6823      	ldr	r3, [r4, #0]
  4029cc:	930d      	str	r3, [sp, #52]	; 0x34
  4029ce:	4618      	mov	r0, r3
  4029d0:	2800      	cmp	r0, #0
  4029d2:	4623      	mov	r3, r4
  4029d4:	f103 0304 	add.w	r3, r3, #4
  4029d8:	f6ff ae0a 	blt.w	4025f0 <_svfprintf_r+0x174>
  4029dc:	930f      	str	r3, [sp, #60]	; 0x3c
  4029de:	f89a 3000 	ldrb.w	r3, [sl]
  4029e2:	e5a3      	b.n	40252c <_svfprintf_r+0xb0>
  4029e4:	00406d40 	.word	0x00406d40
  4029e8:	00406d50 	.word	0x00406d50
  4029ec:	00406d20 	.word	0x00406d20
  4029f0:	f04b 0b10 	orr.w	fp, fp, #16
  4029f4:	f01b 0f20 	tst.w	fp, #32
  4029f8:	9311      	str	r3, [sp, #68]	; 0x44
  4029fa:	f43f ae23 	beq.w	402644 <_svfprintf_r+0x1c8>
  4029fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402a00:	3507      	adds	r5, #7
  402a02:	f025 0307 	bic.w	r3, r5, #7
  402a06:	f103 0208 	add.w	r2, r3, #8
  402a0a:	e9d3 4500 	ldrd	r4, r5, [r3]
  402a0e:	920f      	str	r2, [sp, #60]	; 0x3c
  402a10:	2301      	movs	r3, #1
  402a12:	e626      	b.n	402662 <_svfprintf_r+0x1e6>
  402a14:	f89a 3000 	ldrb.w	r3, [sl]
  402a18:	2b2a      	cmp	r3, #42	; 0x2a
  402a1a:	f10a 0401 	add.w	r4, sl, #1
  402a1e:	f000 871f 	beq.w	403860 <_svfprintf_r+0x13e4>
  402a22:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402a26:	2809      	cmp	r0, #9
  402a28:	46a2      	mov	sl, r4
  402a2a:	f200 86ab 	bhi.w	403784 <_svfprintf_r+0x1308>
  402a2e:	2300      	movs	r3, #0
  402a30:	461c      	mov	r4, r3
  402a32:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402a36:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402a3a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402a3e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402a42:	2809      	cmp	r0, #9
  402a44:	d9f5      	bls.n	402a32 <_svfprintf_r+0x5b6>
  402a46:	940a      	str	r4, [sp, #40]	; 0x28
  402a48:	e572      	b.n	402530 <_svfprintf_r+0xb4>
  402a4a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  402a4e:	f89a 3000 	ldrb.w	r3, [sl]
  402a52:	e56b      	b.n	40252c <_svfprintf_r+0xb0>
  402a54:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  402a58:	f89a 3000 	ldrb.w	r3, [sl]
  402a5c:	e566      	b.n	40252c <_svfprintf_r+0xb0>
  402a5e:	f89a 3000 	ldrb.w	r3, [sl]
  402a62:	2b6c      	cmp	r3, #108	; 0x6c
  402a64:	bf03      	ittte	eq
  402a66:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  402a6a:	f04b 0b20 	orreq.w	fp, fp, #32
  402a6e:	f10a 0a01 	addeq.w	sl, sl, #1
  402a72:	f04b 0b10 	orrne.w	fp, fp, #16
  402a76:	e559      	b.n	40252c <_svfprintf_r+0xb0>
  402a78:	2a00      	cmp	r2, #0
  402a7a:	f040 8709 	bne.w	403890 <_svfprintf_r+0x1414>
  402a7e:	f01b 0f20 	tst.w	fp, #32
  402a82:	f040 84f7 	bne.w	403474 <_svfprintf_r+0xff8>
  402a86:	f01b 0f10 	tst.w	fp, #16
  402a8a:	f040 84aa 	bne.w	4033e2 <_svfprintf_r+0xf66>
  402a8e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402a92:	f000 84a6 	beq.w	4033e2 <_svfprintf_r+0xf66>
  402a96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402a98:	6813      	ldr	r3, [r2, #0]
  402a9a:	3204      	adds	r2, #4
  402a9c:	920f      	str	r2, [sp, #60]	; 0x3c
  402a9e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  402aa2:	801a      	strh	r2, [r3, #0]
  402aa4:	e511      	b.n	4024ca <_svfprintf_r+0x4e>
  402aa6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402aa8:	4bb2      	ldr	r3, [pc, #712]	; (402d74 <_svfprintf_r+0x8f8>)
  402aaa:	680c      	ldr	r4, [r1, #0]
  402aac:	9318      	str	r3, [sp, #96]	; 0x60
  402aae:	2230      	movs	r2, #48	; 0x30
  402ab0:	2378      	movs	r3, #120	; 0x78
  402ab2:	3104      	adds	r1, #4
  402ab4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  402ab8:	9311      	str	r3, [sp, #68]	; 0x44
  402aba:	f04b 0b02 	orr.w	fp, fp, #2
  402abe:	910f      	str	r1, [sp, #60]	; 0x3c
  402ac0:	2500      	movs	r5, #0
  402ac2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  402ac6:	2302      	movs	r3, #2
  402ac8:	e5cb      	b.n	402662 <_svfprintf_r+0x1e6>
  402aca:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402acc:	9311      	str	r3, [sp, #68]	; 0x44
  402ace:	680a      	ldr	r2, [r1, #0]
  402ad0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402ad4:	2300      	movs	r3, #0
  402ad6:	460a      	mov	r2, r1
  402ad8:	461f      	mov	r7, r3
  402ada:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402ade:	3204      	adds	r2, #4
  402ae0:	2301      	movs	r3, #1
  402ae2:	9308      	str	r3, [sp, #32]
  402ae4:	f8cd b01c 	str.w	fp, [sp, #28]
  402ae8:	970a      	str	r7, [sp, #40]	; 0x28
  402aea:	9712      	str	r7, [sp, #72]	; 0x48
  402aec:	920f      	str	r2, [sp, #60]	; 0x3c
  402aee:	930e      	str	r3, [sp, #56]	; 0x38
  402af0:	ae28      	add	r6, sp, #160	; 0xa0
  402af2:	e5df      	b.n	4026b4 <_svfprintf_r+0x238>
  402af4:	9311      	str	r3, [sp, #68]	; 0x44
  402af6:	2a00      	cmp	r2, #0
  402af8:	f040 86e2 	bne.w	4038c0 <_svfprintf_r+0x1444>
  402afc:	f01b 0f20 	tst.w	fp, #32
  402b00:	d15d      	bne.n	402bbe <_svfprintf_r+0x742>
  402b02:	f01b 0f10 	tst.w	fp, #16
  402b06:	f040 8306 	bne.w	403116 <_svfprintf_r+0xc9a>
  402b0a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402b0e:	f000 8302 	beq.w	403116 <_svfprintf_r+0xc9a>
  402b12:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402b14:	f9b1 4000 	ldrsh.w	r4, [r1]
  402b18:	3104      	adds	r1, #4
  402b1a:	17e5      	asrs	r5, r4, #31
  402b1c:	4622      	mov	r2, r4
  402b1e:	462b      	mov	r3, r5
  402b20:	910f      	str	r1, [sp, #60]	; 0x3c
  402b22:	2a00      	cmp	r2, #0
  402b24:	f173 0300 	sbcs.w	r3, r3, #0
  402b28:	db58      	blt.n	402bdc <_svfprintf_r+0x760>
  402b2a:	990a      	ldr	r1, [sp, #40]	; 0x28
  402b2c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402b30:	1c4a      	adds	r2, r1, #1
  402b32:	f04f 0301 	mov.w	r3, #1
  402b36:	f47f ad9b 	bne.w	402670 <_svfprintf_r+0x1f4>
  402b3a:	ea54 0205 	orrs.w	r2, r4, r5
  402b3e:	f000 81dc 	beq.w	402efa <_svfprintf_r+0xa7e>
  402b42:	f8cd b01c 	str.w	fp, [sp, #28]
  402b46:	2b01      	cmp	r3, #1
  402b48:	f000 8278 	beq.w	40303c <_svfprintf_r+0xbc0>
  402b4c:	2b02      	cmp	r3, #2
  402b4e:	f040 8203 	bne.w	402f58 <_svfprintf_r+0xadc>
  402b52:	9818      	ldr	r0, [sp, #96]	; 0x60
  402b54:	464e      	mov	r6, r9
  402b56:	0923      	lsrs	r3, r4, #4
  402b58:	f004 010f 	and.w	r1, r4, #15
  402b5c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402b60:	092a      	lsrs	r2, r5, #4
  402b62:	461c      	mov	r4, r3
  402b64:	4615      	mov	r5, r2
  402b66:	5c43      	ldrb	r3, [r0, r1]
  402b68:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402b6c:	ea54 0305 	orrs.w	r3, r4, r5
  402b70:	d1f1      	bne.n	402b56 <_svfprintf_r+0x6da>
  402b72:	eba9 0306 	sub.w	r3, r9, r6
  402b76:	930e      	str	r3, [sp, #56]	; 0x38
  402b78:	e590      	b.n	40269c <_svfprintf_r+0x220>
  402b7a:	9311      	str	r3, [sp, #68]	; 0x44
  402b7c:	2a00      	cmp	r2, #0
  402b7e:	f040 869b 	bne.w	4038b8 <_svfprintf_r+0x143c>
  402b82:	4b7d      	ldr	r3, [pc, #500]	; (402d78 <_svfprintf_r+0x8fc>)
  402b84:	9318      	str	r3, [sp, #96]	; 0x60
  402b86:	f01b 0f20 	tst.w	fp, #32
  402b8a:	f43f aeef 	beq.w	40296c <_svfprintf_r+0x4f0>
  402b8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402b90:	3507      	adds	r5, #7
  402b92:	f025 0307 	bic.w	r3, r5, #7
  402b96:	f103 0208 	add.w	r2, r3, #8
  402b9a:	f01b 0f01 	tst.w	fp, #1
  402b9e:	920f      	str	r2, [sp, #60]	; 0x3c
  402ba0:	e9d3 4500 	ldrd	r4, r5, [r3]
  402ba4:	f47f aef4 	bne.w	402990 <_svfprintf_r+0x514>
  402ba8:	2302      	movs	r3, #2
  402baa:	e55a      	b.n	402662 <_svfprintf_r+0x1e6>
  402bac:	9311      	str	r3, [sp, #68]	; 0x44
  402bae:	2a00      	cmp	r2, #0
  402bb0:	f040 867e 	bne.w	4038b0 <_svfprintf_r+0x1434>
  402bb4:	f04b 0b10 	orr.w	fp, fp, #16
  402bb8:	f01b 0f20 	tst.w	fp, #32
  402bbc:	d0a1      	beq.n	402b02 <_svfprintf_r+0x686>
  402bbe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402bc0:	3507      	adds	r5, #7
  402bc2:	f025 0507 	bic.w	r5, r5, #7
  402bc6:	e9d5 2300 	ldrd	r2, r3, [r5]
  402bca:	2a00      	cmp	r2, #0
  402bcc:	f105 0108 	add.w	r1, r5, #8
  402bd0:	461d      	mov	r5, r3
  402bd2:	f173 0300 	sbcs.w	r3, r3, #0
  402bd6:	910f      	str	r1, [sp, #60]	; 0x3c
  402bd8:	4614      	mov	r4, r2
  402bda:	daa6      	bge.n	402b2a <_svfprintf_r+0x6ae>
  402bdc:	272d      	movs	r7, #45	; 0x2d
  402bde:	4264      	negs	r4, r4
  402be0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402be4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402be8:	2301      	movs	r3, #1
  402bea:	e53d      	b.n	402668 <_svfprintf_r+0x1ec>
  402bec:	9311      	str	r3, [sp, #68]	; 0x44
  402bee:	2a00      	cmp	r2, #0
  402bf0:	f040 865a 	bne.w	4038a8 <_svfprintf_r+0x142c>
  402bf4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402bf6:	3507      	adds	r5, #7
  402bf8:	f025 0307 	bic.w	r3, r5, #7
  402bfc:	f103 0208 	add.w	r2, r3, #8
  402c00:	920f      	str	r2, [sp, #60]	; 0x3c
  402c02:	681a      	ldr	r2, [r3, #0]
  402c04:	9214      	str	r2, [sp, #80]	; 0x50
  402c06:	685b      	ldr	r3, [r3, #4]
  402c08:	9315      	str	r3, [sp, #84]	; 0x54
  402c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402c0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  402c0e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402c12:	4628      	mov	r0, r5
  402c14:	4621      	mov	r1, r4
  402c16:	f04f 32ff 	mov.w	r2, #4294967295
  402c1a:	4b58      	ldr	r3, [pc, #352]	; (402d7c <_svfprintf_r+0x900>)
  402c1c:	f003 fe3e 	bl	40689c <__aeabi_dcmpun>
  402c20:	2800      	cmp	r0, #0
  402c22:	f040 8348 	bne.w	4032b6 <_svfprintf_r+0xe3a>
  402c26:	4628      	mov	r0, r5
  402c28:	4621      	mov	r1, r4
  402c2a:	f04f 32ff 	mov.w	r2, #4294967295
  402c2e:	4b53      	ldr	r3, [pc, #332]	; (402d7c <_svfprintf_r+0x900>)
  402c30:	f003 fe16 	bl	406860 <__aeabi_dcmple>
  402c34:	2800      	cmp	r0, #0
  402c36:	f040 833e 	bne.w	4032b6 <_svfprintf_r+0xe3a>
  402c3a:	a814      	add	r0, sp, #80	; 0x50
  402c3c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  402c3e:	f003 fe05 	bl	40684c <__aeabi_dcmplt>
  402c42:	2800      	cmp	r0, #0
  402c44:	f040 852f 	bne.w	4036a6 <_svfprintf_r+0x122a>
  402c48:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402c4c:	4e4c      	ldr	r6, [pc, #304]	; (402d80 <_svfprintf_r+0x904>)
  402c4e:	4b4d      	ldr	r3, [pc, #308]	; (402d84 <_svfprintf_r+0x908>)
  402c50:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  402c54:	9007      	str	r0, [sp, #28]
  402c56:	9811      	ldr	r0, [sp, #68]	; 0x44
  402c58:	2203      	movs	r2, #3
  402c5a:	2100      	movs	r1, #0
  402c5c:	9208      	str	r2, [sp, #32]
  402c5e:	910a      	str	r1, [sp, #40]	; 0x28
  402c60:	2847      	cmp	r0, #71	; 0x47
  402c62:	bfd8      	it	le
  402c64:	461e      	movle	r6, r3
  402c66:	920e      	str	r2, [sp, #56]	; 0x38
  402c68:	9112      	str	r1, [sp, #72]	; 0x48
  402c6a:	e51f      	b.n	4026ac <_svfprintf_r+0x230>
  402c6c:	f04b 0b08 	orr.w	fp, fp, #8
  402c70:	f89a 3000 	ldrb.w	r3, [sl]
  402c74:	e45a      	b.n	40252c <_svfprintf_r+0xb0>
  402c76:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402c7a:	2300      	movs	r3, #0
  402c7c:	461c      	mov	r4, r3
  402c7e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402c82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402c86:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402c8a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402c8e:	2809      	cmp	r0, #9
  402c90:	d9f5      	bls.n	402c7e <_svfprintf_r+0x802>
  402c92:	940d      	str	r4, [sp, #52]	; 0x34
  402c94:	e44c      	b.n	402530 <_svfprintf_r+0xb4>
  402c96:	f04b 0b10 	orr.w	fp, fp, #16
  402c9a:	9311      	str	r3, [sp, #68]	; 0x44
  402c9c:	f01b 0320 	ands.w	r3, fp, #32
  402ca0:	f43f ae1e 	beq.w	4028e0 <_svfprintf_r+0x464>
  402ca4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402ca6:	3507      	adds	r5, #7
  402ca8:	f025 0307 	bic.w	r3, r5, #7
  402cac:	f103 0208 	add.w	r2, r3, #8
  402cb0:	e9d3 4500 	ldrd	r4, r5, [r3]
  402cb4:	920f      	str	r2, [sp, #60]	; 0x3c
  402cb6:	2300      	movs	r3, #0
  402cb8:	e4d3      	b.n	402662 <_svfprintf_r+0x1e6>
  402cba:	9311      	str	r3, [sp, #68]	; 0x44
  402cbc:	2a00      	cmp	r2, #0
  402cbe:	f040 85e0 	bne.w	403882 <_svfprintf_r+0x1406>
  402cc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402cc4:	2a00      	cmp	r2, #0
  402cc6:	f43f aca4 	beq.w	402612 <_svfprintf_r+0x196>
  402cca:	2300      	movs	r3, #0
  402ccc:	2101      	movs	r1, #1
  402cce:	461f      	mov	r7, r3
  402cd0:	9108      	str	r1, [sp, #32]
  402cd2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402cd6:	f8cd b01c 	str.w	fp, [sp, #28]
  402cda:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402cde:	930a      	str	r3, [sp, #40]	; 0x28
  402ce0:	9312      	str	r3, [sp, #72]	; 0x48
  402ce2:	910e      	str	r1, [sp, #56]	; 0x38
  402ce4:	ae28      	add	r6, sp, #160	; 0xa0
  402ce6:	e4e5      	b.n	4026b4 <_svfprintf_r+0x238>
  402ce8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402cea:	e535      	b.n	402758 <_svfprintf_r+0x2dc>
  402cec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402cee:	2b65      	cmp	r3, #101	; 0x65
  402cf0:	f340 80a6 	ble.w	402e40 <_svfprintf_r+0x9c4>
  402cf4:	a814      	add	r0, sp, #80	; 0x50
  402cf6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  402cf8:	f003 fd9e 	bl	406838 <__aeabi_dcmpeq>
  402cfc:	2800      	cmp	r0, #0
  402cfe:	f000 814f 	beq.w	402fa0 <_svfprintf_r+0xb24>
  402d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d04:	4a20      	ldr	r2, [pc, #128]	; (402d88 <_svfprintf_r+0x90c>)
  402d06:	f8c8 2000 	str.w	r2, [r8]
  402d0a:	3301      	adds	r3, #1
  402d0c:	3401      	adds	r4, #1
  402d0e:	2201      	movs	r2, #1
  402d10:	2b07      	cmp	r3, #7
  402d12:	9427      	str	r4, [sp, #156]	; 0x9c
  402d14:	9326      	str	r3, [sp, #152]	; 0x98
  402d16:	f8c8 2004 	str.w	r2, [r8, #4]
  402d1a:	f300 836a 	bgt.w	4033f2 <_svfprintf_r+0xf76>
  402d1e:	f108 0808 	add.w	r8, r8, #8
  402d22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402d24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402d26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d28:	4293      	cmp	r3, r2
  402d2a:	db03      	blt.n	402d34 <_svfprintf_r+0x8b8>
  402d2c:	9b07      	ldr	r3, [sp, #28]
  402d2e:	07dd      	lsls	r5, r3, #31
  402d30:	f57f ad84 	bpl.w	40283c <_svfprintf_r+0x3c0>
  402d34:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d36:	9919      	ldr	r1, [sp, #100]	; 0x64
  402d38:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402d3a:	f8c8 2000 	str.w	r2, [r8]
  402d3e:	3301      	adds	r3, #1
  402d40:	440c      	add	r4, r1
  402d42:	2b07      	cmp	r3, #7
  402d44:	f8c8 1004 	str.w	r1, [r8, #4]
  402d48:	9427      	str	r4, [sp, #156]	; 0x9c
  402d4a:	9326      	str	r3, [sp, #152]	; 0x98
  402d4c:	f300 839e 	bgt.w	40348c <_svfprintf_r+0x1010>
  402d50:	f108 0808 	add.w	r8, r8, #8
  402d54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402d56:	1e5e      	subs	r6, r3, #1
  402d58:	2e00      	cmp	r6, #0
  402d5a:	f77f ad6f 	ble.w	40283c <_svfprintf_r+0x3c0>
  402d5e:	2e10      	cmp	r6, #16
  402d60:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d62:	4d0a      	ldr	r5, [pc, #40]	; (402d8c <_svfprintf_r+0x910>)
  402d64:	f340 81f5 	ble.w	403152 <_svfprintf_r+0xcd6>
  402d68:	4622      	mov	r2, r4
  402d6a:	2710      	movs	r7, #16
  402d6c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402d70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402d72:	e013      	b.n	402d9c <_svfprintf_r+0x920>
  402d74:	00406d20 	.word	0x00406d20
  402d78:	00406d0c 	.word	0x00406d0c
  402d7c:	7fefffff 	.word	0x7fefffff
  402d80:	00406d00 	.word	0x00406d00
  402d84:	00406cfc 	.word	0x00406cfc
  402d88:	00406d3c 	.word	0x00406d3c
  402d8c:	00406d50 	.word	0x00406d50
  402d90:	f108 0808 	add.w	r8, r8, #8
  402d94:	3e10      	subs	r6, #16
  402d96:	2e10      	cmp	r6, #16
  402d98:	f340 81da 	ble.w	403150 <_svfprintf_r+0xcd4>
  402d9c:	3301      	adds	r3, #1
  402d9e:	3210      	adds	r2, #16
  402da0:	2b07      	cmp	r3, #7
  402da2:	9227      	str	r2, [sp, #156]	; 0x9c
  402da4:	9326      	str	r3, [sp, #152]	; 0x98
  402da6:	e888 00a0 	stmia.w	r8, {r5, r7}
  402daa:	ddf1      	ble.n	402d90 <_svfprintf_r+0x914>
  402dac:	aa25      	add	r2, sp, #148	; 0x94
  402dae:	4621      	mov	r1, r4
  402db0:	4658      	mov	r0, fp
  402db2:	f002 fcd3 	bl	40575c <__ssprint_r>
  402db6:	2800      	cmp	r0, #0
  402db8:	f47f ac32 	bne.w	402620 <_svfprintf_r+0x1a4>
  402dbc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402dbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402dc0:	46c8      	mov	r8, r9
  402dc2:	e7e7      	b.n	402d94 <_svfprintf_r+0x918>
  402dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402dc6:	9a08      	ldr	r2, [sp, #32]
  402dc8:	1a9f      	subs	r7, r3, r2
  402dca:	2f00      	cmp	r7, #0
  402dcc:	f77f ace7 	ble.w	40279e <_svfprintf_r+0x322>
  402dd0:	2f10      	cmp	r7, #16
  402dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402dd4:	4db6      	ldr	r5, [pc, #728]	; (4030b0 <_svfprintf_r+0xc34>)
  402dd6:	dd27      	ble.n	402e28 <_svfprintf_r+0x9ac>
  402dd8:	4642      	mov	r2, r8
  402dda:	4621      	mov	r1, r4
  402ddc:	46b0      	mov	r8, r6
  402dde:	f04f 0b10 	mov.w	fp, #16
  402de2:	462e      	mov	r6, r5
  402de4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402de6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402de8:	e004      	b.n	402df4 <_svfprintf_r+0x978>
  402dea:	3f10      	subs	r7, #16
  402dec:	2f10      	cmp	r7, #16
  402dee:	f102 0208 	add.w	r2, r2, #8
  402df2:	dd15      	ble.n	402e20 <_svfprintf_r+0x9a4>
  402df4:	3301      	adds	r3, #1
  402df6:	3110      	adds	r1, #16
  402df8:	2b07      	cmp	r3, #7
  402dfa:	9127      	str	r1, [sp, #156]	; 0x9c
  402dfc:	9326      	str	r3, [sp, #152]	; 0x98
  402dfe:	e882 0840 	stmia.w	r2, {r6, fp}
  402e02:	ddf2      	ble.n	402dea <_svfprintf_r+0x96e>
  402e04:	aa25      	add	r2, sp, #148	; 0x94
  402e06:	4629      	mov	r1, r5
  402e08:	4620      	mov	r0, r4
  402e0a:	f002 fca7 	bl	40575c <__ssprint_r>
  402e0e:	2800      	cmp	r0, #0
  402e10:	f47f ac06 	bne.w	402620 <_svfprintf_r+0x1a4>
  402e14:	3f10      	subs	r7, #16
  402e16:	2f10      	cmp	r7, #16
  402e18:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e1c:	464a      	mov	r2, r9
  402e1e:	dce9      	bgt.n	402df4 <_svfprintf_r+0x978>
  402e20:	4635      	mov	r5, r6
  402e22:	460c      	mov	r4, r1
  402e24:	4646      	mov	r6, r8
  402e26:	4690      	mov	r8, r2
  402e28:	3301      	adds	r3, #1
  402e2a:	443c      	add	r4, r7
  402e2c:	2b07      	cmp	r3, #7
  402e2e:	9427      	str	r4, [sp, #156]	; 0x9c
  402e30:	9326      	str	r3, [sp, #152]	; 0x98
  402e32:	e888 00a0 	stmia.w	r8, {r5, r7}
  402e36:	f300 8232 	bgt.w	40329e <_svfprintf_r+0xe22>
  402e3a:	f108 0808 	add.w	r8, r8, #8
  402e3e:	e4ae      	b.n	40279e <_svfprintf_r+0x322>
  402e40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402e42:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402e44:	2b01      	cmp	r3, #1
  402e46:	f340 81fe 	ble.w	403246 <_svfprintf_r+0xdca>
  402e4a:	3701      	adds	r7, #1
  402e4c:	3401      	adds	r4, #1
  402e4e:	2301      	movs	r3, #1
  402e50:	2f07      	cmp	r7, #7
  402e52:	9427      	str	r4, [sp, #156]	; 0x9c
  402e54:	9726      	str	r7, [sp, #152]	; 0x98
  402e56:	f8c8 6000 	str.w	r6, [r8]
  402e5a:	f8c8 3004 	str.w	r3, [r8, #4]
  402e5e:	f300 8203 	bgt.w	403268 <_svfprintf_r+0xdec>
  402e62:	f108 0808 	add.w	r8, r8, #8
  402e66:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402e68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402e6a:	f8c8 3000 	str.w	r3, [r8]
  402e6e:	3701      	adds	r7, #1
  402e70:	4414      	add	r4, r2
  402e72:	2f07      	cmp	r7, #7
  402e74:	9427      	str	r4, [sp, #156]	; 0x9c
  402e76:	9726      	str	r7, [sp, #152]	; 0x98
  402e78:	f8c8 2004 	str.w	r2, [r8, #4]
  402e7c:	f300 8200 	bgt.w	403280 <_svfprintf_r+0xe04>
  402e80:	f108 0808 	add.w	r8, r8, #8
  402e84:	a814      	add	r0, sp, #80	; 0x50
  402e86:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  402e88:	f003 fcd6 	bl	406838 <__aeabi_dcmpeq>
  402e8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402e8e:	2800      	cmp	r0, #0
  402e90:	f040 8101 	bne.w	403096 <_svfprintf_r+0xc1a>
  402e94:	3b01      	subs	r3, #1
  402e96:	3701      	adds	r7, #1
  402e98:	3601      	adds	r6, #1
  402e9a:	441c      	add	r4, r3
  402e9c:	2f07      	cmp	r7, #7
  402e9e:	9726      	str	r7, [sp, #152]	; 0x98
  402ea0:	9427      	str	r4, [sp, #156]	; 0x9c
  402ea2:	f8c8 6000 	str.w	r6, [r8]
  402ea6:	f8c8 3004 	str.w	r3, [r8, #4]
  402eaa:	f300 8128 	bgt.w	4030fe <_svfprintf_r+0xc82>
  402eae:	f108 0808 	add.w	r8, r8, #8
  402eb2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402eb4:	f8c8 2004 	str.w	r2, [r8, #4]
  402eb8:	3701      	adds	r7, #1
  402eba:	4414      	add	r4, r2
  402ebc:	ab21      	add	r3, sp, #132	; 0x84
  402ebe:	2f07      	cmp	r7, #7
  402ec0:	9427      	str	r4, [sp, #156]	; 0x9c
  402ec2:	9726      	str	r7, [sp, #152]	; 0x98
  402ec4:	f8c8 3000 	str.w	r3, [r8]
  402ec8:	f77f acb6 	ble.w	402838 <_svfprintf_r+0x3bc>
  402ecc:	aa25      	add	r2, sp, #148	; 0x94
  402ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ed0:	980c      	ldr	r0, [sp, #48]	; 0x30
  402ed2:	f002 fc43 	bl	40575c <__ssprint_r>
  402ed6:	2800      	cmp	r0, #0
  402ed8:	f47f aba2 	bne.w	402620 <_svfprintf_r+0x1a4>
  402edc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402ede:	46c8      	mov	r8, r9
  402ee0:	e4ac      	b.n	40283c <_svfprintf_r+0x3c0>
  402ee2:	aa25      	add	r2, sp, #148	; 0x94
  402ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ee6:	980c      	ldr	r0, [sp, #48]	; 0x30
  402ee8:	f002 fc38 	bl	40575c <__ssprint_r>
  402eec:	2800      	cmp	r0, #0
  402eee:	f43f acee 	beq.w	4028ce <_svfprintf_r+0x452>
  402ef2:	f7ff bb95 	b.w	402620 <_svfprintf_r+0x1a4>
  402ef6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402efa:	2b01      	cmp	r3, #1
  402efc:	f000 8135 	beq.w	40316a <_svfprintf_r+0xcee>
  402f00:	2b02      	cmp	r3, #2
  402f02:	d125      	bne.n	402f50 <_svfprintf_r+0xad4>
  402f04:	f8cd b01c 	str.w	fp, [sp, #28]
  402f08:	2400      	movs	r4, #0
  402f0a:	2500      	movs	r5, #0
  402f0c:	e621      	b.n	402b52 <_svfprintf_r+0x6d6>
  402f0e:	aa25      	add	r2, sp, #148	; 0x94
  402f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f12:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f14:	f002 fc22 	bl	40575c <__ssprint_r>
  402f18:	2800      	cmp	r0, #0
  402f1a:	f47f ab81 	bne.w	402620 <_svfprintf_r+0x1a4>
  402f1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f20:	46c8      	mov	r8, r9
  402f22:	e478      	b.n	402816 <_svfprintf_r+0x39a>
  402f24:	aa25      	add	r2, sp, #148	; 0x94
  402f26:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f28:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f2a:	f002 fc17 	bl	40575c <__ssprint_r>
  402f2e:	2800      	cmp	r0, #0
  402f30:	f47f ab76 	bne.w	402620 <_svfprintf_r+0x1a4>
  402f34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f36:	46c8      	mov	r8, r9
  402f38:	e41e      	b.n	402778 <_svfprintf_r+0x2fc>
  402f3a:	aa25      	add	r2, sp, #148	; 0x94
  402f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f3e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f40:	f002 fc0c 	bl	40575c <__ssprint_r>
  402f44:	2800      	cmp	r0, #0
  402f46:	f47f ab6b 	bne.w	402620 <_svfprintf_r+0x1a4>
  402f4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f4c:	46c8      	mov	r8, r9
  402f4e:	e423      	b.n	402798 <_svfprintf_r+0x31c>
  402f50:	f8cd b01c 	str.w	fp, [sp, #28]
  402f54:	2400      	movs	r4, #0
  402f56:	2500      	movs	r5, #0
  402f58:	4649      	mov	r1, r9
  402f5a:	e000      	b.n	402f5e <_svfprintf_r+0xae2>
  402f5c:	4631      	mov	r1, r6
  402f5e:	08e2      	lsrs	r2, r4, #3
  402f60:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402f64:	08e8      	lsrs	r0, r5, #3
  402f66:	f004 0307 	and.w	r3, r4, #7
  402f6a:	4605      	mov	r5, r0
  402f6c:	4614      	mov	r4, r2
  402f6e:	3330      	adds	r3, #48	; 0x30
  402f70:	ea54 0205 	orrs.w	r2, r4, r5
  402f74:	f801 3c01 	strb.w	r3, [r1, #-1]
  402f78:	f101 36ff 	add.w	r6, r1, #4294967295
  402f7c:	d1ee      	bne.n	402f5c <_svfprintf_r+0xae0>
  402f7e:	9a07      	ldr	r2, [sp, #28]
  402f80:	07d2      	lsls	r2, r2, #31
  402f82:	f57f adf6 	bpl.w	402b72 <_svfprintf_r+0x6f6>
  402f86:	2b30      	cmp	r3, #48	; 0x30
  402f88:	f43f adf3 	beq.w	402b72 <_svfprintf_r+0x6f6>
  402f8c:	3902      	subs	r1, #2
  402f8e:	2330      	movs	r3, #48	; 0x30
  402f90:	f806 3c01 	strb.w	r3, [r6, #-1]
  402f94:	eba9 0301 	sub.w	r3, r9, r1
  402f98:	930e      	str	r3, [sp, #56]	; 0x38
  402f9a:	460e      	mov	r6, r1
  402f9c:	f7ff bb7e 	b.w	40269c <_svfprintf_r+0x220>
  402fa0:	991f      	ldr	r1, [sp, #124]	; 0x7c
  402fa2:	2900      	cmp	r1, #0
  402fa4:	f340 822f 	ble.w	403406 <_svfprintf_r+0xf8a>
  402fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402faa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402fac:	4293      	cmp	r3, r2
  402fae:	bfa8      	it	ge
  402fb0:	4613      	movge	r3, r2
  402fb2:	2b00      	cmp	r3, #0
  402fb4:	461f      	mov	r7, r3
  402fb6:	dd0d      	ble.n	402fd4 <_svfprintf_r+0xb58>
  402fb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402fba:	f8c8 6000 	str.w	r6, [r8]
  402fbe:	3301      	adds	r3, #1
  402fc0:	443c      	add	r4, r7
  402fc2:	2b07      	cmp	r3, #7
  402fc4:	9427      	str	r4, [sp, #156]	; 0x9c
  402fc6:	f8c8 7004 	str.w	r7, [r8, #4]
  402fca:	9326      	str	r3, [sp, #152]	; 0x98
  402fcc:	f300 8320 	bgt.w	403610 <_svfprintf_r+0x1194>
  402fd0:	f108 0808 	add.w	r8, r8, #8
  402fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402fd6:	2f00      	cmp	r7, #0
  402fd8:	bfa8      	it	ge
  402fda:	1bdb      	subge	r3, r3, r7
  402fdc:	2b00      	cmp	r3, #0
  402fde:	461f      	mov	r7, r3
  402fe0:	f340 80d7 	ble.w	403192 <_svfprintf_r+0xd16>
  402fe4:	2f10      	cmp	r7, #16
  402fe6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402fe8:	4d31      	ldr	r5, [pc, #196]	; (4030b0 <_svfprintf_r+0xc34>)
  402fea:	f340 81ee 	ble.w	4033ca <_svfprintf_r+0xf4e>
  402fee:	4642      	mov	r2, r8
  402ff0:	4621      	mov	r1, r4
  402ff2:	46b0      	mov	r8, r6
  402ff4:	f04f 0b10 	mov.w	fp, #16
  402ff8:	462e      	mov	r6, r5
  402ffa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402ffc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402ffe:	e004      	b.n	40300a <_svfprintf_r+0xb8e>
  403000:	3208      	adds	r2, #8
  403002:	3f10      	subs	r7, #16
  403004:	2f10      	cmp	r7, #16
  403006:	f340 81dc 	ble.w	4033c2 <_svfprintf_r+0xf46>
  40300a:	3301      	adds	r3, #1
  40300c:	3110      	adds	r1, #16
  40300e:	2b07      	cmp	r3, #7
  403010:	9127      	str	r1, [sp, #156]	; 0x9c
  403012:	9326      	str	r3, [sp, #152]	; 0x98
  403014:	e882 0840 	stmia.w	r2, {r6, fp}
  403018:	ddf2      	ble.n	403000 <_svfprintf_r+0xb84>
  40301a:	aa25      	add	r2, sp, #148	; 0x94
  40301c:	4629      	mov	r1, r5
  40301e:	4620      	mov	r0, r4
  403020:	f002 fb9c 	bl	40575c <__ssprint_r>
  403024:	2800      	cmp	r0, #0
  403026:	f47f aafb 	bne.w	402620 <_svfprintf_r+0x1a4>
  40302a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40302c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40302e:	464a      	mov	r2, r9
  403030:	e7e7      	b.n	403002 <_svfprintf_r+0xb86>
  403032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403034:	930e      	str	r3, [sp, #56]	; 0x38
  403036:	464e      	mov	r6, r9
  403038:	f7ff bb30 	b.w	40269c <_svfprintf_r+0x220>
  40303c:	2d00      	cmp	r5, #0
  40303e:	bf08      	it	eq
  403040:	2c0a      	cmpeq	r4, #10
  403042:	f0c0 8090 	bcc.w	403166 <_svfprintf_r+0xcea>
  403046:	464e      	mov	r6, r9
  403048:	4620      	mov	r0, r4
  40304a:	4629      	mov	r1, r5
  40304c:	220a      	movs	r2, #10
  40304e:	2300      	movs	r3, #0
  403050:	f003 fc62 	bl	406918 <__aeabi_uldivmod>
  403054:	3230      	adds	r2, #48	; 0x30
  403056:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40305a:	4620      	mov	r0, r4
  40305c:	4629      	mov	r1, r5
  40305e:	2300      	movs	r3, #0
  403060:	220a      	movs	r2, #10
  403062:	f003 fc59 	bl	406918 <__aeabi_uldivmod>
  403066:	4604      	mov	r4, r0
  403068:	460d      	mov	r5, r1
  40306a:	ea54 0305 	orrs.w	r3, r4, r5
  40306e:	d1eb      	bne.n	403048 <_svfprintf_r+0xbcc>
  403070:	eba9 0306 	sub.w	r3, r9, r6
  403074:	930e      	str	r3, [sp, #56]	; 0x38
  403076:	f7ff bb11 	b.w	40269c <_svfprintf_r+0x220>
  40307a:	aa25      	add	r2, sp, #148	; 0x94
  40307c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40307e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403080:	f002 fb6c 	bl	40575c <__ssprint_r>
  403084:	2800      	cmp	r0, #0
  403086:	f47f aacb 	bne.w	402620 <_svfprintf_r+0x1a4>
  40308a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40308e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403090:	46c8      	mov	r8, r9
  403092:	f7ff bb61 	b.w	402758 <_svfprintf_r+0x2dc>
  403096:	1e5e      	subs	r6, r3, #1
  403098:	2e00      	cmp	r6, #0
  40309a:	f77f af0a 	ble.w	402eb2 <_svfprintf_r+0xa36>
  40309e:	2e10      	cmp	r6, #16
  4030a0:	4d03      	ldr	r5, [pc, #12]	; (4030b0 <_svfprintf_r+0xc34>)
  4030a2:	dd23      	ble.n	4030ec <_svfprintf_r+0xc70>
  4030a4:	4622      	mov	r2, r4
  4030a6:	f04f 0b10 	mov.w	fp, #16
  4030aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4030ac:	e007      	b.n	4030be <_svfprintf_r+0xc42>
  4030ae:	bf00      	nop
  4030b0:	00406d50 	.word	0x00406d50
  4030b4:	3e10      	subs	r6, #16
  4030b6:	2e10      	cmp	r6, #16
  4030b8:	f108 0808 	add.w	r8, r8, #8
  4030bc:	dd15      	ble.n	4030ea <_svfprintf_r+0xc6e>
  4030be:	3701      	adds	r7, #1
  4030c0:	3210      	adds	r2, #16
  4030c2:	2f07      	cmp	r7, #7
  4030c4:	9227      	str	r2, [sp, #156]	; 0x9c
  4030c6:	9726      	str	r7, [sp, #152]	; 0x98
  4030c8:	e888 0820 	stmia.w	r8, {r5, fp}
  4030cc:	ddf2      	ble.n	4030b4 <_svfprintf_r+0xc38>
  4030ce:	aa25      	add	r2, sp, #148	; 0x94
  4030d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4030d2:	4620      	mov	r0, r4
  4030d4:	f002 fb42 	bl	40575c <__ssprint_r>
  4030d8:	2800      	cmp	r0, #0
  4030da:	f47f aaa1 	bne.w	402620 <_svfprintf_r+0x1a4>
  4030de:	3e10      	subs	r6, #16
  4030e0:	2e10      	cmp	r6, #16
  4030e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4030e4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4030e6:	46c8      	mov	r8, r9
  4030e8:	dce9      	bgt.n	4030be <_svfprintf_r+0xc42>
  4030ea:	4614      	mov	r4, r2
  4030ec:	3701      	adds	r7, #1
  4030ee:	4434      	add	r4, r6
  4030f0:	2f07      	cmp	r7, #7
  4030f2:	9427      	str	r4, [sp, #156]	; 0x9c
  4030f4:	9726      	str	r7, [sp, #152]	; 0x98
  4030f6:	e888 0060 	stmia.w	r8, {r5, r6}
  4030fa:	f77f aed8 	ble.w	402eae <_svfprintf_r+0xa32>
  4030fe:	aa25      	add	r2, sp, #148	; 0x94
  403100:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403102:	980c      	ldr	r0, [sp, #48]	; 0x30
  403104:	f002 fb2a 	bl	40575c <__ssprint_r>
  403108:	2800      	cmp	r0, #0
  40310a:	f47f aa89 	bne.w	402620 <_svfprintf_r+0x1a4>
  40310e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403110:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403112:	46c8      	mov	r8, r9
  403114:	e6cd      	b.n	402eb2 <_svfprintf_r+0xa36>
  403116:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403118:	6814      	ldr	r4, [r2, #0]
  40311a:	4613      	mov	r3, r2
  40311c:	3304      	adds	r3, #4
  40311e:	17e5      	asrs	r5, r4, #31
  403120:	930f      	str	r3, [sp, #60]	; 0x3c
  403122:	4622      	mov	r2, r4
  403124:	462b      	mov	r3, r5
  403126:	e4fc      	b.n	402b22 <_svfprintf_r+0x6a6>
  403128:	3204      	adds	r2, #4
  40312a:	681c      	ldr	r4, [r3, #0]
  40312c:	920f      	str	r2, [sp, #60]	; 0x3c
  40312e:	2301      	movs	r3, #1
  403130:	2500      	movs	r5, #0
  403132:	f7ff ba96 	b.w	402662 <_svfprintf_r+0x1e6>
  403136:	681c      	ldr	r4, [r3, #0]
  403138:	3304      	adds	r3, #4
  40313a:	930f      	str	r3, [sp, #60]	; 0x3c
  40313c:	2500      	movs	r5, #0
  40313e:	e423      	b.n	402988 <_svfprintf_r+0x50c>
  403140:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403142:	460a      	mov	r2, r1
  403144:	3204      	adds	r2, #4
  403146:	680c      	ldr	r4, [r1, #0]
  403148:	920f      	str	r2, [sp, #60]	; 0x3c
  40314a:	2500      	movs	r5, #0
  40314c:	f7ff ba89 	b.w	402662 <_svfprintf_r+0x1e6>
  403150:	4614      	mov	r4, r2
  403152:	3301      	adds	r3, #1
  403154:	4434      	add	r4, r6
  403156:	2b07      	cmp	r3, #7
  403158:	9427      	str	r4, [sp, #156]	; 0x9c
  40315a:	9326      	str	r3, [sp, #152]	; 0x98
  40315c:	e888 0060 	stmia.w	r8, {r5, r6}
  403160:	f77f ab6a 	ble.w	402838 <_svfprintf_r+0x3bc>
  403164:	e6b2      	b.n	402ecc <_svfprintf_r+0xa50>
  403166:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40316a:	f8cd b01c 	str.w	fp, [sp, #28]
  40316e:	ae42      	add	r6, sp, #264	; 0x108
  403170:	3430      	adds	r4, #48	; 0x30
  403172:	2301      	movs	r3, #1
  403174:	f806 4d41 	strb.w	r4, [r6, #-65]!
  403178:	930e      	str	r3, [sp, #56]	; 0x38
  40317a:	f7ff ba8f 	b.w	40269c <_svfprintf_r+0x220>
  40317e:	aa25      	add	r2, sp, #148	; 0x94
  403180:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403182:	980c      	ldr	r0, [sp, #48]	; 0x30
  403184:	f002 faea 	bl	40575c <__ssprint_r>
  403188:	2800      	cmp	r0, #0
  40318a:	f47f aa49 	bne.w	402620 <_svfprintf_r+0x1a4>
  40318e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403190:	46c8      	mov	r8, r9
  403192:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403194:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403196:	429a      	cmp	r2, r3
  403198:	db44      	blt.n	403224 <_svfprintf_r+0xda8>
  40319a:	9b07      	ldr	r3, [sp, #28]
  40319c:	07d9      	lsls	r1, r3, #31
  40319e:	d441      	bmi.n	403224 <_svfprintf_r+0xda8>
  4031a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4031a2:	9812      	ldr	r0, [sp, #72]	; 0x48
  4031a4:	1a9a      	subs	r2, r3, r2
  4031a6:	1a1d      	subs	r5, r3, r0
  4031a8:	4295      	cmp	r5, r2
  4031aa:	bfa8      	it	ge
  4031ac:	4615      	movge	r5, r2
  4031ae:	2d00      	cmp	r5, #0
  4031b0:	dd0e      	ble.n	4031d0 <_svfprintf_r+0xd54>
  4031b2:	9926      	ldr	r1, [sp, #152]	; 0x98
  4031b4:	f8c8 5004 	str.w	r5, [r8, #4]
  4031b8:	3101      	adds	r1, #1
  4031ba:	4406      	add	r6, r0
  4031bc:	442c      	add	r4, r5
  4031be:	2907      	cmp	r1, #7
  4031c0:	f8c8 6000 	str.w	r6, [r8]
  4031c4:	9427      	str	r4, [sp, #156]	; 0x9c
  4031c6:	9126      	str	r1, [sp, #152]	; 0x98
  4031c8:	f300 823b 	bgt.w	403642 <_svfprintf_r+0x11c6>
  4031cc:	f108 0808 	add.w	r8, r8, #8
  4031d0:	2d00      	cmp	r5, #0
  4031d2:	bfac      	ite	ge
  4031d4:	1b56      	subge	r6, r2, r5
  4031d6:	4616      	movlt	r6, r2
  4031d8:	2e00      	cmp	r6, #0
  4031da:	f77f ab2f 	ble.w	40283c <_svfprintf_r+0x3c0>
  4031de:	2e10      	cmp	r6, #16
  4031e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4031e2:	4db0      	ldr	r5, [pc, #704]	; (4034a4 <_svfprintf_r+0x1028>)
  4031e4:	ddb5      	ble.n	403152 <_svfprintf_r+0xcd6>
  4031e6:	4622      	mov	r2, r4
  4031e8:	2710      	movs	r7, #16
  4031ea:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4031ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4031f0:	e004      	b.n	4031fc <_svfprintf_r+0xd80>
  4031f2:	f108 0808 	add.w	r8, r8, #8
  4031f6:	3e10      	subs	r6, #16
  4031f8:	2e10      	cmp	r6, #16
  4031fa:	dda9      	ble.n	403150 <_svfprintf_r+0xcd4>
  4031fc:	3301      	adds	r3, #1
  4031fe:	3210      	adds	r2, #16
  403200:	2b07      	cmp	r3, #7
  403202:	9227      	str	r2, [sp, #156]	; 0x9c
  403204:	9326      	str	r3, [sp, #152]	; 0x98
  403206:	e888 00a0 	stmia.w	r8, {r5, r7}
  40320a:	ddf2      	ble.n	4031f2 <_svfprintf_r+0xd76>
  40320c:	aa25      	add	r2, sp, #148	; 0x94
  40320e:	4621      	mov	r1, r4
  403210:	4658      	mov	r0, fp
  403212:	f002 faa3 	bl	40575c <__ssprint_r>
  403216:	2800      	cmp	r0, #0
  403218:	f47f aa02 	bne.w	402620 <_svfprintf_r+0x1a4>
  40321c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40321e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403220:	46c8      	mov	r8, r9
  403222:	e7e8      	b.n	4031f6 <_svfprintf_r+0xd7a>
  403224:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403226:	9819      	ldr	r0, [sp, #100]	; 0x64
  403228:	991a      	ldr	r1, [sp, #104]	; 0x68
  40322a:	f8c8 1000 	str.w	r1, [r8]
  40322e:	3301      	adds	r3, #1
  403230:	4404      	add	r4, r0
  403232:	2b07      	cmp	r3, #7
  403234:	9427      	str	r4, [sp, #156]	; 0x9c
  403236:	f8c8 0004 	str.w	r0, [r8, #4]
  40323a:	9326      	str	r3, [sp, #152]	; 0x98
  40323c:	f300 81f5 	bgt.w	40362a <_svfprintf_r+0x11ae>
  403240:	f108 0808 	add.w	r8, r8, #8
  403244:	e7ac      	b.n	4031a0 <_svfprintf_r+0xd24>
  403246:	9b07      	ldr	r3, [sp, #28]
  403248:	07da      	lsls	r2, r3, #31
  40324a:	f53f adfe 	bmi.w	402e4a <_svfprintf_r+0x9ce>
  40324e:	3701      	adds	r7, #1
  403250:	3401      	adds	r4, #1
  403252:	2301      	movs	r3, #1
  403254:	2f07      	cmp	r7, #7
  403256:	9427      	str	r4, [sp, #156]	; 0x9c
  403258:	9726      	str	r7, [sp, #152]	; 0x98
  40325a:	f8c8 6000 	str.w	r6, [r8]
  40325e:	f8c8 3004 	str.w	r3, [r8, #4]
  403262:	f77f ae24 	ble.w	402eae <_svfprintf_r+0xa32>
  403266:	e74a      	b.n	4030fe <_svfprintf_r+0xc82>
  403268:	aa25      	add	r2, sp, #148	; 0x94
  40326a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40326c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40326e:	f002 fa75 	bl	40575c <__ssprint_r>
  403272:	2800      	cmp	r0, #0
  403274:	f47f a9d4 	bne.w	402620 <_svfprintf_r+0x1a4>
  403278:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40327a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40327c:	46c8      	mov	r8, r9
  40327e:	e5f2      	b.n	402e66 <_svfprintf_r+0x9ea>
  403280:	aa25      	add	r2, sp, #148	; 0x94
  403282:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403284:	980c      	ldr	r0, [sp, #48]	; 0x30
  403286:	f002 fa69 	bl	40575c <__ssprint_r>
  40328a:	2800      	cmp	r0, #0
  40328c:	f47f a9c8 	bne.w	402620 <_svfprintf_r+0x1a4>
  403290:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403292:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403294:	46c8      	mov	r8, r9
  403296:	e5f5      	b.n	402e84 <_svfprintf_r+0xa08>
  403298:	464e      	mov	r6, r9
  40329a:	f7ff b9ff 	b.w	40269c <_svfprintf_r+0x220>
  40329e:	aa25      	add	r2, sp, #148	; 0x94
  4032a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032a4:	f002 fa5a 	bl	40575c <__ssprint_r>
  4032a8:	2800      	cmp	r0, #0
  4032aa:	f47f a9b9 	bne.w	402620 <_svfprintf_r+0x1a4>
  4032ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4032b0:	46c8      	mov	r8, r9
  4032b2:	f7ff ba74 	b.w	40279e <_svfprintf_r+0x322>
  4032b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4032b8:	4622      	mov	r2, r4
  4032ba:	4620      	mov	r0, r4
  4032bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4032be:	4623      	mov	r3, r4
  4032c0:	4621      	mov	r1, r4
  4032c2:	f003 faeb 	bl	40689c <__aeabi_dcmpun>
  4032c6:	2800      	cmp	r0, #0
  4032c8:	f040 8286 	bne.w	4037d8 <_svfprintf_r+0x135c>
  4032cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4032ce:	3301      	adds	r3, #1
  4032d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4032d2:	f023 0320 	bic.w	r3, r3, #32
  4032d6:	930e      	str	r3, [sp, #56]	; 0x38
  4032d8:	f000 81e2 	beq.w	4036a0 <_svfprintf_r+0x1224>
  4032dc:	2b47      	cmp	r3, #71	; 0x47
  4032de:	f000 811e 	beq.w	40351e <_svfprintf_r+0x10a2>
  4032e2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4032e6:	9307      	str	r3, [sp, #28]
  4032e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4032ea:	1e1f      	subs	r7, r3, #0
  4032ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4032ee:	9308      	str	r3, [sp, #32]
  4032f0:	bfbb      	ittet	lt
  4032f2:	463b      	movlt	r3, r7
  4032f4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4032f8:	2300      	movge	r3, #0
  4032fa:	232d      	movlt	r3, #45	; 0x2d
  4032fc:	9310      	str	r3, [sp, #64]	; 0x40
  4032fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403300:	2b66      	cmp	r3, #102	; 0x66
  403302:	f000 81bb 	beq.w	40367c <_svfprintf_r+0x1200>
  403306:	2b46      	cmp	r3, #70	; 0x46
  403308:	f000 80df 	beq.w	4034ca <_svfprintf_r+0x104e>
  40330c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40330e:	9a08      	ldr	r2, [sp, #32]
  403310:	2b45      	cmp	r3, #69	; 0x45
  403312:	bf0c      	ite	eq
  403314:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  403316:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  403318:	a823      	add	r0, sp, #140	; 0x8c
  40331a:	a920      	add	r1, sp, #128	; 0x80
  40331c:	bf08      	it	eq
  40331e:	1c5d      	addeq	r5, r3, #1
  403320:	9004      	str	r0, [sp, #16]
  403322:	9103      	str	r1, [sp, #12]
  403324:	a81f      	add	r0, sp, #124	; 0x7c
  403326:	2102      	movs	r1, #2
  403328:	463b      	mov	r3, r7
  40332a:	9002      	str	r0, [sp, #8]
  40332c:	9501      	str	r5, [sp, #4]
  40332e:	9100      	str	r1, [sp, #0]
  403330:	980c      	ldr	r0, [sp, #48]	; 0x30
  403332:	f000 fb6d 	bl	403a10 <_dtoa_r>
  403336:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403338:	2b67      	cmp	r3, #103	; 0x67
  40333a:	4606      	mov	r6, r0
  40333c:	f040 81e0 	bne.w	403700 <_svfprintf_r+0x1284>
  403340:	f01b 0f01 	tst.w	fp, #1
  403344:	f000 8246 	beq.w	4037d4 <_svfprintf_r+0x1358>
  403348:	1974      	adds	r4, r6, r5
  40334a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40334c:	9808      	ldr	r0, [sp, #32]
  40334e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403350:	4639      	mov	r1, r7
  403352:	f003 fa71 	bl	406838 <__aeabi_dcmpeq>
  403356:	2800      	cmp	r0, #0
  403358:	f040 8165 	bne.w	403626 <_svfprintf_r+0x11aa>
  40335c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40335e:	42a3      	cmp	r3, r4
  403360:	d206      	bcs.n	403370 <_svfprintf_r+0xef4>
  403362:	2130      	movs	r1, #48	; 0x30
  403364:	1c5a      	adds	r2, r3, #1
  403366:	9223      	str	r2, [sp, #140]	; 0x8c
  403368:	7019      	strb	r1, [r3, #0]
  40336a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40336c:	429c      	cmp	r4, r3
  40336e:	d8f9      	bhi.n	403364 <_svfprintf_r+0xee8>
  403370:	1b9b      	subs	r3, r3, r6
  403372:	9313      	str	r3, [sp, #76]	; 0x4c
  403374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403376:	2b47      	cmp	r3, #71	; 0x47
  403378:	f000 80e9 	beq.w	40354e <_svfprintf_r+0x10d2>
  40337c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40337e:	2b65      	cmp	r3, #101	; 0x65
  403380:	f340 81cd 	ble.w	40371e <_svfprintf_r+0x12a2>
  403384:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403386:	2b66      	cmp	r3, #102	; 0x66
  403388:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40338a:	9312      	str	r3, [sp, #72]	; 0x48
  40338c:	f000 819e 	beq.w	4036cc <_svfprintf_r+0x1250>
  403390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403392:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403394:	4619      	mov	r1, r3
  403396:	4291      	cmp	r1, r2
  403398:	f300 818a 	bgt.w	4036b0 <_svfprintf_r+0x1234>
  40339c:	f01b 0f01 	tst.w	fp, #1
  4033a0:	f040 8213 	bne.w	4037ca <_svfprintf_r+0x134e>
  4033a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4033a8:	9308      	str	r3, [sp, #32]
  4033aa:	2367      	movs	r3, #103	; 0x67
  4033ac:	920e      	str	r2, [sp, #56]	; 0x38
  4033ae:	9311      	str	r3, [sp, #68]	; 0x44
  4033b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4033b2:	2b00      	cmp	r3, #0
  4033b4:	f040 80c4 	bne.w	403540 <_svfprintf_r+0x10c4>
  4033b8:	930a      	str	r3, [sp, #40]	; 0x28
  4033ba:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4033be:	f7ff b975 	b.w	4026ac <_svfprintf_r+0x230>
  4033c2:	4635      	mov	r5, r6
  4033c4:	460c      	mov	r4, r1
  4033c6:	4646      	mov	r6, r8
  4033c8:	4690      	mov	r8, r2
  4033ca:	3301      	adds	r3, #1
  4033cc:	443c      	add	r4, r7
  4033ce:	2b07      	cmp	r3, #7
  4033d0:	9427      	str	r4, [sp, #156]	; 0x9c
  4033d2:	9326      	str	r3, [sp, #152]	; 0x98
  4033d4:	e888 00a0 	stmia.w	r8, {r5, r7}
  4033d8:	f73f aed1 	bgt.w	40317e <_svfprintf_r+0xd02>
  4033dc:	f108 0808 	add.w	r8, r8, #8
  4033e0:	e6d7      	b.n	403192 <_svfprintf_r+0xd16>
  4033e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4033e4:	6813      	ldr	r3, [r2, #0]
  4033e6:	3204      	adds	r2, #4
  4033e8:	920f      	str	r2, [sp, #60]	; 0x3c
  4033ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4033ec:	601a      	str	r2, [r3, #0]
  4033ee:	f7ff b86c 	b.w	4024ca <_svfprintf_r+0x4e>
  4033f2:	aa25      	add	r2, sp, #148	; 0x94
  4033f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4033f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4033f8:	f002 f9b0 	bl	40575c <__ssprint_r>
  4033fc:	2800      	cmp	r0, #0
  4033fe:	f47f a90f 	bne.w	402620 <_svfprintf_r+0x1a4>
  403402:	46c8      	mov	r8, r9
  403404:	e48d      	b.n	402d22 <_svfprintf_r+0x8a6>
  403406:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403408:	4a27      	ldr	r2, [pc, #156]	; (4034a8 <_svfprintf_r+0x102c>)
  40340a:	f8c8 2000 	str.w	r2, [r8]
  40340e:	3301      	adds	r3, #1
  403410:	3401      	adds	r4, #1
  403412:	2201      	movs	r2, #1
  403414:	2b07      	cmp	r3, #7
  403416:	9427      	str	r4, [sp, #156]	; 0x9c
  403418:	9326      	str	r3, [sp, #152]	; 0x98
  40341a:	f8c8 2004 	str.w	r2, [r8, #4]
  40341e:	dc72      	bgt.n	403506 <_svfprintf_r+0x108a>
  403420:	f108 0808 	add.w	r8, r8, #8
  403424:	b929      	cbnz	r1, 403432 <_svfprintf_r+0xfb6>
  403426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403428:	b91b      	cbnz	r3, 403432 <_svfprintf_r+0xfb6>
  40342a:	9b07      	ldr	r3, [sp, #28]
  40342c:	07d8      	lsls	r0, r3, #31
  40342e:	f57f aa05 	bpl.w	40283c <_svfprintf_r+0x3c0>
  403432:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403434:	9819      	ldr	r0, [sp, #100]	; 0x64
  403436:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403438:	f8c8 2000 	str.w	r2, [r8]
  40343c:	3301      	adds	r3, #1
  40343e:	4602      	mov	r2, r0
  403440:	4422      	add	r2, r4
  403442:	2b07      	cmp	r3, #7
  403444:	9227      	str	r2, [sp, #156]	; 0x9c
  403446:	f8c8 0004 	str.w	r0, [r8, #4]
  40344a:	9326      	str	r3, [sp, #152]	; 0x98
  40344c:	f300 818d 	bgt.w	40376a <_svfprintf_r+0x12ee>
  403450:	f108 0808 	add.w	r8, r8, #8
  403454:	2900      	cmp	r1, #0
  403456:	f2c0 8165 	blt.w	403724 <_svfprintf_r+0x12a8>
  40345a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40345c:	f8c8 6000 	str.w	r6, [r8]
  403460:	3301      	adds	r3, #1
  403462:	188c      	adds	r4, r1, r2
  403464:	2b07      	cmp	r3, #7
  403466:	9427      	str	r4, [sp, #156]	; 0x9c
  403468:	9326      	str	r3, [sp, #152]	; 0x98
  40346a:	f8c8 1004 	str.w	r1, [r8, #4]
  40346e:	f77f a9e3 	ble.w	402838 <_svfprintf_r+0x3bc>
  403472:	e52b      	b.n	402ecc <_svfprintf_r+0xa50>
  403474:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403476:	9909      	ldr	r1, [sp, #36]	; 0x24
  403478:	6813      	ldr	r3, [r2, #0]
  40347a:	17cd      	asrs	r5, r1, #31
  40347c:	4608      	mov	r0, r1
  40347e:	3204      	adds	r2, #4
  403480:	4629      	mov	r1, r5
  403482:	920f      	str	r2, [sp, #60]	; 0x3c
  403484:	e9c3 0100 	strd	r0, r1, [r3]
  403488:	f7ff b81f 	b.w	4024ca <_svfprintf_r+0x4e>
  40348c:	aa25      	add	r2, sp, #148	; 0x94
  40348e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403490:	980c      	ldr	r0, [sp, #48]	; 0x30
  403492:	f002 f963 	bl	40575c <__ssprint_r>
  403496:	2800      	cmp	r0, #0
  403498:	f47f a8c2 	bne.w	402620 <_svfprintf_r+0x1a4>
  40349c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40349e:	46c8      	mov	r8, r9
  4034a0:	e458      	b.n	402d54 <_svfprintf_r+0x8d8>
  4034a2:	bf00      	nop
  4034a4:	00406d50 	.word	0x00406d50
  4034a8:	00406d3c 	.word	0x00406d3c
  4034ac:	2140      	movs	r1, #64	; 0x40
  4034ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4034b0:	f001 fa04 	bl	4048bc <_malloc_r>
  4034b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4034b6:	6010      	str	r0, [r2, #0]
  4034b8:	6110      	str	r0, [r2, #16]
  4034ba:	2800      	cmp	r0, #0
  4034bc:	f000 81ec 	beq.w	403898 <_svfprintf_r+0x141c>
  4034c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4034c2:	2340      	movs	r3, #64	; 0x40
  4034c4:	6153      	str	r3, [r2, #20]
  4034c6:	f7fe bff0 	b.w	4024aa <_svfprintf_r+0x2e>
  4034ca:	a823      	add	r0, sp, #140	; 0x8c
  4034cc:	a920      	add	r1, sp, #128	; 0x80
  4034ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4034d0:	9004      	str	r0, [sp, #16]
  4034d2:	9103      	str	r1, [sp, #12]
  4034d4:	a81f      	add	r0, sp, #124	; 0x7c
  4034d6:	2103      	movs	r1, #3
  4034d8:	9002      	str	r0, [sp, #8]
  4034da:	9a08      	ldr	r2, [sp, #32]
  4034dc:	9401      	str	r4, [sp, #4]
  4034de:	463b      	mov	r3, r7
  4034e0:	9100      	str	r1, [sp, #0]
  4034e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4034e4:	f000 fa94 	bl	403a10 <_dtoa_r>
  4034e8:	4625      	mov	r5, r4
  4034ea:	4606      	mov	r6, r0
  4034ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4034ee:	2b46      	cmp	r3, #70	; 0x46
  4034f0:	eb06 0405 	add.w	r4, r6, r5
  4034f4:	f47f af29 	bne.w	40334a <_svfprintf_r+0xece>
  4034f8:	7833      	ldrb	r3, [r6, #0]
  4034fa:	2b30      	cmp	r3, #48	; 0x30
  4034fc:	f000 8172 	beq.w	4037e4 <_svfprintf_r+0x1368>
  403500:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  403502:	442c      	add	r4, r5
  403504:	e721      	b.n	40334a <_svfprintf_r+0xece>
  403506:	aa25      	add	r2, sp, #148	; 0x94
  403508:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40350a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40350c:	f002 f926 	bl	40575c <__ssprint_r>
  403510:	2800      	cmp	r0, #0
  403512:	f47f a885 	bne.w	402620 <_svfprintf_r+0x1a4>
  403516:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403518:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40351a:	46c8      	mov	r8, r9
  40351c:	e782      	b.n	403424 <_svfprintf_r+0xfa8>
  40351e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403520:	2b00      	cmp	r3, #0
  403522:	bf08      	it	eq
  403524:	2301      	moveq	r3, #1
  403526:	930a      	str	r3, [sp, #40]	; 0x28
  403528:	e6db      	b.n	4032e2 <_svfprintf_r+0xe66>
  40352a:	4630      	mov	r0, r6
  40352c:	940a      	str	r4, [sp, #40]	; 0x28
  40352e:	f002 f8a7 	bl	405680 <strlen>
  403532:	950f      	str	r5, [sp, #60]	; 0x3c
  403534:	900e      	str	r0, [sp, #56]	; 0x38
  403536:	f8cd b01c 	str.w	fp, [sp, #28]
  40353a:	4603      	mov	r3, r0
  40353c:	f7ff b9fb 	b.w	402936 <_svfprintf_r+0x4ba>
  403540:	272d      	movs	r7, #45	; 0x2d
  403542:	2300      	movs	r3, #0
  403544:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403548:	930a      	str	r3, [sp, #40]	; 0x28
  40354a:	f7ff b8b0 	b.w	4026ae <_svfprintf_r+0x232>
  40354e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403550:	9312      	str	r3, [sp, #72]	; 0x48
  403552:	461a      	mov	r2, r3
  403554:	3303      	adds	r3, #3
  403556:	db04      	blt.n	403562 <_svfprintf_r+0x10e6>
  403558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40355a:	4619      	mov	r1, r3
  40355c:	4291      	cmp	r1, r2
  40355e:	f6bf af17 	bge.w	403390 <_svfprintf_r+0xf14>
  403562:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403564:	3b02      	subs	r3, #2
  403566:	9311      	str	r3, [sp, #68]	; 0x44
  403568:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40356c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  403570:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403572:	3b01      	subs	r3, #1
  403574:	2b00      	cmp	r3, #0
  403576:	931f      	str	r3, [sp, #124]	; 0x7c
  403578:	bfbd      	ittte	lt
  40357a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40357c:	f1c3 0301 	rsblt	r3, r3, #1
  403580:	222d      	movlt	r2, #45	; 0x2d
  403582:	222b      	movge	r2, #43	; 0x2b
  403584:	2b09      	cmp	r3, #9
  403586:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40358a:	f340 8116 	ble.w	4037ba <_svfprintf_r+0x133e>
  40358e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  403592:	4620      	mov	r0, r4
  403594:	4dad      	ldr	r5, [pc, #692]	; (40384c <_svfprintf_r+0x13d0>)
  403596:	e000      	b.n	40359a <_svfprintf_r+0x111e>
  403598:	4610      	mov	r0, r2
  40359a:	fb85 1203 	smull	r1, r2, r5, r3
  40359e:	17d9      	asrs	r1, r3, #31
  4035a0:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4035a4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4035a8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4035ac:	3230      	adds	r2, #48	; 0x30
  4035ae:	2909      	cmp	r1, #9
  4035b0:	f800 2c01 	strb.w	r2, [r0, #-1]
  4035b4:	460b      	mov	r3, r1
  4035b6:	f100 32ff 	add.w	r2, r0, #4294967295
  4035ba:	dced      	bgt.n	403598 <_svfprintf_r+0x111c>
  4035bc:	3330      	adds	r3, #48	; 0x30
  4035be:	3802      	subs	r0, #2
  4035c0:	b2d9      	uxtb	r1, r3
  4035c2:	4284      	cmp	r4, r0
  4035c4:	f802 1c01 	strb.w	r1, [r2, #-1]
  4035c8:	f240 815f 	bls.w	40388a <_svfprintf_r+0x140e>
  4035cc:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4035d0:	4613      	mov	r3, r2
  4035d2:	e001      	b.n	4035d8 <_svfprintf_r+0x115c>
  4035d4:	f813 1b01 	ldrb.w	r1, [r3], #1
  4035d8:	f800 1b01 	strb.w	r1, [r0], #1
  4035dc:	42a3      	cmp	r3, r4
  4035de:	d1f9      	bne.n	4035d4 <_svfprintf_r+0x1158>
  4035e0:	3301      	adds	r3, #1
  4035e2:	1a9b      	subs	r3, r3, r2
  4035e4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4035e8:	4413      	add	r3, r2
  4035ea:	aa21      	add	r2, sp, #132	; 0x84
  4035ec:	1a9b      	subs	r3, r3, r2
  4035ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4035f0:	931b      	str	r3, [sp, #108]	; 0x6c
  4035f2:	2a01      	cmp	r2, #1
  4035f4:	4413      	add	r3, r2
  4035f6:	930e      	str	r3, [sp, #56]	; 0x38
  4035f8:	f340 8113 	ble.w	403822 <_svfprintf_r+0x13a6>
  4035fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4035fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403600:	4413      	add	r3, r2
  403602:	930e      	str	r3, [sp, #56]	; 0x38
  403604:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403608:	9308      	str	r3, [sp, #32]
  40360a:	2300      	movs	r3, #0
  40360c:	9312      	str	r3, [sp, #72]	; 0x48
  40360e:	e6cf      	b.n	4033b0 <_svfprintf_r+0xf34>
  403610:	aa25      	add	r2, sp, #148	; 0x94
  403612:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403614:	980c      	ldr	r0, [sp, #48]	; 0x30
  403616:	f002 f8a1 	bl	40575c <__ssprint_r>
  40361a:	2800      	cmp	r0, #0
  40361c:	f47f a800 	bne.w	402620 <_svfprintf_r+0x1a4>
  403620:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403622:	46c8      	mov	r8, r9
  403624:	e4d6      	b.n	402fd4 <_svfprintf_r+0xb58>
  403626:	4623      	mov	r3, r4
  403628:	e6a2      	b.n	403370 <_svfprintf_r+0xef4>
  40362a:	aa25      	add	r2, sp, #148	; 0x94
  40362c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40362e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403630:	f002 f894 	bl	40575c <__ssprint_r>
  403634:	2800      	cmp	r0, #0
  403636:	f47e aff3 	bne.w	402620 <_svfprintf_r+0x1a4>
  40363a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40363c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40363e:	46c8      	mov	r8, r9
  403640:	e5ae      	b.n	4031a0 <_svfprintf_r+0xd24>
  403642:	aa25      	add	r2, sp, #148	; 0x94
  403644:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403646:	980c      	ldr	r0, [sp, #48]	; 0x30
  403648:	f002 f888 	bl	40575c <__ssprint_r>
  40364c:	2800      	cmp	r0, #0
  40364e:	f47e afe7 	bne.w	402620 <_svfprintf_r+0x1a4>
  403652:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403654:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403656:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403658:	1a9a      	subs	r2, r3, r2
  40365a:	46c8      	mov	r8, r9
  40365c:	e5b8      	b.n	4031d0 <_svfprintf_r+0xd54>
  40365e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403660:	9612      	str	r6, [sp, #72]	; 0x48
  403662:	2b06      	cmp	r3, #6
  403664:	bf28      	it	cs
  403666:	2306      	movcs	r3, #6
  403668:	960a      	str	r6, [sp, #40]	; 0x28
  40366a:	4637      	mov	r7, r6
  40366c:	9308      	str	r3, [sp, #32]
  40366e:	950f      	str	r5, [sp, #60]	; 0x3c
  403670:	f8cd b01c 	str.w	fp, [sp, #28]
  403674:	930e      	str	r3, [sp, #56]	; 0x38
  403676:	4e76      	ldr	r6, [pc, #472]	; (403850 <_svfprintf_r+0x13d4>)
  403678:	f7ff b818 	b.w	4026ac <_svfprintf_r+0x230>
  40367c:	a823      	add	r0, sp, #140	; 0x8c
  40367e:	a920      	add	r1, sp, #128	; 0x80
  403680:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403682:	9004      	str	r0, [sp, #16]
  403684:	9103      	str	r1, [sp, #12]
  403686:	a81f      	add	r0, sp, #124	; 0x7c
  403688:	2103      	movs	r1, #3
  40368a:	9002      	str	r0, [sp, #8]
  40368c:	9a08      	ldr	r2, [sp, #32]
  40368e:	9501      	str	r5, [sp, #4]
  403690:	463b      	mov	r3, r7
  403692:	9100      	str	r1, [sp, #0]
  403694:	980c      	ldr	r0, [sp, #48]	; 0x30
  403696:	f000 f9bb 	bl	403a10 <_dtoa_r>
  40369a:	4606      	mov	r6, r0
  40369c:	1944      	adds	r4, r0, r5
  40369e:	e72b      	b.n	4034f8 <_svfprintf_r+0x107c>
  4036a0:	2306      	movs	r3, #6
  4036a2:	930a      	str	r3, [sp, #40]	; 0x28
  4036a4:	e61d      	b.n	4032e2 <_svfprintf_r+0xe66>
  4036a6:	272d      	movs	r7, #45	; 0x2d
  4036a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4036ac:	f7ff bace 	b.w	402c4c <_svfprintf_r+0x7d0>
  4036b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4036b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4036b4:	4413      	add	r3, r2
  4036b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4036b8:	930e      	str	r3, [sp, #56]	; 0x38
  4036ba:	2a00      	cmp	r2, #0
  4036bc:	f340 80aa 	ble.w	403814 <_svfprintf_r+0x1398>
  4036c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4036c4:	9308      	str	r3, [sp, #32]
  4036c6:	2367      	movs	r3, #103	; 0x67
  4036c8:	9311      	str	r3, [sp, #68]	; 0x44
  4036ca:	e671      	b.n	4033b0 <_svfprintf_r+0xf34>
  4036cc:	2b00      	cmp	r3, #0
  4036ce:	f340 80b2 	ble.w	403836 <_svfprintf_r+0x13ba>
  4036d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4036d4:	2a00      	cmp	r2, #0
  4036d6:	f040 8093 	bne.w	403800 <_svfprintf_r+0x1384>
  4036da:	f01b 0f01 	tst.w	fp, #1
  4036de:	f040 808f 	bne.w	403800 <_svfprintf_r+0x1384>
  4036e2:	9308      	str	r3, [sp, #32]
  4036e4:	930e      	str	r3, [sp, #56]	; 0x38
  4036e6:	e663      	b.n	4033b0 <_svfprintf_r+0xf34>
  4036e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036ea:	9308      	str	r3, [sp, #32]
  4036ec:	930e      	str	r3, [sp, #56]	; 0x38
  4036ee:	900a      	str	r0, [sp, #40]	; 0x28
  4036f0:	950f      	str	r5, [sp, #60]	; 0x3c
  4036f2:	f8cd b01c 	str.w	fp, [sp, #28]
  4036f6:	9012      	str	r0, [sp, #72]	; 0x48
  4036f8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4036fc:	f7fe bfd6 	b.w	4026ac <_svfprintf_r+0x230>
  403700:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403702:	2b47      	cmp	r3, #71	; 0x47
  403704:	f47f ae20 	bne.w	403348 <_svfprintf_r+0xecc>
  403708:	f01b 0f01 	tst.w	fp, #1
  40370c:	f47f aeee 	bne.w	4034ec <_svfprintf_r+0x1070>
  403710:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403712:	1b9b      	subs	r3, r3, r6
  403714:	9313      	str	r3, [sp, #76]	; 0x4c
  403716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403718:	2b47      	cmp	r3, #71	; 0x47
  40371a:	f43f af18 	beq.w	40354e <_svfprintf_r+0x10d2>
  40371e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403720:	9312      	str	r3, [sp, #72]	; 0x48
  403722:	e721      	b.n	403568 <_svfprintf_r+0x10ec>
  403724:	424f      	negs	r7, r1
  403726:	3110      	adds	r1, #16
  403728:	4d4a      	ldr	r5, [pc, #296]	; (403854 <_svfprintf_r+0x13d8>)
  40372a:	da2f      	bge.n	40378c <_svfprintf_r+0x1310>
  40372c:	2410      	movs	r4, #16
  40372e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403732:	e004      	b.n	40373e <_svfprintf_r+0x12c2>
  403734:	f108 0808 	add.w	r8, r8, #8
  403738:	3f10      	subs	r7, #16
  40373a:	2f10      	cmp	r7, #16
  40373c:	dd26      	ble.n	40378c <_svfprintf_r+0x1310>
  40373e:	3301      	adds	r3, #1
  403740:	3210      	adds	r2, #16
  403742:	2b07      	cmp	r3, #7
  403744:	9227      	str	r2, [sp, #156]	; 0x9c
  403746:	9326      	str	r3, [sp, #152]	; 0x98
  403748:	f8c8 5000 	str.w	r5, [r8]
  40374c:	f8c8 4004 	str.w	r4, [r8, #4]
  403750:	ddf0      	ble.n	403734 <_svfprintf_r+0x12b8>
  403752:	aa25      	add	r2, sp, #148	; 0x94
  403754:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403756:	4658      	mov	r0, fp
  403758:	f002 f800 	bl	40575c <__ssprint_r>
  40375c:	2800      	cmp	r0, #0
  40375e:	f47e af5f 	bne.w	402620 <_svfprintf_r+0x1a4>
  403762:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403764:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403766:	46c8      	mov	r8, r9
  403768:	e7e6      	b.n	403738 <_svfprintf_r+0x12bc>
  40376a:	aa25      	add	r2, sp, #148	; 0x94
  40376c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40376e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403770:	f001 fff4 	bl	40575c <__ssprint_r>
  403774:	2800      	cmp	r0, #0
  403776:	f47e af53 	bne.w	402620 <_svfprintf_r+0x1a4>
  40377a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40377c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40377e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403780:	46c8      	mov	r8, r9
  403782:	e667      	b.n	403454 <_svfprintf_r+0xfd8>
  403784:	2000      	movs	r0, #0
  403786:	900a      	str	r0, [sp, #40]	; 0x28
  403788:	f7fe bed2 	b.w	402530 <_svfprintf_r+0xb4>
  40378c:	3301      	adds	r3, #1
  40378e:	443a      	add	r2, r7
  403790:	2b07      	cmp	r3, #7
  403792:	e888 00a0 	stmia.w	r8, {r5, r7}
  403796:	9227      	str	r2, [sp, #156]	; 0x9c
  403798:	9326      	str	r3, [sp, #152]	; 0x98
  40379a:	f108 0808 	add.w	r8, r8, #8
  40379e:	f77f ae5c 	ble.w	40345a <_svfprintf_r+0xfde>
  4037a2:	aa25      	add	r2, sp, #148	; 0x94
  4037a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037a8:	f001 ffd8 	bl	40575c <__ssprint_r>
  4037ac:	2800      	cmp	r0, #0
  4037ae:	f47e af37 	bne.w	402620 <_svfprintf_r+0x1a4>
  4037b2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4037b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4037b6:	46c8      	mov	r8, r9
  4037b8:	e64f      	b.n	40345a <_svfprintf_r+0xfde>
  4037ba:	3330      	adds	r3, #48	; 0x30
  4037bc:	2230      	movs	r2, #48	; 0x30
  4037be:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4037c2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4037c6:	ab22      	add	r3, sp, #136	; 0x88
  4037c8:	e70f      	b.n	4035ea <_svfprintf_r+0x116e>
  4037ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4037cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4037ce:	4413      	add	r3, r2
  4037d0:	930e      	str	r3, [sp, #56]	; 0x38
  4037d2:	e775      	b.n	4036c0 <_svfprintf_r+0x1244>
  4037d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4037d6:	e5cb      	b.n	403370 <_svfprintf_r+0xef4>
  4037d8:	4e1f      	ldr	r6, [pc, #124]	; (403858 <_svfprintf_r+0x13dc>)
  4037da:	4b20      	ldr	r3, [pc, #128]	; (40385c <_svfprintf_r+0x13e0>)
  4037dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4037e0:	f7ff ba36 	b.w	402c50 <_svfprintf_r+0x7d4>
  4037e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4037e6:	9808      	ldr	r0, [sp, #32]
  4037e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4037ea:	4639      	mov	r1, r7
  4037ec:	f003 f824 	bl	406838 <__aeabi_dcmpeq>
  4037f0:	2800      	cmp	r0, #0
  4037f2:	f47f ae85 	bne.w	403500 <_svfprintf_r+0x1084>
  4037f6:	f1c5 0501 	rsb	r5, r5, #1
  4037fa:	951f      	str	r5, [sp, #124]	; 0x7c
  4037fc:	442c      	add	r4, r5
  4037fe:	e5a4      	b.n	40334a <_svfprintf_r+0xece>
  403800:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403802:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403804:	4413      	add	r3, r2
  403806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403808:	441a      	add	r2, r3
  40380a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40380e:	920e      	str	r2, [sp, #56]	; 0x38
  403810:	9308      	str	r3, [sp, #32]
  403812:	e5cd      	b.n	4033b0 <_svfprintf_r+0xf34>
  403814:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403818:	f1c3 0301 	rsb	r3, r3, #1
  40381c:	441a      	add	r2, r3
  40381e:	4613      	mov	r3, r2
  403820:	e7d6      	b.n	4037d0 <_svfprintf_r+0x1354>
  403822:	f01b 0301 	ands.w	r3, fp, #1
  403826:	9312      	str	r3, [sp, #72]	; 0x48
  403828:	f47f aee8 	bne.w	4035fc <_svfprintf_r+0x1180>
  40382c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40382e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403832:	9308      	str	r3, [sp, #32]
  403834:	e5bc      	b.n	4033b0 <_svfprintf_r+0xf34>
  403836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403838:	b913      	cbnz	r3, 403840 <_svfprintf_r+0x13c4>
  40383a:	f01b 0f01 	tst.w	fp, #1
  40383e:	d002      	beq.n	403846 <_svfprintf_r+0x13ca>
  403840:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403842:	3301      	adds	r3, #1
  403844:	e7df      	b.n	403806 <_svfprintf_r+0x138a>
  403846:	2301      	movs	r3, #1
  403848:	e74b      	b.n	4036e2 <_svfprintf_r+0x1266>
  40384a:	bf00      	nop
  40384c:	66666667 	.word	0x66666667
  403850:	00406d34 	.word	0x00406d34
  403854:	00406d50 	.word	0x00406d50
  403858:	00406d08 	.word	0x00406d08
  40385c:	00406d04 	.word	0x00406d04
  403860:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403862:	f89a 3001 	ldrb.w	r3, [sl, #1]
  403866:	6828      	ldr	r0, [r5, #0]
  403868:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40386c:	900a      	str	r0, [sp, #40]	; 0x28
  40386e:	4628      	mov	r0, r5
  403870:	3004      	adds	r0, #4
  403872:	46a2      	mov	sl, r4
  403874:	900f      	str	r0, [sp, #60]	; 0x3c
  403876:	f7fe be59 	b.w	40252c <_svfprintf_r+0xb0>
  40387a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40387e:	f7ff b86f 	b.w	402960 <_svfprintf_r+0x4e4>
  403882:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403886:	f7ff ba1c 	b.w	402cc2 <_svfprintf_r+0x846>
  40388a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40388e:	e6ac      	b.n	4035ea <_svfprintf_r+0x116e>
  403890:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403894:	f7ff b8f3 	b.w	402a7e <_svfprintf_r+0x602>
  403898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40389a:	230c      	movs	r3, #12
  40389c:	6013      	str	r3, [r2, #0]
  40389e:	f04f 33ff 	mov.w	r3, #4294967295
  4038a2:	9309      	str	r3, [sp, #36]	; 0x24
  4038a4:	f7fe bec5 	b.w	402632 <_svfprintf_r+0x1b6>
  4038a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4038ac:	f7ff b9a2 	b.w	402bf4 <_svfprintf_r+0x778>
  4038b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4038b4:	f7ff b97e 	b.w	402bb4 <_svfprintf_r+0x738>
  4038b8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4038bc:	f7ff b961 	b.w	402b82 <_svfprintf_r+0x706>
  4038c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4038c4:	f7ff b91a 	b.w	402afc <_svfprintf_r+0x680>

004038c8 <register_fini>:
  4038c8:	4b02      	ldr	r3, [pc, #8]	; (4038d4 <register_fini+0xc>)
  4038ca:	b113      	cbz	r3, 4038d2 <register_fini+0xa>
  4038cc:	4802      	ldr	r0, [pc, #8]	; (4038d8 <register_fini+0x10>)
  4038ce:	f000 b805 	b.w	4038dc <atexit>
  4038d2:	4770      	bx	lr
  4038d4:	00000000 	.word	0x00000000
  4038d8:	00404865 	.word	0x00404865

004038dc <atexit>:
  4038dc:	2300      	movs	r3, #0
  4038de:	4601      	mov	r1, r0
  4038e0:	461a      	mov	r2, r3
  4038e2:	4618      	mov	r0, r3
  4038e4:	f001 bfc6 	b.w	405874 <__register_exitproc>

004038e8 <quorem>:
  4038e8:	6902      	ldr	r2, [r0, #16]
  4038ea:	690b      	ldr	r3, [r1, #16]
  4038ec:	4293      	cmp	r3, r2
  4038ee:	f300 808d 	bgt.w	403a0c <quorem+0x124>
  4038f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038f6:	f103 38ff 	add.w	r8, r3, #4294967295
  4038fa:	f101 0714 	add.w	r7, r1, #20
  4038fe:	f100 0b14 	add.w	fp, r0, #20
  403902:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  403906:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40390a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40390e:	b083      	sub	sp, #12
  403910:	3201      	adds	r2, #1
  403912:	fbb3 f9f2 	udiv	r9, r3, r2
  403916:	eb0b 0304 	add.w	r3, fp, r4
  40391a:	9400      	str	r4, [sp, #0]
  40391c:	eb07 0a04 	add.w	sl, r7, r4
  403920:	9301      	str	r3, [sp, #4]
  403922:	f1b9 0f00 	cmp.w	r9, #0
  403926:	d039      	beq.n	40399c <quorem+0xb4>
  403928:	2500      	movs	r5, #0
  40392a:	462e      	mov	r6, r5
  40392c:	46bc      	mov	ip, r7
  40392e:	46de      	mov	lr, fp
  403930:	f85c 4b04 	ldr.w	r4, [ip], #4
  403934:	f8de 3000 	ldr.w	r3, [lr]
  403938:	b2a2      	uxth	r2, r4
  40393a:	fb09 5502 	mla	r5, r9, r2, r5
  40393e:	0c22      	lsrs	r2, r4, #16
  403940:	0c2c      	lsrs	r4, r5, #16
  403942:	fb09 4202 	mla	r2, r9, r2, r4
  403946:	b2ad      	uxth	r5, r5
  403948:	1b75      	subs	r5, r6, r5
  40394a:	b296      	uxth	r6, r2
  40394c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  403950:	fa15 f383 	uxtah	r3, r5, r3
  403954:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403958:	b29b      	uxth	r3, r3
  40395a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40395e:	45e2      	cmp	sl, ip
  403960:	ea4f 4512 	mov.w	r5, r2, lsr #16
  403964:	f84e 3b04 	str.w	r3, [lr], #4
  403968:	ea4f 4626 	mov.w	r6, r6, asr #16
  40396c:	d2e0      	bcs.n	403930 <quorem+0x48>
  40396e:	9b00      	ldr	r3, [sp, #0]
  403970:	f85b 3003 	ldr.w	r3, [fp, r3]
  403974:	b993      	cbnz	r3, 40399c <quorem+0xb4>
  403976:	9c01      	ldr	r4, [sp, #4]
  403978:	1f23      	subs	r3, r4, #4
  40397a:	459b      	cmp	fp, r3
  40397c:	d20c      	bcs.n	403998 <quorem+0xb0>
  40397e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403982:	b94b      	cbnz	r3, 403998 <quorem+0xb0>
  403984:	f1a4 0308 	sub.w	r3, r4, #8
  403988:	e002      	b.n	403990 <quorem+0xa8>
  40398a:	681a      	ldr	r2, [r3, #0]
  40398c:	3b04      	subs	r3, #4
  40398e:	b91a      	cbnz	r2, 403998 <quorem+0xb0>
  403990:	459b      	cmp	fp, r3
  403992:	f108 38ff 	add.w	r8, r8, #4294967295
  403996:	d3f8      	bcc.n	40398a <quorem+0xa2>
  403998:	f8c0 8010 	str.w	r8, [r0, #16]
  40399c:	4604      	mov	r4, r0
  40399e:	f001 fd43 	bl	405428 <__mcmp>
  4039a2:	2800      	cmp	r0, #0
  4039a4:	db2e      	blt.n	403a04 <quorem+0x11c>
  4039a6:	f109 0901 	add.w	r9, r9, #1
  4039aa:	465d      	mov	r5, fp
  4039ac:	2300      	movs	r3, #0
  4039ae:	f857 1b04 	ldr.w	r1, [r7], #4
  4039b2:	6828      	ldr	r0, [r5, #0]
  4039b4:	b28a      	uxth	r2, r1
  4039b6:	1a9a      	subs	r2, r3, r2
  4039b8:	0c0b      	lsrs	r3, r1, #16
  4039ba:	fa12 f280 	uxtah	r2, r2, r0
  4039be:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4039c2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4039c6:	b292      	uxth	r2, r2
  4039c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4039cc:	45ba      	cmp	sl, r7
  4039ce:	f845 2b04 	str.w	r2, [r5], #4
  4039d2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4039d6:	d2ea      	bcs.n	4039ae <quorem+0xc6>
  4039d8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4039dc:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4039e0:	b982      	cbnz	r2, 403a04 <quorem+0x11c>
  4039e2:	1f1a      	subs	r2, r3, #4
  4039e4:	4593      	cmp	fp, r2
  4039e6:	d20b      	bcs.n	403a00 <quorem+0x118>
  4039e8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4039ec:	b942      	cbnz	r2, 403a00 <quorem+0x118>
  4039ee:	3b08      	subs	r3, #8
  4039f0:	e002      	b.n	4039f8 <quorem+0x110>
  4039f2:	681a      	ldr	r2, [r3, #0]
  4039f4:	3b04      	subs	r3, #4
  4039f6:	b91a      	cbnz	r2, 403a00 <quorem+0x118>
  4039f8:	459b      	cmp	fp, r3
  4039fa:	f108 38ff 	add.w	r8, r8, #4294967295
  4039fe:	d3f8      	bcc.n	4039f2 <quorem+0x10a>
  403a00:	f8c4 8010 	str.w	r8, [r4, #16]
  403a04:	4648      	mov	r0, r9
  403a06:	b003      	add	sp, #12
  403a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a0c:	2000      	movs	r0, #0
  403a0e:	4770      	bx	lr

00403a10 <_dtoa_r>:
  403a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a14:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403a16:	b09b      	sub	sp, #108	; 0x6c
  403a18:	4604      	mov	r4, r0
  403a1a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  403a1c:	4692      	mov	sl, r2
  403a1e:	469b      	mov	fp, r3
  403a20:	b141      	cbz	r1, 403a34 <_dtoa_r+0x24>
  403a22:	6c42      	ldr	r2, [r0, #68]	; 0x44
  403a24:	604a      	str	r2, [r1, #4]
  403a26:	2301      	movs	r3, #1
  403a28:	4093      	lsls	r3, r2
  403a2a:	608b      	str	r3, [r1, #8]
  403a2c:	f001 fb24 	bl	405078 <_Bfree>
  403a30:	2300      	movs	r3, #0
  403a32:	6423      	str	r3, [r4, #64]	; 0x40
  403a34:	f1bb 0f00 	cmp.w	fp, #0
  403a38:	465d      	mov	r5, fp
  403a3a:	db35      	blt.n	403aa8 <_dtoa_r+0x98>
  403a3c:	2300      	movs	r3, #0
  403a3e:	6033      	str	r3, [r6, #0]
  403a40:	4b9d      	ldr	r3, [pc, #628]	; (403cb8 <_dtoa_r+0x2a8>)
  403a42:	43ab      	bics	r3, r5
  403a44:	d015      	beq.n	403a72 <_dtoa_r+0x62>
  403a46:	4650      	mov	r0, sl
  403a48:	4659      	mov	r1, fp
  403a4a:	2200      	movs	r2, #0
  403a4c:	2300      	movs	r3, #0
  403a4e:	f002 fef3 	bl	406838 <__aeabi_dcmpeq>
  403a52:	4680      	mov	r8, r0
  403a54:	2800      	cmp	r0, #0
  403a56:	d02d      	beq.n	403ab4 <_dtoa_r+0xa4>
  403a58:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403a5a:	2301      	movs	r3, #1
  403a5c:	6013      	str	r3, [r2, #0]
  403a5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403a60:	2b00      	cmp	r3, #0
  403a62:	f000 80bd 	beq.w	403be0 <_dtoa_r+0x1d0>
  403a66:	4895      	ldr	r0, [pc, #596]	; (403cbc <_dtoa_r+0x2ac>)
  403a68:	6018      	str	r0, [r3, #0]
  403a6a:	3801      	subs	r0, #1
  403a6c:	b01b      	add	sp, #108	; 0x6c
  403a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a72:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403a74:	f242 730f 	movw	r3, #9999	; 0x270f
  403a78:	6013      	str	r3, [r2, #0]
  403a7a:	f1ba 0f00 	cmp.w	sl, #0
  403a7e:	d10d      	bne.n	403a9c <_dtoa_r+0x8c>
  403a80:	f3c5 0513 	ubfx	r5, r5, #0, #20
  403a84:	b955      	cbnz	r5, 403a9c <_dtoa_r+0x8c>
  403a86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403a88:	488d      	ldr	r0, [pc, #564]	; (403cc0 <_dtoa_r+0x2b0>)
  403a8a:	2b00      	cmp	r3, #0
  403a8c:	d0ee      	beq.n	403a6c <_dtoa_r+0x5c>
  403a8e:	f100 0308 	add.w	r3, r0, #8
  403a92:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  403a94:	6013      	str	r3, [r2, #0]
  403a96:	b01b      	add	sp, #108	; 0x6c
  403a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403a9e:	4889      	ldr	r0, [pc, #548]	; (403cc4 <_dtoa_r+0x2b4>)
  403aa0:	2b00      	cmp	r3, #0
  403aa2:	d0e3      	beq.n	403a6c <_dtoa_r+0x5c>
  403aa4:	1cc3      	adds	r3, r0, #3
  403aa6:	e7f4      	b.n	403a92 <_dtoa_r+0x82>
  403aa8:	2301      	movs	r3, #1
  403aaa:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  403aae:	6033      	str	r3, [r6, #0]
  403ab0:	46ab      	mov	fp, r5
  403ab2:	e7c5      	b.n	403a40 <_dtoa_r+0x30>
  403ab4:	aa18      	add	r2, sp, #96	; 0x60
  403ab6:	ab19      	add	r3, sp, #100	; 0x64
  403ab8:	9201      	str	r2, [sp, #4]
  403aba:	9300      	str	r3, [sp, #0]
  403abc:	4652      	mov	r2, sl
  403abe:	465b      	mov	r3, fp
  403ac0:	4620      	mov	r0, r4
  403ac2:	f001 fd51 	bl	405568 <__d2b>
  403ac6:	0d2b      	lsrs	r3, r5, #20
  403ac8:	4681      	mov	r9, r0
  403aca:	d071      	beq.n	403bb0 <_dtoa_r+0x1a0>
  403acc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  403ad0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  403ad4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403ad6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  403ada:	4650      	mov	r0, sl
  403adc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  403ae0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403ae4:	2200      	movs	r2, #0
  403ae6:	4b78      	ldr	r3, [pc, #480]	; (403cc8 <_dtoa_r+0x2b8>)
  403ae8:	f002 fa8a 	bl	406000 <__aeabi_dsub>
  403aec:	a36c      	add	r3, pc, #432	; (adr r3, 403ca0 <_dtoa_r+0x290>)
  403aee:	e9d3 2300 	ldrd	r2, r3, [r3]
  403af2:	f002 fc39 	bl	406368 <__aeabi_dmul>
  403af6:	a36c      	add	r3, pc, #432	; (adr r3, 403ca8 <_dtoa_r+0x298>)
  403af8:	e9d3 2300 	ldrd	r2, r3, [r3]
  403afc:	f002 fa82 	bl	406004 <__adddf3>
  403b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403b04:	4630      	mov	r0, r6
  403b06:	f002 fbc9 	bl	40629c <__aeabi_i2d>
  403b0a:	a369      	add	r3, pc, #420	; (adr r3, 403cb0 <_dtoa_r+0x2a0>)
  403b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b10:	f002 fc2a 	bl	406368 <__aeabi_dmul>
  403b14:	4602      	mov	r2, r0
  403b16:	460b      	mov	r3, r1
  403b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403b1c:	f002 fa72 	bl	406004 <__adddf3>
  403b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403b24:	f002 fed0 	bl	4068c8 <__aeabi_d2iz>
  403b28:	2200      	movs	r2, #0
  403b2a:	9002      	str	r0, [sp, #8]
  403b2c:	2300      	movs	r3, #0
  403b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403b32:	f002 fe8b 	bl	40684c <__aeabi_dcmplt>
  403b36:	2800      	cmp	r0, #0
  403b38:	f040 8173 	bne.w	403e22 <_dtoa_r+0x412>
  403b3c:	9d02      	ldr	r5, [sp, #8]
  403b3e:	2d16      	cmp	r5, #22
  403b40:	f200 815d 	bhi.w	403dfe <_dtoa_r+0x3ee>
  403b44:	4b61      	ldr	r3, [pc, #388]	; (403ccc <_dtoa_r+0x2bc>)
  403b46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  403b4a:	e9d3 0100 	ldrd	r0, r1, [r3]
  403b4e:	4652      	mov	r2, sl
  403b50:	465b      	mov	r3, fp
  403b52:	f002 fe99 	bl	406888 <__aeabi_dcmpgt>
  403b56:	2800      	cmp	r0, #0
  403b58:	f000 81c5 	beq.w	403ee6 <_dtoa_r+0x4d6>
  403b5c:	1e6b      	subs	r3, r5, #1
  403b5e:	9302      	str	r3, [sp, #8]
  403b60:	2300      	movs	r3, #0
  403b62:	930e      	str	r3, [sp, #56]	; 0x38
  403b64:	1bbf      	subs	r7, r7, r6
  403b66:	1e7b      	subs	r3, r7, #1
  403b68:	9306      	str	r3, [sp, #24]
  403b6a:	f100 8154 	bmi.w	403e16 <_dtoa_r+0x406>
  403b6e:	2300      	movs	r3, #0
  403b70:	9308      	str	r3, [sp, #32]
  403b72:	9b02      	ldr	r3, [sp, #8]
  403b74:	2b00      	cmp	r3, #0
  403b76:	f2c0 8145 	blt.w	403e04 <_dtoa_r+0x3f4>
  403b7a:	9a06      	ldr	r2, [sp, #24]
  403b7c:	930d      	str	r3, [sp, #52]	; 0x34
  403b7e:	4611      	mov	r1, r2
  403b80:	4419      	add	r1, r3
  403b82:	2300      	movs	r3, #0
  403b84:	9106      	str	r1, [sp, #24]
  403b86:	930c      	str	r3, [sp, #48]	; 0x30
  403b88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b8a:	2b09      	cmp	r3, #9
  403b8c:	d82a      	bhi.n	403be4 <_dtoa_r+0x1d4>
  403b8e:	2b05      	cmp	r3, #5
  403b90:	f340 865b 	ble.w	40484a <_dtoa_r+0xe3a>
  403b94:	3b04      	subs	r3, #4
  403b96:	9324      	str	r3, [sp, #144]	; 0x90
  403b98:	2500      	movs	r5, #0
  403b9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b9c:	3b02      	subs	r3, #2
  403b9e:	2b03      	cmp	r3, #3
  403ba0:	f200 8642 	bhi.w	404828 <_dtoa_r+0xe18>
  403ba4:	e8df f013 	tbh	[pc, r3, lsl #1]
  403ba8:	02c903d4 	.word	0x02c903d4
  403bac:	046103df 	.word	0x046103df
  403bb0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403bb2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  403bb4:	443e      	add	r6, r7
  403bb6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403bba:	2b20      	cmp	r3, #32
  403bbc:	f340 818e 	ble.w	403edc <_dtoa_r+0x4cc>
  403bc0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403bc4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403bc8:	409d      	lsls	r5, r3
  403bca:	fa2a f000 	lsr.w	r0, sl, r0
  403bce:	4328      	orrs	r0, r5
  403bd0:	f002 fb54 	bl	40627c <__aeabi_ui2d>
  403bd4:	2301      	movs	r3, #1
  403bd6:	3e01      	subs	r6, #1
  403bd8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403bdc:	9314      	str	r3, [sp, #80]	; 0x50
  403bde:	e781      	b.n	403ae4 <_dtoa_r+0xd4>
  403be0:	483b      	ldr	r0, [pc, #236]	; (403cd0 <_dtoa_r+0x2c0>)
  403be2:	e743      	b.n	403a6c <_dtoa_r+0x5c>
  403be4:	2100      	movs	r1, #0
  403be6:	6461      	str	r1, [r4, #68]	; 0x44
  403be8:	4620      	mov	r0, r4
  403bea:	9125      	str	r1, [sp, #148]	; 0x94
  403bec:	f001 fa1e 	bl	40502c <_Balloc>
  403bf0:	f04f 33ff 	mov.w	r3, #4294967295
  403bf4:	930a      	str	r3, [sp, #40]	; 0x28
  403bf6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403bf8:	930f      	str	r3, [sp, #60]	; 0x3c
  403bfa:	2301      	movs	r3, #1
  403bfc:	9004      	str	r0, [sp, #16]
  403bfe:	6420      	str	r0, [r4, #64]	; 0x40
  403c00:	9224      	str	r2, [sp, #144]	; 0x90
  403c02:	930b      	str	r3, [sp, #44]	; 0x2c
  403c04:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c06:	2b00      	cmp	r3, #0
  403c08:	f2c0 80d9 	blt.w	403dbe <_dtoa_r+0x3ae>
  403c0c:	9a02      	ldr	r2, [sp, #8]
  403c0e:	2a0e      	cmp	r2, #14
  403c10:	f300 80d5 	bgt.w	403dbe <_dtoa_r+0x3ae>
  403c14:	4b2d      	ldr	r3, [pc, #180]	; (403ccc <_dtoa_r+0x2bc>)
  403c16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  403c22:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403c24:	2b00      	cmp	r3, #0
  403c26:	f2c0 83ba 	blt.w	40439e <_dtoa_r+0x98e>
  403c2a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  403c2e:	4650      	mov	r0, sl
  403c30:	462a      	mov	r2, r5
  403c32:	4633      	mov	r3, r6
  403c34:	4659      	mov	r1, fp
  403c36:	f002 fcc1 	bl	4065bc <__aeabi_ddiv>
  403c3a:	f002 fe45 	bl	4068c8 <__aeabi_d2iz>
  403c3e:	4680      	mov	r8, r0
  403c40:	f002 fb2c 	bl	40629c <__aeabi_i2d>
  403c44:	462a      	mov	r2, r5
  403c46:	4633      	mov	r3, r6
  403c48:	f002 fb8e 	bl	406368 <__aeabi_dmul>
  403c4c:	460b      	mov	r3, r1
  403c4e:	4602      	mov	r2, r0
  403c50:	4659      	mov	r1, fp
  403c52:	4650      	mov	r0, sl
  403c54:	f002 f9d4 	bl	406000 <__aeabi_dsub>
  403c58:	9d04      	ldr	r5, [sp, #16]
  403c5a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  403c5e:	702b      	strb	r3, [r5, #0]
  403c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c62:	2b01      	cmp	r3, #1
  403c64:	4606      	mov	r6, r0
  403c66:	460f      	mov	r7, r1
  403c68:	f105 0501 	add.w	r5, r5, #1
  403c6c:	d068      	beq.n	403d40 <_dtoa_r+0x330>
  403c6e:	2200      	movs	r2, #0
  403c70:	4b18      	ldr	r3, [pc, #96]	; (403cd4 <_dtoa_r+0x2c4>)
  403c72:	f002 fb79 	bl	406368 <__aeabi_dmul>
  403c76:	2200      	movs	r2, #0
  403c78:	2300      	movs	r3, #0
  403c7a:	4606      	mov	r6, r0
  403c7c:	460f      	mov	r7, r1
  403c7e:	f002 fddb 	bl	406838 <__aeabi_dcmpeq>
  403c82:	2800      	cmp	r0, #0
  403c84:	f040 8088 	bne.w	403d98 <_dtoa_r+0x388>
  403c88:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  403c8c:	f04f 0a00 	mov.w	sl, #0
  403c90:	f8df b040 	ldr.w	fp, [pc, #64]	; 403cd4 <_dtoa_r+0x2c4>
  403c94:	940c      	str	r4, [sp, #48]	; 0x30
  403c96:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  403c9a:	e028      	b.n	403cee <_dtoa_r+0x2de>
  403c9c:	f3af 8000 	nop.w
  403ca0:	636f4361 	.word	0x636f4361
  403ca4:	3fd287a7 	.word	0x3fd287a7
  403ca8:	8b60c8b3 	.word	0x8b60c8b3
  403cac:	3fc68a28 	.word	0x3fc68a28
  403cb0:	509f79fb 	.word	0x509f79fb
  403cb4:	3fd34413 	.word	0x3fd34413
  403cb8:	7ff00000 	.word	0x7ff00000
  403cbc:	00406d3d 	.word	0x00406d3d
  403cc0:	00406d60 	.word	0x00406d60
  403cc4:	00406d6c 	.word	0x00406d6c
  403cc8:	3ff80000 	.word	0x3ff80000
  403ccc:	00406da8 	.word	0x00406da8
  403cd0:	00406d3c 	.word	0x00406d3c
  403cd4:	40240000 	.word	0x40240000
  403cd8:	f002 fb46 	bl	406368 <__aeabi_dmul>
  403cdc:	2200      	movs	r2, #0
  403cde:	2300      	movs	r3, #0
  403ce0:	4606      	mov	r6, r0
  403ce2:	460f      	mov	r7, r1
  403ce4:	f002 fda8 	bl	406838 <__aeabi_dcmpeq>
  403ce8:	2800      	cmp	r0, #0
  403cea:	f040 83c1 	bne.w	404470 <_dtoa_r+0xa60>
  403cee:	4642      	mov	r2, r8
  403cf0:	464b      	mov	r3, r9
  403cf2:	4630      	mov	r0, r6
  403cf4:	4639      	mov	r1, r7
  403cf6:	f002 fc61 	bl	4065bc <__aeabi_ddiv>
  403cfa:	f002 fde5 	bl	4068c8 <__aeabi_d2iz>
  403cfe:	4604      	mov	r4, r0
  403d00:	f002 facc 	bl	40629c <__aeabi_i2d>
  403d04:	4642      	mov	r2, r8
  403d06:	464b      	mov	r3, r9
  403d08:	f002 fb2e 	bl	406368 <__aeabi_dmul>
  403d0c:	4602      	mov	r2, r0
  403d0e:	460b      	mov	r3, r1
  403d10:	4630      	mov	r0, r6
  403d12:	4639      	mov	r1, r7
  403d14:	f002 f974 	bl	406000 <__aeabi_dsub>
  403d18:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403d1c:	9e04      	ldr	r6, [sp, #16]
  403d1e:	f805 eb01 	strb.w	lr, [r5], #1
  403d22:	eba5 0e06 	sub.w	lr, r5, r6
  403d26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403d28:	45b6      	cmp	lr, r6
  403d2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403d2e:	4652      	mov	r2, sl
  403d30:	465b      	mov	r3, fp
  403d32:	d1d1      	bne.n	403cd8 <_dtoa_r+0x2c8>
  403d34:	46a0      	mov	r8, r4
  403d36:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403d3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403d3c:	4606      	mov	r6, r0
  403d3e:	460f      	mov	r7, r1
  403d40:	4632      	mov	r2, r6
  403d42:	463b      	mov	r3, r7
  403d44:	4630      	mov	r0, r6
  403d46:	4639      	mov	r1, r7
  403d48:	f002 f95c 	bl	406004 <__adddf3>
  403d4c:	4606      	mov	r6, r0
  403d4e:	460f      	mov	r7, r1
  403d50:	4602      	mov	r2, r0
  403d52:	460b      	mov	r3, r1
  403d54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403d58:	f002 fd78 	bl	40684c <__aeabi_dcmplt>
  403d5c:	b948      	cbnz	r0, 403d72 <_dtoa_r+0x362>
  403d5e:	4632      	mov	r2, r6
  403d60:	463b      	mov	r3, r7
  403d62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403d66:	f002 fd67 	bl	406838 <__aeabi_dcmpeq>
  403d6a:	b1a8      	cbz	r0, 403d98 <_dtoa_r+0x388>
  403d6c:	f018 0f01 	tst.w	r8, #1
  403d70:	d012      	beq.n	403d98 <_dtoa_r+0x388>
  403d72:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  403d76:	9a04      	ldr	r2, [sp, #16]
  403d78:	1e6b      	subs	r3, r5, #1
  403d7a:	e004      	b.n	403d86 <_dtoa_r+0x376>
  403d7c:	429a      	cmp	r2, r3
  403d7e:	f000 8401 	beq.w	404584 <_dtoa_r+0xb74>
  403d82:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  403d86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403d8a:	f103 0501 	add.w	r5, r3, #1
  403d8e:	d0f5      	beq.n	403d7c <_dtoa_r+0x36c>
  403d90:	f108 0801 	add.w	r8, r8, #1
  403d94:	f883 8000 	strb.w	r8, [r3]
  403d98:	4649      	mov	r1, r9
  403d9a:	4620      	mov	r0, r4
  403d9c:	f001 f96c 	bl	405078 <_Bfree>
  403da0:	2200      	movs	r2, #0
  403da2:	9b02      	ldr	r3, [sp, #8]
  403da4:	702a      	strb	r2, [r5, #0]
  403da6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403da8:	3301      	adds	r3, #1
  403daa:	6013      	str	r3, [r2, #0]
  403dac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403dae:	2b00      	cmp	r3, #0
  403db0:	f000 839e 	beq.w	4044f0 <_dtoa_r+0xae0>
  403db4:	9804      	ldr	r0, [sp, #16]
  403db6:	601d      	str	r5, [r3, #0]
  403db8:	b01b      	add	sp, #108	; 0x6c
  403dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403dc0:	2a00      	cmp	r2, #0
  403dc2:	d03e      	beq.n	403e42 <_dtoa_r+0x432>
  403dc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403dc6:	2a01      	cmp	r2, #1
  403dc8:	f340 8311 	ble.w	4043ee <_dtoa_r+0x9de>
  403dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403dd0:	1e5f      	subs	r7, r3, #1
  403dd2:	42ba      	cmp	r2, r7
  403dd4:	f2c0 838f 	blt.w	4044f6 <_dtoa_r+0xae6>
  403dd8:	1bd7      	subs	r7, r2, r7
  403dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ddc:	2b00      	cmp	r3, #0
  403dde:	f2c0 848b 	blt.w	4046f8 <_dtoa_r+0xce8>
  403de2:	9d08      	ldr	r5, [sp, #32]
  403de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403de6:	9a08      	ldr	r2, [sp, #32]
  403de8:	441a      	add	r2, r3
  403dea:	9208      	str	r2, [sp, #32]
  403dec:	9a06      	ldr	r2, [sp, #24]
  403dee:	2101      	movs	r1, #1
  403df0:	441a      	add	r2, r3
  403df2:	4620      	mov	r0, r4
  403df4:	9206      	str	r2, [sp, #24]
  403df6:	f001 f9d9 	bl	4051ac <__i2b>
  403dfa:	4606      	mov	r6, r0
  403dfc:	e024      	b.n	403e48 <_dtoa_r+0x438>
  403dfe:	2301      	movs	r3, #1
  403e00:	930e      	str	r3, [sp, #56]	; 0x38
  403e02:	e6af      	b.n	403b64 <_dtoa_r+0x154>
  403e04:	9a08      	ldr	r2, [sp, #32]
  403e06:	9b02      	ldr	r3, [sp, #8]
  403e08:	1ad2      	subs	r2, r2, r3
  403e0a:	425b      	negs	r3, r3
  403e0c:	930c      	str	r3, [sp, #48]	; 0x30
  403e0e:	2300      	movs	r3, #0
  403e10:	9208      	str	r2, [sp, #32]
  403e12:	930d      	str	r3, [sp, #52]	; 0x34
  403e14:	e6b8      	b.n	403b88 <_dtoa_r+0x178>
  403e16:	f1c7 0301 	rsb	r3, r7, #1
  403e1a:	9308      	str	r3, [sp, #32]
  403e1c:	2300      	movs	r3, #0
  403e1e:	9306      	str	r3, [sp, #24]
  403e20:	e6a7      	b.n	403b72 <_dtoa_r+0x162>
  403e22:	9d02      	ldr	r5, [sp, #8]
  403e24:	4628      	mov	r0, r5
  403e26:	f002 fa39 	bl	40629c <__aeabi_i2d>
  403e2a:	4602      	mov	r2, r0
  403e2c:	460b      	mov	r3, r1
  403e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403e32:	f002 fd01 	bl	406838 <__aeabi_dcmpeq>
  403e36:	2800      	cmp	r0, #0
  403e38:	f47f ae80 	bne.w	403b3c <_dtoa_r+0x12c>
  403e3c:	1e6b      	subs	r3, r5, #1
  403e3e:	9302      	str	r3, [sp, #8]
  403e40:	e67c      	b.n	403b3c <_dtoa_r+0x12c>
  403e42:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403e44:	9d08      	ldr	r5, [sp, #32]
  403e46:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403e48:	2d00      	cmp	r5, #0
  403e4a:	dd0c      	ble.n	403e66 <_dtoa_r+0x456>
  403e4c:	9906      	ldr	r1, [sp, #24]
  403e4e:	2900      	cmp	r1, #0
  403e50:	460b      	mov	r3, r1
  403e52:	dd08      	ble.n	403e66 <_dtoa_r+0x456>
  403e54:	42a9      	cmp	r1, r5
  403e56:	9a08      	ldr	r2, [sp, #32]
  403e58:	bfa8      	it	ge
  403e5a:	462b      	movge	r3, r5
  403e5c:	1ad2      	subs	r2, r2, r3
  403e5e:	1aed      	subs	r5, r5, r3
  403e60:	1acb      	subs	r3, r1, r3
  403e62:	9208      	str	r2, [sp, #32]
  403e64:	9306      	str	r3, [sp, #24]
  403e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e68:	b1d3      	cbz	r3, 403ea0 <_dtoa_r+0x490>
  403e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403e6c:	2b00      	cmp	r3, #0
  403e6e:	f000 82b7 	beq.w	4043e0 <_dtoa_r+0x9d0>
  403e72:	2f00      	cmp	r7, #0
  403e74:	dd10      	ble.n	403e98 <_dtoa_r+0x488>
  403e76:	4631      	mov	r1, r6
  403e78:	463a      	mov	r2, r7
  403e7a:	4620      	mov	r0, r4
  403e7c:	f001 fa32 	bl	4052e4 <__pow5mult>
  403e80:	464a      	mov	r2, r9
  403e82:	4601      	mov	r1, r0
  403e84:	4606      	mov	r6, r0
  403e86:	4620      	mov	r0, r4
  403e88:	f001 f99a 	bl	4051c0 <__multiply>
  403e8c:	4649      	mov	r1, r9
  403e8e:	4680      	mov	r8, r0
  403e90:	4620      	mov	r0, r4
  403e92:	f001 f8f1 	bl	405078 <_Bfree>
  403e96:	46c1      	mov	r9, r8
  403e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e9a:	1bda      	subs	r2, r3, r7
  403e9c:	f040 82a1 	bne.w	4043e2 <_dtoa_r+0x9d2>
  403ea0:	2101      	movs	r1, #1
  403ea2:	4620      	mov	r0, r4
  403ea4:	f001 f982 	bl	4051ac <__i2b>
  403ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403eaa:	2b00      	cmp	r3, #0
  403eac:	4680      	mov	r8, r0
  403eae:	dd1c      	ble.n	403eea <_dtoa_r+0x4da>
  403eb0:	4601      	mov	r1, r0
  403eb2:	461a      	mov	r2, r3
  403eb4:	4620      	mov	r0, r4
  403eb6:	f001 fa15 	bl	4052e4 <__pow5mult>
  403eba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ebc:	2b01      	cmp	r3, #1
  403ebe:	4680      	mov	r8, r0
  403ec0:	f340 8254 	ble.w	40436c <_dtoa_r+0x95c>
  403ec4:	2300      	movs	r3, #0
  403ec6:	930c      	str	r3, [sp, #48]	; 0x30
  403ec8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403ecc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403ed0:	6918      	ldr	r0, [r3, #16]
  403ed2:	f001 f91b 	bl	40510c <__hi0bits>
  403ed6:	f1c0 0020 	rsb	r0, r0, #32
  403eda:	e010      	b.n	403efe <_dtoa_r+0x4ee>
  403edc:	f1c3 0520 	rsb	r5, r3, #32
  403ee0:	fa0a f005 	lsl.w	r0, sl, r5
  403ee4:	e674      	b.n	403bd0 <_dtoa_r+0x1c0>
  403ee6:	900e      	str	r0, [sp, #56]	; 0x38
  403ee8:	e63c      	b.n	403b64 <_dtoa_r+0x154>
  403eea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403eec:	2b01      	cmp	r3, #1
  403eee:	f340 8287 	ble.w	404400 <_dtoa_r+0x9f0>
  403ef2:	2300      	movs	r3, #0
  403ef4:	930c      	str	r3, [sp, #48]	; 0x30
  403ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ef8:	2001      	movs	r0, #1
  403efa:	2b00      	cmp	r3, #0
  403efc:	d1e4      	bne.n	403ec8 <_dtoa_r+0x4b8>
  403efe:	9a06      	ldr	r2, [sp, #24]
  403f00:	4410      	add	r0, r2
  403f02:	f010 001f 	ands.w	r0, r0, #31
  403f06:	f000 80a1 	beq.w	40404c <_dtoa_r+0x63c>
  403f0a:	f1c0 0320 	rsb	r3, r0, #32
  403f0e:	2b04      	cmp	r3, #4
  403f10:	f340 849e 	ble.w	404850 <_dtoa_r+0xe40>
  403f14:	9b08      	ldr	r3, [sp, #32]
  403f16:	f1c0 001c 	rsb	r0, r0, #28
  403f1a:	4403      	add	r3, r0
  403f1c:	9308      	str	r3, [sp, #32]
  403f1e:	4613      	mov	r3, r2
  403f20:	4403      	add	r3, r0
  403f22:	4405      	add	r5, r0
  403f24:	9306      	str	r3, [sp, #24]
  403f26:	9b08      	ldr	r3, [sp, #32]
  403f28:	2b00      	cmp	r3, #0
  403f2a:	dd05      	ble.n	403f38 <_dtoa_r+0x528>
  403f2c:	4649      	mov	r1, r9
  403f2e:	461a      	mov	r2, r3
  403f30:	4620      	mov	r0, r4
  403f32:	f001 fa27 	bl	405384 <__lshift>
  403f36:	4681      	mov	r9, r0
  403f38:	9b06      	ldr	r3, [sp, #24]
  403f3a:	2b00      	cmp	r3, #0
  403f3c:	dd05      	ble.n	403f4a <_dtoa_r+0x53a>
  403f3e:	4641      	mov	r1, r8
  403f40:	461a      	mov	r2, r3
  403f42:	4620      	mov	r0, r4
  403f44:	f001 fa1e 	bl	405384 <__lshift>
  403f48:	4680      	mov	r8, r0
  403f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403f4c:	2b00      	cmp	r3, #0
  403f4e:	f040 8086 	bne.w	40405e <_dtoa_r+0x64e>
  403f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f54:	2b00      	cmp	r3, #0
  403f56:	f340 8266 	ble.w	404426 <_dtoa_r+0xa16>
  403f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403f5c:	2b00      	cmp	r3, #0
  403f5e:	f000 8098 	beq.w	404092 <_dtoa_r+0x682>
  403f62:	2d00      	cmp	r5, #0
  403f64:	dd05      	ble.n	403f72 <_dtoa_r+0x562>
  403f66:	4631      	mov	r1, r6
  403f68:	462a      	mov	r2, r5
  403f6a:	4620      	mov	r0, r4
  403f6c:	f001 fa0a 	bl	405384 <__lshift>
  403f70:	4606      	mov	r6, r0
  403f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403f74:	2b00      	cmp	r3, #0
  403f76:	f040 8337 	bne.w	4045e8 <_dtoa_r+0xbd8>
  403f7a:	9606      	str	r6, [sp, #24]
  403f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f7e:	9a04      	ldr	r2, [sp, #16]
  403f80:	f8dd b018 	ldr.w	fp, [sp, #24]
  403f84:	3b01      	subs	r3, #1
  403f86:	18d3      	adds	r3, r2, r3
  403f88:	930b      	str	r3, [sp, #44]	; 0x2c
  403f8a:	f00a 0301 	and.w	r3, sl, #1
  403f8e:	930c      	str	r3, [sp, #48]	; 0x30
  403f90:	4617      	mov	r7, r2
  403f92:	46c2      	mov	sl, r8
  403f94:	4651      	mov	r1, sl
  403f96:	4648      	mov	r0, r9
  403f98:	f7ff fca6 	bl	4038e8 <quorem>
  403f9c:	4631      	mov	r1, r6
  403f9e:	4605      	mov	r5, r0
  403fa0:	4648      	mov	r0, r9
  403fa2:	f001 fa41 	bl	405428 <__mcmp>
  403fa6:	465a      	mov	r2, fp
  403fa8:	900a      	str	r0, [sp, #40]	; 0x28
  403faa:	4651      	mov	r1, sl
  403fac:	4620      	mov	r0, r4
  403fae:	f001 fa57 	bl	405460 <__mdiff>
  403fb2:	68c2      	ldr	r2, [r0, #12]
  403fb4:	4680      	mov	r8, r0
  403fb6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  403fba:	2a00      	cmp	r2, #0
  403fbc:	f040 822b 	bne.w	404416 <_dtoa_r+0xa06>
  403fc0:	4601      	mov	r1, r0
  403fc2:	4648      	mov	r0, r9
  403fc4:	9308      	str	r3, [sp, #32]
  403fc6:	f001 fa2f 	bl	405428 <__mcmp>
  403fca:	4641      	mov	r1, r8
  403fcc:	9006      	str	r0, [sp, #24]
  403fce:	4620      	mov	r0, r4
  403fd0:	f001 f852 	bl	405078 <_Bfree>
  403fd4:	9a06      	ldr	r2, [sp, #24]
  403fd6:	9b08      	ldr	r3, [sp, #32]
  403fd8:	b932      	cbnz	r2, 403fe8 <_dtoa_r+0x5d8>
  403fda:	9924      	ldr	r1, [sp, #144]	; 0x90
  403fdc:	b921      	cbnz	r1, 403fe8 <_dtoa_r+0x5d8>
  403fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403fe0:	2a00      	cmp	r2, #0
  403fe2:	f000 83ef 	beq.w	4047c4 <_dtoa_r+0xdb4>
  403fe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403fe8:	990a      	ldr	r1, [sp, #40]	; 0x28
  403fea:	2900      	cmp	r1, #0
  403fec:	f2c0 829f 	blt.w	40452e <_dtoa_r+0xb1e>
  403ff0:	d105      	bne.n	403ffe <_dtoa_r+0x5ee>
  403ff2:	9924      	ldr	r1, [sp, #144]	; 0x90
  403ff4:	b919      	cbnz	r1, 403ffe <_dtoa_r+0x5ee>
  403ff6:	990c      	ldr	r1, [sp, #48]	; 0x30
  403ff8:	2900      	cmp	r1, #0
  403ffa:	f000 8298 	beq.w	40452e <_dtoa_r+0xb1e>
  403ffe:	2a00      	cmp	r2, #0
  404000:	f300 8306 	bgt.w	404610 <_dtoa_r+0xc00>
  404004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404006:	703b      	strb	r3, [r7, #0]
  404008:	f107 0801 	add.w	r8, r7, #1
  40400c:	4297      	cmp	r7, r2
  40400e:	4645      	mov	r5, r8
  404010:	f000 830c 	beq.w	40462c <_dtoa_r+0xc1c>
  404014:	4649      	mov	r1, r9
  404016:	2300      	movs	r3, #0
  404018:	220a      	movs	r2, #10
  40401a:	4620      	mov	r0, r4
  40401c:	f001 f836 	bl	40508c <__multadd>
  404020:	455e      	cmp	r6, fp
  404022:	4681      	mov	r9, r0
  404024:	4631      	mov	r1, r6
  404026:	f04f 0300 	mov.w	r3, #0
  40402a:	f04f 020a 	mov.w	r2, #10
  40402e:	4620      	mov	r0, r4
  404030:	f000 81eb 	beq.w	40440a <_dtoa_r+0x9fa>
  404034:	f001 f82a 	bl	40508c <__multadd>
  404038:	4659      	mov	r1, fp
  40403a:	4606      	mov	r6, r0
  40403c:	2300      	movs	r3, #0
  40403e:	220a      	movs	r2, #10
  404040:	4620      	mov	r0, r4
  404042:	f001 f823 	bl	40508c <__multadd>
  404046:	4647      	mov	r7, r8
  404048:	4683      	mov	fp, r0
  40404a:	e7a3      	b.n	403f94 <_dtoa_r+0x584>
  40404c:	201c      	movs	r0, #28
  40404e:	9b08      	ldr	r3, [sp, #32]
  404050:	4403      	add	r3, r0
  404052:	9308      	str	r3, [sp, #32]
  404054:	9b06      	ldr	r3, [sp, #24]
  404056:	4403      	add	r3, r0
  404058:	4405      	add	r5, r0
  40405a:	9306      	str	r3, [sp, #24]
  40405c:	e763      	b.n	403f26 <_dtoa_r+0x516>
  40405e:	4641      	mov	r1, r8
  404060:	4648      	mov	r0, r9
  404062:	f001 f9e1 	bl	405428 <__mcmp>
  404066:	2800      	cmp	r0, #0
  404068:	f6bf af73 	bge.w	403f52 <_dtoa_r+0x542>
  40406c:	9f02      	ldr	r7, [sp, #8]
  40406e:	4649      	mov	r1, r9
  404070:	2300      	movs	r3, #0
  404072:	220a      	movs	r2, #10
  404074:	4620      	mov	r0, r4
  404076:	3f01      	subs	r7, #1
  404078:	9702      	str	r7, [sp, #8]
  40407a:	f001 f807 	bl	40508c <__multadd>
  40407e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404080:	4681      	mov	r9, r0
  404082:	2b00      	cmp	r3, #0
  404084:	f040 83b6 	bne.w	4047f4 <_dtoa_r+0xde4>
  404088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40408a:	2b00      	cmp	r3, #0
  40408c:	f340 83bf 	ble.w	40480e <_dtoa_r+0xdfe>
  404090:	930a      	str	r3, [sp, #40]	; 0x28
  404092:	f8dd b010 	ldr.w	fp, [sp, #16]
  404096:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404098:	465d      	mov	r5, fp
  40409a:	e002      	b.n	4040a2 <_dtoa_r+0x692>
  40409c:	f000 fff6 	bl	40508c <__multadd>
  4040a0:	4681      	mov	r9, r0
  4040a2:	4641      	mov	r1, r8
  4040a4:	4648      	mov	r0, r9
  4040a6:	f7ff fc1f 	bl	4038e8 <quorem>
  4040aa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4040ae:	f805 ab01 	strb.w	sl, [r5], #1
  4040b2:	eba5 030b 	sub.w	r3, r5, fp
  4040b6:	42bb      	cmp	r3, r7
  4040b8:	f04f 020a 	mov.w	r2, #10
  4040bc:	f04f 0300 	mov.w	r3, #0
  4040c0:	4649      	mov	r1, r9
  4040c2:	4620      	mov	r0, r4
  4040c4:	dbea      	blt.n	40409c <_dtoa_r+0x68c>
  4040c6:	9b04      	ldr	r3, [sp, #16]
  4040c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4040ca:	2a01      	cmp	r2, #1
  4040cc:	bfac      	ite	ge
  4040ce:	189b      	addge	r3, r3, r2
  4040d0:	3301      	addlt	r3, #1
  4040d2:	461d      	mov	r5, r3
  4040d4:	f04f 0b00 	mov.w	fp, #0
  4040d8:	4649      	mov	r1, r9
  4040da:	2201      	movs	r2, #1
  4040dc:	4620      	mov	r0, r4
  4040de:	f001 f951 	bl	405384 <__lshift>
  4040e2:	4641      	mov	r1, r8
  4040e4:	4681      	mov	r9, r0
  4040e6:	f001 f99f 	bl	405428 <__mcmp>
  4040ea:	2800      	cmp	r0, #0
  4040ec:	f340 823d 	ble.w	40456a <_dtoa_r+0xb5a>
  4040f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4040f4:	9904      	ldr	r1, [sp, #16]
  4040f6:	1e6b      	subs	r3, r5, #1
  4040f8:	e004      	b.n	404104 <_dtoa_r+0x6f4>
  4040fa:	428b      	cmp	r3, r1
  4040fc:	f000 81ae 	beq.w	40445c <_dtoa_r+0xa4c>
  404100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  404104:	2a39      	cmp	r2, #57	; 0x39
  404106:	f103 0501 	add.w	r5, r3, #1
  40410a:	d0f6      	beq.n	4040fa <_dtoa_r+0x6ea>
  40410c:	3201      	adds	r2, #1
  40410e:	701a      	strb	r2, [r3, #0]
  404110:	4641      	mov	r1, r8
  404112:	4620      	mov	r0, r4
  404114:	f000 ffb0 	bl	405078 <_Bfree>
  404118:	2e00      	cmp	r6, #0
  40411a:	f43f ae3d 	beq.w	403d98 <_dtoa_r+0x388>
  40411e:	f1bb 0f00 	cmp.w	fp, #0
  404122:	d005      	beq.n	404130 <_dtoa_r+0x720>
  404124:	45b3      	cmp	fp, r6
  404126:	d003      	beq.n	404130 <_dtoa_r+0x720>
  404128:	4659      	mov	r1, fp
  40412a:	4620      	mov	r0, r4
  40412c:	f000 ffa4 	bl	405078 <_Bfree>
  404130:	4631      	mov	r1, r6
  404132:	4620      	mov	r0, r4
  404134:	f000 ffa0 	bl	405078 <_Bfree>
  404138:	e62e      	b.n	403d98 <_dtoa_r+0x388>
  40413a:	2300      	movs	r3, #0
  40413c:	930b      	str	r3, [sp, #44]	; 0x2c
  40413e:	9b02      	ldr	r3, [sp, #8]
  404140:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404142:	4413      	add	r3, r2
  404144:	930f      	str	r3, [sp, #60]	; 0x3c
  404146:	3301      	adds	r3, #1
  404148:	2b01      	cmp	r3, #1
  40414a:	461f      	mov	r7, r3
  40414c:	461e      	mov	r6, r3
  40414e:	930a      	str	r3, [sp, #40]	; 0x28
  404150:	bfb8      	it	lt
  404152:	2701      	movlt	r7, #1
  404154:	2100      	movs	r1, #0
  404156:	2f17      	cmp	r7, #23
  404158:	6461      	str	r1, [r4, #68]	; 0x44
  40415a:	d90a      	bls.n	404172 <_dtoa_r+0x762>
  40415c:	2201      	movs	r2, #1
  40415e:	2304      	movs	r3, #4
  404160:	005b      	lsls	r3, r3, #1
  404162:	f103 0014 	add.w	r0, r3, #20
  404166:	4287      	cmp	r7, r0
  404168:	4611      	mov	r1, r2
  40416a:	f102 0201 	add.w	r2, r2, #1
  40416e:	d2f7      	bcs.n	404160 <_dtoa_r+0x750>
  404170:	6461      	str	r1, [r4, #68]	; 0x44
  404172:	4620      	mov	r0, r4
  404174:	f000 ff5a 	bl	40502c <_Balloc>
  404178:	2e0e      	cmp	r6, #14
  40417a:	9004      	str	r0, [sp, #16]
  40417c:	6420      	str	r0, [r4, #64]	; 0x40
  40417e:	f63f ad41 	bhi.w	403c04 <_dtoa_r+0x1f4>
  404182:	2d00      	cmp	r5, #0
  404184:	f43f ad3e 	beq.w	403c04 <_dtoa_r+0x1f4>
  404188:	9902      	ldr	r1, [sp, #8]
  40418a:	2900      	cmp	r1, #0
  40418c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  404190:	f340 8202 	ble.w	404598 <_dtoa_r+0xb88>
  404194:	4bb8      	ldr	r3, [pc, #736]	; (404478 <_dtoa_r+0xa68>)
  404196:	f001 020f 	and.w	r2, r1, #15
  40419a:	110d      	asrs	r5, r1, #4
  40419c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4041a0:	06e9      	lsls	r1, r5, #27
  4041a2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4041a6:	f140 81ae 	bpl.w	404506 <_dtoa_r+0xaf6>
  4041aa:	4bb4      	ldr	r3, [pc, #720]	; (40447c <_dtoa_r+0xa6c>)
  4041ac:	4650      	mov	r0, sl
  4041ae:	4659      	mov	r1, fp
  4041b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4041b4:	f002 fa02 	bl	4065bc <__aeabi_ddiv>
  4041b8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4041bc:	f005 050f 	and.w	r5, r5, #15
  4041c0:	f04f 0a03 	mov.w	sl, #3
  4041c4:	b18d      	cbz	r5, 4041ea <_dtoa_r+0x7da>
  4041c6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40447c <_dtoa_r+0xa6c>
  4041ca:	07ea      	lsls	r2, r5, #31
  4041cc:	d509      	bpl.n	4041e2 <_dtoa_r+0x7d2>
  4041ce:	4630      	mov	r0, r6
  4041d0:	4639      	mov	r1, r7
  4041d2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4041d6:	f002 f8c7 	bl	406368 <__aeabi_dmul>
  4041da:	f10a 0a01 	add.w	sl, sl, #1
  4041de:	4606      	mov	r6, r0
  4041e0:	460f      	mov	r7, r1
  4041e2:	106d      	asrs	r5, r5, #1
  4041e4:	f108 0808 	add.w	r8, r8, #8
  4041e8:	d1ef      	bne.n	4041ca <_dtoa_r+0x7ba>
  4041ea:	463b      	mov	r3, r7
  4041ec:	4632      	mov	r2, r6
  4041ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4041f2:	f002 f9e3 	bl	4065bc <__aeabi_ddiv>
  4041f6:	4607      	mov	r7, r0
  4041f8:	4688      	mov	r8, r1
  4041fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4041fc:	b143      	cbz	r3, 404210 <_dtoa_r+0x800>
  4041fe:	2200      	movs	r2, #0
  404200:	4b9f      	ldr	r3, [pc, #636]	; (404480 <_dtoa_r+0xa70>)
  404202:	4638      	mov	r0, r7
  404204:	4641      	mov	r1, r8
  404206:	f002 fb21 	bl	40684c <__aeabi_dcmplt>
  40420a:	2800      	cmp	r0, #0
  40420c:	f040 8286 	bne.w	40471c <_dtoa_r+0xd0c>
  404210:	4650      	mov	r0, sl
  404212:	f002 f843 	bl	40629c <__aeabi_i2d>
  404216:	463a      	mov	r2, r7
  404218:	4643      	mov	r3, r8
  40421a:	f002 f8a5 	bl	406368 <__aeabi_dmul>
  40421e:	4b99      	ldr	r3, [pc, #612]	; (404484 <_dtoa_r+0xa74>)
  404220:	2200      	movs	r2, #0
  404222:	f001 feef 	bl	406004 <__adddf3>
  404226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404228:	4605      	mov	r5, r0
  40422a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40422e:	2b00      	cmp	r3, #0
  404230:	f000 813e 	beq.w	4044b0 <_dtoa_r+0xaa0>
  404234:	9b02      	ldr	r3, [sp, #8]
  404236:	9315      	str	r3, [sp, #84]	; 0x54
  404238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40423a:	9312      	str	r3, [sp, #72]	; 0x48
  40423c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40423e:	2b00      	cmp	r3, #0
  404240:	f000 81fa 	beq.w	404638 <_dtoa_r+0xc28>
  404244:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404246:	4b8c      	ldr	r3, [pc, #560]	; (404478 <_dtoa_r+0xa68>)
  404248:	498f      	ldr	r1, [pc, #572]	; (404488 <_dtoa_r+0xa78>)
  40424a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40424e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  404252:	2000      	movs	r0, #0
  404254:	f002 f9b2 	bl	4065bc <__aeabi_ddiv>
  404258:	462a      	mov	r2, r5
  40425a:	4633      	mov	r3, r6
  40425c:	f001 fed0 	bl	406000 <__aeabi_dsub>
  404260:	4682      	mov	sl, r0
  404262:	468b      	mov	fp, r1
  404264:	4638      	mov	r0, r7
  404266:	4641      	mov	r1, r8
  404268:	f002 fb2e 	bl	4068c8 <__aeabi_d2iz>
  40426c:	4605      	mov	r5, r0
  40426e:	f002 f815 	bl	40629c <__aeabi_i2d>
  404272:	4602      	mov	r2, r0
  404274:	460b      	mov	r3, r1
  404276:	4638      	mov	r0, r7
  404278:	4641      	mov	r1, r8
  40427a:	f001 fec1 	bl	406000 <__aeabi_dsub>
  40427e:	3530      	adds	r5, #48	; 0x30
  404280:	fa5f f885 	uxtb.w	r8, r5
  404284:	9d04      	ldr	r5, [sp, #16]
  404286:	4606      	mov	r6, r0
  404288:	460f      	mov	r7, r1
  40428a:	f885 8000 	strb.w	r8, [r5]
  40428e:	4602      	mov	r2, r0
  404290:	460b      	mov	r3, r1
  404292:	4650      	mov	r0, sl
  404294:	4659      	mov	r1, fp
  404296:	3501      	adds	r5, #1
  404298:	f002 faf6 	bl	406888 <__aeabi_dcmpgt>
  40429c:	2800      	cmp	r0, #0
  40429e:	d154      	bne.n	40434a <_dtoa_r+0x93a>
  4042a0:	4632      	mov	r2, r6
  4042a2:	463b      	mov	r3, r7
  4042a4:	2000      	movs	r0, #0
  4042a6:	4976      	ldr	r1, [pc, #472]	; (404480 <_dtoa_r+0xa70>)
  4042a8:	f001 feaa 	bl	406000 <__aeabi_dsub>
  4042ac:	4602      	mov	r2, r0
  4042ae:	460b      	mov	r3, r1
  4042b0:	4650      	mov	r0, sl
  4042b2:	4659      	mov	r1, fp
  4042b4:	f002 fae8 	bl	406888 <__aeabi_dcmpgt>
  4042b8:	2800      	cmp	r0, #0
  4042ba:	f040 8270 	bne.w	40479e <_dtoa_r+0xd8e>
  4042be:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4042c0:	2a01      	cmp	r2, #1
  4042c2:	f000 8111 	beq.w	4044e8 <_dtoa_r+0xad8>
  4042c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4042c8:	9a04      	ldr	r2, [sp, #16]
  4042ca:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4042ce:	4413      	add	r3, r2
  4042d0:	4699      	mov	r9, r3
  4042d2:	e00d      	b.n	4042f0 <_dtoa_r+0x8e0>
  4042d4:	2000      	movs	r0, #0
  4042d6:	496a      	ldr	r1, [pc, #424]	; (404480 <_dtoa_r+0xa70>)
  4042d8:	f001 fe92 	bl	406000 <__aeabi_dsub>
  4042dc:	4652      	mov	r2, sl
  4042de:	465b      	mov	r3, fp
  4042e0:	f002 fab4 	bl	40684c <__aeabi_dcmplt>
  4042e4:	2800      	cmp	r0, #0
  4042e6:	f040 8258 	bne.w	40479a <_dtoa_r+0xd8a>
  4042ea:	454d      	cmp	r5, r9
  4042ec:	f000 80fa 	beq.w	4044e4 <_dtoa_r+0xad4>
  4042f0:	4650      	mov	r0, sl
  4042f2:	4659      	mov	r1, fp
  4042f4:	2200      	movs	r2, #0
  4042f6:	4b65      	ldr	r3, [pc, #404]	; (40448c <_dtoa_r+0xa7c>)
  4042f8:	f002 f836 	bl	406368 <__aeabi_dmul>
  4042fc:	2200      	movs	r2, #0
  4042fe:	4b63      	ldr	r3, [pc, #396]	; (40448c <_dtoa_r+0xa7c>)
  404300:	4682      	mov	sl, r0
  404302:	468b      	mov	fp, r1
  404304:	4630      	mov	r0, r6
  404306:	4639      	mov	r1, r7
  404308:	f002 f82e 	bl	406368 <__aeabi_dmul>
  40430c:	460f      	mov	r7, r1
  40430e:	4606      	mov	r6, r0
  404310:	f002 fada 	bl	4068c8 <__aeabi_d2iz>
  404314:	4680      	mov	r8, r0
  404316:	f001 ffc1 	bl	40629c <__aeabi_i2d>
  40431a:	4602      	mov	r2, r0
  40431c:	460b      	mov	r3, r1
  40431e:	4630      	mov	r0, r6
  404320:	4639      	mov	r1, r7
  404322:	f001 fe6d 	bl	406000 <__aeabi_dsub>
  404326:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40432a:	fa5f f888 	uxtb.w	r8, r8
  40432e:	4652      	mov	r2, sl
  404330:	465b      	mov	r3, fp
  404332:	f805 8b01 	strb.w	r8, [r5], #1
  404336:	4606      	mov	r6, r0
  404338:	460f      	mov	r7, r1
  40433a:	f002 fa87 	bl	40684c <__aeabi_dcmplt>
  40433e:	4632      	mov	r2, r6
  404340:	463b      	mov	r3, r7
  404342:	2800      	cmp	r0, #0
  404344:	d0c6      	beq.n	4042d4 <_dtoa_r+0x8c4>
  404346:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40434a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40434c:	9302      	str	r3, [sp, #8]
  40434e:	e523      	b.n	403d98 <_dtoa_r+0x388>
  404350:	2300      	movs	r3, #0
  404352:	930b      	str	r3, [sp, #44]	; 0x2c
  404354:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404356:	2b00      	cmp	r3, #0
  404358:	f340 80dc 	ble.w	404514 <_dtoa_r+0xb04>
  40435c:	461f      	mov	r7, r3
  40435e:	461e      	mov	r6, r3
  404360:	930f      	str	r3, [sp, #60]	; 0x3c
  404362:	930a      	str	r3, [sp, #40]	; 0x28
  404364:	e6f6      	b.n	404154 <_dtoa_r+0x744>
  404366:	2301      	movs	r3, #1
  404368:	930b      	str	r3, [sp, #44]	; 0x2c
  40436a:	e7f3      	b.n	404354 <_dtoa_r+0x944>
  40436c:	f1ba 0f00 	cmp.w	sl, #0
  404370:	f47f ada8 	bne.w	403ec4 <_dtoa_r+0x4b4>
  404374:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404378:	2b00      	cmp	r3, #0
  40437a:	f47f adba 	bne.w	403ef2 <_dtoa_r+0x4e2>
  40437e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  404382:	0d3f      	lsrs	r7, r7, #20
  404384:	053f      	lsls	r7, r7, #20
  404386:	2f00      	cmp	r7, #0
  404388:	f000 820d 	beq.w	4047a6 <_dtoa_r+0xd96>
  40438c:	9b08      	ldr	r3, [sp, #32]
  40438e:	3301      	adds	r3, #1
  404390:	9308      	str	r3, [sp, #32]
  404392:	9b06      	ldr	r3, [sp, #24]
  404394:	3301      	adds	r3, #1
  404396:	9306      	str	r3, [sp, #24]
  404398:	2301      	movs	r3, #1
  40439a:	930c      	str	r3, [sp, #48]	; 0x30
  40439c:	e5ab      	b.n	403ef6 <_dtoa_r+0x4e6>
  40439e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043a0:	2b00      	cmp	r3, #0
  4043a2:	f73f ac42 	bgt.w	403c2a <_dtoa_r+0x21a>
  4043a6:	f040 8221 	bne.w	4047ec <_dtoa_r+0xddc>
  4043aa:	2200      	movs	r2, #0
  4043ac:	4b38      	ldr	r3, [pc, #224]	; (404490 <_dtoa_r+0xa80>)
  4043ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4043b2:	f001 ffd9 	bl	406368 <__aeabi_dmul>
  4043b6:	4652      	mov	r2, sl
  4043b8:	465b      	mov	r3, fp
  4043ba:	f002 fa5b 	bl	406874 <__aeabi_dcmpge>
  4043be:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4043c2:	4646      	mov	r6, r8
  4043c4:	2800      	cmp	r0, #0
  4043c6:	d041      	beq.n	40444c <_dtoa_r+0xa3c>
  4043c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4043ca:	9d04      	ldr	r5, [sp, #16]
  4043cc:	43db      	mvns	r3, r3
  4043ce:	9302      	str	r3, [sp, #8]
  4043d0:	4641      	mov	r1, r8
  4043d2:	4620      	mov	r0, r4
  4043d4:	f000 fe50 	bl	405078 <_Bfree>
  4043d8:	2e00      	cmp	r6, #0
  4043da:	f43f acdd 	beq.w	403d98 <_dtoa_r+0x388>
  4043de:	e6a7      	b.n	404130 <_dtoa_r+0x720>
  4043e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4043e2:	4649      	mov	r1, r9
  4043e4:	4620      	mov	r0, r4
  4043e6:	f000 ff7d 	bl	4052e4 <__pow5mult>
  4043ea:	4681      	mov	r9, r0
  4043ec:	e558      	b.n	403ea0 <_dtoa_r+0x490>
  4043ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4043f0:	2a00      	cmp	r2, #0
  4043f2:	f000 8187 	beq.w	404704 <_dtoa_r+0xcf4>
  4043f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4043fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4043fc:	9d08      	ldr	r5, [sp, #32]
  4043fe:	e4f2      	b.n	403de6 <_dtoa_r+0x3d6>
  404400:	f1ba 0f00 	cmp.w	sl, #0
  404404:	f47f ad75 	bne.w	403ef2 <_dtoa_r+0x4e2>
  404408:	e7b4      	b.n	404374 <_dtoa_r+0x964>
  40440a:	f000 fe3f 	bl	40508c <__multadd>
  40440e:	4647      	mov	r7, r8
  404410:	4606      	mov	r6, r0
  404412:	4683      	mov	fp, r0
  404414:	e5be      	b.n	403f94 <_dtoa_r+0x584>
  404416:	4601      	mov	r1, r0
  404418:	4620      	mov	r0, r4
  40441a:	9306      	str	r3, [sp, #24]
  40441c:	f000 fe2c 	bl	405078 <_Bfree>
  404420:	2201      	movs	r2, #1
  404422:	9b06      	ldr	r3, [sp, #24]
  404424:	e5e0      	b.n	403fe8 <_dtoa_r+0x5d8>
  404426:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404428:	2b02      	cmp	r3, #2
  40442a:	f77f ad96 	ble.w	403f5a <_dtoa_r+0x54a>
  40442e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404430:	2b00      	cmp	r3, #0
  404432:	d1c9      	bne.n	4043c8 <_dtoa_r+0x9b8>
  404434:	4641      	mov	r1, r8
  404436:	2205      	movs	r2, #5
  404438:	4620      	mov	r0, r4
  40443a:	f000 fe27 	bl	40508c <__multadd>
  40443e:	4601      	mov	r1, r0
  404440:	4680      	mov	r8, r0
  404442:	4648      	mov	r0, r9
  404444:	f000 fff0 	bl	405428 <__mcmp>
  404448:	2800      	cmp	r0, #0
  40444a:	ddbd      	ble.n	4043c8 <_dtoa_r+0x9b8>
  40444c:	9a02      	ldr	r2, [sp, #8]
  40444e:	9904      	ldr	r1, [sp, #16]
  404450:	2331      	movs	r3, #49	; 0x31
  404452:	3201      	adds	r2, #1
  404454:	9202      	str	r2, [sp, #8]
  404456:	700b      	strb	r3, [r1, #0]
  404458:	1c4d      	adds	r5, r1, #1
  40445a:	e7b9      	b.n	4043d0 <_dtoa_r+0x9c0>
  40445c:	9a02      	ldr	r2, [sp, #8]
  40445e:	3201      	adds	r2, #1
  404460:	9202      	str	r2, [sp, #8]
  404462:	9a04      	ldr	r2, [sp, #16]
  404464:	2331      	movs	r3, #49	; 0x31
  404466:	7013      	strb	r3, [r2, #0]
  404468:	e652      	b.n	404110 <_dtoa_r+0x700>
  40446a:	2301      	movs	r3, #1
  40446c:	930b      	str	r3, [sp, #44]	; 0x2c
  40446e:	e666      	b.n	40413e <_dtoa_r+0x72e>
  404470:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404474:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404476:	e48f      	b.n	403d98 <_dtoa_r+0x388>
  404478:	00406da8 	.word	0x00406da8
  40447c:	00406d80 	.word	0x00406d80
  404480:	3ff00000 	.word	0x3ff00000
  404484:	401c0000 	.word	0x401c0000
  404488:	3fe00000 	.word	0x3fe00000
  40448c:	40240000 	.word	0x40240000
  404490:	40140000 	.word	0x40140000
  404494:	4650      	mov	r0, sl
  404496:	f001 ff01 	bl	40629c <__aeabi_i2d>
  40449a:	463a      	mov	r2, r7
  40449c:	4643      	mov	r3, r8
  40449e:	f001 ff63 	bl	406368 <__aeabi_dmul>
  4044a2:	2200      	movs	r2, #0
  4044a4:	4bc1      	ldr	r3, [pc, #772]	; (4047ac <_dtoa_r+0xd9c>)
  4044a6:	f001 fdad 	bl	406004 <__adddf3>
  4044aa:	4605      	mov	r5, r0
  4044ac:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4044b0:	4641      	mov	r1, r8
  4044b2:	2200      	movs	r2, #0
  4044b4:	4bbe      	ldr	r3, [pc, #760]	; (4047b0 <_dtoa_r+0xda0>)
  4044b6:	4638      	mov	r0, r7
  4044b8:	f001 fda2 	bl	406000 <__aeabi_dsub>
  4044bc:	462a      	mov	r2, r5
  4044be:	4633      	mov	r3, r6
  4044c0:	4682      	mov	sl, r0
  4044c2:	468b      	mov	fp, r1
  4044c4:	f002 f9e0 	bl	406888 <__aeabi_dcmpgt>
  4044c8:	4680      	mov	r8, r0
  4044ca:	2800      	cmp	r0, #0
  4044cc:	f040 8110 	bne.w	4046f0 <_dtoa_r+0xce0>
  4044d0:	462a      	mov	r2, r5
  4044d2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4044d6:	4650      	mov	r0, sl
  4044d8:	4659      	mov	r1, fp
  4044da:	f002 f9b7 	bl	40684c <__aeabi_dcmplt>
  4044de:	b118      	cbz	r0, 4044e8 <_dtoa_r+0xad8>
  4044e0:	4646      	mov	r6, r8
  4044e2:	e771      	b.n	4043c8 <_dtoa_r+0x9b8>
  4044e4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4044e8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4044ec:	f7ff bb8a 	b.w	403c04 <_dtoa_r+0x1f4>
  4044f0:	9804      	ldr	r0, [sp, #16]
  4044f2:	f7ff babb 	b.w	403a6c <_dtoa_r+0x5c>
  4044f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4044f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4044fa:	970c      	str	r7, [sp, #48]	; 0x30
  4044fc:	1afb      	subs	r3, r7, r3
  4044fe:	441a      	add	r2, r3
  404500:	920d      	str	r2, [sp, #52]	; 0x34
  404502:	2700      	movs	r7, #0
  404504:	e469      	b.n	403dda <_dtoa_r+0x3ca>
  404506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40450a:	f04f 0a02 	mov.w	sl, #2
  40450e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  404512:	e657      	b.n	4041c4 <_dtoa_r+0x7b4>
  404514:	2100      	movs	r1, #0
  404516:	2301      	movs	r3, #1
  404518:	6461      	str	r1, [r4, #68]	; 0x44
  40451a:	4620      	mov	r0, r4
  40451c:	9325      	str	r3, [sp, #148]	; 0x94
  40451e:	f000 fd85 	bl	40502c <_Balloc>
  404522:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404524:	9004      	str	r0, [sp, #16]
  404526:	6420      	str	r0, [r4, #64]	; 0x40
  404528:	930a      	str	r3, [sp, #40]	; 0x28
  40452a:	930f      	str	r3, [sp, #60]	; 0x3c
  40452c:	e629      	b.n	404182 <_dtoa_r+0x772>
  40452e:	2a00      	cmp	r2, #0
  404530:	46d0      	mov	r8, sl
  404532:	f8cd b018 	str.w	fp, [sp, #24]
  404536:	469a      	mov	sl, r3
  404538:	dd11      	ble.n	40455e <_dtoa_r+0xb4e>
  40453a:	4649      	mov	r1, r9
  40453c:	2201      	movs	r2, #1
  40453e:	4620      	mov	r0, r4
  404540:	f000 ff20 	bl	405384 <__lshift>
  404544:	4641      	mov	r1, r8
  404546:	4681      	mov	r9, r0
  404548:	f000 ff6e 	bl	405428 <__mcmp>
  40454c:	2800      	cmp	r0, #0
  40454e:	f340 8146 	ble.w	4047de <_dtoa_r+0xdce>
  404552:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  404556:	f000 8106 	beq.w	404766 <_dtoa_r+0xd56>
  40455a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40455e:	46b3      	mov	fp, r6
  404560:	f887 a000 	strb.w	sl, [r7]
  404564:	1c7d      	adds	r5, r7, #1
  404566:	9e06      	ldr	r6, [sp, #24]
  404568:	e5d2      	b.n	404110 <_dtoa_r+0x700>
  40456a:	d104      	bne.n	404576 <_dtoa_r+0xb66>
  40456c:	f01a 0f01 	tst.w	sl, #1
  404570:	d001      	beq.n	404576 <_dtoa_r+0xb66>
  404572:	e5bd      	b.n	4040f0 <_dtoa_r+0x6e0>
  404574:	4615      	mov	r5, r2
  404576:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40457a:	2b30      	cmp	r3, #48	; 0x30
  40457c:	f105 32ff 	add.w	r2, r5, #4294967295
  404580:	d0f8      	beq.n	404574 <_dtoa_r+0xb64>
  404582:	e5c5      	b.n	404110 <_dtoa_r+0x700>
  404584:	9904      	ldr	r1, [sp, #16]
  404586:	2230      	movs	r2, #48	; 0x30
  404588:	700a      	strb	r2, [r1, #0]
  40458a:	9a02      	ldr	r2, [sp, #8]
  40458c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404590:	3201      	adds	r2, #1
  404592:	9202      	str	r2, [sp, #8]
  404594:	f7ff bbfc 	b.w	403d90 <_dtoa_r+0x380>
  404598:	f000 80bb 	beq.w	404712 <_dtoa_r+0xd02>
  40459c:	9b02      	ldr	r3, [sp, #8]
  40459e:	425d      	negs	r5, r3
  4045a0:	4b84      	ldr	r3, [pc, #528]	; (4047b4 <_dtoa_r+0xda4>)
  4045a2:	f005 020f 	and.w	r2, r5, #15
  4045a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4045b2:	f001 fed9 	bl	406368 <__aeabi_dmul>
  4045b6:	112d      	asrs	r5, r5, #4
  4045b8:	4607      	mov	r7, r0
  4045ba:	4688      	mov	r8, r1
  4045bc:	f000 812c 	beq.w	404818 <_dtoa_r+0xe08>
  4045c0:	4e7d      	ldr	r6, [pc, #500]	; (4047b8 <_dtoa_r+0xda8>)
  4045c2:	f04f 0a02 	mov.w	sl, #2
  4045c6:	07eb      	lsls	r3, r5, #31
  4045c8:	d509      	bpl.n	4045de <_dtoa_r+0xbce>
  4045ca:	4638      	mov	r0, r7
  4045cc:	4641      	mov	r1, r8
  4045ce:	e9d6 2300 	ldrd	r2, r3, [r6]
  4045d2:	f001 fec9 	bl	406368 <__aeabi_dmul>
  4045d6:	f10a 0a01 	add.w	sl, sl, #1
  4045da:	4607      	mov	r7, r0
  4045dc:	4688      	mov	r8, r1
  4045de:	106d      	asrs	r5, r5, #1
  4045e0:	f106 0608 	add.w	r6, r6, #8
  4045e4:	d1ef      	bne.n	4045c6 <_dtoa_r+0xbb6>
  4045e6:	e608      	b.n	4041fa <_dtoa_r+0x7ea>
  4045e8:	6871      	ldr	r1, [r6, #4]
  4045ea:	4620      	mov	r0, r4
  4045ec:	f000 fd1e 	bl	40502c <_Balloc>
  4045f0:	6933      	ldr	r3, [r6, #16]
  4045f2:	3302      	adds	r3, #2
  4045f4:	009a      	lsls	r2, r3, #2
  4045f6:	4605      	mov	r5, r0
  4045f8:	f106 010c 	add.w	r1, r6, #12
  4045fc:	300c      	adds	r0, #12
  4045fe:	f000 fc77 	bl	404ef0 <memcpy>
  404602:	4629      	mov	r1, r5
  404604:	2201      	movs	r2, #1
  404606:	4620      	mov	r0, r4
  404608:	f000 febc 	bl	405384 <__lshift>
  40460c:	9006      	str	r0, [sp, #24]
  40460e:	e4b5      	b.n	403f7c <_dtoa_r+0x56c>
  404610:	2b39      	cmp	r3, #57	; 0x39
  404612:	f8cd b018 	str.w	fp, [sp, #24]
  404616:	46d0      	mov	r8, sl
  404618:	f000 80a5 	beq.w	404766 <_dtoa_r+0xd56>
  40461c:	f103 0a01 	add.w	sl, r3, #1
  404620:	46b3      	mov	fp, r6
  404622:	f887 a000 	strb.w	sl, [r7]
  404626:	1c7d      	adds	r5, r7, #1
  404628:	9e06      	ldr	r6, [sp, #24]
  40462a:	e571      	b.n	404110 <_dtoa_r+0x700>
  40462c:	465a      	mov	r2, fp
  40462e:	46d0      	mov	r8, sl
  404630:	46b3      	mov	fp, r6
  404632:	469a      	mov	sl, r3
  404634:	4616      	mov	r6, r2
  404636:	e54f      	b.n	4040d8 <_dtoa_r+0x6c8>
  404638:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40463a:	495e      	ldr	r1, [pc, #376]	; (4047b4 <_dtoa_r+0xda4>)
  40463c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  404640:	462a      	mov	r2, r5
  404642:	4633      	mov	r3, r6
  404644:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  404648:	f001 fe8e 	bl	406368 <__aeabi_dmul>
  40464c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404650:	4638      	mov	r0, r7
  404652:	4641      	mov	r1, r8
  404654:	f002 f938 	bl	4068c8 <__aeabi_d2iz>
  404658:	4605      	mov	r5, r0
  40465a:	f001 fe1f 	bl	40629c <__aeabi_i2d>
  40465e:	460b      	mov	r3, r1
  404660:	4602      	mov	r2, r0
  404662:	4641      	mov	r1, r8
  404664:	4638      	mov	r0, r7
  404666:	f001 fccb 	bl	406000 <__aeabi_dsub>
  40466a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40466c:	460f      	mov	r7, r1
  40466e:	9904      	ldr	r1, [sp, #16]
  404670:	3530      	adds	r5, #48	; 0x30
  404672:	2b01      	cmp	r3, #1
  404674:	700d      	strb	r5, [r1, #0]
  404676:	4606      	mov	r6, r0
  404678:	f101 0501 	add.w	r5, r1, #1
  40467c:	d026      	beq.n	4046cc <_dtoa_r+0xcbc>
  40467e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404680:	9a04      	ldr	r2, [sp, #16]
  404682:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4047c0 <_dtoa_r+0xdb0>
  404686:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40468a:	4413      	add	r3, r2
  40468c:	f04f 0a00 	mov.w	sl, #0
  404690:	4699      	mov	r9, r3
  404692:	4652      	mov	r2, sl
  404694:	465b      	mov	r3, fp
  404696:	4630      	mov	r0, r6
  404698:	4639      	mov	r1, r7
  40469a:	f001 fe65 	bl	406368 <__aeabi_dmul>
  40469e:	460f      	mov	r7, r1
  4046a0:	4606      	mov	r6, r0
  4046a2:	f002 f911 	bl	4068c8 <__aeabi_d2iz>
  4046a6:	4680      	mov	r8, r0
  4046a8:	f001 fdf8 	bl	40629c <__aeabi_i2d>
  4046ac:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4046b0:	4602      	mov	r2, r0
  4046b2:	460b      	mov	r3, r1
  4046b4:	4630      	mov	r0, r6
  4046b6:	4639      	mov	r1, r7
  4046b8:	f001 fca2 	bl	406000 <__aeabi_dsub>
  4046bc:	f805 8b01 	strb.w	r8, [r5], #1
  4046c0:	454d      	cmp	r5, r9
  4046c2:	4606      	mov	r6, r0
  4046c4:	460f      	mov	r7, r1
  4046c6:	d1e4      	bne.n	404692 <_dtoa_r+0xc82>
  4046c8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4046cc:	4b3b      	ldr	r3, [pc, #236]	; (4047bc <_dtoa_r+0xdac>)
  4046ce:	2200      	movs	r2, #0
  4046d0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4046d4:	f001 fc96 	bl	406004 <__adddf3>
  4046d8:	4632      	mov	r2, r6
  4046da:	463b      	mov	r3, r7
  4046dc:	f002 f8b6 	bl	40684c <__aeabi_dcmplt>
  4046e0:	2800      	cmp	r0, #0
  4046e2:	d046      	beq.n	404772 <_dtoa_r+0xd62>
  4046e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4046e6:	9302      	str	r3, [sp, #8]
  4046e8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4046ec:	f7ff bb43 	b.w	403d76 <_dtoa_r+0x366>
  4046f0:	f04f 0800 	mov.w	r8, #0
  4046f4:	4646      	mov	r6, r8
  4046f6:	e6a9      	b.n	40444c <_dtoa_r+0xa3c>
  4046f8:	9b08      	ldr	r3, [sp, #32]
  4046fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4046fc:	1a9d      	subs	r5, r3, r2
  4046fe:	2300      	movs	r3, #0
  404700:	f7ff bb71 	b.w	403de6 <_dtoa_r+0x3d6>
  404704:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404706:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404708:	9d08      	ldr	r5, [sp, #32]
  40470a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40470e:	f7ff bb6a 	b.w	403de6 <_dtoa_r+0x3d6>
  404712:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  404716:	f04f 0a02 	mov.w	sl, #2
  40471a:	e56e      	b.n	4041fa <_dtoa_r+0x7ea>
  40471c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40471e:	2b00      	cmp	r3, #0
  404720:	f43f aeb8 	beq.w	404494 <_dtoa_r+0xa84>
  404724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404726:	2b00      	cmp	r3, #0
  404728:	f77f aede 	ble.w	4044e8 <_dtoa_r+0xad8>
  40472c:	2200      	movs	r2, #0
  40472e:	4b24      	ldr	r3, [pc, #144]	; (4047c0 <_dtoa_r+0xdb0>)
  404730:	4638      	mov	r0, r7
  404732:	4641      	mov	r1, r8
  404734:	f001 fe18 	bl	406368 <__aeabi_dmul>
  404738:	4607      	mov	r7, r0
  40473a:	4688      	mov	r8, r1
  40473c:	f10a 0001 	add.w	r0, sl, #1
  404740:	f001 fdac 	bl	40629c <__aeabi_i2d>
  404744:	463a      	mov	r2, r7
  404746:	4643      	mov	r3, r8
  404748:	f001 fe0e 	bl	406368 <__aeabi_dmul>
  40474c:	2200      	movs	r2, #0
  40474e:	4b17      	ldr	r3, [pc, #92]	; (4047ac <_dtoa_r+0xd9c>)
  404750:	f001 fc58 	bl	406004 <__adddf3>
  404754:	9a02      	ldr	r2, [sp, #8]
  404756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404758:	9312      	str	r3, [sp, #72]	; 0x48
  40475a:	3a01      	subs	r2, #1
  40475c:	4605      	mov	r5, r0
  40475e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404762:	9215      	str	r2, [sp, #84]	; 0x54
  404764:	e56a      	b.n	40423c <_dtoa_r+0x82c>
  404766:	2239      	movs	r2, #57	; 0x39
  404768:	46b3      	mov	fp, r6
  40476a:	703a      	strb	r2, [r7, #0]
  40476c:	9e06      	ldr	r6, [sp, #24]
  40476e:	1c7d      	adds	r5, r7, #1
  404770:	e4c0      	b.n	4040f4 <_dtoa_r+0x6e4>
  404772:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404776:	2000      	movs	r0, #0
  404778:	4910      	ldr	r1, [pc, #64]	; (4047bc <_dtoa_r+0xdac>)
  40477a:	f001 fc41 	bl	406000 <__aeabi_dsub>
  40477e:	4632      	mov	r2, r6
  404780:	463b      	mov	r3, r7
  404782:	f002 f881 	bl	406888 <__aeabi_dcmpgt>
  404786:	b908      	cbnz	r0, 40478c <_dtoa_r+0xd7c>
  404788:	e6ae      	b.n	4044e8 <_dtoa_r+0xad8>
  40478a:	4615      	mov	r5, r2
  40478c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404790:	2b30      	cmp	r3, #48	; 0x30
  404792:	f105 32ff 	add.w	r2, r5, #4294967295
  404796:	d0f8      	beq.n	40478a <_dtoa_r+0xd7a>
  404798:	e5d7      	b.n	40434a <_dtoa_r+0x93a>
  40479a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40479e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4047a0:	9302      	str	r3, [sp, #8]
  4047a2:	f7ff bae8 	b.w	403d76 <_dtoa_r+0x366>
  4047a6:	970c      	str	r7, [sp, #48]	; 0x30
  4047a8:	f7ff bba5 	b.w	403ef6 <_dtoa_r+0x4e6>
  4047ac:	401c0000 	.word	0x401c0000
  4047b0:	40140000 	.word	0x40140000
  4047b4:	00406da8 	.word	0x00406da8
  4047b8:	00406d80 	.word	0x00406d80
  4047bc:	3fe00000 	.word	0x3fe00000
  4047c0:	40240000 	.word	0x40240000
  4047c4:	2b39      	cmp	r3, #57	; 0x39
  4047c6:	f8cd b018 	str.w	fp, [sp, #24]
  4047ca:	46d0      	mov	r8, sl
  4047cc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4047d0:	469a      	mov	sl, r3
  4047d2:	d0c8      	beq.n	404766 <_dtoa_r+0xd56>
  4047d4:	f1bb 0f00 	cmp.w	fp, #0
  4047d8:	f73f aebf 	bgt.w	40455a <_dtoa_r+0xb4a>
  4047dc:	e6bf      	b.n	40455e <_dtoa_r+0xb4e>
  4047de:	f47f aebe 	bne.w	40455e <_dtoa_r+0xb4e>
  4047e2:	f01a 0f01 	tst.w	sl, #1
  4047e6:	f43f aeba 	beq.w	40455e <_dtoa_r+0xb4e>
  4047ea:	e6b2      	b.n	404552 <_dtoa_r+0xb42>
  4047ec:	f04f 0800 	mov.w	r8, #0
  4047f0:	4646      	mov	r6, r8
  4047f2:	e5e9      	b.n	4043c8 <_dtoa_r+0x9b8>
  4047f4:	4631      	mov	r1, r6
  4047f6:	2300      	movs	r3, #0
  4047f8:	220a      	movs	r2, #10
  4047fa:	4620      	mov	r0, r4
  4047fc:	f000 fc46 	bl	40508c <__multadd>
  404800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404802:	2b00      	cmp	r3, #0
  404804:	4606      	mov	r6, r0
  404806:	dd0a      	ble.n	40481e <_dtoa_r+0xe0e>
  404808:	930a      	str	r3, [sp, #40]	; 0x28
  40480a:	f7ff bbaa 	b.w	403f62 <_dtoa_r+0x552>
  40480e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404810:	2b02      	cmp	r3, #2
  404812:	dc23      	bgt.n	40485c <_dtoa_r+0xe4c>
  404814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404816:	e43b      	b.n	404090 <_dtoa_r+0x680>
  404818:	f04f 0a02 	mov.w	sl, #2
  40481c:	e4ed      	b.n	4041fa <_dtoa_r+0x7ea>
  40481e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404820:	2b02      	cmp	r3, #2
  404822:	dc1b      	bgt.n	40485c <_dtoa_r+0xe4c>
  404824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404826:	e7ef      	b.n	404808 <_dtoa_r+0xdf8>
  404828:	2500      	movs	r5, #0
  40482a:	6465      	str	r5, [r4, #68]	; 0x44
  40482c:	4629      	mov	r1, r5
  40482e:	4620      	mov	r0, r4
  404830:	f000 fbfc 	bl	40502c <_Balloc>
  404834:	f04f 33ff 	mov.w	r3, #4294967295
  404838:	930a      	str	r3, [sp, #40]	; 0x28
  40483a:	930f      	str	r3, [sp, #60]	; 0x3c
  40483c:	2301      	movs	r3, #1
  40483e:	9004      	str	r0, [sp, #16]
  404840:	9525      	str	r5, [sp, #148]	; 0x94
  404842:	6420      	str	r0, [r4, #64]	; 0x40
  404844:	930b      	str	r3, [sp, #44]	; 0x2c
  404846:	f7ff b9dd 	b.w	403c04 <_dtoa_r+0x1f4>
  40484a:	2501      	movs	r5, #1
  40484c:	f7ff b9a5 	b.w	403b9a <_dtoa_r+0x18a>
  404850:	f43f ab69 	beq.w	403f26 <_dtoa_r+0x516>
  404854:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404858:	f7ff bbf9 	b.w	40404e <_dtoa_r+0x63e>
  40485c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40485e:	930a      	str	r3, [sp, #40]	; 0x28
  404860:	e5e5      	b.n	40442e <_dtoa_r+0xa1e>
  404862:	bf00      	nop

00404864 <__libc_fini_array>:
  404864:	b538      	push	{r3, r4, r5, lr}
  404866:	4c0a      	ldr	r4, [pc, #40]	; (404890 <__libc_fini_array+0x2c>)
  404868:	4d0a      	ldr	r5, [pc, #40]	; (404894 <__libc_fini_array+0x30>)
  40486a:	1b64      	subs	r4, r4, r5
  40486c:	10a4      	asrs	r4, r4, #2
  40486e:	d00a      	beq.n	404886 <__libc_fini_array+0x22>
  404870:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404874:	3b01      	subs	r3, #1
  404876:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40487a:	3c01      	subs	r4, #1
  40487c:	f855 3904 	ldr.w	r3, [r5], #-4
  404880:	4798      	blx	r3
  404882:	2c00      	cmp	r4, #0
  404884:	d1f9      	bne.n	40487a <__libc_fini_array+0x16>
  404886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40488a:	f002 bb83 	b.w	406f94 <_fini>
  40488e:	bf00      	nop
  404890:	00406fa4 	.word	0x00406fa4
  404894:	00406fa0 	.word	0x00406fa0

00404898 <__locale_ctype_ptr_l>:
  404898:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  40489c:	4770      	bx	lr
  40489e:	bf00      	nop

004048a0 <_localeconv_r>:
  4048a0:	4a04      	ldr	r2, [pc, #16]	; (4048b4 <_localeconv_r+0x14>)
  4048a2:	4b05      	ldr	r3, [pc, #20]	; (4048b8 <_localeconv_r+0x18>)
  4048a4:	6812      	ldr	r2, [r2, #0]
  4048a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4048a8:	2800      	cmp	r0, #0
  4048aa:	bf08      	it	eq
  4048ac:	4618      	moveq	r0, r3
  4048ae:	30f0      	adds	r0, #240	; 0xf0
  4048b0:	4770      	bx	lr
  4048b2:	bf00      	nop
  4048b4:	20400008 	.word	0x20400008
  4048b8:	20400438 	.word	0x20400438

004048bc <_malloc_r>:
  4048bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048c0:	f101 060b 	add.w	r6, r1, #11
  4048c4:	2e16      	cmp	r6, #22
  4048c6:	b083      	sub	sp, #12
  4048c8:	4605      	mov	r5, r0
  4048ca:	f240 809e 	bls.w	404a0a <_malloc_r+0x14e>
  4048ce:	f036 0607 	bics.w	r6, r6, #7
  4048d2:	f100 80bd 	bmi.w	404a50 <_malloc_r+0x194>
  4048d6:	42b1      	cmp	r1, r6
  4048d8:	f200 80ba 	bhi.w	404a50 <_malloc_r+0x194>
  4048dc:	f000 fba2 	bl	405024 <__malloc_lock>
  4048e0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4048e4:	f0c0 8293 	bcc.w	404e0e <_malloc_r+0x552>
  4048e8:	0a73      	lsrs	r3, r6, #9
  4048ea:	f000 80b8 	beq.w	404a5e <_malloc_r+0x1a2>
  4048ee:	2b04      	cmp	r3, #4
  4048f0:	f200 8179 	bhi.w	404be6 <_malloc_r+0x32a>
  4048f4:	09b3      	lsrs	r3, r6, #6
  4048f6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4048fa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4048fe:	00c3      	lsls	r3, r0, #3
  404900:	4fbf      	ldr	r7, [pc, #764]	; (404c00 <_malloc_r+0x344>)
  404902:	443b      	add	r3, r7
  404904:	f1a3 0108 	sub.w	r1, r3, #8
  404908:	685c      	ldr	r4, [r3, #4]
  40490a:	42a1      	cmp	r1, r4
  40490c:	d106      	bne.n	40491c <_malloc_r+0x60>
  40490e:	e00c      	b.n	40492a <_malloc_r+0x6e>
  404910:	2a00      	cmp	r2, #0
  404912:	f280 80aa 	bge.w	404a6a <_malloc_r+0x1ae>
  404916:	68e4      	ldr	r4, [r4, #12]
  404918:	42a1      	cmp	r1, r4
  40491a:	d006      	beq.n	40492a <_malloc_r+0x6e>
  40491c:	6863      	ldr	r3, [r4, #4]
  40491e:	f023 0303 	bic.w	r3, r3, #3
  404922:	1b9a      	subs	r2, r3, r6
  404924:	2a0f      	cmp	r2, #15
  404926:	ddf3      	ble.n	404910 <_malloc_r+0x54>
  404928:	4670      	mov	r0, lr
  40492a:	693c      	ldr	r4, [r7, #16]
  40492c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404c14 <_malloc_r+0x358>
  404930:	4574      	cmp	r4, lr
  404932:	f000 81ab 	beq.w	404c8c <_malloc_r+0x3d0>
  404936:	6863      	ldr	r3, [r4, #4]
  404938:	f023 0303 	bic.w	r3, r3, #3
  40493c:	1b9a      	subs	r2, r3, r6
  40493e:	2a0f      	cmp	r2, #15
  404940:	f300 8190 	bgt.w	404c64 <_malloc_r+0x3a8>
  404944:	2a00      	cmp	r2, #0
  404946:	f8c7 e014 	str.w	lr, [r7, #20]
  40494a:	f8c7 e010 	str.w	lr, [r7, #16]
  40494e:	f280 809d 	bge.w	404a8c <_malloc_r+0x1d0>
  404952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404956:	f080 8161 	bcs.w	404c1c <_malloc_r+0x360>
  40495a:	08db      	lsrs	r3, r3, #3
  40495c:	f103 0c01 	add.w	ip, r3, #1
  404960:	1099      	asrs	r1, r3, #2
  404962:	687a      	ldr	r2, [r7, #4]
  404964:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404968:	f8c4 8008 	str.w	r8, [r4, #8]
  40496c:	2301      	movs	r3, #1
  40496e:	408b      	lsls	r3, r1
  404970:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404974:	4313      	orrs	r3, r2
  404976:	3908      	subs	r1, #8
  404978:	60e1      	str	r1, [r4, #12]
  40497a:	607b      	str	r3, [r7, #4]
  40497c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404980:	f8c8 400c 	str.w	r4, [r8, #12]
  404984:	1082      	asrs	r2, r0, #2
  404986:	2401      	movs	r4, #1
  404988:	4094      	lsls	r4, r2
  40498a:	429c      	cmp	r4, r3
  40498c:	f200 808b 	bhi.w	404aa6 <_malloc_r+0x1ea>
  404990:	421c      	tst	r4, r3
  404992:	d106      	bne.n	4049a2 <_malloc_r+0xe6>
  404994:	f020 0003 	bic.w	r0, r0, #3
  404998:	0064      	lsls	r4, r4, #1
  40499a:	421c      	tst	r4, r3
  40499c:	f100 0004 	add.w	r0, r0, #4
  4049a0:	d0fa      	beq.n	404998 <_malloc_r+0xdc>
  4049a2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4049a6:	46cc      	mov	ip, r9
  4049a8:	4680      	mov	r8, r0
  4049aa:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4049ae:	459c      	cmp	ip, r3
  4049b0:	d107      	bne.n	4049c2 <_malloc_r+0x106>
  4049b2:	e16d      	b.n	404c90 <_malloc_r+0x3d4>
  4049b4:	2a00      	cmp	r2, #0
  4049b6:	f280 817b 	bge.w	404cb0 <_malloc_r+0x3f4>
  4049ba:	68db      	ldr	r3, [r3, #12]
  4049bc:	459c      	cmp	ip, r3
  4049be:	f000 8167 	beq.w	404c90 <_malloc_r+0x3d4>
  4049c2:	6859      	ldr	r1, [r3, #4]
  4049c4:	f021 0103 	bic.w	r1, r1, #3
  4049c8:	1b8a      	subs	r2, r1, r6
  4049ca:	2a0f      	cmp	r2, #15
  4049cc:	ddf2      	ble.n	4049b4 <_malloc_r+0xf8>
  4049ce:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4049d2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4049d6:	9300      	str	r3, [sp, #0]
  4049d8:	199c      	adds	r4, r3, r6
  4049da:	4628      	mov	r0, r5
  4049dc:	f046 0601 	orr.w	r6, r6, #1
  4049e0:	f042 0501 	orr.w	r5, r2, #1
  4049e4:	605e      	str	r6, [r3, #4]
  4049e6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4049ea:	f8cc 8008 	str.w	r8, [ip, #8]
  4049ee:	617c      	str	r4, [r7, #20]
  4049f0:	613c      	str	r4, [r7, #16]
  4049f2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4049f6:	f8c4 e008 	str.w	lr, [r4, #8]
  4049fa:	6065      	str	r5, [r4, #4]
  4049fc:	505a      	str	r2, [r3, r1]
  4049fe:	f000 fb13 	bl	405028 <__malloc_unlock>
  404a02:	9b00      	ldr	r3, [sp, #0]
  404a04:	f103 0408 	add.w	r4, r3, #8
  404a08:	e01e      	b.n	404a48 <_malloc_r+0x18c>
  404a0a:	2910      	cmp	r1, #16
  404a0c:	d820      	bhi.n	404a50 <_malloc_r+0x194>
  404a0e:	f000 fb09 	bl	405024 <__malloc_lock>
  404a12:	2610      	movs	r6, #16
  404a14:	2318      	movs	r3, #24
  404a16:	2002      	movs	r0, #2
  404a18:	4f79      	ldr	r7, [pc, #484]	; (404c00 <_malloc_r+0x344>)
  404a1a:	443b      	add	r3, r7
  404a1c:	f1a3 0208 	sub.w	r2, r3, #8
  404a20:	685c      	ldr	r4, [r3, #4]
  404a22:	4294      	cmp	r4, r2
  404a24:	f000 813d 	beq.w	404ca2 <_malloc_r+0x3e6>
  404a28:	6863      	ldr	r3, [r4, #4]
  404a2a:	68e1      	ldr	r1, [r4, #12]
  404a2c:	68a6      	ldr	r6, [r4, #8]
  404a2e:	f023 0303 	bic.w	r3, r3, #3
  404a32:	4423      	add	r3, r4
  404a34:	4628      	mov	r0, r5
  404a36:	685a      	ldr	r2, [r3, #4]
  404a38:	60f1      	str	r1, [r6, #12]
  404a3a:	f042 0201 	orr.w	r2, r2, #1
  404a3e:	608e      	str	r6, [r1, #8]
  404a40:	605a      	str	r2, [r3, #4]
  404a42:	f000 faf1 	bl	405028 <__malloc_unlock>
  404a46:	3408      	adds	r4, #8
  404a48:	4620      	mov	r0, r4
  404a4a:	b003      	add	sp, #12
  404a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a50:	2400      	movs	r4, #0
  404a52:	230c      	movs	r3, #12
  404a54:	4620      	mov	r0, r4
  404a56:	602b      	str	r3, [r5, #0]
  404a58:	b003      	add	sp, #12
  404a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a5e:	2040      	movs	r0, #64	; 0x40
  404a60:	f44f 7300 	mov.w	r3, #512	; 0x200
  404a64:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404a68:	e74a      	b.n	404900 <_malloc_r+0x44>
  404a6a:	4423      	add	r3, r4
  404a6c:	68e1      	ldr	r1, [r4, #12]
  404a6e:	685a      	ldr	r2, [r3, #4]
  404a70:	68a6      	ldr	r6, [r4, #8]
  404a72:	f042 0201 	orr.w	r2, r2, #1
  404a76:	60f1      	str	r1, [r6, #12]
  404a78:	4628      	mov	r0, r5
  404a7a:	608e      	str	r6, [r1, #8]
  404a7c:	605a      	str	r2, [r3, #4]
  404a7e:	f000 fad3 	bl	405028 <__malloc_unlock>
  404a82:	3408      	adds	r4, #8
  404a84:	4620      	mov	r0, r4
  404a86:	b003      	add	sp, #12
  404a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a8c:	4423      	add	r3, r4
  404a8e:	4628      	mov	r0, r5
  404a90:	685a      	ldr	r2, [r3, #4]
  404a92:	f042 0201 	orr.w	r2, r2, #1
  404a96:	605a      	str	r2, [r3, #4]
  404a98:	f000 fac6 	bl	405028 <__malloc_unlock>
  404a9c:	3408      	adds	r4, #8
  404a9e:	4620      	mov	r0, r4
  404aa0:	b003      	add	sp, #12
  404aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404aa6:	68bc      	ldr	r4, [r7, #8]
  404aa8:	6863      	ldr	r3, [r4, #4]
  404aaa:	f023 0803 	bic.w	r8, r3, #3
  404aae:	45b0      	cmp	r8, r6
  404ab0:	d304      	bcc.n	404abc <_malloc_r+0x200>
  404ab2:	eba8 0306 	sub.w	r3, r8, r6
  404ab6:	2b0f      	cmp	r3, #15
  404ab8:	f300 8085 	bgt.w	404bc6 <_malloc_r+0x30a>
  404abc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404c18 <_malloc_r+0x35c>
  404ac0:	4b50      	ldr	r3, [pc, #320]	; (404c04 <_malloc_r+0x348>)
  404ac2:	f8d9 2000 	ldr.w	r2, [r9]
  404ac6:	681b      	ldr	r3, [r3, #0]
  404ac8:	3201      	adds	r2, #1
  404aca:	4433      	add	r3, r6
  404acc:	eb04 0a08 	add.w	sl, r4, r8
  404ad0:	f000 8155 	beq.w	404d7e <_malloc_r+0x4c2>
  404ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404ad8:	330f      	adds	r3, #15
  404ada:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404ade:	f02b 0b0f 	bic.w	fp, fp, #15
  404ae2:	4659      	mov	r1, fp
  404ae4:	4628      	mov	r0, r5
  404ae6:	f000 fd9b 	bl	405620 <_sbrk_r>
  404aea:	1c41      	adds	r1, r0, #1
  404aec:	4602      	mov	r2, r0
  404aee:	f000 80fc 	beq.w	404cea <_malloc_r+0x42e>
  404af2:	4582      	cmp	sl, r0
  404af4:	f200 80f7 	bhi.w	404ce6 <_malloc_r+0x42a>
  404af8:	4b43      	ldr	r3, [pc, #268]	; (404c08 <_malloc_r+0x34c>)
  404afa:	6819      	ldr	r1, [r3, #0]
  404afc:	4459      	add	r1, fp
  404afe:	6019      	str	r1, [r3, #0]
  404b00:	f000 814d 	beq.w	404d9e <_malloc_r+0x4e2>
  404b04:	f8d9 0000 	ldr.w	r0, [r9]
  404b08:	3001      	adds	r0, #1
  404b0a:	bf1b      	ittet	ne
  404b0c:	eba2 0a0a 	subne.w	sl, r2, sl
  404b10:	4451      	addne	r1, sl
  404b12:	f8c9 2000 	streq.w	r2, [r9]
  404b16:	6019      	strne	r1, [r3, #0]
  404b18:	f012 0107 	ands.w	r1, r2, #7
  404b1c:	f000 8115 	beq.w	404d4a <_malloc_r+0x48e>
  404b20:	f1c1 0008 	rsb	r0, r1, #8
  404b24:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404b28:	4402      	add	r2, r0
  404b2a:	3108      	adds	r1, #8
  404b2c:	eb02 090b 	add.w	r9, r2, fp
  404b30:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404b34:	eba1 0909 	sub.w	r9, r1, r9
  404b38:	4649      	mov	r1, r9
  404b3a:	4628      	mov	r0, r5
  404b3c:	9301      	str	r3, [sp, #4]
  404b3e:	9200      	str	r2, [sp, #0]
  404b40:	f000 fd6e 	bl	405620 <_sbrk_r>
  404b44:	1c43      	adds	r3, r0, #1
  404b46:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404b4a:	f000 8143 	beq.w	404dd4 <_malloc_r+0x518>
  404b4e:	1a80      	subs	r0, r0, r2
  404b50:	4448      	add	r0, r9
  404b52:	f040 0001 	orr.w	r0, r0, #1
  404b56:	6819      	ldr	r1, [r3, #0]
  404b58:	60ba      	str	r2, [r7, #8]
  404b5a:	4449      	add	r1, r9
  404b5c:	42bc      	cmp	r4, r7
  404b5e:	6050      	str	r0, [r2, #4]
  404b60:	6019      	str	r1, [r3, #0]
  404b62:	d017      	beq.n	404b94 <_malloc_r+0x2d8>
  404b64:	f1b8 0f0f 	cmp.w	r8, #15
  404b68:	f240 80fb 	bls.w	404d62 <_malloc_r+0x4a6>
  404b6c:	6860      	ldr	r0, [r4, #4]
  404b6e:	f1a8 020c 	sub.w	r2, r8, #12
  404b72:	f022 0207 	bic.w	r2, r2, #7
  404b76:	eb04 0e02 	add.w	lr, r4, r2
  404b7a:	f000 0001 	and.w	r0, r0, #1
  404b7e:	f04f 0c05 	mov.w	ip, #5
  404b82:	4310      	orrs	r0, r2
  404b84:	2a0f      	cmp	r2, #15
  404b86:	6060      	str	r0, [r4, #4]
  404b88:	f8ce c004 	str.w	ip, [lr, #4]
  404b8c:	f8ce c008 	str.w	ip, [lr, #8]
  404b90:	f200 8117 	bhi.w	404dc2 <_malloc_r+0x506>
  404b94:	4b1d      	ldr	r3, [pc, #116]	; (404c0c <_malloc_r+0x350>)
  404b96:	68bc      	ldr	r4, [r7, #8]
  404b98:	681a      	ldr	r2, [r3, #0]
  404b9a:	4291      	cmp	r1, r2
  404b9c:	bf88      	it	hi
  404b9e:	6019      	strhi	r1, [r3, #0]
  404ba0:	4b1b      	ldr	r3, [pc, #108]	; (404c10 <_malloc_r+0x354>)
  404ba2:	681a      	ldr	r2, [r3, #0]
  404ba4:	4291      	cmp	r1, r2
  404ba6:	6862      	ldr	r2, [r4, #4]
  404ba8:	bf88      	it	hi
  404baa:	6019      	strhi	r1, [r3, #0]
  404bac:	f022 0203 	bic.w	r2, r2, #3
  404bb0:	4296      	cmp	r6, r2
  404bb2:	eba2 0306 	sub.w	r3, r2, r6
  404bb6:	d801      	bhi.n	404bbc <_malloc_r+0x300>
  404bb8:	2b0f      	cmp	r3, #15
  404bba:	dc04      	bgt.n	404bc6 <_malloc_r+0x30a>
  404bbc:	4628      	mov	r0, r5
  404bbe:	f000 fa33 	bl	405028 <__malloc_unlock>
  404bc2:	2400      	movs	r4, #0
  404bc4:	e740      	b.n	404a48 <_malloc_r+0x18c>
  404bc6:	19a2      	adds	r2, r4, r6
  404bc8:	f043 0301 	orr.w	r3, r3, #1
  404bcc:	f046 0601 	orr.w	r6, r6, #1
  404bd0:	6066      	str	r6, [r4, #4]
  404bd2:	4628      	mov	r0, r5
  404bd4:	60ba      	str	r2, [r7, #8]
  404bd6:	6053      	str	r3, [r2, #4]
  404bd8:	f000 fa26 	bl	405028 <__malloc_unlock>
  404bdc:	3408      	adds	r4, #8
  404bde:	4620      	mov	r0, r4
  404be0:	b003      	add	sp, #12
  404be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404be6:	2b14      	cmp	r3, #20
  404be8:	d971      	bls.n	404cce <_malloc_r+0x412>
  404bea:	2b54      	cmp	r3, #84	; 0x54
  404bec:	f200 80a3 	bhi.w	404d36 <_malloc_r+0x47a>
  404bf0:	0b33      	lsrs	r3, r6, #12
  404bf2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404bf6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404bfa:	00c3      	lsls	r3, r0, #3
  404bfc:	e680      	b.n	404900 <_malloc_r+0x44>
  404bfe:	bf00      	nop
  404c00:	204005a4 	.word	0x204005a4
  404c04:	20400a84 	.word	0x20400a84
  404c08:	20400a54 	.word	0x20400a54
  404c0c:	20400a7c 	.word	0x20400a7c
  404c10:	20400a80 	.word	0x20400a80
  404c14:	204005ac 	.word	0x204005ac
  404c18:	204009ac 	.word	0x204009ac
  404c1c:	0a5a      	lsrs	r2, r3, #9
  404c1e:	2a04      	cmp	r2, #4
  404c20:	d95b      	bls.n	404cda <_malloc_r+0x41e>
  404c22:	2a14      	cmp	r2, #20
  404c24:	f200 80ae 	bhi.w	404d84 <_malloc_r+0x4c8>
  404c28:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404c2c:	00c9      	lsls	r1, r1, #3
  404c2e:	325b      	adds	r2, #91	; 0x5b
  404c30:	eb07 0c01 	add.w	ip, r7, r1
  404c34:	5879      	ldr	r1, [r7, r1]
  404c36:	f1ac 0c08 	sub.w	ip, ip, #8
  404c3a:	458c      	cmp	ip, r1
  404c3c:	f000 8088 	beq.w	404d50 <_malloc_r+0x494>
  404c40:	684a      	ldr	r2, [r1, #4]
  404c42:	f022 0203 	bic.w	r2, r2, #3
  404c46:	4293      	cmp	r3, r2
  404c48:	d273      	bcs.n	404d32 <_malloc_r+0x476>
  404c4a:	6889      	ldr	r1, [r1, #8]
  404c4c:	458c      	cmp	ip, r1
  404c4e:	d1f7      	bne.n	404c40 <_malloc_r+0x384>
  404c50:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404c54:	687b      	ldr	r3, [r7, #4]
  404c56:	60e2      	str	r2, [r4, #12]
  404c58:	f8c4 c008 	str.w	ip, [r4, #8]
  404c5c:	6094      	str	r4, [r2, #8]
  404c5e:	f8cc 400c 	str.w	r4, [ip, #12]
  404c62:	e68f      	b.n	404984 <_malloc_r+0xc8>
  404c64:	19a1      	adds	r1, r4, r6
  404c66:	f046 0c01 	orr.w	ip, r6, #1
  404c6a:	f042 0601 	orr.w	r6, r2, #1
  404c6e:	f8c4 c004 	str.w	ip, [r4, #4]
  404c72:	4628      	mov	r0, r5
  404c74:	6179      	str	r1, [r7, #20]
  404c76:	6139      	str	r1, [r7, #16]
  404c78:	f8c1 e00c 	str.w	lr, [r1, #12]
  404c7c:	f8c1 e008 	str.w	lr, [r1, #8]
  404c80:	604e      	str	r6, [r1, #4]
  404c82:	50e2      	str	r2, [r4, r3]
  404c84:	f000 f9d0 	bl	405028 <__malloc_unlock>
  404c88:	3408      	adds	r4, #8
  404c8a:	e6dd      	b.n	404a48 <_malloc_r+0x18c>
  404c8c:	687b      	ldr	r3, [r7, #4]
  404c8e:	e679      	b.n	404984 <_malloc_r+0xc8>
  404c90:	f108 0801 	add.w	r8, r8, #1
  404c94:	f018 0f03 	tst.w	r8, #3
  404c98:	f10c 0c08 	add.w	ip, ip, #8
  404c9c:	f47f ae85 	bne.w	4049aa <_malloc_r+0xee>
  404ca0:	e02d      	b.n	404cfe <_malloc_r+0x442>
  404ca2:	68dc      	ldr	r4, [r3, #12]
  404ca4:	42a3      	cmp	r3, r4
  404ca6:	bf08      	it	eq
  404ca8:	3002      	addeq	r0, #2
  404caa:	f43f ae3e 	beq.w	40492a <_malloc_r+0x6e>
  404cae:	e6bb      	b.n	404a28 <_malloc_r+0x16c>
  404cb0:	4419      	add	r1, r3
  404cb2:	461c      	mov	r4, r3
  404cb4:	684a      	ldr	r2, [r1, #4]
  404cb6:	68db      	ldr	r3, [r3, #12]
  404cb8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404cbc:	f042 0201 	orr.w	r2, r2, #1
  404cc0:	604a      	str	r2, [r1, #4]
  404cc2:	4628      	mov	r0, r5
  404cc4:	60f3      	str	r3, [r6, #12]
  404cc6:	609e      	str	r6, [r3, #8]
  404cc8:	f000 f9ae 	bl	405028 <__malloc_unlock>
  404ccc:	e6bc      	b.n	404a48 <_malloc_r+0x18c>
  404cce:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404cd2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404cd6:	00c3      	lsls	r3, r0, #3
  404cd8:	e612      	b.n	404900 <_malloc_r+0x44>
  404cda:	099a      	lsrs	r2, r3, #6
  404cdc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404ce0:	00c9      	lsls	r1, r1, #3
  404ce2:	3238      	adds	r2, #56	; 0x38
  404ce4:	e7a4      	b.n	404c30 <_malloc_r+0x374>
  404ce6:	42bc      	cmp	r4, r7
  404ce8:	d054      	beq.n	404d94 <_malloc_r+0x4d8>
  404cea:	68bc      	ldr	r4, [r7, #8]
  404cec:	6862      	ldr	r2, [r4, #4]
  404cee:	f022 0203 	bic.w	r2, r2, #3
  404cf2:	e75d      	b.n	404bb0 <_malloc_r+0x2f4>
  404cf4:	f859 3908 	ldr.w	r3, [r9], #-8
  404cf8:	4599      	cmp	r9, r3
  404cfa:	f040 8086 	bne.w	404e0a <_malloc_r+0x54e>
  404cfe:	f010 0f03 	tst.w	r0, #3
  404d02:	f100 30ff 	add.w	r0, r0, #4294967295
  404d06:	d1f5      	bne.n	404cf4 <_malloc_r+0x438>
  404d08:	687b      	ldr	r3, [r7, #4]
  404d0a:	ea23 0304 	bic.w	r3, r3, r4
  404d0e:	607b      	str	r3, [r7, #4]
  404d10:	0064      	lsls	r4, r4, #1
  404d12:	429c      	cmp	r4, r3
  404d14:	f63f aec7 	bhi.w	404aa6 <_malloc_r+0x1ea>
  404d18:	2c00      	cmp	r4, #0
  404d1a:	f43f aec4 	beq.w	404aa6 <_malloc_r+0x1ea>
  404d1e:	421c      	tst	r4, r3
  404d20:	4640      	mov	r0, r8
  404d22:	f47f ae3e 	bne.w	4049a2 <_malloc_r+0xe6>
  404d26:	0064      	lsls	r4, r4, #1
  404d28:	421c      	tst	r4, r3
  404d2a:	f100 0004 	add.w	r0, r0, #4
  404d2e:	d0fa      	beq.n	404d26 <_malloc_r+0x46a>
  404d30:	e637      	b.n	4049a2 <_malloc_r+0xe6>
  404d32:	468c      	mov	ip, r1
  404d34:	e78c      	b.n	404c50 <_malloc_r+0x394>
  404d36:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404d3a:	d815      	bhi.n	404d68 <_malloc_r+0x4ac>
  404d3c:	0bf3      	lsrs	r3, r6, #15
  404d3e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404d42:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404d46:	00c3      	lsls	r3, r0, #3
  404d48:	e5da      	b.n	404900 <_malloc_r+0x44>
  404d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404d4e:	e6ed      	b.n	404b2c <_malloc_r+0x270>
  404d50:	687b      	ldr	r3, [r7, #4]
  404d52:	1092      	asrs	r2, r2, #2
  404d54:	2101      	movs	r1, #1
  404d56:	fa01 f202 	lsl.w	r2, r1, r2
  404d5a:	4313      	orrs	r3, r2
  404d5c:	607b      	str	r3, [r7, #4]
  404d5e:	4662      	mov	r2, ip
  404d60:	e779      	b.n	404c56 <_malloc_r+0x39a>
  404d62:	2301      	movs	r3, #1
  404d64:	6053      	str	r3, [r2, #4]
  404d66:	e729      	b.n	404bbc <_malloc_r+0x300>
  404d68:	f240 5254 	movw	r2, #1364	; 0x554
  404d6c:	4293      	cmp	r3, r2
  404d6e:	d822      	bhi.n	404db6 <_malloc_r+0x4fa>
  404d70:	0cb3      	lsrs	r3, r6, #18
  404d72:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404d76:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404d7a:	00c3      	lsls	r3, r0, #3
  404d7c:	e5c0      	b.n	404900 <_malloc_r+0x44>
  404d7e:	f103 0b10 	add.w	fp, r3, #16
  404d82:	e6ae      	b.n	404ae2 <_malloc_r+0x226>
  404d84:	2a54      	cmp	r2, #84	; 0x54
  404d86:	d829      	bhi.n	404ddc <_malloc_r+0x520>
  404d88:	0b1a      	lsrs	r2, r3, #12
  404d8a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404d8e:	00c9      	lsls	r1, r1, #3
  404d90:	326e      	adds	r2, #110	; 0x6e
  404d92:	e74d      	b.n	404c30 <_malloc_r+0x374>
  404d94:	4b20      	ldr	r3, [pc, #128]	; (404e18 <_malloc_r+0x55c>)
  404d96:	6819      	ldr	r1, [r3, #0]
  404d98:	4459      	add	r1, fp
  404d9a:	6019      	str	r1, [r3, #0]
  404d9c:	e6b2      	b.n	404b04 <_malloc_r+0x248>
  404d9e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404da2:	2800      	cmp	r0, #0
  404da4:	f47f aeae 	bne.w	404b04 <_malloc_r+0x248>
  404da8:	eb08 030b 	add.w	r3, r8, fp
  404dac:	68ba      	ldr	r2, [r7, #8]
  404dae:	f043 0301 	orr.w	r3, r3, #1
  404db2:	6053      	str	r3, [r2, #4]
  404db4:	e6ee      	b.n	404b94 <_malloc_r+0x2d8>
  404db6:	207f      	movs	r0, #127	; 0x7f
  404db8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404dbc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404dc0:	e59e      	b.n	404900 <_malloc_r+0x44>
  404dc2:	f104 0108 	add.w	r1, r4, #8
  404dc6:	4628      	mov	r0, r5
  404dc8:	9300      	str	r3, [sp, #0]
  404dca:	f000 fe25 	bl	405a18 <_free_r>
  404dce:	9b00      	ldr	r3, [sp, #0]
  404dd0:	6819      	ldr	r1, [r3, #0]
  404dd2:	e6df      	b.n	404b94 <_malloc_r+0x2d8>
  404dd4:	2001      	movs	r0, #1
  404dd6:	f04f 0900 	mov.w	r9, #0
  404dda:	e6bc      	b.n	404b56 <_malloc_r+0x29a>
  404ddc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404de0:	d805      	bhi.n	404dee <_malloc_r+0x532>
  404de2:	0bda      	lsrs	r2, r3, #15
  404de4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404de8:	00c9      	lsls	r1, r1, #3
  404dea:	3277      	adds	r2, #119	; 0x77
  404dec:	e720      	b.n	404c30 <_malloc_r+0x374>
  404dee:	f240 5154 	movw	r1, #1364	; 0x554
  404df2:	428a      	cmp	r2, r1
  404df4:	d805      	bhi.n	404e02 <_malloc_r+0x546>
  404df6:	0c9a      	lsrs	r2, r3, #18
  404df8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404dfc:	00c9      	lsls	r1, r1, #3
  404dfe:	327c      	adds	r2, #124	; 0x7c
  404e00:	e716      	b.n	404c30 <_malloc_r+0x374>
  404e02:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404e06:	227e      	movs	r2, #126	; 0x7e
  404e08:	e712      	b.n	404c30 <_malloc_r+0x374>
  404e0a:	687b      	ldr	r3, [r7, #4]
  404e0c:	e780      	b.n	404d10 <_malloc_r+0x454>
  404e0e:	08f0      	lsrs	r0, r6, #3
  404e10:	f106 0308 	add.w	r3, r6, #8
  404e14:	e600      	b.n	404a18 <_malloc_r+0x15c>
  404e16:	bf00      	nop
  404e18:	20400a54 	.word	0x20400a54

00404e1c <__ascii_mbtowc>:
  404e1c:	b082      	sub	sp, #8
  404e1e:	b149      	cbz	r1, 404e34 <__ascii_mbtowc+0x18>
  404e20:	b15a      	cbz	r2, 404e3a <__ascii_mbtowc+0x1e>
  404e22:	b16b      	cbz	r3, 404e40 <__ascii_mbtowc+0x24>
  404e24:	7813      	ldrb	r3, [r2, #0]
  404e26:	600b      	str	r3, [r1, #0]
  404e28:	7812      	ldrb	r2, [r2, #0]
  404e2a:	1c10      	adds	r0, r2, #0
  404e2c:	bf18      	it	ne
  404e2e:	2001      	movne	r0, #1
  404e30:	b002      	add	sp, #8
  404e32:	4770      	bx	lr
  404e34:	a901      	add	r1, sp, #4
  404e36:	2a00      	cmp	r2, #0
  404e38:	d1f3      	bne.n	404e22 <__ascii_mbtowc+0x6>
  404e3a:	4610      	mov	r0, r2
  404e3c:	b002      	add	sp, #8
  404e3e:	4770      	bx	lr
  404e40:	f06f 0001 	mvn.w	r0, #1
  404e44:	e7f4      	b.n	404e30 <__ascii_mbtowc+0x14>
  404e46:	bf00      	nop
	...

00404e50 <memchr>:
  404e50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e54:	2a10      	cmp	r2, #16
  404e56:	db2b      	blt.n	404eb0 <memchr+0x60>
  404e58:	f010 0f07 	tst.w	r0, #7
  404e5c:	d008      	beq.n	404e70 <memchr+0x20>
  404e5e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404e62:	3a01      	subs	r2, #1
  404e64:	428b      	cmp	r3, r1
  404e66:	d02d      	beq.n	404ec4 <memchr+0x74>
  404e68:	f010 0f07 	tst.w	r0, #7
  404e6c:	b342      	cbz	r2, 404ec0 <memchr+0x70>
  404e6e:	d1f6      	bne.n	404e5e <memchr+0xe>
  404e70:	b4f0      	push	{r4, r5, r6, r7}
  404e72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404e76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404e7a:	f022 0407 	bic.w	r4, r2, #7
  404e7e:	f07f 0700 	mvns.w	r7, #0
  404e82:	2300      	movs	r3, #0
  404e84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404e88:	3c08      	subs	r4, #8
  404e8a:	ea85 0501 	eor.w	r5, r5, r1
  404e8e:	ea86 0601 	eor.w	r6, r6, r1
  404e92:	fa85 f547 	uadd8	r5, r5, r7
  404e96:	faa3 f587 	sel	r5, r3, r7
  404e9a:	fa86 f647 	uadd8	r6, r6, r7
  404e9e:	faa5 f687 	sel	r6, r5, r7
  404ea2:	b98e      	cbnz	r6, 404ec8 <memchr+0x78>
  404ea4:	d1ee      	bne.n	404e84 <memchr+0x34>
  404ea6:	bcf0      	pop	{r4, r5, r6, r7}
  404ea8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404eac:	f002 0207 	and.w	r2, r2, #7
  404eb0:	b132      	cbz	r2, 404ec0 <memchr+0x70>
  404eb2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404eb6:	3a01      	subs	r2, #1
  404eb8:	ea83 0301 	eor.w	r3, r3, r1
  404ebc:	b113      	cbz	r3, 404ec4 <memchr+0x74>
  404ebe:	d1f8      	bne.n	404eb2 <memchr+0x62>
  404ec0:	2000      	movs	r0, #0
  404ec2:	4770      	bx	lr
  404ec4:	3801      	subs	r0, #1
  404ec6:	4770      	bx	lr
  404ec8:	2d00      	cmp	r5, #0
  404eca:	bf06      	itte	eq
  404ecc:	4635      	moveq	r5, r6
  404ece:	3803      	subeq	r0, #3
  404ed0:	3807      	subne	r0, #7
  404ed2:	f015 0f01 	tst.w	r5, #1
  404ed6:	d107      	bne.n	404ee8 <memchr+0x98>
  404ed8:	3001      	adds	r0, #1
  404eda:	f415 7f80 	tst.w	r5, #256	; 0x100
  404ede:	bf02      	ittt	eq
  404ee0:	3001      	addeq	r0, #1
  404ee2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404ee6:	3001      	addeq	r0, #1
  404ee8:	bcf0      	pop	{r4, r5, r6, r7}
  404eea:	3801      	subs	r0, #1
  404eec:	4770      	bx	lr
  404eee:	bf00      	nop

00404ef0 <memcpy>:
  404ef0:	4684      	mov	ip, r0
  404ef2:	ea41 0300 	orr.w	r3, r1, r0
  404ef6:	f013 0303 	ands.w	r3, r3, #3
  404efa:	d16d      	bne.n	404fd8 <memcpy+0xe8>
  404efc:	3a40      	subs	r2, #64	; 0x40
  404efe:	d341      	bcc.n	404f84 <memcpy+0x94>
  404f00:	f851 3b04 	ldr.w	r3, [r1], #4
  404f04:	f840 3b04 	str.w	r3, [r0], #4
  404f08:	f851 3b04 	ldr.w	r3, [r1], #4
  404f0c:	f840 3b04 	str.w	r3, [r0], #4
  404f10:	f851 3b04 	ldr.w	r3, [r1], #4
  404f14:	f840 3b04 	str.w	r3, [r0], #4
  404f18:	f851 3b04 	ldr.w	r3, [r1], #4
  404f1c:	f840 3b04 	str.w	r3, [r0], #4
  404f20:	f851 3b04 	ldr.w	r3, [r1], #4
  404f24:	f840 3b04 	str.w	r3, [r0], #4
  404f28:	f851 3b04 	ldr.w	r3, [r1], #4
  404f2c:	f840 3b04 	str.w	r3, [r0], #4
  404f30:	f851 3b04 	ldr.w	r3, [r1], #4
  404f34:	f840 3b04 	str.w	r3, [r0], #4
  404f38:	f851 3b04 	ldr.w	r3, [r1], #4
  404f3c:	f840 3b04 	str.w	r3, [r0], #4
  404f40:	f851 3b04 	ldr.w	r3, [r1], #4
  404f44:	f840 3b04 	str.w	r3, [r0], #4
  404f48:	f851 3b04 	ldr.w	r3, [r1], #4
  404f4c:	f840 3b04 	str.w	r3, [r0], #4
  404f50:	f851 3b04 	ldr.w	r3, [r1], #4
  404f54:	f840 3b04 	str.w	r3, [r0], #4
  404f58:	f851 3b04 	ldr.w	r3, [r1], #4
  404f5c:	f840 3b04 	str.w	r3, [r0], #4
  404f60:	f851 3b04 	ldr.w	r3, [r1], #4
  404f64:	f840 3b04 	str.w	r3, [r0], #4
  404f68:	f851 3b04 	ldr.w	r3, [r1], #4
  404f6c:	f840 3b04 	str.w	r3, [r0], #4
  404f70:	f851 3b04 	ldr.w	r3, [r1], #4
  404f74:	f840 3b04 	str.w	r3, [r0], #4
  404f78:	f851 3b04 	ldr.w	r3, [r1], #4
  404f7c:	f840 3b04 	str.w	r3, [r0], #4
  404f80:	3a40      	subs	r2, #64	; 0x40
  404f82:	d2bd      	bcs.n	404f00 <memcpy+0x10>
  404f84:	3230      	adds	r2, #48	; 0x30
  404f86:	d311      	bcc.n	404fac <memcpy+0xbc>
  404f88:	f851 3b04 	ldr.w	r3, [r1], #4
  404f8c:	f840 3b04 	str.w	r3, [r0], #4
  404f90:	f851 3b04 	ldr.w	r3, [r1], #4
  404f94:	f840 3b04 	str.w	r3, [r0], #4
  404f98:	f851 3b04 	ldr.w	r3, [r1], #4
  404f9c:	f840 3b04 	str.w	r3, [r0], #4
  404fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fa4:	f840 3b04 	str.w	r3, [r0], #4
  404fa8:	3a10      	subs	r2, #16
  404faa:	d2ed      	bcs.n	404f88 <memcpy+0x98>
  404fac:	320c      	adds	r2, #12
  404fae:	d305      	bcc.n	404fbc <memcpy+0xcc>
  404fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fb4:	f840 3b04 	str.w	r3, [r0], #4
  404fb8:	3a04      	subs	r2, #4
  404fba:	d2f9      	bcs.n	404fb0 <memcpy+0xc0>
  404fbc:	3204      	adds	r2, #4
  404fbe:	d008      	beq.n	404fd2 <memcpy+0xe2>
  404fc0:	07d2      	lsls	r2, r2, #31
  404fc2:	bf1c      	itt	ne
  404fc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404fc8:	f800 3b01 	strbne.w	r3, [r0], #1
  404fcc:	d301      	bcc.n	404fd2 <memcpy+0xe2>
  404fce:	880b      	ldrh	r3, [r1, #0]
  404fd0:	8003      	strh	r3, [r0, #0]
  404fd2:	4660      	mov	r0, ip
  404fd4:	4770      	bx	lr
  404fd6:	bf00      	nop
  404fd8:	2a08      	cmp	r2, #8
  404fda:	d313      	bcc.n	405004 <memcpy+0x114>
  404fdc:	078b      	lsls	r3, r1, #30
  404fde:	d08d      	beq.n	404efc <memcpy+0xc>
  404fe0:	f010 0303 	ands.w	r3, r0, #3
  404fe4:	d08a      	beq.n	404efc <memcpy+0xc>
  404fe6:	f1c3 0304 	rsb	r3, r3, #4
  404fea:	1ad2      	subs	r2, r2, r3
  404fec:	07db      	lsls	r3, r3, #31
  404fee:	bf1c      	itt	ne
  404ff0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404ff4:	f800 3b01 	strbne.w	r3, [r0], #1
  404ff8:	d380      	bcc.n	404efc <memcpy+0xc>
  404ffa:	f831 3b02 	ldrh.w	r3, [r1], #2
  404ffe:	f820 3b02 	strh.w	r3, [r0], #2
  405002:	e77b      	b.n	404efc <memcpy+0xc>
  405004:	3a04      	subs	r2, #4
  405006:	d3d9      	bcc.n	404fbc <memcpy+0xcc>
  405008:	3a01      	subs	r2, #1
  40500a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40500e:	f800 3b01 	strb.w	r3, [r0], #1
  405012:	d2f9      	bcs.n	405008 <memcpy+0x118>
  405014:	780b      	ldrb	r3, [r1, #0]
  405016:	7003      	strb	r3, [r0, #0]
  405018:	784b      	ldrb	r3, [r1, #1]
  40501a:	7043      	strb	r3, [r0, #1]
  40501c:	788b      	ldrb	r3, [r1, #2]
  40501e:	7083      	strb	r3, [r0, #2]
  405020:	4660      	mov	r0, ip
  405022:	4770      	bx	lr

00405024 <__malloc_lock>:
  405024:	4770      	bx	lr
  405026:	bf00      	nop

00405028 <__malloc_unlock>:
  405028:	4770      	bx	lr
  40502a:	bf00      	nop

0040502c <_Balloc>:
  40502c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40502e:	b570      	push	{r4, r5, r6, lr}
  405030:	4605      	mov	r5, r0
  405032:	460c      	mov	r4, r1
  405034:	b14b      	cbz	r3, 40504a <_Balloc+0x1e>
  405036:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40503a:	b180      	cbz	r0, 40505e <_Balloc+0x32>
  40503c:	6802      	ldr	r2, [r0, #0]
  40503e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  405042:	2300      	movs	r3, #0
  405044:	6103      	str	r3, [r0, #16]
  405046:	60c3      	str	r3, [r0, #12]
  405048:	bd70      	pop	{r4, r5, r6, pc}
  40504a:	2221      	movs	r2, #33	; 0x21
  40504c:	2104      	movs	r1, #4
  40504e:	f000 fc63 	bl	405918 <_calloc_r>
  405052:	64e8      	str	r0, [r5, #76]	; 0x4c
  405054:	4603      	mov	r3, r0
  405056:	2800      	cmp	r0, #0
  405058:	d1ed      	bne.n	405036 <_Balloc+0xa>
  40505a:	2000      	movs	r0, #0
  40505c:	bd70      	pop	{r4, r5, r6, pc}
  40505e:	2101      	movs	r1, #1
  405060:	fa01 f604 	lsl.w	r6, r1, r4
  405064:	1d72      	adds	r2, r6, #5
  405066:	4628      	mov	r0, r5
  405068:	0092      	lsls	r2, r2, #2
  40506a:	f000 fc55 	bl	405918 <_calloc_r>
  40506e:	2800      	cmp	r0, #0
  405070:	d0f3      	beq.n	40505a <_Balloc+0x2e>
  405072:	6044      	str	r4, [r0, #4]
  405074:	6086      	str	r6, [r0, #8]
  405076:	e7e4      	b.n	405042 <_Balloc+0x16>

00405078 <_Bfree>:
  405078:	b131      	cbz	r1, 405088 <_Bfree+0x10>
  40507a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40507c:	684a      	ldr	r2, [r1, #4]
  40507e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405082:	6008      	str	r0, [r1, #0]
  405084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405088:	4770      	bx	lr
  40508a:	bf00      	nop

0040508c <__multadd>:
  40508c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40508e:	690c      	ldr	r4, [r1, #16]
  405090:	b083      	sub	sp, #12
  405092:	460d      	mov	r5, r1
  405094:	4606      	mov	r6, r0
  405096:	f101 0e14 	add.w	lr, r1, #20
  40509a:	2700      	movs	r7, #0
  40509c:	f8de 0000 	ldr.w	r0, [lr]
  4050a0:	b281      	uxth	r1, r0
  4050a2:	fb02 3301 	mla	r3, r2, r1, r3
  4050a6:	0c01      	lsrs	r1, r0, #16
  4050a8:	0c18      	lsrs	r0, r3, #16
  4050aa:	fb02 0101 	mla	r1, r2, r1, r0
  4050ae:	b29b      	uxth	r3, r3
  4050b0:	3701      	adds	r7, #1
  4050b2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4050b6:	42bc      	cmp	r4, r7
  4050b8:	f84e 3b04 	str.w	r3, [lr], #4
  4050bc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4050c0:	dcec      	bgt.n	40509c <__multadd+0x10>
  4050c2:	b13b      	cbz	r3, 4050d4 <__multadd+0x48>
  4050c4:	68aa      	ldr	r2, [r5, #8]
  4050c6:	4294      	cmp	r4, r2
  4050c8:	da07      	bge.n	4050da <__multadd+0x4e>
  4050ca:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4050ce:	3401      	adds	r4, #1
  4050d0:	6153      	str	r3, [r2, #20]
  4050d2:	612c      	str	r4, [r5, #16]
  4050d4:	4628      	mov	r0, r5
  4050d6:	b003      	add	sp, #12
  4050d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050da:	6869      	ldr	r1, [r5, #4]
  4050dc:	9301      	str	r3, [sp, #4]
  4050de:	3101      	adds	r1, #1
  4050e0:	4630      	mov	r0, r6
  4050e2:	f7ff ffa3 	bl	40502c <_Balloc>
  4050e6:	692a      	ldr	r2, [r5, #16]
  4050e8:	3202      	adds	r2, #2
  4050ea:	f105 010c 	add.w	r1, r5, #12
  4050ee:	4607      	mov	r7, r0
  4050f0:	0092      	lsls	r2, r2, #2
  4050f2:	300c      	adds	r0, #12
  4050f4:	f7ff fefc 	bl	404ef0 <memcpy>
  4050f8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4050fa:	6869      	ldr	r1, [r5, #4]
  4050fc:	9b01      	ldr	r3, [sp, #4]
  4050fe:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405102:	6028      	str	r0, [r5, #0]
  405104:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405108:	463d      	mov	r5, r7
  40510a:	e7de      	b.n	4050ca <__multadd+0x3e>

0040510c <__hi0bits>:
  40510c:	0c02      	lsrs	r2, r0, #16
  40510e:	0412      	lsls	r2, r2, #16
  405110:	4603      	mov	r3, r0
  405112:	b9b2      	cbnz	r2, 405142 <__hi0bits+0x36>
  405114:	0403      	lsls	r3, r0, #16
  405116:	2010      	movs	r0, #16
  405118:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40511c:	bf04      	itt	eq
  40511e:	021b      	lsleq	r3, r3, #8
  405120:	3008      	addeq	r0, #8
  405122:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405126:	bf04      	itt	eq
  405128:	011b      	lsleq	r3, r3, #4
  40512a:	3004      	addeq	r0, #4
  40512c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405130:	bf04      	itt	eq
  405132:	009b      	lsleq	r3, r3, #2
  405134:	3002      	addeq	r0, #2
  405136:	2b00      	cmp	r3, #0
  405138:	db02      	blt.n	405140 <__hi0bits+0x34>
  40513a:	005b      	lsls	r3, r3, #1
  40513c:	d403      	bmi.n	405146 <__hi0bits+0x3a>
  40513e:	2020      	movs	r0, #32
  405140:	4770      	bx	lr
  405142:	2000      	movs	r0, #0
  405144:	e7e8      	b.n	405118 <__hi0bits+0xc>
  405146:	3001      	adds	r0, #1
  405148:	4770      	bx	lr
  40514a:	bf00      	nop

0040514c <__lo0bits>:
  40514c:	6803      	ldr	r3, [r0, #0]
  40514e:	f013 0207 	ands.w	r2, r3, #7
  405152:	4601      	mov	r1, r0
  405154:	d007      	beq.n	405166 <__lo0bits+0x1a>
  405156:	07da      	lsls	r2, r3, #31
  405158:	d421      	bmi.n	40519e <__lo0bits+0x52>
  40515a:	0798      	lsls	r0, r3, #30
  40515c:	d421      	bmi.n	4051a2 <__lo0bits+0x56>
  40515e:	089b      	lsrs	r3, r3, #2
  405160:	600b      	str	r3, [r1, #0]
  405162:	2002      	movs	r0, #2
  405164:	4770      	bx	lr
  405166:	b298      	uxth	r0, r3
  405168:	b198      	cbz	r0, 405192 <__lo0bits+0x46>
  40516a:	4610      	mov	r0, r2
  40516c:	f013 0fff 	tst.w	r3, #255	; 0xff
  405170:	bf04      	itt	eq
  405172:	0a1b      	lsreq	r3, r3, #8
  405174:	3008      	addeq	r0, #8
  405176:	071a      	lsls	r2, r3, #28
  405178:	bf04      	itt	eq
  40517a:	091b      	lsreq	r3, r3, #4
  40517c:	3004      	addeq	r0, #4
  40517e:	079a      	lsls	r2, r3, #30
  405180:	bf04      	itt	eq
  405182:	089b      	lsreq	r3, r3, #2
  405184:	3002      	addeq	r0, #2
  405186:	07da      	lsls	r2, r3, #31
  405188:	d407      	bmi.n	40519a <__lo0bits+0x4e>
  40518a:	085b      	lsrs	r3, r3, #1
  40518c:	d104      	bne.n	405198 <__lo0bits+0x4c>
  40518e:	2020      	movs	r0, #32
  405190:	4770      	bx	lr
  405192:	0c1b      	lsrs	r3, r3, #16
  405194:	2010      	movs	r0, #16
  405196:	e7e9      	b.n	40516c <__lo0bits+0x20>
  405198:	3001      	adds	r0, #1
  40519a:	600b      	str	r3, [r1, #0]
  40519c:	4770      	bx	lr
  40519e:	2000      	movs	r0, #0
  4051a0:	4770      	bx	lr
  4051a2:	085b      	lsrs	r3, r3, #1
  4051a4:	600b      	str	r3, [r1, #0]
  4051a6:	2001      	movs	r0, #1
  4051a8:	4770      	bx	lr
  4051aa:	bf00      	nop

004051ac <__i2b>:
  4051ac:	b510      	push	{r4, lr}
  4051ae:	460c      	mov	r4, r1
  4051b0:	2101      	movs	r1, #1
  4051b2:	f7ff ff3b 	bl	40502c <_Balloc>
  4051b6:	2201      	movs	r2, #1
  4051b8:	6144      	str	r4, [r0, #20]
  4051ba:	6102      	str	r2, [r0, #16]
  4051bc:	bd10      	pop	{r4, pc}
  4051be:	bf00      	nop

004051c0 <__multiply>:
  4051c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051c4:	690c      	ldr	r4, [r1, #16]
  4051c6:	6915      	ldr	r5, [r2, #16]
  4051c8:	42ac      	cmp	r4, r5
  4051ca:	b083      	sub	sp, #12
  4051cc:	468b      	mov	fp, r1
  4051ce:	4616      	mov	r6, r2
  4051d0:	da04      	bge.n	4051dc <__multiply+0x1c>
  4051d2:	4622      	mov	r2, r4
  4051d4:	46b3      	mov	fp, r6
  4051d6:	462c      	mov	r4, r5
  4051d8:	460e      	mov	r6, r1
  4051da:	4615      	mov	r5, r2
  4051dc:	f8db 3008 	ldr.w	r3, [fp, #8]
  4051e0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4051e4:	eb04 0805 	add.w	r8, r4, r5
  4051e8:	4598      	cmp	r8, r3
  4051ea:	bfc8      	it	gt
  4051ec:	3101      	addgt	r1, #1
  4051ee:	f7ff ff1d 	bl	40502c <_Balloc>
  4051f2:	f100 0914 	add.w	r9, r0, #20
  4051f6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4051fa:	45d1      	cmp	r9, sl
  4051fc:	9000      	str	r0, [sp, #0]
  4051fe:	d205      	bcs.n	40520c <__multiply+0x4c>
  405200:	464b      	mov	r3, r9
  405202:	2100      	movs	r1, #0
  405204:	f843 1b04 	str.w	r1, [r3], #4
  405208:	459a      	cmp	sl, r3
  40520a:	d8fb      	bhi.n	405204 <__multiply+0x44>
  40520c:	f106 0c14 	add.w	ip, r6, #20
  405210:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  405214:	f10b 0b14 	add.w	fp, fp, #20
  405218:	459c      	cmp	ip, r3
  40521a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40521e:	d24c      	bcs.n	4052ba <__multiply+0xfa>
  405220:	f8cd a004 	str.w	sl, [sp, #4]
  405224:	469a      	mov	sl, r3
  405226:	f8dc 5000 	ldr.w	r5, [ip]
  40522a:	b2af      	uxth	r7, r5
  40522c:	b1ef      	cbz	r7, 40526a <__multiply+0xaa>
  40522e:	2100      	movs	r1, #0
  405230:	464d      	mov	r5, r9
  405232:	465e      	mov	r6, fp
  405234:	460c      	mov	r4, r1
  405236:	f856 2b04 	ldr.w	r2, [r6], #4
  40523a:	6828      	ldr	r0, [r5, #0]
  40523c:	b293      	uxth	r3, r2
  40523e:	b281      	uxth	r1, r0
  405240:	fb07 1303 	mla	r3, r7, r3, r1
  405244:	0c12      	lsrs	r2, r2, #16
  405246:	0c01      	lsrs	r1, r0, #16
  405248:	4423      	add	r3, r4
  40524a:	fb07 1102 	mla	r1, r7, r2, r1
  40524e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  405252:	b29b      	uxth	r3, r3
  405254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  405258:	45b6      	cmp	lr, r6
  40525a:	f845 3b04 	str.w	r3, [r5], #4
  40525e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  405262:	d8e8      	bhi.n	405236 <__multiply+0x76>
  405264:	602c      	str	r4, [r5, #0]
  405266:	f8dc 5000 	ldr.w	r5, [ip]
  40526a:	0c2d      	lsrs	r5, r5, #16
  40526c:	d01d      	beq.n	4052aa <__multiply+0xea>
  40526e:	f8d9 3000 	ldr.w	r3, [r9]
  405272:	4648      	mov	r0, r9
  405274:	461c      	mov	r4, r3
  405276:	4659      	mov	r1, fp
  405278:	2200      	movs	r2, #0
  40527a:	880e      	ldrh	r6, [r1, #0]
  40527c:	0c24      	lsrs	r4, r4, #16
  40527e:	fb05 4406 	mla	r4, r5, r6, r4
  405282:	4422      	add	r2, r4
  405284:	b29b      	uxth	r3, r3
  405286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40528a:	f840 3b04 	str.w	r3, [r0], #4
  40528e:	f851 3b04 	ldr.w	r3, [r1], #4
  405292:	6804      	ldr	r4, [r0, #0]
  405294:	0c1b      	lsrs	r3, r3, #16
  405296:	b2a6      	uxth	r6, r4
  405298:	fb05 6303 	mla	r3, r5, r3, r6
  40529c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4052a0:	458e      	cmp	lr, r1
  4052a2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4052a6:	d8e8      	bhi.n	40527a <__multiply+0xba>
  4052a8:	6003      	str	r3, [r0, #0]
  4052aa:	f10c 0c04 	add.w	ip, ip, #4
  4052ae:	45e2      	cmp	sl, ip
  4052b0:	f109 0904 	add.w	r9, r9, #4
  4052b4:	d8b7      	bhi.n	405226 <__multiply+0x66>
  4052b6:	f8dd a004 	ldr.w	sl, [sp, #4]
  4052ba:	f1b8 0f00 	cmp.w	r8, #0
  4052be:	dd0b      	ble.n	4052d8 <__multiply+0x118>
  4052c0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4052c4:	f1aa 0a04 	sub.w	sl, sl, #4
  4052c8:	b11b      	cbz	r3, 4052d2 <__multiply+0x112>
  4052ca:	e005      	b.n	4052d8 <__multiply+0x118>
  4052cc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4052d0:	b913      	cbnz	r3, 4052d8 <__multiply+0x118>
  4052d2:	f1b8 0801 	subs.w	r8, r8, #1
  4052d6:	d1f9      	bne.n	4052cc <__multiply+0x10c>
  4052d8:	9800      	ldr	r0, [sp, #0]
  4052da:	f8c0 8010 	str.w	r8, [r0, #16]
  4052de:	b003      	add	sp, #12
  4052e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004052e4 <__pow5mult>:
  4052e4:	f012 0303 	ands.w	r3, r2, #3
  4052e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4052ec:	4614      	mov	r4, r2
  4052ee:	4607      	mov	r7, r0
  4052f0:	d12e      	bne.n	405350 <__pow5mult+0x6c>
  4052f2:	460d      	mov	r5, r1
  4052f4:	10a4      	asrs	r4, r4, #2
  4052f6:	d01c      	beq.n	405332 <__pow5mult+0x4e>
  4052f8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4052fa:	b396      	cbz	r6, 405362 <__pow5mult+0x7e>
  4052fc:	07e3      	lsls	r3, r4, #31
  4052fe:	f04f 0800 	mov.w	r8, #0
  405302:	d406      	bmi.n	405312 <__pow5mult+0x2e>
  405304:	1064      	asrs	r4, r4, #1
  405306:	d014      	beq.n	405332 <__pow5mult+0x4e>
  405308:	6830      	ldr	r0, [r6, #0]
  40530a:	b1a8      	cbz	r0, 405338 <__pow5mult+0x54>
  40530c:	4606      	mov	r6, r0
  40530e:	07e3      	lsls	r3, r4, #31
  405310:	d5f8      	bpl.n	405304 <__pow5mult+0x20>
  405312:	4632      	mov	r2, r6
  405314:	4629      	mov	r1, r5
  405316:	4638      	mov	r0, r7
  405318:	f7ff ff52 	bl	4051c0 <__multiply>
  40531c:	b1b5      	cbz	r5, 40534c <__pow5mult+0x68>
  40531e:	686a      	ldr	r2, [r5, #4]
  405320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405322:	1064      	asrs	r4, r4, #1
  405324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405328:	6029      	str	r1, [r5, #0]
  40532a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40532e:	4605      	mov	r5, r0
  405330:	d1ea      	bne.n	405308 <__pow5mult+0x24>
  405332:	4628      	mov	r0, r5
  405334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405338:	4632      	mov	r2, r6
  40533a:	4631      	mov	r1, r6
  40533c:	4638      	mov	r0, r7
  40533e:	f7ff ff3f 	bl	4051c0 <__multiply>
  405342:	6030      	str	r0, [r6, #0]
  405344:	f8c0 8000 	str.w	r8, [r0]
  405348:	4606      	mov	r6, r0
  40534a:	e7e0      	b.n	40530e <__pow5mult+0x2a>
  40534c:	4605      	mov	r5, r0
  40534e:	e7d9      	b.n	405304 <__pow5mult+0x20>
  405350:	1e5a      	subs	r2, r3, #1
  405352:	4d0b      	ldr	r5, [pc, #44]	; (405380 <__pow5mult+0x9c>)
  405354:	2300      	movs	r3, #0
  405356:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40535a:	f7ff fe97 	bl	40508c <__multadd>
  40535e:	4605      	mov	r5, r0
  405360:	e7c8      	b.n	4052f4 <__pow5mult+0x10>
  405362:	2101      	movs	r1, #1
  405364:	4638      	mov	r0, r7
  405366:	f7ff fe61 	bl	40502c <_Balloc>
  40536a:	f240 2171 	movw	r1, #625	; 0x271
  40536e:	2201      	movs	r2, #1
  405370:	2300      	movs	r3, #0
  405372:	6141      	str	r1, [r0, #20]
  405374:	6102      	str	r2, [r0, #16]
  405376:	4606      	mov	r6, r0
  405378:	64b8      	str	r0, [r7, #72]	; 0x48
  40537a:	6003      	str	r3, [r0, #0]
  40537c:	e7be      	b.n	4052fc <__pow5mult+0x18>
  40537e:	bf00      	nop
  405380:	00406e70 	.word	0x00406e70

00405384 <__lshift>:
  405384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405388:	4691      	mov	r9, r2
  40538a:	690a      	ldr	r2, [r1, #16]
  40538c:	688b      	ldr	r3, [r1, #8]
  40538e:	ea4f 1469 	mov.w	r4, r9, asr #5
  405392:	eb04 0802 	add.w	r8, r4, r2
  405396:	f108 0501 	add.w	r5, r8, #1
  40539a:	429d      	cmp	r5, r3
  40539c:	460e      	mov	r6, r1
  40539e:	4607      	mov	r7, r0
  4053a0:	6849      	ldr	r1, [r1, #4]
  4053a2:	dd04      	ble.n	4053ae <__lshift+0x2a>
  4053a4:	005b      	lsls	r3, r3, #1
  4053a6:	429d      	cmp	r5, r3
  4053a8:	f101 0101 	add.w	r1, r1, #1
  4053ac:	dcfa      	bgt.n	4053a4 <__lshift+0x20>
  4053ae:	4638      	mov	r0, r7
  4053b0:	f7ff fe3c 	bl	40502c <_Balloc>
  4053b4:	2c00      	cmp	r4, #0
  4053b6:	f100 0314 	add.w	r3, r0, #20
  4053ba:	dd06      	ble.n	4053ca <__lshift+0x46>
  4053bc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4053c0:	2100      	movs	r1, #0
  4053c2:	f843 1b04 	str.w	r1, [r3], #4
  4053c6:	429a      	cmp	r2, r3
  4053c8:	d1fb      	bne.n	4053c2 <__lshift+0x3e>
  4053ca:	6934      	ldr	r4, [r6, #16]
  4053cc:	f106 0114 	add.w	r1, r6, #20
  4053d0:	f019 091f 	ands.w	r9, r9, #31
  4053d4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4053d8:	d01d      	beq.n	405416 <__lshift+0x92>
  4053da:	f1c9 0c20 	rsb	ip, r9, #32
  4053de:	2200      	movs	r2, #0
  4053e0:	680c      	ldr	r4, [r1, #0]
  4053e2:	fa04 f409 	lsl.w	r4, r4, r9
  4053e6:	4314      	orrs	r4, r2
  4053e8:	f843 4b04 	str.w	r4, [r3], #4
  4053ec:	f851 2b04 	ldr.w	r2, [r1], #4
  4053f0:	458e      	cmp	lr, r1
  4053f2:	fa22 f20c 	lsr.w	r2, r2, ip
  4053f6:	d8f3      	bhi.n	4053e0 <__lshift+0x5c>
  4053f8:	601a      	str	r2, [r3, #0]
  4053fa:	b10a      	cbz	r2, 405400 <__lshift+0x7c>
  4053fc:	f108 0502 	add.w	r5, r8, #2
  405400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405402:	6872      	ldr	r2, [r6, #4]
  405404:	3d01      	subs	r5, #1
  405406:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40540a:	6105      	str	r5, [r0, #16]
  40540c:	6031      	str	r1, [r6, #0]
  40540e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405416:	3b04      	subs	r3, #4
  405418:	f851 2b04 	ldr.w	r2, [r1], #4
  40541c:	f843 2f04 	str.w	r2, [r3, #4]!
  405420:	458e      	cmp	lr, r1
  405422:	d8f9      	bhi.n	405418 <__lshift+0x94>
  405424:	e7ec      	b.n	405400 <__lshift+0x7c>
  405426:	bf00      	nop

00405428 <__mcmp>:
  405428:	b430      	push	{r4, r5}
  40542a:	690b      	ldr	r3, [r1, #16]
  40542c:	4605      	mov	r5, r0
  40542e:	6900      	ldr	r0, [r0, #16]
  405430:	1ac0      	subs	r0, r0, r3
  405432:	d10f      	bne.n	405454 <__mcmp+0x2c>
  405434:	009b      	lsls	r3, r3, #2
  405436:	3514      	adds	r5, #20
  405438:	3114      	adds	r1, #20
  40543a:	4419      	add	r1, r3
  40543c:	442b      	add	r3, r5
  40543e:	e001      	b.n	405444 <__mcmp+0x1c>
  405440:	429d      	cmp	r5, r3
  405442:	d207      	bcs.n	405454 <__mcmp+0x2c>
  405444:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405448:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40544c:	4294      	cmp	r4, r2
  40544e:	d0f7      	beq.n	405440 <__mcmp+0x18>
  405450:	d302      	bcc.n	405458 <__mcmp+0x30>
  405452:	2001      	movs	r0, #1
  405454:	bc30      	pop	{r4, r5}
  405456:	4770      	bx	lr
  405458:	f04f 30ff 	mov.w	r0, #4294967295
  40545c:	e7fa      	b.n	405454 <__mcmp+0x2c>
  40545e:	bf00      	nop

00405460 <__mdiff>:
  405460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405464:	690f      	ldr	r7, [r1, #16]
  405466:	460e      	mov	r6, r1
  405468:	6911      	ldr	r1, [r2, #16]
  40546a:	1a7f      	subs	r7, r7, r1
  40546c:	2f00      	cmp	r7, #0
  40546e:	4690      	mov	r8, r2
  405470:	d117      	bne.n	4054a2 <__mdiff+0x42>
  405472:	0089      	lsls	r1, r1, #2
  405474:	f106 0514 	add.w	r5, r6, #20
  405478:	f102 0e14 	add.w	lr, r2, #20
  40547c:	186b      	adds	r3, r5, r1
  40547e:	4471      	add	r1, lr
  405480:	e001      	b.n	405486 <__mdiff+0x26>
  405482:	429d      	cmp	r5, r3
  405484:	d25c      	bcs.n	405540 <__mdiff+0xe0>
  405486:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40548a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40548e:	42a2      	cmp	r2, r4
  405490:	d0f7      	beq.n	405482 <__mdiff+0x22>
  405492:	d25e      	bcs.n	405552 <__mdiff+0xf2>
  405494:	4633      	mov	r3, r6
  405496:	462c      	mov	r4, r5
  405498:	4646      	mov	r6, r8
  40549a:	4675      	mov	r5, lr
  40549c:	4698      	mov	r8, r3
  40549e:	2701      	movs	r7, #1
  4054a0:	e005      	b.n	4054ae <__mdiff+0x4e>
  4054a2:	db58      	blt.n	405556 <__mdiff+0xf6>
  4054a4:	f106 0514 	add.w	r5, r6, #20
  4054a8:	f108 0414 	add.w	r4, r8, #20
  4054ac:	2700      	movs	r7, #0
  4054ae:	6871      	ldr	r1, [r6, #4]
  4054b0:	f7ff fdbc 	bl	40502c <_Balloc>
  4054b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4054b8:	6936      	ldr	r6, [r6, #16]
  4054ba:	60c7      	str	r7, [r0, #12]
  4054bc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4054c0:	46a6      	mov	lr, r4
  4054c2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4054c6:	f100 0414 	add.w	r4, r0, #20
  4054ca:	2300      	movs	r3, #0
  4054cc:	f85e 1b04 	ldr.w	r1, [lr], #4
  4054d0:	f855 8b04 	ldr.w	r8, [r5], #4
  4054d4:	b28a      	uxth	r2, r1
  4054d6:	fa13 f388 	uxtah	r3, r3, r8
  4054da:	0c09      	lsrs	r1, r1, #16
  4054dc:	1a9a      	subs	r2, r3, r2
  4054de:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4054e2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4054e6:	b292      	uxth	r2, r2
  4054e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4054ec:	45f4      	cmp	ip, lr
  4054ee:	f844 2b04 	str.w	r2, [r4], #4
  4054f2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4054f6:	d8e9      	bhi.n	4054cc <__mdiff+0x6c>
  4054f8:	42af      	cmp	r7, r5
  4054fa:	d917      	bls.n	40552c <__mdiff+0xcc>
  4054fc:	46a4      	mov	ip, r4
  4054fe:	46ae      	mov	lr, r5
  405500:	f85e 2b04 	ldr.w	r2, [lr], #4
  405504:	fa13 f382 	uxtah	r3, r3, r2
  405508:	1419      	asrs	r1, r3, #16
  40550a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40550e:	b29b      	uxth	r3, r3
  405510:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405514:	4577      	cmp	r7, lr
  405516:	f84c 2b04 	str.w	r2, [ip], #4
  40551a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40551e:	d8ef      	bhi.n	405500 <__mdiff+0xa0>
  405520:	43ed      	mvns	r5, r5
  405522:	442f      	add	r7, r5
  405524:	f027 0703 	bic.w	r7, r7, #3
  405528:	3704      	adds	r7, #4
  40552a:	443c      	add	r4, r7
  40552c:	3c04      	subs	r4, #4
  40552e:	b922      	cbnz	r2, 40553a <__mdiff+0xda>
  405530:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405534:	3e01      	subs	r6, #1
  405536:	2b00      	cmp	r3, #0
  405538:	d0fa      	beq.n	405530 <__mdiff+0xd0>
  40553a:	6106      	str	r6, [r0, #16]
  40553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405540:	2100      	movs	r1, #0
  405542:	f7ff fd73 	bl	40502c <_Balloc>
  405546:	2201      	movs	r2, #1
  405548:	2300      	movs	r3, #0
  40554a:	6102      	str	r2, [r0, #16]
  40554c:	6143      	str	r3, [r0, #20]
  40554e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405552:	4674      	mov	r4, lr
  405554:	e7ab      	b.n	4054ae <__mdiff+0x4e>
  405556:	4633      	mov	r3, r6
  405558:	f106 0414 	add.w	r4, r6, #20
  40555c:	f102 0514 	add.w	r5, r2, #20
  405560:	4616      	mov	r6, r2
  405562:	2701      	movs	r7, #1
  405564:	4698      	mov	r8, r3
  405566:	e7a2      	b.n	4054ae <__mdiff+0x4e>

00405568 <__d2b>:
  405568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40556c:	b082      	sub	sp, #8
  40556e:	2101      	movs	r1, #1
  405570:	461c      	mov	r4, r3
  405572:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405576:	4615      	mov	r5, r2
  405578:	9e08      	ldr	r6, [sp, #32]
  40557a:	f7ff fd57 	bl	40502c <_Balloc>
  40557e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405582:	4680      	mov	r8, r0
  405584:	b10f      	cbz	r7, 40558a <__d2b+0x22>
  405586:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40558a:	9401      	str	r4, [sp, #4]
  40558c:	b31d      	cbz	r5, 4055d6 <__d2b+0x6e>
  40558e:	a802      	add	r0, sp, #8
  405590:	f840 5d08 	str.w	r5, [r0, #-8]!
  405594:	f7ff fdda 	bl	40514c <__lo0bits>
  405598:	2800      	cmp	r0, #0
  40559a:	d134      	bne.n	405606 <__d2b+0x9e>
  40559c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4055a0:	f8c8 2014 	str.w	r2, [r8, #20]
  4055a4:	2b00      	cmp	r3, #0
  4055a6:	bf0c      	ite	eq
  4055a8:	2101      	moveq	r1, #1
  4055aa:	2102      	movne	r1, #2
  4055ac:	f8c8 3018 	str.w	r3, [r8, #24]
  4055b0:	f8c8 1010 	str.w	r1, [r8, #16]
  4055b4:	b9df      	cbnz	r7, 4055ee <__d2b+0x86>
  4055b6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4055ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4055be:	6030      	str	r0, [r6, #0]
  4055c0:	6918      	ldr	r0, [r3, #16]
  4055c2:	f7ff fda3 	bl	40510c <__hi0bits>
  4055c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4055c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4055cc:	6018      	str	r0, [r3, #0]
  4055ce:	4640      	mov	r0, r8
  4055d0:	b002      	add	sp, #8
  4055d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055d6:	a801      	add	r0, sp, #4
  4055d8:	f7ff fdb8 	bl	40514c <__lo0bits>
  4055dc:	9b01      	ldr	r3, [sp, #4]
  4055de:	f8c8 3014 	str.w	r3, [r8, #20]
  4055e2:	2101      	movs	r1, #1
  4055e4:	3020      	adds	r0, #32
  4055e6:	f8c8 1010 	str.w	r1, [r8, #16]
  4055ea:	2f00      	cmp	r7, #0
  4055ec:	d0e3      	beq.n	4055b6 <__d2b+0x4e>
  4055ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4055f0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4055f4:	4407      	add	r7, r0
  4055f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4055fa:	6037      	str	r7, [r6, #0]
  4055fc:	6018      	str	r0, [r3, #0]
  4055fe:	4640      	mov	r0, r8
  405600:	b002      	add	sp, #8
  405602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405606:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40560a:	f1c0 0220 	rsb	r2, r0, #32
  40560e:	fa03 f202 	lsl.w	r2, r3, r2
  405612:	430a      	orrs	r2, r1
  405614:	40c3      	lsrs	r3, r0
  405616:	9301      	str	r3, [sp, #4]
  405618:	f8c8 2014 	str.w	r2, [r8, #20]
  40561c:	e7c2      	b.n	4055a4 <__d2b+0x3c>
  40561e:	bf00      	nop

00405620 <_sbrk_r>:
  405620:	b538      	push	{r3, r4, r5, lr}
  405622:	4c07      	ldr	r4, [pc, #28]	; (405640 <_sbrk_r+0x20>)
  405624:	2300      	movs	r3, #0
  405626:	4605      	mov	r5, r0
  405628:	4608      	mov	r0, r1
  40562a:	6023      	str	r3, [r4, #0]
  40562c:	f7fc f9e2 	bl	4019f4 <_sbrk>
  405630:	1c43      	adds	r3, r0, #1
  405632:	d000      	beq.n	405636 <_sbrk_r+0x16>
  405634:	bd38      	pop	{r3, r4, r5, pc}
  405636:	6823      	ldr	r3, [r4, #0]
  405638:	2b00      	cmp	r3, #0
  40563a:	d0fb      	beq.n	405634 <_sbrk_r+0x14>
  40563c:	602b      	str	r3, [r5, #0]
  40563e:	bd38      	pop	{r3, r4, r5, pc}
  405640:	20400b50 	.word	0x20400b50
	...

00405680 <strlen>:
  405680:	f890 f000 	pld	[r0]
  405684:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405688:	f020 0107 	bic.w	r1, r0, #7
  40568c:	f06f 0c00 	mvn.w	ip, #0
  405690:	f010 0407 	ands.w	r4, r0, #7
  405694:	f891 f020 	pld	[r1, #32]
  405698:	f040 8049 	bne.w	40572e <strlen+0xae>
  40569c:	f04f 0400 	mov.w	r4, #0
  4056a0:	f06f 0007 	mvn.w	r0, #7
  4056a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4056a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4056ac:	f100 0008 	add.w	r0, r0, #8
  4056b0:	fa82 f24c 	uadd8	r2, r2, ip
  4056b4:	faa4 f28c 	sel	r2, r4, ip
  4056b8:	fa83 f34c 	uadd8	r3, r3, ip
  4056bc:	faa2 f38c 	sel	r3, r2, ip
  4056c0:	bb4b      	cbnz	r3, 405716 <strlen+0x96>
  4056c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4056c6:	fa82 f24c 	uadd8	r2, r2, ip
  4056ca:	f100 0008 	add.w	r0, r0, #8
  4056ce:	faa4 f28c 	sel	r2, r4, ip
  4056d2:	fa83 f34c 	uadd8	r3, r3, ip
  4056d6:	faa2 f38c 	sel	r3, r2, ip
  4056da:	b9e3      	cbnz	r3, 405716 <strlen+0x96>
  4056dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4056e0:	fa82 f24c 	uadd8	r2, r2, ip
  4056e4:	f100 0008 	add.w	r0, r0, #8
  4056e8:	faa4 f28c 	sel	r2, r4, ip
  4056ec:	fa83 f34c 	uadd8	r3, r3, ip
  4056f0:	faa2 f38c 	sel	r3, r2, ip
  4056f4:	b97b      	cbnz	r3, 405716 <strlen+0x96>
  4056f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4056fa:	f101 0120 	add.w	r1, r1, #32
  4056fe:	fa82 f24c 	uadd8	r2, r2, ip
  405702:	f100 0008 	add.w	r0, r0, #8
  405706:	faa4 f28c 	sel	r2, r4, ip
  40570a:	fa83 f34c 	uadd8	r3, r3, ip
  40570e:	faa2 f38c 	sel	r3, r2, ip
  405712:	2b00      	cmp	r3, #0
  405714:	d0c6      	beq.n	4056a4 <strlen+0x24>
  405716:	2a00      	cmp	r2, #0
  405718:	bf04      	itt	eq
  40571a:	3004      	addeq	r0, #4
  40571c:	461a      	moveq	r2, r3
  40571e:	ba12      	rev	r2, r2
  405720:	fab2 f282 	clz	r2, r2
  405724:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405728:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40572c:	4770      	bx	lr
  40572e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405732:	f004 0503 	and.w	r5, r4, #3
  405736:	f1c4 0000 	rsb	r0, r4, #0
  40573a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40573e:	f014 0f04 	tst.w	r4, #4
  405742:	f891 f040 	pld	[r1, #64]	; 0x40
  405746:	fa0c f505 	lsl.w	r5, ip, r5
  40574a:	ea62 0205 	orn	r2, r2, r5
  40574e:	bf1c      	itt	ne
  405750:	ea63 0305 	ornne	r3, r3, r5
  405754:	4662      	movne	r2, ip
  405756:	f04f 0400 	mov.w	r4, #0
  40575a:	e7a9      	b.n	4056b0 <strlen+0x30>

0040575c <__ssprint_r>:
  40575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405760:	6893      	ldr	r3, [r2, #8]
  405762:	b083      	sub	sp, #12
  405764:	4690      	mov	r8, r2
  405766:	2b00      	cmp	r3, #0
  405768:	d070      	beq.n	40584c <__ssprint_r+0xf0>
  40576a:	4682      	mov	sl, r0
  40576c:	460c      	mov	r4, r1
  40576e:	6817      	ldr	r7, [r2, #0]
  405770:	688d      	ldr	r5, [r1, #8]
  405772:	6808      	ldr	r0, [r1, #0]
  405774:	e042      	b.n	4057fc <__ssprint_r+0xa0>
  405776:	89a3      	ldrh	r3, [r4, #12]
  405778:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40577c:	d02e      	beq.n	4057dc <__ssprint_r+0x80>
  40577e:	6965      	ldr	r5, [r4, #20]
  405780:	6921      	ldr	r1, [r4, #16]
  405782:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405786:	eba0 0b01 	sub.w	fp, r0, r1
  40578a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40578e:	f10b 0001 	add.w	r0, fp, #1
  405792:	106d      	asrs	r5, r5, #1
  405794:	4430      	add	r0, r6
  405796:	42a8      	cmp	r0, r5
  405798:	462a      	mov	r2, r5
  40579a:	bf84      	itt	hi
  40579c:	4605      	movhi	r5, r0
  40579e:	462a      	movhi	r2, r5
  4057a0:	055b      	lsls	r3, r3, #21
  4057a2:	d538      	bpl.n	405816 <__ssprint_r+0xba>
  4057a4:	4611      	mov	r1, r2
  4057a6:	4650      	mov	r0, sl
  4057a8:	f7ff f888 	bl	4048bc <_malloc_r>
  4057ac:	2800      	cmp	r0, #0
  4057ae:	d03c      	beq.n	40582a <__ssprint_r+0xce>
  4057b0:	465a      	mov	r2, fp
  4057b2:	6921      	ldr	r1, [r4, #16]
  4057b4:	9001      	str	r0, [sp, #4]
  4057b6:	f7ff fb9b 	bl	404ef0 <memcpy>
  4057ba:	89a2      	ldrh	r2, [r4, #12]
  4057bc:	9b01      	ldr	r3, [sp, #4]
  4057be:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4057c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4057c6:	81a2      	strh	r2, [r4, #12]
  4057c8:	eba5 020b 	sub.w	r2, r5, fp
  4057cc:	eb03 000b 	add.w	r0, r3, fp
  4057d0:	6165      	str	r5, [r4, #20]
  4057d2:	6123      	str	r3, [r4, #16]
  4057d4:	6020      	str	r0, [r4, #0]
  4057d6:	60a2      	str	r2, [r4, #8]
  4057d8:	4635      	mov	r5, r6
  4057da:	46b3      	mov	fp, r6
  4057dc:	465a      	mov	r2, fp
  4057de:	4649      	mov	r1, r9
  4057e0:	f000 fa00 	bl	405be4 <memmove>
  4057e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4057e8:	68a2      	ldr	r2, [r4, #8]
  4057ea:	6820      	ldr	r0, [r4, #0]
  4057ec:	1b55      	subs	r5, r2, r5
  4057ee:	4458      	add	r0, fp
  4057f0:	1b9e      	subs	r6, r3, r6
  4057f2:	60a5      	str	r5, [r4, #8]
  4057f4:	6020      	str	r0, [r4, #0]
  4057f6:	f8c8 6008 	str.w	r6, [r8, #8]
  4057fa:	b33e      	cbz	r6, 40584c <__ssprint_r+0xf0>
  4057fc:	687e      	ldr	r6, [r7, #4]
  4057fe:	463b      	mov	r3, r7
  405800:	3708      	adds	r7, #8
  405802:	2e00      	cmp	r6, #0
  405804:	d0fa      	beq.n	4057fc <__ssprint_r+0xa0>
  405806:	42ae      	cmp	r6, r5
  405808:	f8d3 9000 	ldr.w	r9, [r3]
  40580c:	46ab      	mov	fp, r5
  40580e:	d2b2      	bcs.n	405776 <__ssprint_r+0x1a>
  405810:	4635      	mov	r5, r6
  405812:	46b3      	mov	fp, r6
  405814:	e7e2      	b.n	4057dc <__ssprint_r+0x80>
  405816:	4650      	mov	r0, sl
  405818:	f000 fa48 	bl	405cac <_realloc_r>
  40581c:	4603      	mov	r3, r0
  40581e:	2800      	cmp	r0, #0
  405820:	d1d2      	bne.n	4057c8 <__ssprint_r+0x6c>
  405822:	6921      	ldr	r1, [r4, #16]
  405824:	4650      	mov	r0, sl
  405826:	f000 f8f7 	bl	405a18 <_free_r>
  40582a:	230c      	movs	r3, #12
  40582c:	f8ca 3000 	str.w	r3, [sl]
  405830:	89a3      	ldrh	r3, [r4, #12]
  405832:	2200      	movs	r2, #0
  405834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405838:	f04f 30ff 	mov.w	r0, #4294967295
  40583c:	81a3      	strh	r3, [r4, #12]
  40583e:	f8c8 2008 	str.w	r2, [r8, #8]
  405842:	f8c8 2004 	str.w	r2, [r8, #4]
  405846:	b003      	add	sp, #12
  405848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40584c:	2000      	movs	r0, #0
  40584e:	f8c8 0004 	str.w	r0, [r8, #4]
  405852:	b003      	add	sp, #12
  405854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405858 <__ascii_wctomb>:
  405858:	b121      	cbz	r1, 405864 <__ascii_wctomb+0xc>
  40585a:	2aff      	cmp	r2, #255	; 0xff
  40585c:	d804      	bhi.n	405868 <__ascii_wctomb+0x10>
  40585e:	700a      	strb	r2, [r1, #0]
  405860:	2001      	movs	r0, #1
  405862:	4770      	bx	lr
  405864:	4608      	mov	r0, r1
  405866:	4770      	bx	lr
  405868:	238a      	movs	r3, #138	; 0x8a
  40586a:	6003      	str	r3, [r0, #0]
  40586c:	f04f 30ff 	mov.w	r0, #4294967295
  405870:	4770      	bx	lr
  405872:	bf00      	nop

00405874 <__register_exitproc>:
  405874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405878:	4c25      	ldr	r4, [pc, #148]	; (405910 <__register_exitproc+0x9c>)
  40587a:	6825      	ldr	r5, [r4, #0]
  40587c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  405880:	4606      	mov	r6, r0
  405882:	4688      	mov	r8, r1
  405884:	4692      	mov	sl, r2
  405886:	4699      	mov	r9, r3
  405888:	b3c4      	cbz	r4, 4058fc <__register_exitproc+0x88>
  40588a:	6860      	ldr	r0, [r4, #4]
  40588c:	281f      	cmp	r0, #31
  40588e:	dc17      	bgt.n	4058c0 <__register_exitproc+0x4c>
  405890:	1c43      	adds	r3, r0, #1
  405892:	b176      	cbz	r6, 4058b2 <__register_exitproc+0x3e>
  405894:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  405898:	2201      	movs	r2, #1
  40589a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40589e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4058a2:	4082      	lsls	r2, r0
  4058a4:	4311      	orrs	r1, r2
  4058a6:	2e02      	cmp	r6, #2
  4058a8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4058ac:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4058b0:	d01e      	beq.n	4058f0 <__register_exitproc+0x7c>
  4058b2:	3002      	adds	r0, #2
  4058b4:	6063      	str	r3, [r4, #4]
  4058b6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4058ba:	2000      	movs	r0, #0
  4058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058c0:	4b14      	ldr	r3, [pc, #80]	; (405914 <__register_exitproc+0xa0>)
  4058c2:	b303      	cbz	r3, 405906 <__register_exitproc+0x92>
  4058c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4058c8:	f3af 8000 	nop.w
  4058cc:	4604      	mov	r4, r0
  4058ce:	b1d0      	cbz	r0, 405906 <__register_exitproc+0x92>
  4058d0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4058d4:	2700      	movs	r7, #0
  4058d6:	e880 0088 	stmia.w	r0, {r3, r7}
  4058da:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4058de:	4638      	mov	r0, r7
  4058e0:	2301      	movs	r3, #1
  4058e2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4058e6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4058ea:	2e00      	cmp	r6, #0
  4058ec:	d0e1      	beq.n	4058b2 <__register_exitproc+0x3e>
  4058ee:	e7d1      	b.n	405894 <__register_exitproc+0x20>
  4058f0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4058f4:	430a      	orrs	r2, r1
  4058f6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4058fa:	e7da      	b.n	4058b2 <__register_exitproc+0x3e>
  4058fc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  405900:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405904:	e7c1      	b.n	40588a <__register_exitproc+0x16>
  405906:	f04f 30ff 	mov.w	r0, #4294967295
  40590a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40590e:	bf00      	nop
  405910:	00406cf8 	.word	0x00406cf8
  405914:	00000000 	.word	0x00000000

00405918 <_calloc_r>:
  405918:	b510      	push	{r4, lr}
  40591a:	fb02 f101 	mul.w	r1, r2, r1
  40591e:	f7fe ffcd 	bl	4048bc <_malloc_r>
  405922:	4604      	mov	r4, r0
  405924:	b1d8      	cbz	r0, 40595e <_calloc_r+0x46>
  405926:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40592a:	f022 0203 	bic.w	r2, r2, #3
  40592e:	3a04      	subs	r2, #4
  405930:	2a24      	cmp	r2, #36	; 0x24
  405932:	d818      	bhi.n	405966 <_calloc_r+0x4e>
  405934:	2a13      	cmp	r2, #19
  405936:	d914      	bls.n	405962 <_calloc_r+0x4a>
  405938:	2300      	movs	r3, #0
  40593a:	2a1b      	cmp	r2, #27
  40593c:	6003      	str	r3, [r0, #0]
  40593e:	6043      	str	r3, [r0, #4]
  405940:	d916      	bls.n	405970 <_calloc_r+0x58>
  405942:	2a24      	cmp	r2, #36	; 0x24
  405944:	6083      	str	r3, [r0, #8]
  405946:	60c3      	str	r3, [r0, #12]
  405948:	bf11      	iteee	ne
  40594a:	f100 0210 	addne.w	r2, r0, #16
  40594e:	6103      	streq	r3, [r0, #16]
  405950:	6143      	streq	r3, [r0, #20]
  405952:	f100 0218 	addeq.w	r2, r0, #24
  405956:	2300      	movs	r3, #0
  405958:	6013      	str	r3, [r2, #0]
  40595a:	6053      	str	r3, [r2, #4]
  40595c:	6093      	str	r3, [r2, #8]
  40595e:	4620      	mov	r0, r4
  405960:	bd10      	pop	{r4, pc}
  405962:	4602      	mov	r2, r0
  405964:	e7f7      	b.n	405956 <_calloc_r+0x3e>
  405966:	2100      	movs	r1, #0
  405968:	f7fc fc6a 	bl	402240 <memset>
  40596c:	4620      	mov	r0, r4
  40596e:	bd10      	pop	{r4, pc}
  405970:	f100 0208 	add.w	r2, r0, #8
  405974:	e7ef      	b.n	405956 <_calloc_r+0x3e>
  405976:	bf00      	nop

00405978 <_malloc_trim_r>:
  405978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40597a:	4f24      	ldr	r7, [pc, #144]	; (405a0c <_malloc_trim_r+0x94>)
  40597c:	460c      	mov	r4, r1
  40597e:	4606      	mov	r6, r0
  405980:	f7ff fb50 	bl	405024 <__malloc_lock>
  405984:	68bb      	ldr	r3, [r7, #8]
  405986:	685d      	ldr	r5, [r3, #4]
  405988:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40598c:	310f      	adds	r1, #15
  40598e:	f025 0503 	bic.w	r5, r5, #3
  405992:	4429      	add	r1, r5
  405994:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405998:	f021 010f 	bic.w	r1, r1, #15
  40599c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4059a0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4059a4:	db07      	blt.n	4059b6 <_malloc_trim_r+0x3e>
  4059a6:	2100      	movs	r1, #0
  4059a8:	4630      	mov	r0, r6
  4059aa:	f7ff fe39 	bl	405620 <_sbrk_r>
  4059ae:	68bb      	ldr	r3, [r7, #8]
  4059b0:	442b      	add	r3, r5
  4059b2:	4298      	cmp	r0, r3
  4059b4:	d004      	beq.n	4059c0 <_malloc_trim_r+0x48>
  4059b6:	4630      	mov	r0, r6
  4059b8:	f7ff fb36 	bl	405028 <__malloc_unlock>
  4059bc:	2000      	movs	r0, #0
  4059be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059c0:	4261      	negs	r1, r4
  4059c2:	4630      	mov	r0, r6
  4059c4:	f7ff fe2c 	bl	405620 <_sbrk_r>
  4059c8:	3001      	adds	r0, #1
  4059ca:	d00d      	beq.n	4059e8 <_malloc_trim_r+0x70>
  4059cc:	4b10      	ldr	r3, [pc, #64]	; (405a10 <_malloc_trim_r+0x98>)
  4059ce:	68ba      	ldr	r2, [r7, #8]
  4059d0:	6819      	ldr	r1, [r3, #0]
  4059d2:	1b2d      	subs	r5, r5, r4
  4059d4:	f045 0501 	orr.w	r5, r5, #1
  4059d8:	4630      	mov	r0, r6
  4059da:	1b09      	subs	r1, r1, r4
  4059dc:	6055      	str	r5, [r2, #4]
  4059de:	6019      	str	r1, [r3, #0]
  4059e0:	f7ff fb22 	bl	405028 <__malloc_unlock>
  4059e4:	2001      	movs	r0, #1
  4059e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059e8:	2100      	movs	r1, #0
  4059ea:	4630      	mov	r0, r6
  4059ec:	f7ff fe18 	bl	405620 <_sbrk_r>
  4059f0:	68ba      	ldr	r2, [r7, #8]
  4059f2:	1a83      	subs	r3, r0, r2
  4059f4:	2b0f      	cmp	r3, #15
  4059f6:	ddde      	ble.n	4059b6 <_malloc_trim_r+0x3e>
  4059f8:	4c06      	ldr	r4, [pc, #24]	; (405a14 <_malloc_trim_r+0x9c>)
  4059fa:	4905      	ldr	r1, [pc, #20]	; (405a10 <_malloc_trim_r+0x98>)
  4059fc:	6824      	ldr	r4, [r4, #0]
  4059fe:	f043 0301 	orr.w	r3, r3, #1
  405a02:	1b00      	subs	r0, r0, r4
  405a04:	6053      	str	r3, [r2, #4]
  405a06:	6008      	str	r0, [r1, #0]
  405a08:	e7d5      	b.n	4059b6 <_malloc_trim_r+0x3e>
  405a0a:	bf00      	nop
  405a0c:	204005a4 	.word	0x204005a4
  405a10:	20400a54 	.word	0x20400a54
  405a14:	204009ac 	.word	0x204009ac

00405a18 <_free_r>:
  405a18:	2900      	cmp	r1, #0
  405a1a:	d044      	beq.n	405aa6 <_free_r+0x8e>
  405a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a20:	460d      	mov	r5, r1
  405a22:	4680      	mov	r8, r0
  405a24:	f7ff fafe 	bl	405024 <__malloc_lock>
  405a28:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405a2c:	4969      	ldr	r1, [pc, #420]	; (405bd4 <_free_r+0x1bc>)
  405a2e:	f027 0301 	bic.w	r3, r7, #1
  405a32:	f1a5 0408 	sub.w	r4, r5, #8
  405a36:	18e2      	adds	r2, r4, r3
  405a38:	688e      	ldr	r6, [r1, #8]
  405a3a:	6850      	ldr	r0, [r2, #4]
  405a3c:	42b2      	cmp	r2, r6
  405a3e:	f020 0003 	bic.w	r0, r0, #3
  405a42:	d05e      	beq.n	405b02 <_free_r+0xea>
  405a44:	07fe      	lsls	r6, r7, #31
  405a46:	6050      	str	r0, [r2, #4]
  405a48:	d40b      	bmi.n	405a62 <_free_r+0x4a>
  405a4a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405a4e:	1be4      	subs	r4, r4, r7
  405a50:	f101 0e08 	add.w	lr, r1, #8
  405a54:	68a5      	ldr	r5, [r4, #8]
  405a56:	4575      	cmp	r5, lr
  405a58:	443b      	add	r3, r7
  405a5a:	d06d      	beq.n	405b38 <_free_r+0x120>
  405a5c:	68e7      	ldr	r7, [r4, #12]
  405a5e:	60ef      	str	r7, [r5, #12]
  405a60:	60bd      	str	r5, [r7, #8]
  405a62:	1815      	adds	r5, r2, r0
  405a64:	686d      	ldr	r5, [r5, #4]
  405a66:	07ed      	lsls	r5, r5, #31
  405a68:	d53e      	bpl.n	405ae8 <_free_r+0xd0>
  405a6a:	f043 0201 	orr.w	r2, r3, #1
  405a6e:	6062      	str	r2, [r4, #4]
  405a70:	50e3      	str	r3, [r4, r3]
  405a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405a76:	d217      	bcs.n	405aa8 <_free_r+0x90>
  405a78:	08db      	lsrs	r3, r3, #3
  405a7a:	1c58      	adds	r0, r3, #1
  405a7c:	109a      	asrs	r2, r3, #2
  405a7e:	684d      	ldr	r5, [r1, #4]
  405a80:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405a84:	60a7      	str	r7, [r4, #8]
  405a86:	2301      	movs	r3, #1
  405a88:	4093      	lsls	r3, r2
  405a8a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405a8e:	432b      	orrs	r3, r5
  405a90:	3a08      	subs	r2, #8
  405a92:	60e2      	str	r2, [r4, #12]
  405a94:	604b      	str	r3, [r1, #4]
  405a96:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405a9a:	60fc      	str	r4, [r7, #12]
  405a9c:	4640      	mov	r0, r8
  405a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405aa2:	f7ff bac1 	b.w	405028 <__malloc_unlock>
  405aa6:	4770      	bx	lr
  405aa8:	0a5a      	lsrs	r2, r3, #9
  405aaa:	2a04      	cmp	r2, #4
  405aac:	d852      	bhi.n	405b54 <_free_r+0x13c>
  405aae:	099a      	lsrs	r2, r3, #6
  405ab0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405ab4:	00ff      	lsls	r7, r7, #3
  405ab6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405aba:	19c8      	adds	r0, r1, r7
  405abc:	59ca      	ldr	r2, [r1, r7]
  405abe:	3808      	subs	r0, #8
  405ac0:	4290      	cmp	r0, r2
  405ac2:	d04f      	beq.n	405b64 <_free_r+0x14c>
  405ac4:	6851      	ldr	r1, [r2, #4]
  405ac6:	f021 0103 	bic.w	r1, r1, #3
  405aca:	428b      	cmp	r3, r1
  405acc:	d232      	bcs.n	405b34 <_free_r+0x11c>
  405ace:	6892      	ldr	r2, [r2, #8]
  405ad0:	4290      	cmp	r0, r2
  405ad2:	d1f7      	bne.n	405ac4 <_free_r+0xac>
  405ad4:	68c3      	ldr	r3, [r0, #12]
  405ad6:	60a0      	str	r0, [r4, #8]
  405ad8:	60e3      	str	r3, [r4, #12]
  405ada:	609c      	str	r4, [r3, #8]
  405adc:	60c4      	str	r4, [r0, #12]
  405ade:	4640      	mov	r0, r8
  405ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ae4:	f7ff baa0 	b.w	405028 <__malloc_unlock>
  405ae8:	6895      	ldr	r5, [r2, #8]
  405aea:	4f3b      	ldr	r7, [pc, #236]	; (405bd8 <_free_r+0x1c0>)
  405aec:	42bd      	cmp	r5, r7
  405aee:	4403      	add	r3, r0
  405af0:	d040      	beq.n	405b74 <_free_r+0x15c>
  405af2:	68d0      	ldr	r0, [r2, #12]
  405af4:	60e8      	str	r0, [r5, #12]
  405af6:	f043 0201 	orr.w	r2, r3, #1
  405afa:	6085      	str	r5, [r0, #8]
  405afc:	6062      	str	r2, [r4, #4]
  405afe:	50e3      	str	r3, [r4, r3]
  405b00:	e7b7      	b.n	405a72 <_free_r+0x5a>
  405b02:	07ff      	lsls	r7, r7, #31
  405b04:	4403      	add	r3, r0
  405b06:	d407      	bmi.n	405b18 <_free_r+0x100>
  405b08:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405b0c:	1aa4      	subs	r4, r4, r2
  405b0e:	4413      	add	r3, r2
  405b10:	68a0      	ldr	r0, [r4, #8]
  405b12:	68e2      	ldr	r2, [r4, #12]
  405b14:	60c2      	str	r2, [r0, #12]
  405b16:	6090      	str	r0, [r2, #8]
  405b18:	4a30      	ldr	r2, [pc, #192]	; (405bdc <_free_r+0x1c4>)
  405b1a:	6812      	ldr	r2, [r2, #0]
  405b1c:	f043 0001 	orr.w	r0, r3, #1
  405b20:	4293      	cmp	r3, r2
  405b22:	6060      	str	r0, [r4, #4]
  405b24:	608c      	str	r4, [r1, #8]
  405b26:	d3b9      	bcc.n	405a9c <_free_r+0x84>
  405b28:	4b2d      	ldr	r3, [pc, #180]	; (405be0 <_free_r+0x1c8>)
  405b2a:	4640      	mov	r0, r8
  405b2c:	6819      	ldr	r1, [r3, #0]
  405b2e:	f7ff ff23 	bl	405978 <_malloc_trim_r>
  405b32:	e7b3      	b.n	405a9c <_free_r+0x84>
  405b34:	4610      	mov	r0, r2
  405b36:	e7cd      	b.n	405ad4 <_free_r+0xbc>
  405b38:	1811      	adds	r1, r2, r0
  405b3a:	6849      	ldr	r1, [r1, #4]
  405b3c:	07c9      	lsls	r1, r1, #31
  405b3e:	d444      	bmi.n	405bca <_free_r+0x1b2>
  405b40:	6891      	ldr	r1, [r2, #8]
  405b42:	68d2      	ldr	r2, [r2, #12]
  405b44:	60ca      	str	r2, [r1, #12]
  405b46:	4403      	add	r3, r0
  405b48:	f043 0001 	orr.w	r0, r3, #1
  405b4c:	6091      	str	r1, [r2, #8]
  405b4e:	6060      	str	r0, [r4, #4]
  405b50:	50e3      	str	r3, [r4, r3]
  405b52:	e7a3      	b.n	405a9c <_free_r+0x84>
  405b54:	2a14      	cmp	r2, #20
  405b56:	d816      	bhi.n	405b86 <_free_r+0x16e>
  405b58:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405b5c:	00ff      	lsls	r7, r7, #3
  405b5e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405b62:	e7aa      	b.n	405aba <_free_r+0xa2>
  405b64:	10aa      	asrs	r2, r5, #2
  405b66:	2301      	movs	r3, #1
  405b68:	684d      	ldr	r5, [r1, #4]
  405b6a:	4093      	lsls	r3, r2
  405b6c:	432b      	orrs	r3, r5
  405b6e:	604b      	str	r3, [r1, #4]
  405b70:	4603      	mov	r3, r0
  405b72:	e7b0      	b.n	405ad6 <_free_r+0xbe>
  405b74:	f043 0201 	orr.w	r2, r3, #1
  405b78:	614c      	str	r4, [r1, #20]
  405b7a:	610c      	str	r4, [r1, #16]
  405b7c:	60e5      	str	r5, [r4, #12]
  405b7e:	60a5      	str	r5, [r4, #8]
  405b80:	6062      	str	r2, [r4, #4]
  405b82:	50e3      	str	r3, [r4, r3]
  405b84:	e78a      	b.n	405a9c <_free_r+0x84>
  405b86:	2a54      	cmp	r2, #84	; 0x54
  405b88:	d806      	bhi.n	405b98 <_free_r+0x180>
  405b8a:	0b1a      	lsrs	r2, r3, #12
  405b8c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405b90:	00ff      	lsls	r7, r7, #3
  405b92:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405b96:	e790      	b.n	405aba <_free_r+0xa2>
  405b98:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405b9c:	d806      	bhi.n	405bac <_free_r+0x194>
  405b9e:	0bda      	lsrs	r2, r3, #15
  405ba0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405ba4:	00ff      	lsls	r7, r7, #3
  405ba6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405baa:	e786      	b.n	405aba <_free_r+0xa2>
  405bac:	f240 5054 	movw	r0, #1364	; 0x554
  405bb0:	4282      	cmp	r2, r0
  405bb2:	d806      	bhi.n	405bc2 <_free_r+0x1aa>
  405bb4:	0c9a      	lsrs	r2, r3, #18
  405bb6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405bba:	00ff      	lsls	r7, r7, #3
  405bbc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405bc0:	e77b      	b.n	405aba <_free_r+0xa2>
  405bc2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405bc6:	257e      	movs	r5, #126	; 0x7e
  405bc8:	e777      	b.n	405aba <_free_r+0xa2>
  405bca:	f043 0101 	orr.w	r1, r3, #1
  405bce:	6061      	str	r1, [r4, #4]
  405bd0:	6013      	str	r3, [r2, #0]
  405bd2:	e763      	b.n	405a9c <_free_r+0x84>
  405bd4:	204005a4 	.word	0x204005a4
  405bd8:	204005ac 	.word	0x204005ac
  405bdc:	204009b0 	.word	0x204009b0
  405be0:	20400a84 	.word	0x20400a84

00405be4 <memmove>:
  405be4:	4288      	cmp	r0, r1
  405be6:	b5f0      	push	{r4, r5, r6, r7, lr}
  405be8:	d90d      	bls.n	405c06 <memmove+0x22>
  405bea:	188b      	adds	r3, r1, r2
  405bec:	4298      	cmp	r0, r3
  405bee:	d20a      	bcs.n	405c06 <memmove+0x22>
  405bf0:	1884      	adds	r4, r0, r2
  405bf2:	2a00      	cmp	r2, #0
  405bf4:	d051      	beq.n	405c9a <memmove+0xb6>
  405bf6:	4622      	mov	r2, r4
  405bf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405bfc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405c00:	4299      	cmp	r1, r3
  405c02:	d1f9      	bne.n	405bf8 <memmove+0x14>
  405c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c06:	2a0f      	cmp	r2, #15
  405c08:	d948      	bls.n	405c9c <memmove+0xb8>
  405c0a:	ea41 0300 	orr.w	r3, r1, r0
  405c0e:	079b      	lsls	r3, r3, #30
  405c10:	d146      	bne.n	405ca0 <memmove+0xbc>
  405c12:	f100 0410 	add.w	r4, r0, #16
  405c16:	f101 0310 	add.w	r3, r1, #16
  405c1a:	4615      	mov	r5, r2
  405c1c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405c20:	f844 6c10 	str.w	r6, [r4, #-16]
  405c24:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405c28:	f844 6c0c 	str.w	r6, [r4, #-12]
  405c2c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405c30:	f844 6c08 	str.w	r6, [r4, #-8]
  405c34:	3d10      	subs	r5, #16
  405c36:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405c3a:	f844 6c04 	str.w	r6, [r4, #-4]
  405c3e:	2d0f      	cmp	r5, #15
  405c40:	f103 0310 	add.w	r3, r3, #16
  405c44:	f104 0410 	add.w	r4, r4, #16
  405c48:	d8e8      	bhi.n	405c1c <memmove+0x38>
  405c4a:	f1a2 0310 	sub.w	r3, r2, #16
  405c4e:	f023 030f 	bic.w	r3, r3, #15
  405c52:	f002 0e0f 	and.w	lr, r2, #15
  405c56:	3310      	adds	r3, #16
  405c58:	f1be 0f03 	cmp.w	lr, #3
  405c5c:	4419      	add	r1, r3
  405c5e:	4403      	add	r3, r0
  405c60:	d921      	bls.n	405ca6 <memmove+0xc2>
  405c62:	1f1e      	subs	r6, r3, #4
  405c64:	460d      	mov	r5, r1
  405c66:	4674      	mov	r4, lr
  405c68:	3c04      	subs	r4, #4
  405c6a:	f855 7b04 	ldr.w	r7, [r5], #4
  405c6e:	f846 7f04 	str.w	r7, [r6, #4]!
  405c72:	2c03      	cmp	r4, #3
  405c74:	d8f8      	bhi.n	405c68 <memmove+0x84>
  405c76:	f1ae 0404 	sub.w	r4, lr, #4
  405c7a:	f024 0403 	bic.w	r4, r4, #3
  405c7e:	3404      	adds	r4, #4
  405c80:	4421      	add	r1, r4
  405c82:	4423      	add	r3, r4
  405c84:	f002 0203 	and.w	r2, r2, #3
  405c88:	b162      	cbz	r2, 405ca4 <memmove+0xc0>
  405c8a:	3b01      	subs	r3, #1
  405c8c:	440a      	add	r2, r1
  405c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405c92:	f803 4f01 	strb.w	r4, [r3, #1]!
  405c96:	428a      	cmp	r2, r1
  405c98:	d1f9      	bne.n	405c8e <memmove+0xaa>
  405c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c9c:	4603      	mov	r3, r0
  405c9e:	e7f3      	b.n	405c88 <memmove+0xa4>
  405ca0:	4603      	mov	r3, r0
  405ca2:	e7f2      	b.n	405c8a <memmove+0xa6>
  405ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ca6:	4672      	mov	r2, lr
  405ca8:	e7ee      	b.n	405c88 <memmove+0xa4>
  405caa:	bf00      	nop

00405cac <_realloc_r>:
  405cac:	2900      	cmp	r1, #0
  405cae:	f000 8095 	beq.w	405ddc <_realloc_r+0x130>
  405cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cb6:	460d      	mov	r5, r1
  405cb8:	4616      	mov	r6, r2
  405cba:	b083      	sub	sp, #12
  405cbc:	4680      	mov	r8, r0
  405cbe:	f106 070b 	add.w	r7, r6, #11
  405cc2:	f7ff f9af 	bl	405024 <__malloc_lock>
  405cc6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405cca:	2f16      	cmp	r7, #22
  405ccc:	f02e 0403 	bic.w	r4, lr, #3
  405cd0:	f1a5 0908 	sub.w	r9, r5, #8
  405cd4:	d83c      	bhi.n	405d50 <_realloc_r+0xa4>
  405cd6:	2210      	movs	r2, #16
  405cd8:	4617      	mov	r7, r2
  405cda:	42be      	cmp	r6, r7
  405cdc:	d83d      	bhi.n	405d5a <_realloc_r+0xae>
  405cde:	4294      	cmp	r4, r2
  405ce0:	da43      	bge.n	405d6a <_realloc_r+0xbe>
  405ce2:	4bc4      	ldr	r3, [pc, #784]	; (405ff4 <_realloc_r+0x348>)
  405ce4:	6899      	ldr	r1, [r3, #8]
  405ce6:	eb09 0004 	add.w	r0, r9, r4
  405cea:	4288      	cmp	r0, r1
  405cec:	f000 80b4 	beq.w	405e58 <_realloc_r+0x1ac>
  405cf0:	6843      	ldr	r3, [r0, #4]
  405cf2:	f023 0101 	bic.w	r1, r3, #1
  405cf6:	4401      	add	r1, r0
  405cf8:	6849      	ldr	r1, [r1, #4]
  405cfa:	07c9      	lsls	r1, r1, #31
  405cfc:	d54c      	bpl.n	405d98 <_realloc_r+0xec>
  405cfe:	f01e 0f01 	tst.w	lr, #1
  405d02:	f000 809b 	beq.w	405e3c <_realloc_r+0x190>
  405d06:	4631      	mov	r1, r6
  405d08:	4640      	mov	r0, r8
  405d0a:	f7fe fdd7 	bl	4048bc <_malloc_r>
  405d0e:	4606      	mov	r6, r0
  405d10:	2800      	cmp	r0, #0
  405d12:	d03a      	beq.n	405d8a <_realloc_r+0xde>
  405d14:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405d18:	f023 0301 	bic.w	r3, r3, #1
  405d1c:	444b      	add	r3, r9
  405d1e:	f1a0 0208 	sub.w	r2, r0, #8
  405d22:	429a      	cmp	r2, r3
  405d24:	f000 8121 	beq.w	405f6a <_realloc_r+0x2be>
  405d28:	1f22      	subs	r2, r4, #4
  405d2a:	2a24      	cmp	r2, #36	; 0x24
  405d2c:	f200 8107 	bhi.w	405f3e <_realloc_r+0x292>
  405d30:	2a13      	cmp	r2, #19
  405d32:	f200 80db 	bhi.w	405eec <_realloc_r+0x240>
  405d36:	4603      	mov	r3, r0
  405d38:	462a      	mov	r2, r5
  405d3a:	6811      	ldr	r1, [r2, #0]
  405d3c:	6019      	str	r1, [r3, #0]
  405d3e:	6851      	ldr	r1, [r2, #4]
  405d40:	6059      	str	r1, [r3, #4]
  405d42:	6892      	ldr	r2, [r2, #8]
  405d44:	609a      	str	r2, [r3, #8]
  405d46:	4629      	mov	r1, r5
  405d48:	4640      	mov	r0, r8
  405d4a:	f7ff fe65 	bl	405a18 <_free_r>
  405d4e:	e01c      	b.n	405d8a <_realloc_r+0xde>
  405d50:	f027 0707 	bic.w	r7, r7, #7
  405d54:	2f00      	cmp	r7, #0
  405d56:	463a      	mov	r2, r7
  405d58:	dabf      	bge.n	405cda <_realloc_r+0x2e>
  405d5a:	2600      	movs	r6, #0
  405d5c:	230c      	movs	r3, #12
  405d5e:	4630      	mov	r0, r6
  405d60:	f8c8 3000 	str.w	r3, [r8]
  405d64:	b003      	add	sp, #12
  405d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d6a:	462e      	mov	r6, r5
  405d6c:	1be3      	subs	r3, r4, r7
  405d6e:	2b0f      	cmp	r3, #15
  405d70:	d81e      	bhi.n	405db0 <_realloc_r+0x104>
  405d72:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405d76:	f003 0301 	and.w	r3, r3, #1
  405d7a:	4323      	orrs	r3, r4
  405d7c:	444c      	add	r4, r9
  405d7e:	f8c9 3004 	str.w	r3, [r9, #4]
  405d82:	6863      	ldr	r3, [r4, #4]
  405d84:	f043 0301 	orr.w	r3, r3, #1
  405d88:	6063      	str	r3, [r4, #4]
  405d8a:	4640      	mov	r0, r8
  405d8c:	f7ff f94c 	bl	405028 <__malloc_unlock>
  405d90:	4630      	mov	r0, r6
  405d92:	b003      	add	sp, #12
  405d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d98:	f023 0303 	bic.w	r3, r3, #3
  405d9c:	18e1      	adds	r1, r4, r3
  405d9e:	4291      	cmp	r1, r2
  405da0:	db1f      	blt.n	405de2 <_realloc_r+0x136>
  405da2:	68c3      	ldr	r3, [r0, #12]
  405da4:	6882      	ldr	r2, [r0, #8]
  405da6:	462e      	mov	r6, r5
  405da8:	60d3      	str	r3, [r2, #12]
  405daa:	460c      	mov	r4, r1
  405dac:	609a      	str	r2, [r3, #8]
  405dae:	e7dd      	b.n	405d6c <_realloc_r+0xc0>
  405db0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405db4:	eb09 0107 	add.w	r1, r9, r7
  405db8:	f002 0201 	and.w	r2, r2, #1
  405dbc:	444c      	add	r4, r9
  405dbe:	f043 0301 	orr.w	r3, r3, #1
  405dc2:	4317      	orrs	r7, r2
  405dc4:	f8c9 7004 	str.w	r7, [r9, #4]
  405dc8:	604b      	str	r3, [r1, #4]
  405dca:	6863      	ldr	r3, [r4, #4]
  405dcc:	f043 0301 	orr.w	r3, r3, #1
  405dd0:	3108      	adds	r1, #8
  405dd2:	6063      	str	r3, [r4, #4]
  405dd4:	4640      	mov	r0, r8
  405dd6:	f7ff fe1f 	bl	405a18 <_free_r>
  405dda:	e7d6      	b.n	405d8a <_realloc_r+0xde>
  405ddc:	4611      	mov	r1, r2
  405dde:	f7fe bd6d 	b.w	4048bc <_malloc_r>
  405de2:	f01e 0f01 	tst.w	lr, #1
  405de6:	d18e      	bne.n	405d06 <_realloc_r+0x5a>
  405de8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405dec:	eba9 0a01 	sub.w	sl, r9, r1
  405df0:	f8da 1004 	ldr.w	r1, [sl, #4]
  405df4:	f021 0103 	bic.w	r1, r1, #3
  405df8:	440b      	add	r3, r1
  405dfa:	4423      	add	r3, r4
  405dfc:	4293      	cmp	r3, r2
  405dfe:	db25      	blt.n	405e4c <_realloc_r+0x1a0>
  405e00:	68c2      	ldr	r2, [r0, #12]
  405e02:	6881      	ldr	r1, [r0, #8]
  405e04:	4656      	mov	r6, sl
  405e06:	60ca      	str	r2, [r1, #12]
  405e08:	6091      	str	r1, [r2, #8]
  405e0a:	f8da 100c 	ldr.w	r1, [sl, #12]
  405e0e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405e12:	1f22      	subs	r2, r4, #4
  405e14:	2a24      	cmp	r2, #36	; 0x24
  405e16:	60c1      	str	r1, [r0, #12]
  405e18:	6088      	str	r0, [r1, #8]
  405e1a:	f200 8094 	bhi.w	405f46 <_realloc_r+0x29a>
  405e1e:	2a13      	cmp	r2, #19
  405e20:	d96f      	bls.n	405f02 <_realloc_r+0x256>
  405e22:	6829      	ldr	r1, [r5, #0]
  405e24:	f8ca 1008 	str.w	r1, [sl, #8]
  405e28:	6869      	ldr	r1, [r5, #4]
  405e2a:	f8ca 100c 	str.w	r1, [sl, #12]
  405e2e:	2a1b      	cmp	r2, #27
  405e30:	f200 80a2 	bhi.w	405f78 <_realloc_r+0x2cc>
  405e34:	3508      	adds	r5, #8
  405e36:	f10a 0210 	add.w	r2, sl, #16
  405e3a:	e063      	b.n	405f04 <_realloc_r+0x258>
  405e3c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405e40:	eba9 0a03 	sub.w	sl, r9, r3
  405e44:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e48:	f021 0103 	bic.w	r1, r1, #3
  405e4c:	1863      	adds	r3, r4, r1
  405e4e:	4293      	cmp	r3, r2
  405e50:	f6ff af59 	blt.w	405d06 <_realloc_r+0x5a>
  405e54:	4656      	mov	r6, sl
  405e56:	e7d8      	b.n	405e0a <_realloc_r+0x15e>
  405e58:	6841      	ldr	r1, [r0, #4]
  405e5a:	f021 0b03 	bic.w	fp, r1, #3
  405e5e:	44a3      	add	fp, r4
  405e60:	f107 0010 	add.w	r0, r7, #16
  405e64:	4583      	cmp	fp, r0
  405e66:	da56      	bge.n	405f16 <_realloc_r+0x26a>
  405e68:	f01e 0f01 	tst.w	lr, #1
  405e6c:	f47f af4b 	bne.w	405d06 <_realloc_r+0x5a>
  405e70:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405e74:	eba9 0a01 	sub.w	sl, r9, r1
  405e78:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e7c:	f021 0103 	bic.w	r1, r1, #3
  405e80:	448b      	add	fp, r1
  405e82:	4558      	cmp	r0, fp
  405e84:	dce2      	bgt.n	405e4c <_realloc_r+0x1a0>
  405e86:	4656      	mov	r6, sl
  405e88:	f8da 100c 	ldr.w	r1, [sl, #12]
  405e8c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405e90:	1f22      	subs	r2, r4, #4
  405e92:	2a24      	cmp	r2, #36	; 0x24
  405e94:	60c1      	str	r1, [r0, #12]
  405e96:	6088      	str	r0, [r1, #8]
  405e98:	f200 808f 	bhi.w	405fba <_realloc_r+0x30e>
  405e9c:	2a13      	cmp	r2, #19
  405e9e:	f240 808a 	bls.w	405fb6 <_realloc_r+0x30a>
  405ea2:	6829      	ldr	r1, [r5, #0]
  405ea4:	f8ca 1008 	str.w	r1, [sl, #8]
  405ea8:	6869      	ldr	r1, [r5, #4]
  405eaa:	f8ca 100c 	str.w	r1, [sl, #12]
  405eae:	2a1b      	cmp	r2, #27
  405eb0:	f200 808a 	bhi.w	405fc8 <_realloc_r+0x31c>
  405eb4:	3508      	adds	r5, #8
  405eb6:	f10a 0210 	add.w	r2, sl, #16
  405eba:	6829      	ldr	r1, [r5, #0]
  405ebc:	6011      	str	r1, [r2, #0]
  405ebe:	6869      	ldr	r1, [r5, #4]
  405ec0:	6051      	str	r1, [r2, #4]
  405ec2:	68a9      	ldr	r1, [r5, #8]
  405ec4:	6091      	str	r1, [r2, #8]
  405ec6:	eb0a 0107 	add.w	r1, sl, r7
  405eca:	ebab 0207 	sub.w	r2, fp, r7
  405ece:	f042 0201 	orr.w	r2, r2, #1
  405ed2:	6099      	str	r1, [r3, #8]
  405ed4:	604a      	str	r2, [r1, #4]
  405ed6:	f8da 3004 	ldr.w	r3, [sl, #4]
  405eda:	f003 0301 	and.w	r3, r3, #1
  405ede:	431f      	orrs	r7, r3
  405ee0:	4640      	mov	r0, r8
  405ee2:	f8ca 7004 	str.w	r7, [sl, #4]
  405ee6:	f7ff f89f 	bl	405028 <__malloc_unlock>
  405eea:	e751      	b.n	405d90 <_realloc_r+0xe4>
  405eec:	682b      	ldr	r3, [r5, #0]
  405eee:	6003      	str	r3, [r0, #0]
  405ef0:	686b      	ldr	r3, [r5, #4]
  405ef2:	6043      	str	r3, [r0, #4]
  405ef4:	2a1b      	cmp	r2, #27
  405ef6:	d82d      	bhi.n	405f54 <_realloc_r+0x2a8>
  405ef8:	f100 0308 	add.w	r3, r0, #8
  405efc:	f105 0208 	add.w	r2, r5, #8
  405f00:	e71b      	b.n	405d3a <_realloc_r+0x8e>
  405f02:	4632      	mov	r2, r6
  405f04:	6829      	ldr	r1, [r5, #0]
  405f06:	6011      	str	r1, [r2, #0]
  405f08:	6869      	ldr	r1, [r5, #4]
  405f0a:	6051      	str	r1, [r2, #4]
  405f0c:	68a9      	ldr	r1, [r5, #8]
  405f0e:	6091      	str	r1, [r2, #8]
  405f10:	461c      	mov	r4, r3
  405f12:	46d1      	mov	r9, sl
  405f14:	e72a      	b.n	405d6c <_realloc_r+0xc0>
  405f16:	eb09 0107 	add.w	r1, r9, r7
  405f1a:	ebab 0b07 	sub.w	fp, fp, r7
  405f1e:	f04b 0201 	orr.w	r2, fp, #1
  405f22:	6099      	str	r1, [r3, #8]
  405f24:	604a      	str	r2, [r1, #4]
  405f26:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405f2a:	f003 0301 	and.w	r3, r3, #1
  405f2e:	431f      	orrs	r7, r3
  405f30:	4640      	mov	r0, r8
  405f32:	f845 7c04 	str.w	r7, [r5, #-4]
  405f36:	f7ff f877 	bl	405028 <__malloc_unlock>
  405f3a:	462e      	mov	r6, r5
  405f3c:	e728      	b.n	405d90 <_realloc_r+0xe4>
  405f3e:	4629      	mov	r1, r5
  405f40:	f7ff fe50 	bl	405be4 <memmove>
  405f44:	e6ff      	b.n	405d46 <_realloc_r+0x9a>
  405f46:	4629      	mov	r1, r5
  405f48:	4630      	mov	r0, r6
  405f4a:	461c      	mov	r4, r3
  405f4c:	46d1      	mov	r9, sl
  405f4e:	f7ff fe49 	bl	405be4 <memmove>
  405f52:	e70b      	b.n	405d6c <_realloc_r+0xc0>
  405f54:	68ab      	ldr	r3, [r5, #8]
  405f56:	6083      	str	r3, [r0, #8]
  405f58:	68eb      	ldr	r3, [r5, #12]
  405f5a:	60c3      	str	r3, [r0, #12]
  405f5c:	2a24      	cmp	r2, #36	; 0x24
  405f5e:	d017      	beq.n	405f90 <_realloc_r+0x2e4>
  405f60:	f100 0310 	add.w	r3, r0, #16
  405f64:	f105 0210 	add.w	r2, r5, #16
  405f68:	e6e7      	b.n	405d3a <_realloc_r+0x8e>
  405f6a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405f6e:	f023 0303 	bic.w	r3, r3, #3
  405f72:	441c      	add	r4, r3
  405f74:	462e      	mov	r6, r5
  405f76:	e6f9      	b.n	405d6c <_realloc_r+0xc0>
  405f78:	68a9      	ldr	r1, [r5, #8]
  405f7a:	f8ca 1010 	str.w	r1, [sl, #16]
  405f7e:	68e9      	ldr	r1, [r5, #12]
  405f80:	f8ca 1014 	str.w	r1, [sl, #20]
  405f84:	2a24      	cmp	r2, #36	; 0x24
  405f86:	d00c      	beq.n	405fa2 <_realloc_r+0x2f6>
  405f88:	3510      	adds	r5, #16
  405f8a:	f10a 0218 	add.w	r2, sl, #24
  405f8e:	e7b9      	b.n	405f04 <_realloc_r+0x258>
  405f90:	692b      	ldr	r3, [r5, #16]
  405f92:	6103      	str	r3, [r0, #16]
  405f94:	696b      	ldr	r3, [r5, #20]
  405f96:	6143      	str	r3, [r0, #20]
  405f98:	f105 0218 	add.w	r2, r5, #24
  405f9c:	f100 0318 	add.w	r3, r0, #24
  405fa0:	e6cb      	b.n	405d3a <_realloc_r+0x8e>
  405fa2:	692a      	ldr	r2, [r5, #16]
  405fa4:	f8ca 2018 	str.w	r2, [sl, #24]
  405fa8:	696a      	ldr	r2, [r5, #20]
  405faa:	f8ca 201c 	str.w	r2, [sl, #28]
  405fae:	3518      	adds	r5, #24
  405fb0:	f10a 0220 	add.w	r2, sl, #32
  405fb4:	e7a6      	b.n	405f04 <_realloc_r+0x258>
  405fb6:	4632      	mov	r2, r6
  405fb8:	e77f      	b.n	405eba <_realloc_r+0x20e>
  405fba:	4629      	mov	r1, r5
  405fbc:	4630      	mov	r0, r6
  405fbe:	9301      	str	r3, [sp, #4]
  405fc0:	f7ff fe10 	bl	405be4 <memmove>
  405fc4:	9b01      	ldr	r3, [sp, #4]
  405fc6:	e77e      	b.n	405ec6 <_realloc_r+0x21a>
  405fc8:	68a9      	ldr	r1, [r5, #8]
  405fca:	f8ca 1010 	str.w	r1, [sl, #16]
  405fce:	68e9      	ldr	r1, [r5, #12]
  405fd0:	f8ca 1014 	str.w	r1, [sl, #20]
  405fd4:	2a24      	cmp	r2, #36	; 0x24
  405fd6:	d003      	beq.n	405fe0 <_realloc_r+0x334>
  405fd8:	3510      	adds	r5, #16
  405fda:	f10a 0218 	add.w	r2, sl, #24
  405fde:	e76c      	b.n	405eba <_realloc_r+0x20e>
  405fe0:	692a      	ldr	r2, [r5, #16]
  405fe2:	f8ca 2018 	str.w	r2, [sl, #24]
  405fe6:	696a      	ldr	r2, [r5, #20]
  405fe8:	f8ca 201c 	str.w	r2, [sl, #28]
  405fec:	3518      	adds	r5, #24
  405fee:	f10a 0220 	add.w	r2, sl, #32
  405ff2:	e762      	b.n	405eba <_realloc_r+0x20e>
  405ff4:	204005a4 	.word	0x204005a4

00405ff8 <__aeabi_drsub>:
  405ff8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405ffc:	e002      	b.n	406004 <__adddf3>
  405ffe:	bf00      	nop

00406000 <__aeabi_dsub>:
  406000:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406004 <__adddf3>:
  406004:	b530      	push	{r4, r5, lr}
  406006:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40600a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40600e:	ea94 0f05 	teq	r4, r5
  406012:	bf08      	it	eq
  406014:	ea90 0f02 	teqeq	r0, r2
  406018:	bf1f      	itttt	ne
  40601a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40601e:	ea55 0c02 	orrsne.w	ip, r5, r2
  406022:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406026:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40602a:	f000 80e2 	beq.w	4061f2 <__adddf3+0x1ee>
  40602e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406032:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406036:	bfb8      	it	lt
  406038:	426d      	neglt	r5, r5
  40603a:	dd0c      	ble.n	406056 <__adddf3+0x52>
  40603c:	442c      	add	r4, r5
  40603e:	ea80 0202 	eor.w	r2, r0, r2
  406042:	ea81 0303 	eor.w	r3, r1, r3
  406046:	ea82 0000 	eor.w	r0, r2, r0
  40604a:	ea83 0101 	eor.w	r1, r3, r1
  40604e:	ea80 0202 	eor.w	r2, r0, r2
  406052:	ea81 0303 	eor.w	r3, r1, r3
  406056:	2d36      	cmp	r5, #54	; 0x36
  406058:	bf88      	it	hi
  40605a:	bd30      	pophi	{r4, r5, pc}
  40605c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406060:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406064:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406068:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40606c:	d002      	beq.n	406074 <__adddf3+0x70>
  40606e:	4240      	negs	r0, r0
  406070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406074:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406078:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40607c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406080:	d002      	beq.n	406088 <__adddf3+0x84>
  406082:	4252      	negs	r2, r2
  406084:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406088:	ea94 0f05 	teq	r4, r5
  40608c:	f000 80a7 	beq.w	4061de <__adddf3+0x1da>
  406090:	f1a4 0401 	sub.w	r4, r4, #1
  406094:	f1d5 0e20 	rsbs	lr, r5, #32
  406098:	db0d      	blt.n	4060b6 <__adddf3+0xb2>
  40609a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40609e:	fa22 f205 	lsr.w	r2, r2, r5
  4060a2:	1880      	adds	r0, r0, r2
  4060a4:	f141 0100 	adc.w	r1, r1, #0
  4060a8:	fa03 f20e 	lsl.w	r2, r3, lr
  4060ac:	1880      	adds	r0, r0, r2
  4060ae:	fa43 f305 	asr.w	r3, r3, r5
  4060b2:	4159      	adcs	r1, r3
  4060b4:	e00e      	b.n	4060d4 <__adddf3+0xd0>
  4060b6:	f1a5 0520 	sub.w	r5, r5, #32
  4060ba:	f10e 0e20 	add.w	lr, lr, #32
  4060be:	2a01      	cmp	r2, #1
  4060c0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4060c4:	bf28      	it	cs
  4060c6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4060ca:	fa43 f305 	asr.w	r3, r3, r5
  4060ce:	18c0      	adds	r0, r0, r3
  4060d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4060d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4060d8:	d507      	bpl.n	4060ea <__adddf3+0xe6>
  4060da:	f04f 0e00 	mov.w	lr, #0
  4060de:	f1dc 0c00 	rsbs	ip, ip, #0
  4060e2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4060e6:	eb6e 0101 	sbc.w	r1, lr, r1
  4060ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4060ee:	d31b      	bcc.n	406128 <__adddf3+0x124>
  4060f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4060f4:	d30c      	bcc.n	406110 <__adddf3+0x10c>
  4060f6:	0849      	lsrs	r1, r1, #1
  4060f8:	ea5f 0030 	movs.w	r0, r0, rrx
  4060fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406100:	f104 0401 	add.w	r4, r4, #1
  406104:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406108:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40610c:	f080 809a 	bcs.w	406244 <__adddf3+0x240>
  406110:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406114:	bf08      	it	eq
  406116:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40611a:	f150 0000 	adcs.w	r0, r0, #0
  40611e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406122:	ea41 0105 	orr.w	r1, r1, r5
  406126:	bd30      	pop	{r4, r5, pc}
  406128:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40612c:	4140      	adcs	r0, r0
  40612e:	eb41 0101 	adc.w	r1, r1, r1
  406132:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406136:	f1a4 0401 	sub.w	r4, r4, #1
  40613a:	d1e9      	bne.n	406110 <__adddf3+0x10c>
  40613c:	f091 0f00 	teq	r1, #0
  406140:	bf04      	itt	eq
  406142:	4601      	moveq	r1, r0
  406144:	2000      	moveq	r0, #0
  406146:	fab1 f381 	clz	r3, r1
  40614a:	bf08      	it	eq
  40614c:	3320      	addeq	r3, #32
  40614e:	f1a3 030b 	sub.w	r3, r3, #11
  406152:	f1b3 0220 	subs.w	r2, r3, #32
  406156:	da0c      	bge.n	406172 <__adddf3+0x16e>
  406158:	320c      	adds	r2, #12
  40615a:	dd08      	ble.n	40616e <__adddf3+0x16a>
  40615c:	f102 0c14 	add.w	ip, r2, #20
  406160:	f1c2 020c 	rsb	r2, r2, #12
  406164:	fa01 f00c 	lsl.w	r0, r1, ip
  406168:	fa21 f102 	lsr.w	r1, r1, r2
  40616c:	e00c      	b.n	406188 <__adddf3+0x184>
  40616e:	f102 0214 	add.w	r2, r2, #20
  406172:	bfd8      	it	le
  406174:	f1c2 0c20 	rsble	ip, r2, #32
  406178:	fa01 f102 	lsl.w	r1, r1, r2
  40617c:	fa20 fc0c 	lsr.w	ip, r0, ip
  406180:	bfdc      	itt	le
  406182:	ea41 010c 	orrle.w	r1, r1, ip
  406186:	4090      	lslle	r0, r2
  406188:	1ae4      	subs	r4, r4, r3
  40618a:	bfa2      	ittt	ge
  40618c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406190:	4329      	orrge	r1, r5
  406192:	bd30      	popge	{r4, r5, pc}
  406194:	ea6f 0404 	mvn.w	r4, r4
  406198:	3c1f      	subs	r4, #31
  40619a:	da1c      	bge.n	4061d6 <__adddf3+0x1d2>
  40619c:	340c      	adds	r4, #12
  40619e:	dc0e      	bgt.n	4061be <__adddf3+0x1ba>
  4061a0:	f104 0414 	add.w	r4, r4, #20
  4061a4:	f1c4 0220 	rsb	r2, r4, #32
  4061a8:	fa20 f004 	lsr.w	r0, r0, r4
  4061ac:	fa01 f302 	lsl.w	r3, r1, r2
  4061b0:	ea40 0003 	orr.w	r0, r0, r3
  4061b4:	fa21 f304 	lsr.w	r3, r1, r4
  4061b8:	ea45 0103 	orr.w	r1, r5, r3
  4061bc:	bd30      	pop	{r4, r5, pc}
  4061be:	f1c4 040c 	rsb	r4, r4, #12
  4061c2:	f1c4 0220 	rsb	r2, r4, #32
  4061c6:	fa20 f002 	lsr.w	r0, r0, r2
  4061ca:	fa01 f304 	lsl.w	r3, r1, r4
  4061ce:	ea40 0003 	orr.w	r0, r0, r3
  4061d2:	4629      	mov	r1, r5
  4061d4:	bd30      	pop	{r4, r5, pc}
  4061d6:	fa21 f004 	lsr.w	r0, r1, r4
  4061da:	4629      	mov	r1, r5
  4061dc:	bd30      	pop	{r4, r5, pc}
  4061de:	f094 0f00 	teq	r4, #0
  4061e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4061e6:	bf06      	itte	eq
  4061e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4061ec:	3401      	addeq	r4, #1
  4061ee:	3d01      	subne	r5, #1
  4061f0:	e74e      	b.n	406090 <__adddf3+0x8c>
  4061f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4061f6:	bf18      	it	ne
  4061f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4061fc:	d029      	beq.n	406252 <__adddf3+0x24e>
  4061fe:	ea94 0f05 	teq	r4, r5
  406202:	bf08      	it	eq
  406204:	ea90 0f02 	teqeq	r0, r2
  406208:	d005      	beq.n	406216 <__adddf3+0x212>
  40620a:	ea54 0c00 	orrs.w	ip, r4, r0
  40620e:	bf04      	itt	eq
  406210:	4619      	moveq	r1, r3
  406212:	4610      	moveq	r0, r2
  406214:	bd30      	pop	{r4, r5, pc}
  406216:	ea91 0f03 	teq	r1, r3
  40621a:	bf1e      	ittt	ne
  40621c:	2100      	movne	r1, #0
  40621e:	2000      	movne	r0, #0
  406220:	bd30      	popne	{r4, r5, pc}
  406222:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406226:	d105      	bne.n	406234 <__adddf3+0x230>
  406228:	0040      	lsls	r0, r0, #1
  40622a:	4149      	adcs	r1, r1
  40622c:	bf28      	it	cs
  40622e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406232:	bd30      	pop	{r4, r5, pc}
  406234:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406238:	bf3c      	itt	cc
  40623a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40623e:	bd30      	popcc	{r4, r5, pc}
  406240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406244:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406248:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40624c:	f04f 0000 	mov.w	r0, #0
  406250:	bd30      	pop	{r4, r5, pc}
  406252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406256:	bf1a      	itte	ne
  406258:	4619      	movne	r1, r3
  40625a:	4610      	movne	r0, r2
  40625c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406260:	bf1c      	itt	ne
  406262:	460b      	movne	r3, r1
  406264:	4602      	movne	r2, r0
  406266:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40626a:	bf06      	itte	eq
  40626c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406270:	ea91 0f03 	teqeq	r1, r3
  406274:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406278:	bd30      	pop	{r4, r5, pc}
  40627a:	bf00      	nop

0040627c <__aeabi_ui2d>:
  40627c:	f090 0f00 	teq	r0, #0
  406280:	bf04      	itt	eq
  406282:	2100      	moveq	r1, #0
  406284:	4770      	bxeq	lr
  406286:	b530      	push	{r4, r5, lr}
  406288:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40628c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406290:	f04f 0500 	mov.w	r5, #0
  406294:	f04f 0100 	mov.w	r1, #0
  406298:	e750      	b.n	40613c <__adddf3+0x138>
  40629a:	bf00      	nop

0040629c <__aeabi_i2d>:
  40629c:	f090 0f00 	teq	r0, #0
  4062a0:	bf04      	itt	eq
  4062a2:	2100      	moveq	r1, #0
  4062a4:	4770      	bxeq	lr
  4062a6:	b530      	push	{r4, r5, lr}
  4062a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4062ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4062b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4062b4:	bf48      	it	mi
  4062b6:	4240      	negmi	r0, r0
  4062b8:	f04f 0100 	mov.w	r1, #0
  4062bc:	e73e      	b.n	40613c <__adddf3+0x138>
  4062be:	bf00      	nop

004062c0 <__aeabi_f2d>:
  4062c0:	0042      	lsls	r2, r0, #1
  4062c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4062c6:	ea4f 0131 	mov.w	r1, r1, rrx
  4062ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4062ce:	bf1f      	itttt	ne
  4062d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4062d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4062d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4062dc:	4770      	bxne	lr
  4062de:	f092 0f00 	teq	r2, #0
  4062e2:	bf14      	ite	ne
  4062e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4062e8:	4770      	bxeq	lr
  4062ea:	b530      	push	{r4, r5, lr}
  4062ec:	f44f 7460 	mov.w	r4, #896	; 0x380
  4062f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4062f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4062f8:	e720      	b.n	40613c <__adddf3+0x138>
  4062fa:	bf00      	nop

004062fc <__aeabi_ul2d>:
  4062fc:	ea50 0201 	orrs.w	r2, r0, r1
  406300:	bf08      	it	eq
  406302:	4770      	bxeq	lr
  406304:	b530      	push	{r4, r5, lr}
  406306:	f04f 0500 	mov.w	r5, #0
  40630a:	e00a      	b.n	406322 <__aeabi_l2d+0x16>

0040630c <__aeabi_l2d>:
  40630c:	ea50 0201 	orrs.w	r2, r0, r1
  406310:	bf08      	it	eq
  406312:	4770      	bxeq	lr
  406314:	b530      	push	{r4, r5, lr}
  406316:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40631a:	d502      	bpl.n	406322 <__aeabi_l2d+0x16>
  40631c:	4240      	negs	r0, r0
  40631e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406322:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406326:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40632a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40632e:	f43f aedc 	beq.w	4060ea <__adddf3+0xe6>
  406332:	f04f 0203 	mov.w	r2, #3
  406336:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40633a:	bf18      	it	ne
  40633c:	3203      	addne	r2, #3
  40633e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406342:	bf18      	it	ne
  406344:	3203      	addne	r2, #3
  406346:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40634a:	f1c2 0320 	rsb	r3, r2, #32
  40634e:	fa00 fc03 	lsl.w	ip, r0, r3
  406352:	fa20 f002 	lsr.w	r0, r0, r2
  406356:	fa01 fe03 	lsl.w	lr, r1, r3
  40635a:	ea40 000e 	orr.w	r0, r0, lr
  40635e:	fa21 f102 	lsr.w	r1, r1, r2
  406362:	4414      	add	r4, r2
  406364:	e6c1      	b.n	4060ea <__adddf3+0xe6>
  406366:	bf00      	nop

00406368 <__aeabi_dmul>:
  406368:	b570      	push	{r4, r5, r6, lr}
  40636a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40636e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406372:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406376:	bf1d      	ittte	ne
  406378:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40637c:	ea94 0f0c 	teqne	r4, ip
  406380:	ea95 0f0c 	teqne	r5, ip
  406384:	f000 f8de 	bleq	406544 <__aeabi_dmul+0x1dc>
  406388:	442c      	add	r4, r5
  40638a:	ea81 0603 	eor.w	r6, r1, r3
  40638e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  406392:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  406396:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40639a:	bf18      	it	ne
  40639c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4063a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4063a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4063a8:	d038      	beq.n	40641c <__aeabi_dmul+0xb4>
  4063aa:	fba0 ce02 	umull	ip, lr, r0, r2
  4063ae:	f04f 0500 	mov.w	r5, #0
  4063b2:	fbe1 e502 	umlal	lr, r5, r1, r2
  4063b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4063ba:	fbe0 e503 	umlal	lr, r5, r0, r3
  4063be:	f04f 0600 	mov.w	r6, #0
  4063c2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4063c6:	f09c 0f00 	teq	ip, #0
  4063ca:	bf18      	it	ne
  4063cc:	f04e 0e01 	orrne.w	lr, lr, #1
  4063d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4063d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4063d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4063dc:	d204      	bcs.n	4063e8 <__aeabi_dmul+0x80>
  4063de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4063e2:	416d      	adcs	r5, r5
  4063e4:	eb46 0606 	adc.w	r6, r6, r6
  4063e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4063ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4063f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4063f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4063f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4063fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406400:	bf88      	it	hi
  406402:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406406:	d81e      	bhi.n	406446 <__aeabi_dmul+0xde>
  406408:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40640c:	bf08      	it	eq
  40640e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  406412:	f150 0000 	adcs.w	r0, r0, #0
  406416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40641a:	bd70      	pop	{r4, r5, r6, pc}
  40641c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  406420:	ea46 0101 	orr.w	r1, r6, r1
  406424:	ea40 0002 	orr.w	r0, r0, r2
  406428:	ea81 0103 	eor.w	r1, r1, r3
  40642c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  406430:	bfc2      	ittt	gt
  406432:	ebd4 050c 	rsbsgt	r5, r4, ip
  406436:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40643a:	bd70      	popgt	{r4, r5, r6, pc}
  40643c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406440:	f04f 0e00 	mov.w	lr, #0
  406444:	3c01      	subs	r4, #1
  406446:	f300 80ab 	bgt.w	4065a0 <__aeabi_dmul+0x238>
  40644a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40644e:	bfde      	ittt	le
  406450:	2000      	movle	r0, #0
  406452:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  406456:	bd70      	pople	{r4, r5, r6, pc}
  406458:	f1c4 0400 	rsb	r4, r4, #0
  40645c:	3c20      	subs	r4, #32
  40645e:	da35      	bge.n	4064cc <__aeabi_dmul+0x164>
  406460:	340c      	adds	r4, #12
  406462:	dc1b      	bgt.n	40649c <__aeabi_dmul+0x134>
  406464:	f104 0414 	add.w	r4, r4, #20
  406468:	f1c4 0520 	rsb	r5, r4, #32
  40646c:	fa00 f305 	lsl.w	r3, r0, r5
  406470:	fa20 f004 	lsr.w	r0, r0, r4
  406474:	fa01 f205 	lsl.w	r2, r1, r5
  406478:	ea40 0002 	orr.w	r0, r0, r2
  40647c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  406480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406488:	fa21 f604 	lsr.w	r6, r1, r4
  40648c:	eb42 0106 	adc.w	r1, r2, r6
  406490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406494:	bf08      	it	eq
  406496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40649a:	bd70      	pop	{r4, r5, r6, pc}
  40649c:	f1c4 040c 	rsb	r4, r4, #12
  4064a0:	f1c4 0520 	rsb	r5, r4, #32
  4064a4:	fa00 f304 	lsl.w	r3, r0, r4
  4064a8:	fa20 f005 	lsr.w	r0, r0, r5
  4064ac:	fa01 f204 	lsl.w	r2, r1, r4
  4064b0:	ea40 0002 	orr.w	r0, r0, r2
  4064b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4064b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4064bc:	f141 0100 	adc.w	r1, r1, #0
  4064c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4064c4:	bf08      	it	eq
  4064c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4064ca:	bd70      	pop	{r4, r5, r6, pc}
  4064cc:	f1c4 0520 	rsb	r5, r4, #32
  4064d0:	fa00 f205 	lsl.w	r2, r0, r5
  4064d4:	ea4e 0e02 	orr.w	lr, lr, r2
  4064d8:	fa20 f304 	lsr.w	r3, r0, r4
  4064dc:	fa01 f205 	lsl.w	r2, r1, r5
  4064e0:	ea43 0302 	orr.w	r3, r3, r2
  4064e4:	fa21 f004 	lsr.w	r0, r1, r4
  4064e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4064ec:	fa21 f204 	lsr.w	r2, r1, r4
  4064f0:	ea20 0002 	bic.w	r0, r0, r2
  4064f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4064f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4064fc:	bf08      	it	eq
  4064fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406502:	bd70      	pop	{r4, r5, r6, pc}
  406504:	f094 0f00 	teq	r4, #0
  406508:	d10f      	bne.n	40652a <__aeabi_dmul+0x1c2>
  40650a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40650e:	0040      	lsls	r0, r0, #1
  406510:	eb41 0101 	adc.w	r1, r1, r1
  406514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406518:	bf08      	it	eq
  40651a:	3c01      	subeq	r4, #1
  40651c:	d0f7      	beq.n	40650e <__aeabi_dmul+0x1a6>
  40651e:	ea41 0106 	orr.w	r1, r1, r6
  406522:	f095 0f00 	teq	r5, #0
  406526:	bf18      	it	ne
  406528:	4770      	bxne	lr
  40652a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40652e:	0052      	lsls	r2, r2, #1
  406530:	eb43 0303 	adc.w	r3, r3, r3
  406534:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406538:	bf08      	it	eq
  40653a:	3d01      	subeq	r5, #1
  40653c:	d0f7      	beq.n	40652e <__aeabi_dmul+0x1c6>
  40653e:	ea43 0306 	orr.w	r3, r3, r6
  406542:	4770      	bx	lr
  406544:	ea94 0f0c 	teq	r4, ip
  406548:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40654c:	bf18      	it	ne
  40654e:	ea95 0f0c 	teqne	r5, ip
  406552:	d00c      	beq.n	40656e <__aeabi_dmul+0x206>
  406554:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406558:	bf18      	it	ne
  40655a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40655e:	d1d1      	bne.n	406504 <__aeabi_dmul+0x19c>
  406560:	ea81 0103 	eor.w	r1, r1, r3
  406564:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406568:	f04f 0000 	mov.w	r0, #0
  40656c:	bd70      	pop	{r4, r5, r6, pc}
  40656e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406572:	bf06      	itte	eq
  406574:	4610      	moveq	r0, r2
  406576:	4619      	moveq	r1, r3
  406578:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40657c:	d019      	beq.n	4065b2 <__aeabi_dmul+0x24a>
  40657e:	ea94 0f0c 	teq	r4, ip
  406582:	d102      	bne.n	40658a <__aeabi_dmul+0x222>
  406584:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406588:	d113      	bne.n	4065b2 <__aeabi_dmul+0x24a>
  40658a:	ea95 0f0c 	teq	r5, ip
  40658e:	d105      	bne.n	40659c <__aeabi_dmul+0x234>
  406590:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406594:	bf1c      	itt	ne
  406596:	4610      	movne	r0, r2
  406598:	4619      	movne	r1, r3
  40659a:	d10a      	bne.n	4065b2 <__aeabi_dmul+0x24a>
  40659c:	ea81 0103 	eor.w	r1, r1, r3
  4065a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4065a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4065a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4065ac:	f04f 0000 	mov.w	r0, #0
  4065b0:	bd70      	pop	{r4, r5, r6, pc}
  4065b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4065b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4065ba:	bd70      	pop	{r4, r5, r6, pc}

004065bc <__aeabi_ddiv>:
  4065bc:	b570      	push	{r4, r5, r6, lr}
  4065be:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4065c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4065c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4065ca:	bf1d      	ittte	ne
  4065cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4065d0:	ea94 0f0c 	teqne	r4, ip
  4065d4:	ea95 0f0c 	teqne	r5, ip
  4065d8:	f000 f8a7 	bleq	40672a <__aeabi_ddiv+0x16e>
  4065dc:	eba4 0405 	sub.w	r4, r4, r5
  4065e0:	ea81 0e03 	eor.w	lr, r1, r3
  4065e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4065e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4065ec:	f000 8088 	beq.w	406700 <__aeabi_ddiv+0x144>
  4065f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4065f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4065f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4065fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406600:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406604:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406608:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40660c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406610:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406614:	429d      	cmp	r5, r3
  406616:	bf08      	it	eq
  406618:	4296      	cmpeq	r6, r2
  40661a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40661e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406622:	d202      	bcs.n	40662a <__aeabi_ddiv+0x6e>
  406624:	085b      	lsrs	r3, r3, #1
  406626:	ea4f 0232 	mov.w	r2, r2, rrx
  40662a:	1ab6      	subs	r6, r6, r2
  40662c:	eb65 0503 	sbc.w	r5, r5, r3
  406630:	085b      	lsrs	r3, r3, #1
  406632:	ea4f 0232 	mov.w	r2, r2, rrx
  406636:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40663a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40663e:	ebb6 0e02 	subs.w	lr, r6, r2
  406642:	eb75 0e03 	sbcs.w	lr, r5, r3
  406646:	bf22      	ittt	cs
  406648:	1ab6      	subcs	r6, r6, r2
  40664a:	4675      	movcs	r5, lr
  40664c:	ea40 000c 	orrcs.w	r0, r0, ip
  406650:	085b      	lsrs	r3, r3, #1
  406652:	ea4f 0232 	mov.w	r2, r2, rrx
  406656:	ebb6 0e02 	subs.w	lr, r6, r2
  40665a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40665e:	bf22      	ittt	cs
  406660:	1ab6      	subcs	r6, r6, r2
  406662:	4675      	movcs	r5, lr
  406664:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406668:	085b      	lsrs	r3, r3, #1
  40666a:	ea4f 0232 	mov.w	r2, r2, rrx
  40666e:	ebb6 0e02 	subs.w	lr, r6, r2
  406672:	eb75 0e03 	sbcs.w	lr, r5, r3
  406676:	bf22      	ittt	cs
  406678:	1ab6      	subcs	r6, r6, r2
  40667a:	4675      	movcs	r5, lr
  40667c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406680:	085b      	lsrs	r3, r3, #1
  406682:	ea4f 0232 	mov.w	r2, r2, rrx
  406686:	ebb6 0e02 	subs.w	lr, r6, r2
  40668a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40668e:	bf22      	ittt	cs
  406690:	1ab6      	subcs	r6, r6, r2
  406692:	4675      	movcs	r5, lr
  406694:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406698:	ea55 0e06 	orrs.w	lr, r5, r6
  40669c:	d018      	beq.n	4066d0 <__aeabi_ddiv+0x114>
  40669e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4066a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4066a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4066aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4066ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4066b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4066b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4066ba:	d1c0      	bne.n	40663e <__aeabi_ddiv+0x82>
  4066bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4066c0:	d10b      	bne.n	4066da <__aeabi_ddiv+0x11e>
  4066c2:	ea41 0100 	orr.w	r1, r1, r0
  4066c6:	f04f 0000 	mov.w	r0, #0
  4066ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4066ce:	e7b6      	b.n	40663e <__aeabi_ddiv+0x82>
  4066d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4066d4:	bf04      	itt	eq
  4066d6:	4301      	orreq	r1, r0
  4066d8:	2000      	moveq	r0, #0
  4066da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4066de:	bf88      	it	hi
  4066e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4066e4:	f63f aeaf 	bhi.w	406446 <__aeabi_dmul+0xde>
  4066e8:	ebb5 0c03 	subs.w	ip, r5, r3
  4066ec:	bf04      	itt	eq
  4066ee:	ebb6 0c02 	subseq.w	ip, r6, r2
  4066f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4066f6:	f150 0000 	adcs.w	r0, r0, #0
  4066fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4066fe:	bd70      	pop	{r4, r5, r6, pc}
  406700:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406704:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406708:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40670c:	bfc2      	ittt	gt
  40670e:	ebd4 050c 	rsbsgt	r5, r4, ip
  406712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406716:	bd70      	popgt	{r4, r5, r6, pc}
  406718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40671c:	f04f 0e00 	mov.w	lr, #0
  406720:	3c01      	subs	r4, #1
  406722:	e690      	b.n	406446 <__aeabi_dmul+0xde>
  406724:	ea45 0e06 	orr.w	lr, r5, r6
  406728:	e68d      	b.n	406446 <__aeabi_dmul+0xde>
  40672a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40672e:	ea94 0f0c 	teq	r4, ip
  406732:	bf08      	it	eq
  406734:	ea95 0f0c 	teqeq	r5, ip
  406738:	f43f af3b 	beq.w	4065b2 <__aeabi_dmul+0x24a>
  40673c:	ea94 0f0c 	teq	r4, ip
  406740:	d10a      	bne.n	406758 <__aeabi_ddiv+0x19c>
  406742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406746:	f47f af34 	bne.w	4065b2 <__aeabi_dmul+0x24a>
  40674a:	ea95 0f0c 	teq	r5, ip
  40674e:	f47f af25 	bne.w	40659c <__aeabi_dmul+0x234>
  406752:	4610      	mov	r0, r2
  406754:	4619      	mov	r1, r3
  406756:	e72c      	b.n	4065b2 <__aeabi_dmul+0x24a>
  406758:	ea95 0f0c 	teq	r5, ip
  40675c:	d106      	bne.n	40676c <__aeabi_ddiv+0x1b0>
  40675e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406762:	f43f aefd 	beq.w	406560 <__aeabi_dmul+0x1f8>
  406766:	4610      	mov	r0, r2
  406768:	4619      	mov	r1, r3
  40676a:	e722      	b.n	4065b2 <__aeabi_dmul+0x24a>
  40676c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406770:	bf18      	it	ne
  406772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406776:	f47f aec5 	bne.w	406504 <__aeabi_dmul+0x19c>
  40677a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40677e:	f47f af0d 	bne.w	40659c <__aeabi_dmul+0x234>
  406782:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406786:	f47f aeeb 	bne.w	406560 <__aeabi_dmul+0x1f8>
  40678a:	e712      	b.n	4065b2 <__aeabi_dmul+0x24a>

0040678c <__gedf2>:
  40678c:	f04f 3cff 	mov.w	ip, #4294967295
  406790:	e006      	b.n	4067a0 <__cmpdf2+0x4>
  406792:	bf00      	nop

00406794 <__ledf2>:
  406794:	f04f 0c01 	mov.w	ip, #1
  406798:	e002      	b.n	4067a0 <__cmpdf2+0x4>
  40679a:	bf00      	nop

0040679c <__cmpdf2>:
  40679c:	f04f 0c01 	mov.w	ip, #1
  4067a0:	f84d cd04 	str.w	ip, [sp, #-4]!
  4067a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4067a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4067ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4067b0:	bf18      	it	ne
  4067b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4067b6:	d01b      	beq.n	4067f0 <__cmpdf2+0x54>
  4067b8:	b001      	add	sp, #4
  4067ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4067be:	bf0c      	ite	eq
  4067c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4067c4:	ea91 0f03 	teqne	r1, r3
  4067c8:	bf02      	ittt	eq
  4067ca:	ea90 0f02 	teqeq	r0, r2
  4067ce:	2000      	moveq	r0, #0
  4067d0:	4770      	bxeq	lr
  4067d2:	f110 0f00 	cmn.w	r0, #0
  4067d6:	ea91 0f03 	teq	r1, r3
  4067da:	bf58      	it	pl
  4067dc:	4299      	cmppl	r1, r3
  4067de:	bf08      	it	eq
  4067e0:	4290      	cmpeq	r0, r2
  4067e2:	bf2c      	ite	cs
  4067e4:	17d8      	asrcs	r0, r3, #31
  4067e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4067ea:	f040 0001 	orr.w	r0, r0, #1
  4067ee:	4770      	bx	lr
  4067f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4067f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4067f8:	d102      	bne.n	406800 <__cmpdf2+0x64>
  4067fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4067fe:	d107      	bne.n	406810 <__cmpdf2+0x74>
  406800:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406808:	d1d6      	bne.n	4067b8 <__cmpdf2+0x1c>
  40680a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40680e:	d0d3      	beq.n	4067b8 <__cmpdf2+0x1c>
  406810:	f85d 0b04 	ldr.w	r0, [sp], #4
  406814:	4770      	bx	lr
  406816:	bf00      	nop

00406818 <__aeabi_cdrcmple>:
  406818:	4684      	mov	ip, r0
  40681a:	4610      	mov	r0, r2
  40681c:	4662      	mov	r2, ip
  40681e:	468c      	mov	ip, r1
  406820:	4619      	mov	r1, r3
  406822:	4663      	mov	r3, ip
  406824:	e000      	b.n	406828 <__aeabi_cdcmpeq>
  406826:	bf00      	nop

00406828 <__aeabi_cdcmpeq>:
  406828:	b501      	push	{r0, lr}
  40682a:	f7ff ffb7 	bl	40679c <__cmpdf2>
  40682e:	2800      	cmp	r0, #0
  406830:	bf48      	it	mi
  406832:	f110 0f00 	cmnmi.w	r0, #0
  406836:	bd01      	pop	{r0, pc}

00406838 <__aeabi_dcmpeq>:
  406838:	f84d ed08 	str.w	lr, [sp, #-8]!
  40683c:	f7ff fff4 	bl	406828 <__aeabi_cdcmpeq>
  406840:	bf0c      	ite	eq
  406842:	2001      	moveq	r0, #1
  406844:	2000      	movne	r0, #0
  406846:	f85d fb08 	ldr.w	pc, [sp], #8
  40684a:	bf00      	nop

0040684c <__aeabi_dcmplt>:
  40684c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406850:	f7ff ffea 	bl	406828 <__aeabi_cdcmpeq>
  406854:	bf34      	ite	cc
  406856:	2001      	movcc	r0, #1
  406858:	2000      	movcs	r0, #0
  40685a:	f85d fb08 	ldr.w	pc, [sp], #8
  40685e:	bf00      	nop

00406860 <__aeabi_dcmple>:
  406860:	f84d ed08 	str.w	lr, [sp, #-8]!
  406864:	f7ff ffe0 	bl	406828 <__aeabi_cdcmpeq>
  406868:	bf94      	ite	ls
  40686a:	2001      	movls	r0, #1
  40686c:	2000      	movhi	r0, #0
  40686e:	f85d fb08 	ldr.w	pc, [sp], #8
  406872:	bf00      	nop

00406874 <__aeabi_dcmpge>:
  406874:	f84d ed08 	str.w	lr, [sp, #-8]!
  406878:	f7ff ffce 	bl	406818 <__aeabi_cdrcmple>
  40687c:	bf94      	ite	ls
  40687e:	2001      	movls	r0, #1
  406880:	2000      	movhi	r0, #0
  406882:	f85d fb08 	ldr.w	pc, [sp], #8
  406886:	bf00      	nop

00406888 <__aeabi_dcmpgt>:
  406888:	f84d ed08 	str.w	lr, [sp, #-8]!
  40688c:	f7ff ffc4 	bl	406818 <__aeabi_cdrcmple>
  406890:	bf34      	ite	cc
  406892:	2001      	movcc	r0, #1
  406894:	2000      	movcs	r0, #0
  406896:	f85d fb08 	ldr.w	pc, [sp], #8
  40689a:	bf00      	nop

0040689c <__aeabi_dcmpun>:
  40689c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4068a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4068a4:	d102      	bne.n	4068ac <__aeabi_dcmpun+0x10>
  4068a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4068aa:	d10a      	bne.n	4068c2 <__aeabi_dcmpun+0x26>
  4068ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4068b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4068b4:	d102      	bne.n	4068bc <__aeabi_dcmpun+0x20>
  4068b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4068ba:	d102      	bne.n	4068c2 <__aeabi_dcmpun+0x26>
  4068bc:	f04f 0000 	mov.w	r0, #0
  4068c0:	4770      	bx	lr
  4068c2:	f04f 0001 	mov.w	r0, #1
  4068c6:	4770      	bx	lr

004068c8 <__aeabi_d2iz>:
  4068c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4068cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4068d0:	d215      	bcs.n	4068fe <__aeabi_d2iz+0x36>
  4068d2:	d511      	bpl.n	4068f8 <__aeabi_d2iz+0x30>
  4068d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4068d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4068dc:	d912      	bls.n	406904 <__aeabi_d2iz+0x3c>
  4068de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4068e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4068e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4068ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4068ee:	fa23 f002 	lsr.w	r0, r3, r2
  4068f2:	bf18      	it	ne
  4068f4:	4240      	negne	r0, r0
  4068f6:	4770      	bx	lr
  4068f8:	f04f 0000 	mov.w	r0, #0
  4068fc:	4770      	bx	lr
  4068fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406902:	d105      	bne.n	406910 <__aeabi_d2iz+0x48>
  406904:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406908:	bf08      	it	eq
  40690a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40690e:	4770      	bx	lr
  406910:	f04f 0000 	mov.w	r0, #0
  406914:	4770      	bx	lr
  406916:	bf00      	nop

00406918 <__aeabi_uldivmod>:
  406918:	b953      	cbnz	r3, 406930 <__aeabi_uldivmod+0x18>
  40691a:	b94a      	cbnz	r2, 406930 <__aeabi_uldivmod+0x18>
  40691c:	2900      	cmp	r1, #0
  40691e:	bf08      	it	eq
  406920:	2800      	cmpeq	r0, #0
  406922:	bf1c      	itt	ne
  406924:	f04f 31ff 	movne.w	r1, #4294967295
  406928:	f04f 30ff 	movne.w	r0, #4294967295
  40692c:	f000 b97a 	b.w	406c24 <__aeabi_idiv0>
  406930:	f1ad 0c08 	sub.w	ip, sp, #8
  406934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406938:	f000 f806 	bl	406948 <__udivmoddi4>
  40693c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406944:	b004      	add	sp, #16
  406946:	4770      	bx	lr

00406948 <__udivmoddi4>:
  406948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40694c:	468c      	mov	ip, r1
  40694e:	460d      	mov	r5, r1
  406950:	4604      	mov	r4, r0
  406952:	9e08      	ldr	r6, [sp, #32]
  406954:	2b00      	cmp	r3, #0
  406956:	d151      	bne.n	4069fc <__udivmoddi4+0xb4>
  406958:	428a      	cmp	r2, r1
  40695a:	4617      	mov	r7, r2
  40695c:	d96d      	bls.n	406a3a <__udivmoddi4+0xf2>
  40695e:	fab2 fe82 	clz	lr, r2
  406962:	f1be 0f00 	cmp.w	lr, #0
  406966:	d00b      	beq.n	406980 <__udivmoddi4+0x38>
  406968:	f1ce 0c20 	rsb	ip, lr, #32
  40696c:	fa01 f50e 	lsl.w	r5, r1, lr
  406970:	fa20 fc0c 	lsr.w	ip, r0, ip
  406974:	fa02 f70e 	lsl.w	r7, r2, lr
  406978:	ea4c 0c05 	orr.w	ip, ip, r5
  40697c:	fa00 f40e 	lsl.w	r4, r0, lr
  406980:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406984:	0c25      	lsrs	r5, r4, #16
  406986:	fbbc f8fa 	udiv	r8, ip, sl
  40698a:	fa1f f987 	uxth.w	r9, r7
  40698e:	fb0a cc18 	mls	ip, sl, r8, ip
  406992:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406996:	fb08 f309 	mul.w	r3, r8, r9
  40699a:	42ab      	cmp	r3, r5
  40699c:	d90a      	bls.n	4069b4 <__udivmoddi4+0x6c>
  40699e:	19ed      	adds	r5, r5, r7
  4069a0:	f108 32ff 	add.w	r2, r8, #4294967295
  4069a4:	f080 8123 	bcs.w	406bee <__udivmoddi4+0x2a6>
  4069a8:	42ab      	cmp	r3, r5
  4069aa:	f240 8120 	bls.w	406bee <__udivmoddi4+0x2a6>
  4069ae:	f1a8 0802 	sub.w	r8, r8, #2
  4069b2:	443d      	add	r5, r7
  4069b4:	1aed      	subs	r5, r5, r3
  4069b6:	b2a4      	uxth	r4, r4
  4069b8:	fbb5 f0fa 	udiv	r0, r5, sl
  4069bc:	fb0a 5510 	mls	r5, sl, r0, r5
  4069c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4069c4:	fb00 f909 	mul.w	r9, r0, r9
  4069c8:	45a1      	cmp	r9, r4
  4069ca:	d909      	bls.n	4069e0 <__udivmoddi4+0x98>
  4069cc:	19e4      	adds	r4, r4, r7
  4069ce:	f100 33ff 	add.w	r3, r0, #4294967295
  4069d2:	f080 810a 	bcs.w	406bea <__udivmoddi4+0x2a2>
  4069d6:	45a1      	cmp	r9, r4
  4069d8:	f240 8107 	bls.w	406bea <__udivmoddi4+0x2a2>
  4069dc:	3802      	subs	r0, #2
  4069de:	443c      	add	r4, r7
  4069e0:	eba4 0409 	sub.w	r4, r4, r9
  4069e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4069e8:	2100      	movs	r1, #0
  4069ea:	2e00      	cmp	r6, #0
  4069ec:	d061      	beq.n	406ab2 <__udivmoddi4+0x16a>
  4069ee:	fa24 f40e 	lsr.w	r4, r4, lr
  4069f2:	2300      	movs	r3, #0
  4069f4:	6034      	str	r4, [r6, #0]
  4069f6:	6073      	str	r3, [r6, #4]
  4069f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069fc:	428b      	cmp	r3, r1
  4069fe:	d907      	bls.n	406a10 <__udivmoddi4+0xc8>
  406a00:	2e00      	cmp	r6, #0
  406a02:	d054      	beq.n	406aae <__udivmoddi4+0x166>
  406a04:	2100      	movs	r1, #0
  406a06:	e886 0021 	stmia.w	r6, {r0, r5}
  406a0a:	4608      	mov	r0, r1
  406a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a10:	fab3 f183 	clz	r1, r3
  406a14:	2900      	cmp	r1, #0
  406a16:	f040 808e 	bne.w	406b36 <__udivmoddi4+0x1ee>
  406a1a:	42ab      	cmp	r3, r5
  406a1c:	d302      	bcc.n	406a24 <__udivmoddi4+0xdc>
  406a1e:	4282      	cmp	r2, r0
  406a20:	f200 80fa 	bhi.w	406c18 <__udivmoddi4+0x2d0>
  406a24:	1a84      	subs	r4, r0, r2
  406a26:	eb65 0503 	sbc.w	r5, r5, r3
  406a2a:	2001      	movs	r0, #1
  406a2c:	46ac      	mov	ip, r5
  406a2e:	2e00      	cmp	r6, #0
  406a30:	d03f      	beq.n	406ab2 <__udivmoddi4+0x16a>
  406a32:	e886 1010 	stmia.w	r6, {r4, ip}
  406a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a3a:	b912      	cbnz	r2, 406a42 <__udivmoddi4+0xfa>
  406a3c:	2701      	movs	r7, #1
  406a3e:	fbb7 f7f2 	udiv	r7, r7, r2
  406a42:	fab7 fe87 	clz	lr, r7
  406a46:	f1be 0f00 	cmp.w	lr, #0
  406a4a:	d134      	bne.n	406ab6 <__udivmoddi4+0x16e>
  406a4c:	1beb      	subs	r3, r5, r7
  406a4e:	0c3a      	lsrs	r2, r7, #16
  406a50:	fa1f fc87 	uxth.w	ip, r7
  406a54:	2101      	movs	r1, #1
  406a56:	fbb3 f8f2 	udiv	r8, r3, r2
  406a5a:	0c25      	lsrs	r5, r4, #16
  406a5c:	fb02 3318 	mls	r3, r2, r8, r3
  406a60:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406a64:	fb0c f308 	mul.w	r3, ip, r8
  406a68:	42ab      	cmp	r3, r5
  406a6a:	d907      	bls.n	406a7c <__udivmoddi4+0x134>
  406a6c:	19ed      	adds	r5, r5, r7
  406a6e:	f108 30ff 	add.w	r0, r8, #4294967295
  406a72:	d202      	bcs.n	406a7a <__udivmoddi4+0x132>
  406a74:	42ab      	cmp	r3, r5
  406a76:	f200 80d1 	bhi.w	406c1c <__udivmoddi4+0x2d4>
  406a7a:	4680      	mov	r8, r0
  406a7c:	1aed      	subs	r5, r5, r3
  406a7e:	b2a3      	uxth	r3, r4
  406a80:	fbb5 f0f2 	udiv	r0, r5, r2
  406a84:	fb02 5510 	mls	r5, r2, r0, r5
  406a88:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406a8c:	fb0c fc00 	mul.w	ip, ip, r0
  406a90:	45a4      	cmp	ip, r4
  406a92:	d907      	bls.n	406aa4 <__udivmoddi4+0x15c>
  406a94:	19e4      	adds	r4, r4, r7
  406a96:	f100 33ff 	add.w	r3, r0, #4294967295
  406a9a:	d202      	bcs.n	406aa2 <__udivmoddi4+0x15a>
  406a9c:	45a4      	cmp	ip, r4
  406a9e:	f200 80b8 	bhi.w	406c12 <__udivmoddi4+0x2ca>
  406aa2:	4618      	mov	r0, r3
  406aa4:	eba4 040c 	sub.w	r4, r4, ip
  406aa8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406aac:	e79d      	b.n	4069ea <__udivmoddi4+0xa2>
  406aae:	4631      	mov	r1, r6
  406ab0:	4630      	mov	r0, r6
  406ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ab6:	f1ce 0420 	rsb	r4, lr, #32
  406aba:	fa05 f30e 	lsl.w	r3, r5, lr
  406abe:	fa07 f70e 	lsl.w	r7, r7, lr
  406ac2:	fa20 f804 	lsr.w	r8, r0, r4
  406ac6:	0c3a      	lsrs	r2, r7, #16
  406ac8:	fa25 f404 	lsr.w	r4, r5, r4
  406acc:	ea48 0803 	orr.w	r8, r8, r3
  406ad0:	fbb4 f1f2 	udiv	r1, r4, r2
  406ad4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406ad8:	fb02 4411 	mls	r4, r2, r1, r4
  406adc:	fa1f fc87 	uxth.w	ip, r7
  406ae0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406ae4:	fb01 f30c 	mul.w	r3, r1, ip
  406ae8:	42ab      	cmp	r3, r5
  406aea:	fa00 f40e 	lsl.w	r4, r0, lr
  406aee:	d909      	bls.n	406b04 <__udivmoddi4+0x1bc>
  406af0:	19ed      	adds	r5, r5, r7
  406af2:	f101 30ff 	add.w	r0, r1, #4294967295
  406af6:	f080 808a 	bcs.w	406c0e <__udivmoddi4+0x2c6>
  406afa:	42ab      	cmp	r3, r5
  406afc:	f240 8087 	bls.w	406c0e <__udivmoddi4+0x2c6>
  406b00:	3902      	subs	r1, #2
  406b02:	443d      	add	r5, r7
  406b04:	1aeb      	subs	r3, r5, r3
  406b06:	fa1f f588 	uxth.w	r5, r8
  406b0a:	fbb3 f0f2 	udiv	r0, r3, r2
  406b0e:	fb02 3310 	mls	r3, r2, r0, r3
  406b12:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406b16:	fb00 f30c 	mul.w	r3, r0, ip
  406b1a:	42ab      	cmp	r3, r5
  406b1c:	d907      	bls.n	406b2e <__udivmoddi4+0x1e6>
  406b1e:	19ed      	adds	r5, r5, r7
  406b20:	f100 38ff 	add.w	r8, r0, #4294967295
  406b24:	d26f      	bcs.n	406c06 <__udivmoddi4+0x2be>
  406b26:	42ab      	cmp	r3, r5
  406b28:	d96d      	bls.n	406c06 <__udivmoddi4+0x2be>
  406b2a:	3802      	subs	r0, #2
  406b2c:	443d      	add	r5, r7
  406b2e:	1aeb      	subs	r3, r5, r3
  406b30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406b34:	e78f      	b.n	406a56 <__udivmoddi4+0x10e>
  406b36:	f1c1 0720 	rsb	r7, r1, #32
  406b3a:	fa22 f807 	lsr.w	r8, r2, r7
  406b3e:	408b      	lsls	r3, r1
  406b40:	fa05 f401 	lsl.w	r4, r5, r1
  406b44:	ea48 0303 	orr.w	r3, r8, r3
  406b48:	fa20 fe07 	lsr.w	lr, r0, r7
  406b4c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406b50:	40fd      	lsrs	r5, r7
  406b52:	ea4e 0e04 	orr.w	lr, lr, r4
  406b56:	fbb5 f9fc 	udiv	r9, r5, ip
  406b5a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406b5e:	fb0c 5519 	mls	r5, ip, r9, r5
  406b62:	fa1f f883 	uxth.w	r8, r3
  406b66:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406b6a:	fb09 f408 	mul.w	r4, r9, r8
  406b6e:	42ac      	cmp	r4, r5
  406b70:	fa02 f201 	lsl.w	r2, r2, r1
  406b74:	fa00 fa01 	lsl.w	sl, r0, r1
  406b78:	d908      	bls.n	406b8c <__udivmoddi4+0x244>
  406b7a:	18ed      	adds	r5, r5, r3
  406b7c:	f109 30ff 	add.w	r0, r9, #4294967295
  406b80:	d243      	bcs.n	406c0a <__udivmoddi4+0x2c2>
  406b82:	42ac      	cmp	r4, r5
  406b84:	d941      	bls.n	406c0a <__udivmoddi4+0x2c2>
  406b86:	f1a9 0902 	sub.w	r9, r9, #2
  406b8a:	441d      	add	r5, r3
  406b8c:	1b2d      	subs	r5, r5, r4
  406b8e:	fa1f fe8e 	uxth.w	lr, lr
  406b92:	fbb5 f0fc 	udiv	r0, r5, ip
  406b96:	fb0c 5510 	mls	r5, ip, r0, r5
  406b9a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406b9e:	fb00 f808 	mul.w	r8, r0, r8
  406ba2:	45a0      	cmp	r8, r4
  406ba4:	d907      	bls.n	406bb6 <__udivmoddi4+0x26e>
  406ba6:	18e4      	adds	r4, r4, r3
  406ba8:	f100 35ff 	add.w	r5, r0, #4294967295
  406bac:	d229      	bcs.n	406c02 <__udivmoddi4+0x2ba>
  406bae:	45a0      	cmp	r8, r4
  406bb0:	d927      	bls.n	406c02 <__udivmoddi4+0x2ba>
  406bb2:	3802      	subs	r0, #2
  406bb4:	441c      	add	r4, r3
  406bb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406bba:	eba4 0408 	sub.w	r4, r4, r8
  406bbe:	fba0 8902 	umull	r8, r9, r0, r2
  406bc2:	454c      	cmp	r4, r9
  406bc4:	46c6      	mov	lr, r8
  406bc6:	464d      	mov	r5, r9
  406bc8:	d315      	bcc.n	406bf6 <__udivmoddi4+0x2ae>
  406bca:	d012      	beq.n	406bf2 <__udivmoddi4+0x2aa>
  406bcc:	b156      	cbz	r6, 406be4 <__udivmoddi4+0x29c>
  406bce:	ebba 030e 	subs.w	r3, sl, lr
  406bd2:	eb64 0405 	sbc.w	r4, r4, r5
  406bd6:	fa04 f707 	lsl.w	r7, r4, r7
  406bda:	40cb      	lsrs	r3, r1
  406bdc:	431f      	orrs	r7, r3
  406bde:	40cc      	lsrs	r4, r1
  406be0:	6037      	str	r7, [r6, #0]
  406be2:	6074      	str	r4, [r6, #4]
  406be4:	2100      	movs	r1, #0
  406be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bea:	4618      	mov	r0, r3
  406bec:	e6f8      	b.n	4069e0 <__udivmoddi4+0x98>
  406bee:	4690      	mov	r8, r2
  406bf0:	e6e0      	b.n	4069b4 <__udivmoddi4+0x6c>
  406bf2:	45c2      	cmp	sl, r8
  406bf4:	d2ea      	bcs.n	406bcc <__udivmoddi4+0x284>
  406bf6:	ebb8 0e02 	subs.w	lr, r8, r2
  406bfa:	eb69 0503 	sbc.w	r5, r9, r3
  406bfe:	3801      	subs	r0, #1
  406c00:	e7e4      	b.n	406bcc <__udivmoddi4+0x284>
  406c02:	4628      	mov	r0, r5
  406c04:	e7d7      	b.n	406bb6 <__udivmoddi4+0x26e>
  406c06:	4640      	mov	r0, r8
  406c08:	e791      	b.n	406b2e <__udivmoddi4+0x1e6>
  406c0a:	4681      	mov	r9, r0
  406c0c:	e7be      	b.n	406b8c <__udivmoddi4+0x244>
  406c0e:	4601      	mov	r1, r0
  406c10:	e778      	b.n	406b04 <__udivmoddi4+0x1bc>
  406c12:	3802      	subs	r0, #2
  406c14:	443c      	add	r4, r7
  406c16:	e745      	b.n	406aa4 <__udivmoddi4+0x15c>
  406c18:	4608      	mov	r0, r1
  406c1a:	e708      	b.n	406a2e <__udivmoddi4+0xe6>
  406c1c:	f1a8 0802 	sub.w	r8, r8, #2
  406c20:	443d      	add	r5, r7
  406c22:	e72b      	b.n	406a7c <__udivmoddi4+0x134>

00406c24 <__aeabi_idiv0>:
  406c24:	4770      	bx	lr
  406c26:	bf00      	nop
  406c28:	756e654d 	.word	0x756e654d
  406c2c:	2d2d2d20 	.word	0x2d2d2d20
  406c30:	2d2d2d2d 	.word	0x2d2d2d2d
  406c34:	2d2d2d2d 	.word	0x2d2d2d2d
  406c38:	2d2d2d2d 	.word	0x2d2d2d2d
  406c3c:	2d2d2d2d 	.word	0x2d2d2d2d
  406c40:	00000a2d 	.word	0x00000a2d
  406c44:	205d315b 	.word	0x205d315b
  406c48:	6e727554 	.word	0x6e727554
  406c4c:	2f6e4f20 	.word	0x2f6e4f20
  406c50:	0a66664f 	.word	0x0a66664f
  406c54:	00000000 	.word	0x00000000
  406c58:	205d325b 	.word	0x205d325b
  406c5c:	72636e49 	.word	0x72636e49
  406c60:	65736165 	.word	0x65736165
  406c64:	44454c20 	.word	0x44454c20
  406c68:	65726620 	.word	0x65726620
  406c6c:	6e657571 	.word	0x6e657571
  406c70:	000a7963 	.word	0x000a7963
  406c74:	205d335b 	.word	0x205d335b
  406c78:	72636544 	.word	0x72636544
  406c7c:	65736165 	.word	0x65736165
  406c80:	44454c20 	.word	0x44454c20
  406c84:	65726620 	.word	0x65726620
  406c88:	6e657571 	.word	0x6e657571
  406c8c:	000a7963 	.word	0x000a7963
  406c90:	205d345b 	.word	0x205d345b
  406c94:	20746553 	.word	0x20746553
  406c98:	2044454c 	.word	0x2044454c
  406c9c:	71657266 	.word	0x71657266
  406ca0:	636e6575 	.word	0x636e6575
  406ca4:	00000a79 	.word	0x00000a79
  406ca8:	205d355b 	.word	0x205d355b
  406cac:	656d6954 	.word	0x656d6954
  406cb0:	0000000a 	.word	0x0000000a
  406cb4:	205d685b 	.word	0x205d685b
  406cb8:	776f6853 	.word	0x776f6853
  406cbc:	69687420 	.word	0x69687420
  406cc0:	656d2073 	.word	0x656d2073
  406cc4:	000a756e 	.word	0x000a756e
  406cc8:	65746e45 	.word	0x65746e45
  406ccc:	68742072 	.word	0x68742072
  406cd0:	656e2065 	.word	0x656e2065
  406cd4:	72662077 	.word	0x72662077
  406cd8:	65757165 	.word	0x65757165
  406cdc:	3a79636e 	.word	0x3a79636e
  406ce0:	00000020 	.word	0x00000020
  406ce4:	0000000a 	.word	0x0000000a
  406ce8:	454d4954 	.word	0x454d4954
  406cec:	6425203a 	.word	0x6425203a
  406cf0:	3a64253a 	.word	0x3a64253a
  406cf4:	000a6425 	.word	0x000a6425

00406cf8 <_global_impure_ptr>:
  406cf8:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  406d08:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  406d18:	46454443 00000000 33323130 37363534     CDEF....01234567
  406d28:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406d38:	0000296c 00000030                       l)..0...

00406d40 <blanks.7208>:
  406d40:	20202020 20202020 20202020 20202020                     

00406d50 <zeroes.7209>:
  406d50:	30303030 30303030 30303030 30303030     0000000000000000
  406d60:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  406d70:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406d80 <__mprec_bigtens>:
  406d80:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406d90:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406da0:	7f73bf3c 75154fdd                       <.s..O.u

00406da8 <__mprec_tens>:
  406da8:	00000000 3ff00000 00000000 40240000     .......?......$@
  406db8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406dc8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406dd8:	00000000 412e8480 00000000 416312d0     .......A......cA
  406de8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406df8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406e08:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406e18:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406e28:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406e38:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406e48:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406e58:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406e68:	79d99db4 44ea7843                       ...yCx.D

00406e70 <p05.6040>:
  406e70:	00000005 00000019 0000007d              ........}...

00406e7c <_ctype_>:
  406e7c:	20202000 20202020 28282020 20282828     .         ((((( 
  406e8c:	20202020 20202020 20202020 20202020                     
  406e9c:	10108820 10101010 10101010 10101010      ...............
  406eac:	04040410 04040404 10040404 10101010     ................
  406ebc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406ecc:	01010101 01010101 01010101 10101010     ................
  406edc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406eec:	02020202 02020202 02020202 10101010     ................
  406efc:	00000020 00000000 00000000 00000000      ...............
	...

00406f80 <_init>:
  406f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f82:	bf00      	nop
  406f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406f86:	bc08      	pop	{r3}
  406f88:	469e      	mov	lr, r3
  406f8a:	4770      	bx	lr

00406f8c <__init_array_start>:
  406f8c:	004038c9 	.word	0x004038c9

00406f90 <__frame_dummy_init_array_entry>:
  406f90:	00400165                                e.@.

00406f94 <_fini>:
  406f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f96:	bf00      	nop
  406f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406f9a:	bc08      	pop	{r3}
  406f9c:	469e      	mov	lr, r3
  406f9e:	4770      	bx	lr

00406fa0 <__fini_array_start>:
  406fa0:	00400141 	.word	0x00400141
