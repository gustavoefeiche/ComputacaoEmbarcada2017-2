
Aula006_PIO-Input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e44  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00400e44  00400e44  00010e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000438  20400000  00400e4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000008c  20400438  00401284  00020438  2**2
                  ALLOC
  4 .stack        00002004  204004c4  00401310  00020438  2**0
                  ALLOC
  5 .heap         00000200  204024c8  00403314  00020438  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000cb9c  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001b92  00000000  00000000  0002d05b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002778  00000000  00000000  0002ebed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000588  00000000  00000000  00031365  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000608  00000000  00000000  000318ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c9d7  00000000  00000000  00031ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007498  00000000  00000000  0004e8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00089303  00000000  00000000  00055d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000c90  00000000  00000000  000df068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 24 40 20 11 06 40 00 0d 06 40 00 0d 06 40 00     .$@ ..@...@...@.
  400010:	0d 06 40 00 0d 06 40 00 0d 06 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	0d 06 40 00 0d 06 40 00 00 00 00 00 0d 06 40 00     ..@...@.......@.
  40003c:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  40004c:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  40005c:	0d 06 40 00 0d 06 40 00 00 00 00 00 35 04 40 00     ..@...@.....5.@.
  40006c:	49 04 40 00 5d 04 40 00 0d 06 40 00 0d 06 40 00     I.@.].@...@...@.
  40007c:	0d 06 40 00 71 04 40 00 85 04 40 00 0d 06 40 00     ..@.q.@...@...@.
  40008c:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  40009c:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  4000ac:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  4000bc:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  4000cc:	0d 06 40 00 00 00 00 00 0d 06 40 00 00 00 00 00     ..@.......@.....
  4000dc:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  4000ec:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  4000fc:	0d 06 40 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ..@...@...@...@.
  40010c:	0d 06 40 00 0d 06 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 0d 06 40 00 0d 06 40 00 0d 06 40 00     ......@...@...@.
  40012c:	0d 06 40 00 0d 06 40 00 00 00 00 00 0d 06 40 00     ..@...@.......@.
  40013c:	0d 06 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400438 	.word	0x20400438
  40015c:	00000000 	.word	0x00000000
  400160:	00400e4c 	.word	0x00400e4c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00400e4c 	.word	0x00400e4c
  4001a0:	2040043c 	.word	0x2040043c
  4001a4:	00400e4c 	.word	0x00400e4c
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	004007e5 	.word	0x004007e5
  4001f8:	00400535 	.word	0x00400535
  4001fc:	00400589 	.word	0x00400589
  400200:	00400599 	.word	0x00400599
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	004005a9 	.word	0x004005a9
  400210:	00400499 	.word	0x00400499
  400214:	004004d1 	.word	0x004004d1
  400218:	004006d9 	.word	0x004006d9

0040021c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400222:	4b48      	ldr	r3, [pc, #288]	; (400344 <board_init+0x128>)
  400224:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40022a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40022e:	4b46      	ldr	r3, [pc, #280]	; (400348 <board_init+0x12c>)
  400230:	2200      	movs	r2, #0
  400232:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400236:	695a      	ldr	r2, [r3, #20]
  400238:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40023c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40023e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400242:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400246:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40024a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40024e:	f007 0007 	and.w	r0, r7, #7
  400252:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400254:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400258:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40025c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400260:	f3bf 8f4f 	dsb	sy
  400264:	f04f 34ff 	mov.w	r4, #4294967295
  400268:	fa04 fc00 	lsl.w	ip, r4, r0
  40026c:	fa06 f000 	lsl.w	r0, r6, r0
  400270:	fa04 f40e 	lsl.w	r4, r4, lr
  400274:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400278:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40027a:	463a      	mov	r2, r7
  40027c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40027e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400282:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400286:	3a01      	subs	r2, #1
  400288:	4423      	add	r3, r4
  40028a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40028e:	d1f6      	bne.n	40027e <board_init+0x62>
        } while(sets--);
  400290:	3e01      	subs	r6, #1
  400292:	4460      	add	r0, ip
  400294:	f1b6 3fff 	cmp.w	r6, #4294967295
  400298:	d1ef      	bne.n	40027a <board_init+0x5e>
  40029a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40029e:	4b2a      	ldr	r3, [pc, #168]	; (400348 <board_init+0x12c>)
  4002a0:	695a      	ldr	r2, [r3, #20]
  4002a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4002a6:	615a      	str	r2, [r3, #20]
  4002a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ac:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002b0:	4a26      	ldr	r2, [pc, #152]	; (40034c <board_init+0x130>)
  4002b2:	4927      	ldr	r1, [pc, #156]	; (400350 <board_init+0x134>)
  4002b4:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002b6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4002ba:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4002bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002c0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002c4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002c8:	f022 0201 	bic.w	r2, r2, #1
  4002cc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4002d0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4002d4:	f022 0201 	bic.w	r2, r2, #1
  4002d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002e0:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002e4:	200a      	movs	r0, #10
  4002e6:	4c1b      	ldr	r4, [pc, #108]	; (400354 <board_init+0x138>)
  4002e8:	47a0      	blx	r4
  4002ea:	200b      	movs	r0, #11
  4002ec:	47a0      	blx	r4
  4002ee:	200c      	movs	r0, #12
  4002f0:	47a0      	blx	r4
  4002f2:	2010      	movs	r0, #16
  4002f4:	47a0      	blx	r4
  4002f6:	2011      	movs	r0, #17
  4002f8:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002fa:	4b17      	ldr	r3, [pc, #92]	; (400358 <board_init+0x13c>)
  4002fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  400300:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400306:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400308:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40030c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400310:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400312:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400316:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40031c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40031e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400324:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400326:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40032a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40032c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40032e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400332:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400334:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400338:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40033c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400342:	bf00      	nop
  400344:	400e1850 	.word	0x400e1850
  400348:	e000ed00 	.word	0xe000ed00
  40034c:	400e0c00 	.word	0x400e0c00
  400350:	5a00080c 	.word	0x5a00080c
  400354:	004005b9 	.word	0x004005b9
  400358:	400e1200 	.word	0x400e1200

0040035c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40035c:	6301      	str	r1, [r0, #48]	; 0x30
  40035e:	4770      	bx	lr

00400360 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400360:	6341      	str	r1, [r0, #52]	; 0x34
  400362:	4770      	bx	lr

00400364 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400364:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400368:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40036c:	d105      	bne.n	40037a <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  40036e:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400370:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400372:	bf14      	ite	ne
  400374:	2001      	movne	r0, #1
  400376:	2000      	moveq	r0, #0
  400378:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  40037a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  40037c:	e7f8      	b.n	400370 <pio_get+0xc>

0040037e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40037e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400380:	f012 0f01 	tst.w	r2, #1
  400384:	d10d      	bne.n	4003a2 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400386:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400388:	f012 0f0a 	tst.w	r2, #10
  40038c:	d00b      	beq.n	4003a6 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40038e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400390:	f012 0f02 	tst.w	r2, #2
  400394:	d109      	bne.n	4003aa <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400396:	f012 0f08 	tst.w	r2, #8
  40039a:	d008      	beq.n	4003ae <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40039c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4003a0:	e005      	b.n	4003ae <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4003a2:	6641      	str	r1, [r0, #100]	; 0x64
  4003a4:	e7f0      	b.n	400388 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4003a6:	6241      	str	r1, [r0, #36]	; 0x24
  4003a8:	e7f2      	b.n	400390 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4003aa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4003ae:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4003b0:	6001      	str	r1, [r0, #0]
  4003b2:	4770      	bx	lr

004003b4 <pio_set_output>:
{
  4003b4:	b410      	push	{r4}
  4003b6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4003b8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4003ba:	b94c      	cbnz	r4, 4003d0 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4003bc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4003be:	b14b      	cbz	r3, 4003d4 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4003c0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4003c2:	b94a      	cbnz	r2, 4003d8 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4003c4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4003c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4003c8:	6001      	str	r1, [r0, #0]
}
  4003ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003ce:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4003d0:	6641      	str	r1, [r0, #100]	; 0x64
  4003d2:	e7f4      	b.n	4003be <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4003d4:	6541      	str	r1, [r0, #84]	; 0x54
  4003d6:	e7f4      	b.n	4003c2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4003d8:	6301      	str	r1, [r0, #48]	; 0x30
  4003da:	e7f4      	b.n	4003c6 <pio_set_output+0x12>

004003dc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003de:	4770      	bx	lr

004003e0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003e2:	4770      	bx	lr

004003e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4003e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003e8:	4604      	mov	r4, r0
  4003ea:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4003ec:	4b0e      	ldr	r3, [pc, #56]	; (400428 <pio_handler_process+0x44>)
  4003ee:	4798      	blx	r3
  4003f0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4003f2:	4620      	mov	r0, r4
  4003f4:	4b0d      	ldr	r3, [pc, #52]	; (40042c <pio_handler_process+0x48>)
  4003f6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4003f8:	4005      	ands	r5, r0
  4003fa:	d013      	beq.n	400424 <pio_handler_process+0x40>
  4003fc:	4c0c      	ldr	r4, [pc, #48]	; (400430 <pio_handler_process+0x4c>)
  4003fe:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400402:	e003      	b.n	40040c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400404:	42b4      	cmp	r4, r6
  400406:	d00d      	beq.n	400424 <pio_handler_process+0x40>
  400408:	3410      	adds	r4, #16
		while (status != 0) {
  40040a:	b15d      	cbz	r5, 400424 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40040c:	6820      	ldr	r0, [r4, #0]
  40040e:	4540      	cmp	r0, r8
  400410:	d1f8      	bne.n	400404 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400412:	6861      	ldr	r1, [r4, #4]
  400414:	4229      	tst	r1, r5
  400416:	d0f5      	beq.n	400404 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400418:	68e3      	ldr	r3, [r4, #12]
  40041a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40041c:	6863      	ldr	r3, [r4, #4]
  40041e:	ea25 0503 	bic.w	r5, r5, r3
  400422:	e7ef      	b.n	400404 <pio_handler_process+0x20>
  400424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400428:	004003dd 	.word	0x004003dd
  40042c:	004003e1 	.word	0x004003e1
  400430:	20400454 	.word	0x20400454

00400434 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400436:	210a      	movs	r1, #10
  400438:	4801      	ldr	r0, [pc, #4]	; (400440 <PIOA_Handler+0xc>)
  40043a:	4b02      	ldr	r3, [pc, #8]	; (400444 <PIOA_Handler+0x10>)
  40043c:	4798      	blx	r3
  40043e:	bd08      	pop	{r3, pc}
  400440:	400e0e00 	.word	0x400e0e00
  400444:	004003e5 	.word	0x004003e5

00400448 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400448:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40044a:	210b      	movs	r1, #11
  40044c:	4801      	ldr	r0, [pc, #4]	; (400454 <PIOB_Handler+0xc>)
  40044e:	4b02      	ldr	r3, [pc, #8]	; (400458 <PIOB_Handler+0x10>)
  400450:	4798      	blx	r3
  400452:	bd08      	pop	{r3, pc}
  400454:	400e1000 	.word	0x400e1000
  400458:	004003e5 	.word	0x004003e5

0040045c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40045c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40045e:	210c      	movs	r1, #12
  400460:	4801      	ldr	r0, [pc, #4]	; (400468 <PIOC_Handler+0xc>)
  400462:	4b02      	ldr	r3, [pc, #8]	; (40046c <PIOC_Handler+0x10>)
  400464:	4798      	blx	r3
  400466:	bd08      	pop	{r3, pc}
  400468:	400e1200 	.word	0x400e1200
  40046c:	004003e5 	.word	0x004003e5

00400470 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400470:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400472:	2110      	movs	r1, #16
  400474:	4801      	ldr	r0, [pc, #4]	; (40047c <PIOD_Handler+0xc>)
  400476:	4b02      	ldr	r3, [pc, #8]	; (400480 <PIOD_Handler+0x10>)
  400478:	4798      	blx	r3
  40047a:	bd08      	pop	{r3, pc}
  40047c:	400e1400 	.word	0x400e1400
  400480:	004003e5 	.word	0x004003e5

00400484 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400484:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400486:	2111      	movs	r1, #17
  400488:	4801      	ldr	r0, [pc, #4]	; (400490 <PIOE_Handler+0xc>)
  40048a:	4b02      	ldr	r3, [pc, #8]	; (400494 <PIOE_Handler+0x10>)
  40048c:	4798      	blx	r3
  40048e:	bd08      	pop	{r3, pc}
  400490:	400e1600 	.word	0x400e1600
  400494:	004003e5 	.word	0x004003e5

00400498 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400498:	2803      	cmp	r0, #3
  40049a:	d011      	beq.n	4004c0 <pmc_mck_set_division+0x28>
  40049c:	2804      	cmp	r0, #4
  40049e:	d012      	beq.n	4004c6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4004a0:	2802      	cmp	r0, #2
  4004a2:	bf0c      	ite	eq
  4004a4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4004a8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4004aa:	4a08      	ldr	r2, [pc, #32]	; (4004cc <pmc_mck_set_division+0x34>)
  4004ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4004b2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4004b4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4004b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004b8:	f013 0f08 	tst.w	r3, #8
  4004bc:	d0fb      	beq.n	4004b6 <pmc_mck_set_division+0x1e>
}
  4004be:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4004c0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4004c4:	e7f1      	b.n	4004aa <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4004c6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4004ca:	e7ee      	b.n	4004aa <pmc_mck_set_division+0x12>
  4004cc:	400e0600 	.word	0x400e0600

004004d0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4004d0:	4a17      	ldr	r2, [pc, #92]	; (400530 <pmc_switch_mck_to_pllack+0x60>)
  4004d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4004d8:	4318      	orrs	r0, r3
  4004da:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004de:	f013 0f08 	tst.w	r3, #8
  4004e2:	d10a      	bne.n	4004fa <pmc_switch_mck_to_pllack+0x2a>
  4004e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4004e8:	4911      	ldr	r1, [pc, #68]	; (400530 <pmc_switch_mck_to_pllack+0x60>)
  4004ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004ec:	f012 0f08 	tst.w	r2, #8
  4004f0:	d103      	bne.n	4004fa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004f2:	3b01      	subs	r3, #1
  4004f4:	d1f9      	bne.n	4004ea <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4004f6:	2001      	movs	r0, #1
  4004f8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4004fa:	4a0d      	ldr	r2, [pc, #52]	; (400530 <pmc_switch_mck_to_pllack+0x60>)
  4004fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004fe:	f023 0303 	bic.w	r3, r3, #3
  400502:	f043 0302 	orr.w	r3, r3, #2
  400506:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400508:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40050a:	f013 0f08 	tst.w	r3, #8
  40050e:	d10a      	bne.n	400526 <pmc_switch_mck_to_pllack+0x56>
  400510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400514:	4906      	ldr	r1, [pc, #24]	; (400530 <pmc_switch_mck_to_pllack+0x60>)
  400516:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400518:	f012 0f08 	tst.w	r2, #8
  40051c:	d105      	bne.n	40052a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40051e:	3b01      	subs	r3, #1
  400520:	d1f9      	bne.n	400516 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400522:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400524:	4770      	bx	lr
	return 0;
  400526:	2000      	movs	r0, #0
  400528:	4770      	bx	lr
  40052a:	2000      	movs	r0, #0
  40052c:	4770      	bx	lr
  40052e:	bf00      	nop
  400530:	400e0600 	.word	0x400e0600

00400534 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400534:	b9a0      	cbnz	r0, 400560 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400536:	480e      	ldr	r0, [pc, #56]	; (400570 <pmc_switch_mainck_to_xtal+0x3c>)
  400538:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40053a:	0209      	lsls	r1, r1, #8
  40053c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40053e:	4a0d      	ldr	r2, [pc, #52]	; (400574 <pmc_switch_mainck_to_xtal+0x40>)
  400540:	401a      	ands	r2, r3
  400542:	4b0d      	ldr	r3, [pc, #52]	; (400578 <pmc_switch_mainck_to_xtal+0x44>)
  400544:	4313      	orrs	r3, r2
  400546:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400548:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40054a:	4602      	mov	r2, r0
  40054c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40054e:	f013 0f01 	tst.w	r3, #1
  400552:	d0fb      	beq.n	40054c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400554:	4a06      	ldr	r2, [pc, #24]	; (400570 <pmc_switch_mainck_to_xtal+0x3c>)
  400556:	6a11      	ldr	r1, [r2, #32]
  400558:	4b08      	ldr	r3, [pc, #32]	; (40057c <pmc_switch_mainck_to_xtal+0x48>)
  40055a:	430b      	orrs	r3, r1
  40055c:	6213      	str	r3, [r2, #32]
  40055e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400560:	4903      	ldr	r1, [pc, #12]	; (400570 <pmc_switch_mainck_to_xtal+0x3c>)
  400562:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400564:	4a06      	ldr	r2, [pc, #24]	; (400580 <pmc_switch_mainck_to_xtal+0x4c>)
  400566:	401a      	ands	r2, r3
  400568:	4b06      	ldr	r3, [pc, #24]	; (400584 <pmc_switch_mainck_to_xtal+0x50>)
  40056a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40056c:	620b      	str	r3, [r1, #32]
  40056e:	4770      	bx	lr
  400570:	400e0600 	.word	0x400e0600
  400574:	ffc8fffc 	.word	0xffc8fffc
  400578:	00370001 	.word	0x00370001
  40057c:	01370000 	.word	0x01370000
  400580:	fec8fffc 	.word	0xfec8fffc
  400584:	01370002 	.word	0x01370002

00400588 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400588:	4b02      	ldr	r3, [pc, #8]	; (400594 <pmc_osc_is_ready_mainck+0xc>)
  40058a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40058c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400590:	4770      	bx	lr
  400592:	bf00      	nop
  400594:	400e0600 	.word	0x400e0600

00400598 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400598:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40059c:	4b01      	ldr	r3, [pc, #4]	; (4005a4 <pmc_disable_pllack+0xc>)
  40059e:	629a      	str	r2, [r3, #40]	; 0x28
  4005a0:	4770      	bx	lr
  4005a2:	bf00      	nop
  4005a4:	400e0600 	.word	0x400e0600

004005a8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4005a8:	4b02      	ldr	r3, [pc, #8]	; (4005b4 <pmc_is_locked_pllack+0xc>)
  4005aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4005ac:	f000 0002 	and.w	r0, r0, #2
  4005b0:	4770      	bx	lr
  4005b2:	bf00      	nop
  4005b4:	400e0600 	.word	0x400e0600

004005b8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4005b8:	283f      	cmp	r0, #63	; 0x3f
  4005ba:	d81e      	bhi.n	4005fa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4005bc:	281f      	cmp	r0, #31
  4005be:	d80c      	bhi.n	4005da <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4005c0:	4b11      	ldr	r3, [pc, #68]	; (400608 <pmc_enable_periph_clk+0x50>)
  4005c2:	699a      	ldr	r2, [r3, #24]
  4005c4:	2301      	movs	r3, #1
  4005c6:	4083      	lsls	r3, r0
  4005c8:	4393      	bics	r3, r2
  4005ca:	d018      	beq.n	4005fe <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4005cc:	2301      	movs	r3, #1
  4005ce:	fa03 f000 	lsl.w	r0, r3, r0
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <pmc_enable_periph_clk+0x50>)
  4005d4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005d6:	2000      	movs	r0, #0
  4005d8:	4770      	bx	lr
		ul_id -= 32;
  4005da:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4005dc:	4b0a      	ldr	r3, [pc, #40]	; (400608 <pmc_enable_periph_clk+0x50>)
  4005de:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4005e2:	2301      	movs	r3, #1
  4005e4:	4083      	lsls	r3, r0
  4005e6:	4393      	bics	r3, r2
  4005e8:	d00b      	beq.n	400602 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4005ea:	2301      	movs	r3, #1
  4005ec:	fa03 f000 	lsl.w	r0, r3, r0
  4005f0:	4b05      	ldr	r3, [pc, #20]	; (400608 <pmc_enable_periph_clk+0x50>)
  4005f2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4005f6:	2000      	movs	r0, #0
  4005f8:	4770      	bx	lr
		return 1;
  4005fa:	2001      	movs	r0, #1
  4005fc:	4770      	bx	lr
	return 0;
  4005fe:	2000      	movs	r0, #0
  400600:	4770      	bx	lr
  400602:	2000      	movs	r0, #0
}
  400604:	4770      	bx	lr
  400606:	bf00      	nop
  400608:	400e0600 	.word	0x400e0600

0040060c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40060c:	e7fe      	b.n	40060c <Dummy_Handler>
	...

00400610 <Reset_Handler>:
{
  400610:	b500      	push	{lr}
  400612:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400614:	4b25      	ldr	r3, [pc, #148]	; (4006ac <Reset_Handler+0x9c>)
  400616:	4a26      	ldr	r2, [pc, #152]	; (4006b0 <Reset_Handler+0xa0>)
  400618:	429a      	cmp	r2, r3
  40061a:	d010      	beq.n	40063e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40061c:	4b25      	ldr	r3, [pc, #148]	; (4006b4 <Reset_Handler+0xa4>)
  40061e:	4a23      	ldr	r2, [pc, #140]	; (4006ac <Reset_Handler+0x9c>)
  400620:	429a      	cmp	r2, r3
  400622:	d20c      	bcs.n	40063e <Reset_Handler+0x2e>
  400624:	3b01      	subs	r3, #1
  400626:	1a9b      	subs	r3, r3, r2
  400628:	f023 0303 	bic.w	r3, r3, #3
  40062c:	3304      	adds	r3, #4
  40062e:	4413      	add	r3, r2
  400630:	491f      	ldr	r1, [pc, #124]	; (4006b0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400632:	f851 0b04 	ldr.w	r0, [r1], #4
  400636:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40063a:	429a      	cmp	r2, r3
  40063c:	d1f9      	bne.n	400632 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40063e:	4b1e      	ldr	r3, [pc, #120]	; (4006b8 <Reset_Handler+0xa8>)
  400640:	4a1e      	ldr	r2, [pc, #120]	; (4006bc <Reset_Handler+0xac>)
  400642:	429a      	cmp	r2, r3
  400644:	d20a      	bcs.n	40065c <Reset_Handler+0x4c>
  400646:	3b01      	subs	r3, #1
  400648:	1a9b      	subs	r3, r3, r2
  40064a:	f023 0303 	bic.w	r3, r3, #3
  40064e:	3304      	adds	r3, #4
  400650:	4413      	add	r3, r2
                *pDest++ = 0;
  400652:	2100      	movs	r1, #0
  400654:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400658:	4293      	cmp	r3, r2
  40065a:	d1fb      	bne.n	400654 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40065c:	4a18      	ldr	r2, [pc, #96]	; (4006c0 <Reset_Handler+0xb0>)
  40065e:	4b19      	ldr	r3, [pc, #100]	; (4006c4 <Reset_Handler+0xb4>)
  400660:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400664:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400666:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40066a:	fab3 f383 	clz	r3, r3
  40066e:	095b      	lsrs	r3, r3, #5
  400670:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400672:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400674:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400678:	2200      	movs	r2, #0
  40067a:	4b13      	ldr	r3, [pc, #76]	; (4006c8 <Reset_Handler+0xb8>)
  40067c:	701a      	strb	r2, [r3, #0]
	return flags;
  40067e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400680:	4a12      	ldr	r2, [pc, #72]	; (4006cc <Reset_Handler+0xbc>)
  400682:	6813      	ldr	r3, [r2, #0]
  400684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400688:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40068a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40068e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400692:	b129      	cbz	r1, 4006a0 <Reset_Handler+0x90>
		cpu_irq_enable();
  400694:	2201      	movs	r2, #1
  400696:	4b0c      	ldr	r3, [pc, #48]	; (4006c8 <Reset_Handler+0xb8>)
  400698:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40069a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40069e:	b662      	cpsie	i
        __libc_init_array();
  4006a0:	4b0b      	ldr	r3, [pc, #44]	; (4006d0 <Reset_Handler+0xc0>)
  4006a2:	4798      	blx	r3
        main();
  4006a4:	4b0b      	ldr	r3, [pc, #44]	; (4006d4 <Reset_Handler+0xc4>)
  4006a6:	4798      	blx	r3
  4006a8:	e7fe      	b.n	4006a8 <Reset_Handler+0x98>
  4006aa:	bf00      	nop
  4006ac:	20400000 	.word	0x20400000
  4006b0:	00400e4c 	.word	0x00400e4c
  4006b4:	20400438 	.word	0x20400438
  4006b8:	204004c4 	.word	0x204004c4
  4006bc:	20400438 	.word	0x20400438
  4006c0:	e000ed00 	.word	0xe000ed00
  4006c4:	00400000 	.word	0x00400000
  4006c8:	2040000a 	.word	0x2040000a
  4006cc:	e000ed88 	.word	0xe000ed88
  4006d0:	00400cd5 	.word	0x00400cd5
  4006d4:	004008a9 	.word	0x004008a9

004006d8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4006d8:	4b3b      	ldr	r3, [pc, #236]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  4006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006dc:	f003 0303 	and.w	r3, r3, #3
  4006e0:	2b01      	cmp	r3, #1
  4006e2:	d01d      	beq.n	400720 <SystemCoreClockUpdate+0x48>
  4006e4:	b183      	cbz	r3, 400708 <SystemCoreClockUpdate+0x30>
  4006e6:	2b02      	cmp	r3, #2
  4006e8:	d036      	beq.n	400758 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4006ea:	4b37      	ldr	r3, [pc, #220]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  4006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006f2:	2b70      	cmp	r3, #112	; 0x70
  4006f4:	d05f      	beq.n	4007b6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4006f6:	4b34      	ldr	r3, [pc, #208]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  4006f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4006fa:	4934      	ldr	r1, [pc, #208]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  4006fc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400700:	680b      	ldr	r3, [r1, #0]
  400702:	40d3      	lsrs	r3, r2
  400704:	600b      	str	r3, [r1, #0]
  400706:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400708:	4b31      	ldr	r3, [pc, #196]	; (4007d0 <SystemCoreClockUpdate+0xf8>)
  40070a:	695b      	ldr	r3, [r3, #20]
  40070c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400710:	bf14      	ite	ne
  400712:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400716:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40071a:	4b2c      	ldr	r3, [pc, #176]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  40071c:	601a      	str	r2, [r3, #0]
  40071e:	e7e4      	b.n	4006ea <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400720:	4b29      	ldr	r3, [pc, #164]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  400722:	6a1b      	ldr	r3, [r3, #32]
  400724:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400728:	d003      	beq.n	400732 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40072a:	4a2a      	ldr	r2, [pc, #168]	; (4007d4 <SystemCoreClockUpdate+0xfc>)
  40072c:	4b27      	ldr	r3, [pc, #156]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  40072e:	601a      	str	r2, [r3, #0]
  400730:	e7db      	b.n	4006ea <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400732:	4a29      	ldr	r2, [pc, #164]	; (4007d8 <SystemCoreClockUpdate+0x100>)
  400734:	4b25      	ldr	r3, [pc, #148]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  400736:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400738:	4b23      	ldr	r3, [pc, #140]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  40073a:	6a1b      	ldr	r3, [r3, #32]
  40073c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400740:	2b10      	cmp	r3, #16
  400742:	d005      	beq.n	400750 <SystemCoreClockUpdate+0x78>
  400744:	2b20      	cmp	r3, #32
  400746:	d1d0      	bne.n	4006ea <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400748:	4a22      	ldr	r2, [pc, #136]	; (4007d4 <SystemCoreClockUpdate+0xfc>)
  40074a:	4b20      	ldr	r3, [pc, #128]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  40074c:	601a      	str	r2, [r3, #0]
          break;
  40074e:	e7cc      	b.n	4006ea <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400750:	4a22      	ldr	r2, [pc, #136]	; (4007dc <SystemCoreClockUpdate+0x104>)
  400752:	4b1e      	ldr	r3, [pc, #120]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  400754:	601a      	str	r2, [r3, #0]
          break;
  400756:	e7c8      	b.n	4006ea <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400758:	4b1b      	ldr	r3, [pc, #108]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  40075a:	6a1b      	ldr	r3, [r3, #32]
  40075c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400760:	d016      	beq.n	400790 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400762:	4a1c      	ldr	r2, [pc, #112]	; (4007d4 <SystemCoreClockUpdate+0xfc>)
  400764:	4b19      	ldr	r3, [pc, #100]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  400766:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400768:	4b17      	ldr	r3, [pc, #92]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  40076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40076c:	f003 0303 	and.w	r3, r3, #3
  400770:	2b02      	cmp	r3, #2
  400772:	d1ba      	bne.n	4006ea <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400774:	4a14      	ldr	r2, [pc, #80]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  400776:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400778:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40077a:	4814      	ldr	r0, [pc, #80]	; (4007cc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40077c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400780:	6803      	ldr	r3, [r0, #0]
  400782:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400786:	b2d2      	uxtb	r2, r2
  400788:	fbb3 f3f2 	udiv	r3, r3, r2
  40078c:	6003      	str	r3, [r0, #0]
  40078e:	e7ac      	b.n	4006ea <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400790:	4a11      	ldr	r2, [pc, #68]	; (4007d8 <SystemCoreClockUpdate+0x100>)
  400792:	4b0e      	ldr	r3, [pc, #56]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  400794:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400796:	4b0c      	ldr	r3, [pc, #48]	; (4007c8 <SystemCoreClockUpdate+0xf0>)
  400798:	6a1b      	ldr	r3, [r3, #32]
  40079a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40079e:	2b10      	cmp	r3, #16
  4007a0:	d005      	beq.n	4007ae <SystemCoreClockUpdate+0xd6>
  4007a2:	2b20      	cmp	r3, #32
  4007a4:	d1e0      	bne.n	400768 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4007a6:	4a0b      	ldr	r2, [pc, #44]	; (4007d4 <SystemCoreClockUpdate+0xfc>)
  4007a8:	4b08      	ldr	r3, [pc, #32]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  4007aa:	601a      	str	r2, [r3, #0]
          break;
  4007ac:	e7dc      	b.n	400768 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4007ae:	4a0b      	ldr	r2, [pc, #44]	; (4007dc <SystemCoreClockUpdate+0x104>)
  4007b0:	4b06      	ldr	r3, [pc, #24]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  4007b2:	601a      	str	r2, [r3, #0]
          break;
  4007b4:	e7d8      	b.n	400768 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4007b6:	4a05      	ldr	r2, [pc, #20]	; (4007cc <SystemCoreClockUpdate+0xf4>)
  4007b8:	6813      	ldr	r3, [r2, #0]
  4007ba:	4909      	ldr	r1, [pc, #36]	; (4007e0 <SystemCoreClockUpdate+0x108>)
  4007bc:	fba1 1303 	umull	r1, r3, r1, r3
  4007c0:	085b      	lsrs	r3, r3, #1
  4007c2:	6013      	str	r3, [r2, #0]
  4007c4:	4770      	bx	lr
  4007c6:	bf00      	nop
  4007c8:	400e0600 	.word	0x400e0600
  4007cc:	2040000c 	.word	0x2040000c
  4007d0:	400e1810 	.word	0x400e1810
  4007d4:	00b71b00 	.word	0x00b71b00
  4007d8:	003d0900 	.word	0x003d0900
  4007dc:	007a1200 	.word	0x007a1200
  4007e0:	aaaaaaab 	.word	0xaaaaaaab

004007e4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4007e4:	4b12      	ldr	r3, [pc, #72]	; (400830 <system_init_flash+0x4c>)
  4007e6:	4298      	cmp	r0, r3
  4007e8:	d911      	bls.n	40080e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4007ea:	4b12      	ldr	r3, [pc, #72]	; (400834 <system_init_flash+0x50>)
  4007ec:	4298      	cmp	r0, r3
  4007ee:	d913      	bls.n	400818 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4007f0:	4b11      	ldr	r3, [pc, #68]	; (400838 <system_init_flash+0x54>)
  4007f2:	4298      	cmp	r0, r3
  4007f4:	d914      	bls.n	400820 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4007f6:	4b11      	ldr	r3, [pc, #68]	; (40083c <system_init_flash+0x58>)
  4007f8:	4298      	cmp	r0, r3
  4007fa:	d915      	bls.n	400828 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4007fc:	4b10      	ldr	r3, [pc, #64]	; (400840 <system_init_flash+0x5c>)
  4007fe:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400800:	bf94      	ite	ls
  400802:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400806:	4a0f      	ldrhi	r2, [pc, #60]	; (400844 <system_init_flash+0x60>)
  400808:	4b0f      	ldr	r3, [pc, #60]	; (400848 <system_init_flash+0x64>)
  40080a:	601a      	str	r2, [r3, #0]
  40080c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40080e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400812:	4b0d      	ldr	r3, [pc, #52]	; (400848 <system_init_flash+0x64>)
  400814:	601a      	str	r2, [r3, #0]
  400816:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400818:	4a0c      	ldr	r2, [pc, #48]	; (40084c <system_init_flash+0x68>)
  40081a:	4b0b      	ldr	r3, [pc, #44]	; (400848 <system_init_flash+0x64>)
  40081c:	601a      	str	r2, [r3, #0]
  40081e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400820:	4a0b      	ldr	r2, [pc, #44]	; (400850 <system_init_flash+0x6c>)
  400822:	4b09      	ldr	r3, [pc, #36]	; (400848 <system_init_flash+0x64>)
  400824:	601a      	str	r2, [r3, #0]
  400826:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400828:	4a0a      	ldr	r2, [pc, #40]	; (400854 <system_init_flash+0x70>)
  40082a:	4b07      	ldr	r3, [pc, #28]	; (400848 <system_init_flash+0x64>)
  40082c:	601a      	str	r2, [r3, #0]
  40082e:	4770      	bx	lr
  400830:	01312cff 	.word	0x01312cff
  400834:	026259ff 	.word	0x026259ff
  400838:	039386ff 	.word	0x039386ff
  40083c:	04c4b3ff 	.word	0x04c4b3ff
  400840:	05f5e0ff 	.word	0x05f5e0ff
  400844:	04000500 	.word	0x04000500
  400848:	400e0c00 	.word	0x400e0c00
  40084c:	04000100 	.word	0x04000100
  400850:	04000200 	.word	0x04000200
  400854:	04000300 	.word	0x04000300

00400858 <LED_init>:
void BUTTON_init(int pio_id, Pio *p_pio, int pin_mask);
void LED_init(Pio *p_pio, uint32_t pio_id, uint32_t pin_mask, uint32_t state);
/* /PROTOTYPES */

/* INITIALIZATION */
void LED_init(Pio *p_pio, uint32_t pio_id, uint32_t pin_mask, uint32_t state) {
  400858:	b570      	push	{r4, r5, r6, lr}
  40085a:	b082      	sub	sp, #8
  40085c:	4604      	mov	r4, r0
  40085e:	4615      	mov	r5, r2
  400860:	461e      	mov	r6, r3
	pmc_enable_periph_clk(pio_id);
  400862:	4608      	mov	r0, r1
  400864:	4b06      	ldr	r3, [pc, #24]	; (400880 <LED_init+0x28>)
  400866:	4798      	blx	r3
	pio_set_output(p_pio, pin_mask, !state, 0, 0);
  400868:	2300      	movs	r3, #0
  40086a:	9300      	str	r3, [sp, #0]
  40086c:	fab6 f286 	clz	r2, r6
  400870:	0952      	lsrs	r2, r2, #5
  400872:	4629      	mov	r1, r5
  400874:	4620      	mov	r0, r4
  400876:	4c03      	ldr	r4, [pc, #12]	; (400884 <LED_init+0x2c>)
  400878:	47a0      	blx	r4
}
  40087a:	b002      	add	sp, #8
  40087c:	bd70      	pop	{r4, r5, r6, pc}
  40087e:	bf00      	nop
  400880:	004005b9 	.word	0x004005b9
  400884:	004003b5 	.word	0x004003b5

00400888 <BUTTON_init>:

void BUTTON_init(int pio_id, Pio *p_pio, int pin_mask) {
  400888:	b538      	push	{r3, r4, r5, lr}
  40088a:	460c      	mov	r4, r1
  40088c:	4615      	mov	r5, r2
	pmc_enable_periph_clk(pio_id);
  40088e:	4b04      	ldr	r3, [pc, #16]	; (4008a0 <BUTTON_init+0x18>)
  400890:	4798      	blx	r3
	pio_set_input(p_pio, pin_mask, PIO_PULLUP | PIO_DEBOUNCE);
  400892:	2209      	movs	r2, #9
  400894:	4629      	mov	r1, r5
  400896:	4620      	mov	r0, r4
  400898:	4b02      	ldr	r3, [pc, #8]	; (4008a4 <BUTTON_init+0x1c>)
  40089a:	4798      	blx	r3
  40089c:	bd38      	pop	{r3, r4, r5, pc}
  40089e:	bf00      	nop
  4008a0:	004005b9 	.word	0x004005b9
  4008a4:	0040037f 	.word	0x0040037f

004008a8 <main>:
}
/* /INITIALIZATION */

/* MAIN ROUTINE */
int main(void) {
  4008a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	sysclk_init();
  4008ac:	4b36      	ldr	r3, [pc, #216]	; (400988 <main+0xe0>)
  4008ae:	4798      	blx	r3
	board_init();
  4008b0:	4b36      	ldr	r3, [pc, #216]	; (40098c <main+0xe4>)
  4008b2:	4798      	blx	r3
	
	uint32_t led_blink = 1;
	uint32_t blink_delay_ms = 100;

	WDT->WDT_MR = WDT_MR_WDDIS;
  4008b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4008b8:	4b35      	ldr	r3, [pc, #212]	; (400990 <main+0xe8>)
  4008ba:	605a      	str	r2, [r3, #4]
	
	LED_init(LED_PIO, LED_PIO_ID, LED_PIN_MASK, 0);
  4008bc:	2300      	movs	r3, #0
  4008be:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008c2:	210c      	movs	r1, #12
  4008c4:	4833      	ldr	r0, [pc, #204]	; (400994 <main+0xec>)
  4008c6:	4c34      	ldr	r4, [pc, #208]	; (400998 <main+0xf0>)
  4008c8:	47a0      	blx	r4
	BUTTON_init(BUT_PIO_ID, BUT_PIO, BUT_PIN_MASK);
  4008ca:	4d34      	ldr	r5, [pc, #208]	; (40099c <main+0xf4>)
  4008cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4008d0:	4629      	mov	r1, r5
  4008d2:	200a      	movs	r0, #10
  4008d4:	4c32      	ldr	r4, [pc, #200]	; (4009a0 <main+0xf8>)
  4008d6:	47a0      	blx	r4
	BUTTON_init(OLED_BUT1_PIO_ID, OLED_BUT1_PIO, OLED_BUT1_PIN_MASK);
  4008d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4008dc:	4931      	ldr	r1, [pc, #196]	; (4009a4 <main+0xfc>)
  4008de:	2010      	movs	r0, #16
  4008e0:	47a0      	blx	r4
	BUTTON_init(OLED_BUT3_PIO_ID, OLED_BUT3_PIO, OLED_BUT3_PIN_MASK);
  4008e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4008e6:	4629      	mov	r1, r5
  4008e8:	200a      	movs	r0, #10
  4008ea:	47a0      	blx	r4
	uint32_t blink_delay_ms = 100;
  4008ec:	2664      	movs	r6, #100	; 0x64
	uint32_t led_blink = 1;
  4008ee:	f04f 0801 	mov.w	r8, #1
	
	while(1) {
		delay_ms(100);
		uint32_t user_button_pressed = !pio_get(BUT_PIO, PIO_INPUT, BUT_PIN_MASK);
  4008f2:	462f      	mov	r7, r5
  4008f4:	f04f 5520 	mov.w	r5, #671088640	; 0x28000000
		if(oled_but3_pressed)
			blink_delay_ms -= 50;
			
		if(led_blink) {
			pio_set(LED_PIO, LED_PIN_MASK);
			delay_ms(blink_delay_ms);
  4008f8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 4009c0 <main+0x118>
  4008fc:	e007      	b.n	40090e <main+0x66>
  4008fe:	2033      	movs	r0, #51	; 0x33
  400900:	4b29      	ldr	r3, [pc, #164]	; (4009a8 <main+0x100>)
  400902:	4798      	blx	r3
			pio_clear(LED_PIO, LED_PIN_MASK);
  400904:	f44f 7180 	mov.w	r1, #256	; 0x100
  400908:	4822      	ldr	r0, [pc, #136]	; (400994 <main+0xec>)
  40090a:	4b28      	ldr	r3, [pc, #160]	; (4009ac <main+0x104>)
  40090c:	4798      	blx	r3
		delay_ms(100);
  40090e:	4828      	ldr	r0, [pc, #160]	; (4009b0 <main+0x108>)
  400910:	4b25      	ldr	r3, [pc, #148]	; (4009a8 <main+0x100>)
  400912:	4798      	blx	r3
		uint32_t user_button_pressed = !pio_get(BUT_PIO, PIO_INPUT, BUT_PIN_MASK);
  400914:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400918:	4629      	mov	r1, r5
  40091a:	4638      	mov	r0, r7
  40091c:	4c25      	ldr	r4, [pc, #148]	; (4009b4 <main+0x10c>)
  40091e:	47a0      	blx	r4
  400920:	4682      	mov	sl, r0
		uint32_t oled_but1_pressed = !pio_get(OLED_BUT1_PIO, PIO_INPUT, OLED_BUT1_PIN_MASK);
  400922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400926:	4629      	mov	r1, r5
  400928:	481e      	ldr	r0, [pc, #120]	; (4009a4 <main+0xfc>)
  40092a:	47a0      	blx	r4
  40092c:	4681      	mov	r9, r0
		uint32_t oled_but3_pressed = !pio_get(OLED_BUT3_PIO, PIO_INPUT, OLED_BUT3_PIN_MASK);
  40092e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400932:	4629      	mov	r1, r5
  400934:	4638      	mov	r0, r7
  400936:	47a0      	blx	r4
		if(user_button_pressed)
  400938:	f1ba 0f00 	cmp.w	sl, #0
  40093c:	d101      	bne.n	400942 <main+0x9a>
			led_blink = !led_blink;
  40093e:	f088 0801 	eor.w	r8, r8, #1
		if(oled_but1_pressed)
  400942:	f1b9 0f00 	cmp.w	r9, #0
  400946:	d100      	bne.n	40094a <main+0xa2>
			blink_delay_ms += 50;
  400948:	3632      	adds	r6, #50	; 0x32
		if(oled_but3_pressed)
  40094a:	b900      	cbnz	r0, 40094e <main+0xa6>
			blink_delay_ms -= 50;
  40094c:	3e32      	subs	r6, #50	; 0x32
		if(led_blink) {
  40094e:	f1b8 0f00 	cmp.w	r8, #0
  400952:	d013      	beq.n	40097c <main+0xd4>
			pio_set(LED_PIO, LED_PIN_MASK);
  400954:	f44f 7180 	mov.w	r1, #256	; 0x100
  400958:	480e      	ldr	r0, [pc, #56]	; (400994 <main+0xec>)
  40095a:	4b17      	ldr	r3, [pc, #92]	; (4009b8 <main+0x110>)
  40095c:	4798      	blx	r3
			delay_ms(blink_delay_ms);
  40095e:	2e00      	cmp	r6, #0
  400960:	d0cd      	beq.n	4008fe <main+0x56>
  400962:	f241 722c 	movw	r2, #5932	; 0x172c
  400966:	2300      	movs	r3, #0
  400968:	f241 702b 	movw	r0, #5931	; 0x172b
  40096c:	2100      	movs	r1, #0
  40096e:	fbeb 0106 	umlal	r0, r1, fp, r6
  400972:	4c12      	ldr	r4, [pc, #72]	; (4009bc <main+0x114>)
  400974:	47a0      	blx	r4
  400976:	4b0c      	ldr	r3, [pc, #48]	; (4009a8 <main+0x100>)
  400978:	4798      	blx	r3
  40097a:	e7c3      	b.n	400904 <main+0x5c>
		}
		else {
			pio_set(LED_PIO, LED_PIN_MASK);
  40097c:	f44f 7180 	mov.w	r1, #256	; 0x100
  400980:	4804      	ldr	r0, [pc, #16]	; (400994 <main+0xec>)
  400982:	4b0d      	ldr	r3, [pc, #52]	; (4009b8 <main+0x110>)
  400984:	4798      	blx	r3
  400986:	e7c2      	b.n	40090e <main+0x66>
  400988:	004001ad 	.word	0x004001ad
  40098c:	0040021d 	.word	0x0040021d
  400990:	400e1850 	.word	0x400e1850
  400994:	400e1200 	.word	0x400e1200
  400998:	00400859 	.word	0x00400859
  40099c:	400e0e00 	.word	0x400e0e00
  4009a0:	00400889 	.word	0x00400889
  4009a4:	400e1400 	.word	0x400e1400
  4009a8:	20400001 	.word	0x20400001
  4009ac:	00400361 	.word	0x00400361
  4009b0:	004d2b25 	.word	0x004d2b25
  4009b4:	00400365 	.word	0x00400365
  4009b8:	0040035d 	.word	0x0040035d
  4009bc:	004009c5 	.word	0x004009c5
  4009c0:	11e1a300 	.word	0x11e1a300

004009c4 <__aeabi_uldivmod>:
  4009c4:	b953      	cbnz	r3, 4009dc <__aeabi_uldivmod+0x18>
  4009c6:	b94a      	cbnz	r2, 4009dc <__aeabi_uldivmod+0x18>
  4009c8:	2900      	cmp	r1, #0
  4009ca:	bf08      	it	eq
  4009cc:	2800      	cmpeq	r0, #0
  4009ce:	bf1c      	itt	ne
  4009d0:	f04f 31ff 	movne.w	r1, #4294967295
  4009d4:	f04f 30ff 	movne.w	r0, #4294967295
  4009d8:	f000 b97a 	b.w	400cd0 <__aeabi_idiv0>
  4009dc:	f1ad 0c08 	sub.w	ip, sp, #8
  4009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4009e4:	f000 f806 	bl	4009f4 <__udivmoddi4>
  4009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4009f0:	b004      	add	sp, #16
  4009f2:	4770      	bx	lr

004009f4 <__udivmoddi4>:
  4009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4009f8:	468c      	mov	ip, r1
  4009fa:	460d      	mov	r5, r1
  4009fc:	4604      	mov	r4, r0
  4009fe:	9e08      	ldr	r6, [sp, #32]
  400a00:	2b00      	cmp	r3, #0
  400a02:	d151      	bne.n	400aa8 <__udivmoddi4+0xb4>
  400a04:	428a      	cmp	r2, r1
  400a06:	4617      	mov	r7, r2
  400a08:	d96d      	bls.n	400ae6 <__udivmoddi4+0xf2>
  400a0a:	fab2 fe82 	clz	lr, r2
  400a0e:	f1be 0f00 	cmp.w	lr, #0
  400a12:	d00b      	beq.n	400a2c <__udivmoddi4+0x38>
  400a14:	f1ce 0c20 	rsb	ip, lr, #32
  400a18:	fa01 f50e 	lsl.w	r5, r1, lr
  400a1c:	fa20 fc0c 	lsr.w	ip, r0, ip
  400a20:	fa02 f70e 	lsl.w	r7, r2, lr
  400a24:	ea4c 0c05 	orr.w	ip, ip, r5
  400a28:	fa00 f40e 	lsl.w	r4, r0, lr
  400a2c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  400a30:	0c25      	lsrs	r5, r4, #16
  400a32:	fbbc f8fa 	udiv	r8, ip, sl
  400a36:	fa1f f987 	uxth.w	r9, r7
  400a3a:	fb0a cc18 	mls	ip, sl, r8, ip
  400a3e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  400a42:	fb08 f309 	mul.w	r3, r8, r9
  400a46:	42ab      	cmp	r3, r5
  400a48:	d90a      	bls.n	400a60 <__udivmoddi4+0x6c>
  400a4a:	19ed      	adds	r5, r5, r7
  400a4c:	f108 32ff 	add.w	r2, r8, #4294967295
  400a50:	f080 8123 	bcs.w	400c9a <__udivmoddi4+0x2a6>
  400a54:	42ab      	cmp	r3, r5
  400a56:	f240 8120 	bls.w	400c9a <__udivmoddi4+0x2a6>
  400a5a:	f1a8 0802 	sub.w	r8, r8, #2
  400a5e:	443d      	add	r5, r7
  400a60:	1aed      	subs	r5, r5, r3
  400a62:	b2a4      	uxth	r4, r4
  400a64:	fbb5 f0fa 	udiv	r0, r5, sl
  400a68:	fb0a 5510 	mls	r5, sl, r0, r5
  400a6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400a70:	fb00 f909 	mul.w	r9, r0, r9
  400a74:	45a1      	cmp	r9, r4
  400a76:	d909      	bls.n	400a8c <__udivmoddi4+0x98>
  400a78:	19e4      	adds	r4, r4, r7
  400a7a:	f100 33ff 	add.w	r3, r0, #4294967295
  400a7e:	f080 810a 	bcs.w	400c96 <__udivmoddi4+0x2a2>
  400a82:	45a1      	cmp	r9, r4
  400a84:	f240 8107 	bls.w	400c96 <__udivmoddi4+0x2a2>
  400a88:	3802      	subs	r0, #2
  400a8a:	443c      	add	r4, r7
  400a8c:	eba4 0409 	sub.w	r4, r4, r9
  400a90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  400a94:	2100      	movs	r1, #0
  400a96:	2e00      	cmp	r6, #0
  400a98:	d061      	beq.n	400b5e <__udivmoddi4+0x16a>
  400a9a:	fa24 f40e 	lsr.w	r4, r4, lr
  400a9e:	2300      	movs	r3, #0
  400aa0:	6034      	str	r4, [r6, #0]
  400aa2:	6073      	str	r3, [r6, #4]
  400aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400aa8:	428b      	cmp	r3, r1
  400aaa:	d907      	bls.n	400abc <__udivmoddi4+0xc8>
  400aac:	2e00      	cmp	r6, #0
  400aae:	d054      	beq.n	400b5a <__udivmoddi4+0x166>
  400ab0:	2100      	movs	r1, #0
  400ab2:	e886 0021 	stmia.w	r6, {r0, r5}
  400ab6:	4608      	mov	r0, r1
  400ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400abc:	fab3 f183 	clz	r1, r3
  400ac0:	2900      	cmp	r1, #0
  400ac2:	f040 808e 	bne.w	400be2 <__udivmoddi4+0x1ee>
  400ac6:	42ab      	cmp	r3, r5
  400ac8:	d302      	bcc.n	400ad0 <__udivmoddi4+0xdc>
  400aca:	4282      	cmp	r2, r0
  400acc:	f200 80fa 	bhi.w	400cc4 <__udivmoddi4+0x2d0>
  400ad0:	1a84      	subs	r4, r0, r2
  400ad2:	eb65 0503 	sbc.w	r5, r5, r3
  400ad6:	2001      	movs	r0, #1
  400ad8:	46ac      	mov	ip, r5
  400ada:	2e00      	cmp	r6, #0
  400adc:	d03f      	beq.n	400b5e <__udivmoddi4+0x16a>
  400ade:	e886 1010 	stmia.w	r6, {r4, ip}
  400ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ae6:	b912      	cbnz	r2, 400aee <__udivmoddi4+0xfa>
  400ae8:	2701      	movs	r7, #1
  400aea:	fbb7 f7f2 	udiv	r7, r7, r2
  400aee:	fab7 fe87 	clz	lr, r7
  400af2:	f1be 0f00 	cmp.w	lr, #0
  400af6:	d134      	bne.n	400b62 <__udivmoddi4+0x16e>
  400af8:	1beb      	subs	r3, r5, r7
  400afa:	0c3a      	lsrs	r2, r7, #16
  400afc:	fa1f fc87 	uxth.w	ip, r7
  400b00:	2101      	movs	r1, #1
  400b02:	fbb3 f8f2 	udiv	r8, r3, r2
  400b06:	0c25      	lsrs	r5, r4, #16
  400b08:	fb02 3318 	mls	r3, r2, r8, r3
  400b0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  400b10:	fb0c f308 	mul.w	r3, ip, r8
  400b14:	42ab      	cmp	r3, r5
  400b16:	d907      	bls.n	400b28 <__udivmoddi4+0x134>
  400b18:	19ed      	adds	r5, r5, r7
  400b1a:	f108 30ff 	add.w	r0, r8, #4294967295
  400b1e:	d202      	bcs.n	400b26 <__udivmoddi4+0x132>
  400b20:	42ab      	cmp	r3, r5
  400b22:	f200 80d1 	bhi.w	400cc8 <__udivmoddi4+0x2d4>
  400b26:	4680      	mov	r8, r0
  400b28:	1aed      	subs	r5, r5, r3
  400b2a:	b2a3      	uxth	r3, r4
  400b2c:	fbb5 f0f2 	udiv	r0, r5, r2
  400b30:	fb02 5510 	mls	r5, r2, r0, r5
  400b34:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  400b38:	fb0c fc00 	mul.w	ip, ip, r0
  400b3c:	45a4      	cmp	ip, r4
  400b3e:	d907      	bls.n	400b50 <__udivmoddi4+0x15c>
  400b40:	19e4      	adds	r4, r4, r7
  400b42:	f100 33ff 	add.w	r3, r0, #4294967295
  400b46:	d202      	bcs.n	400b4e <__udivmoddi4+0x15a>
  400b48:	45a4      	cmp	ip, r4
  400b4a:	f200 80b8 	bhi.w	400cbe <__udivmoddi4+0x2ca>
  400b4e:	4618      	mov	r0, r3
  400b50:	eba4 040c 	sub.w	r4, r4, ip
  400b54:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  400b58:	e79d      	b.n	400a96 <__udivmoddi4+0xa2>
  400b5a:	4631      	mov	r1, r6
  400b5c:	4630      	mov	r0, r6
  400b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b62:	f1ce 0420 	rsb	r4, lr, #32
  400b66:	fa05 f30e 	lsl.w	r3, r5, lr
  400b6a:	fa07 f70e 	lsl.w	r7, r7, lr
  400b6e:	fa20 f804 	lsr.w	r8, r0, r4
  400b72:	0c3a      	lsrs	r2, r7, #16
  400b74:	fa25 f404 	lsr.w	r4, r5, r4
  400b78:	ea48 0803 	orr.w	r8, r8, r3
  400b7c:	fbb4 f1f2 	udiv	r1, r4, r2
  400b80:	ea4f 4518 	mov.w	r5, r8, lsr #16
  400b84:	fb02 4411 	mls	r4, r2, r1, r4
  400b88:	fa1f fc87 	uxth.w	ip, r7
  400b8c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  400b90:	fb01 f30c 	mul.w	r3, r1, ip
  400b94:	42ab      	cmp	r3, r5
  400b96:	fa00 f40e 	lsl.w	r4, r0, lr
  400b9a:	d909      	bls.n	400bb0 <__udivmoddi4+0x1bc>
  400b9c:	19ed      	adds	r5, r5, r7
  400b9e:	f101 30ff 	add.w	r0, r1, #4294967295
  400ba2:	f080 808a 	bcs.w	400cba <__udivmoddi4+0x2c6>
  400ba6:	42ab      	cmp	r3, r5
  400ba8:	f240 8087 	bls.w	400cba <__udivmoddi4+0x2c6>
  400bac:	3902      	subs	r1, #2
  400bae:	443d      	add	r5, r7
  400bb0:	1aeb      	subs	r3, r5, r3
  400bb2:	fa1f f588 	uxth.w	r5, r8
  400bb6:	fbb3 f0f2 	udiv	r0, r3, r2
  400bba:	fb02 3310 	mls	r3, r2, r0, r3
  400bbe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  400bc2:	fb00 f30c 	mul.w	r3, r0, ip
  400bc6:	42ab      	cmp	r3, r5
  400bc8:	d907      	bls.n	400bda <__udivmoddi4+0x1e6>
  400bca:	19ed      	adds	r5, r5, r7
  400bcc:	f100 38ff 	add.w	r8, r0, #4294967295
  400bd0:	d26f      	bcs.n	400cb2 <__udivmoddi4+0x2be>
  400bd2:	42ab      	cmp	r3, r5
  400bd4:	d96d      	bls.n	400cb2 <__udivmoddi4+0x2be>
  400bd6:	3802      	subs	r0, #2
  400bd8:	443d      	add	r5, r7
  400bda:	1aeb      	subs	r3, r5, r3
  400bdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  400be0:	e78f      	b.n	400b02 <__udivmoddi4+0x10e>
  400be2:	f1c1 0720 	rsb	r7, r1, #32
  400be6:	fa22 f807 	lsr.w	r8, r2, r7
  400bea:	408b      	lsls	r3, r1
  400bec:	fa05 f401 	lsl.w	r4, r5, r1
  400bf0:	ea48 0303 	orr.w	r3, r8, r3
  400bf4:	fa20 fe07 	lsr.w	lr, r0, r7
  400bf8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  400bfc:	40fd      	lsrs	r5, r7
  400bfe:	ea4e 0e04 	orr.w	lr, lr, r4
  400c02:	fbb5 f9fc 	udiv	r9, r5, ip
  400c06:	ea4f 441e 	mov.w	r4, lr, lsr #16
  400c0a:	fb0c 5519 	mls	r5, ip, r9, r5
  400c0e:	fa1f f883 	uxth.w	r8, r3
  400c12:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  400c16:	fb09 f408 	mul.w	r4, r9, r8
  400c1a:	42ac      	cmp	r4, r5
  400c1c:	fa02 f201 	lsl.w	r2, r2, r1
  400c20:	fa00 fa01 	lsl.w	sl, r0, r1
  400c24:	d908      	bls.n	400c38 <__udivmoddi4+0x244>
  400c26:	18ed      	adds	r5, r5, r3
  400c28:	f109 30ff 	add.w	r0, r9, #4294967295
  400c2c:	d243      	bcs.n	400cb6 <__udivmoddi4+0x2c2>
  400c2e:	42ac      	cmp	r4, r5
  400c30:	d941      	bls.n	400cb6 <__udivmoddi4+0x2c2>
  400c32:	f1a9 0902 	sub.w	r9, r9, #2
  400c36:	441d      	add	r5, r3
  400c38:	1b2d      	subs	r5, r5, r4
  400c3a:	fa1f fe8e 	uxth.w	lr, lr
  400c3e:	fbb5 f0fc 	udiv	r0, r5, ip
  400c42:	fb0c 5510 	mls	r5, ip, r0, r5
  400c46:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  400c4a:	fb00 f808 	mul.w	r8, r0, r8
  400c4e:	45a0      	cmp	r8, r4
  400c50:	d907      	bls.n	400c62 <__udivmoddi4+0x26e>
  400c52:	18e4      	adds	r4, r4, r3
  400c54:	f100 35ff 	add.w	r5, r0, #4294967295
  400c58:	d229      	bcs.n	400cae <__udivmoddi4+0x2ba>
  400c5a:	45a0      	cmp	r8, r4
  400c5c:	d927      	bls.n	400cae <__udivmoddi4+0x2ba>
  400c5e:	3802      	subs	r0, #2
  400c60:	441c      	add	r4, r3
  400c62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  400c66:	eba4 0408 	sub.w	r4, r4, r8
  400c6a:	fba0 8902 	umull	r8, r9, r0, r2
  400c6e:	454c      	cmp	r4, r9
  400c70:	46c6      	mov	lr, r8
  400c72:	464d      	mov	r5, r9
  400c74:	d315      	bcc.n	400ca2 <__udivmoddi4+0x2ae>
  400c76:	d012      	beq.n	400c9e <__udivmoddi4+0x2aa>
  400c78:	b156      	cbz	r6, 400c90 <__udivmoddi4+0x29c>
  400c7a:	ebba 030e 	subs.w	r3, sl, lr
  400c7e:	eb64 0405 	sbc.w	r4, r4, r5
  400c82:	fa04 f707 	lsl.w	r7, r4, r7
  400c86:	40cb      	lsrs	r3, r1
  400c88:	431f      	orrs	r7, r3
  400c8a:	40cc      	lsrs	r4, r1
  400c8c:	6037      	str	r7, [r6, #0]
  400c8e:	6074      	str	r4, [r6, #4]
  400c90:	2100      	movs	r1, #0
  400c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c96:	4618      	mov	r0, r3
  400c98:	e6f8      	b.n	400a8c <__udivmoddi4+0x98>
  400c9a:	4690      	mov	r8, r2
  400c9c:	e6e0      	b.n	400a60 <__udivmoddi4+0x6c>
  400c9e:	45c2      	cmp	sl, r8
  400ca0:	d2ea      	bcs.n	400c78 <__udivmoddi4+0x284>
  400ca2:	ebb8 0e02 	subs.w	lr, r8, r2
  400ca6:	eb69 0503 	sbc.w	r5, r9, r3
  400caa:	3801      	subs	r0, #1
  400cac:	e7e4      	b.n	400c78 <__udivmoddi4+0x284>
  400cae:	4628      	mov	r0, r5
  400cb0:	e7d7      	b.n	400c62 <__udivmoddi4+0x26e>
  400cb2:	4640      	mov	r0, r8
  400cb4:	e791      	b.n	400bda <__udivmoddi4+0x1e6>
  400cb6:	4681      	mov	r9, r0
  400cb8:	e7be      	b.n	400c38 <__udivmoddi4+0x244>
  400cba:	4601      	mov	r1, r0
  400cbc:	e778      	b.n	400bb0 <__udivmoddi4+0x1bc>
  400cbe:	3802      	subs	r0, #2
  400cc0:	443c      	add	r4, r7
  400cc2:	e745      	b.n	400b50 <__udivmoddi4+0x15c>
  400cc4:	4608      	mov	r0, r1
  400cc6:	e708      	b.n	400ada <__udivmoddi4+0xe6>
  400cc8:	f1a8 0802 	sub.w	r8, r8, #2
  400ccc:	443d      	add	r5, r7
  400cce:	e72b      	b.n	400b28 <__udivmoddi4+0x134>

00400cd0 <__aeabi_idiv0>:
  400cd0:	4770      	bx	lr
  400cd2:	bf00      	nop

00400cd4 <__libc_init_array>:
  400cd4:	b570      	push	{r4, r5, r6, lr}
  400cd6:	4e0f      	ldr	r6, [pc, #60]	; (400d14 <__libc_init_array+0x40>)
  400cd8:	4d0f      	ldr	r5, [pc, #60]	; (400d18 <__libc_init_array+0x44>)
  400cda:	1b76      	subs	r6, r6, r5
  400cdc:	10b6      	asrs	r6, r6, #2
  400cde:	bf18      	it	ne
  400ce0:	2400      	movne	r4, #0
  400ce2:	d005      	beq.n	400cf0 <__libc_init_array+0x1c>
  400ce4:	3401      	adds	r4, #1
  400ce6:	f855 3b04 	ldr.w	r3, [r5], #4
  400cea:	4798      	blx	r3
  400cec:	42a6      	cmp	r6, r4
  400cee:	d1f9      	bne.n	400ce4 <__libc_init_array+0x10>
  400cf0:	4e0a      	ldr	r6, [pc, #40]	; (400d1c <__libc_init_array+0x48>)
  400cf2:	4d0b      	ldr	r5, [pc, #44]	; (400d20 <__libc_init_array+0x4c>)
  400cf4:	1b76      	subs	r6, r6, r5
  400cf6:	f000 f893 	bl	400e20 <_init>
  400cfa:	10b6      	asrs	r6, r6, #2
  400cfc:	bf18      	it	ne
  400cfe:	2400      	movne	r4, #0
  400d00:	d006      	beq.n	400d10 <__libc_init_array+0x3c>
  400d02:	3401      	adds	r4, #1
  400d04:	f855 3b04 	ldr.w	r3, [r5], #4
  400d08:	4798      	blx	r3
  400d0a:	42a6      	cmp	r6, r4
  400d0c:	d1f9      	bne.n	400d02 <__libc_init_array+0x2e>
  400d0e:	bd70      	pop	{r4, r5, r6, pc}
  400d10:	bd70      	pop	{r4, r5, r6, pc}
  400d12:	bf00      	nop
  400d14:	00400e2c 	.word	0x00400e2c
  400d18:	00400e2c 	.word	0x00400e2c
  400d1c:	00400e34 	.word	0x00400e34
  400d20:	00400e2c 	.word	0x00400e2c

00400d24 <register_fini>:
  400d24:	4b02      	ldr	r3, [pc, #8]	; (400d30 <register_fini+0xc>)
  400d26:	b113      	cbz	r3, 400d2e <register_fini+0xa>
  400d28:	4802      	ldr	r0, [pc, #8]	; (400d34 <register_fini+0x10>)
  400d2a:	f000 b805 	b.w	400d38 <atexit>
  400d2e:	4770      	bx	lr
  400d30:	00000000 	.word	0x00000000
  400d34:	00400d45 	.word	0x00400d45

00400d38 <atexit>:
  400d38:	2300      	movs	r3, #0
  400d3a:	4601      	mov	r1, r0
  400d3c:	461a      	mov	r2, r3
  400d3e:	4618      	mov	r0, r3
  400d40:	f000 b81a 	b.w	400d78 <__register_exitproc>

00400d44 <__libc_fini_array>:
  400d44:	b538      	push	{r3, r4, r5, lr}
  400d46:	4c0a      	ldr	r4, [pc, #40]	; (400d70 <__libc_fini_array+0x2c>)
  400d48:	4d0a      	ldr	r5, [pc, #40]	; (400d74 <__libc_fini_array+0x30>)
  400d4a:	1b64      	subs	r4, r4, r5
  400d4c:	10a4      	asrs	r4, r4, #2
  400d4e:	d00a      	beq.n	400d66 <__libc_fini_array+0x22>
  400d50:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400d54:	3b01      	subs	r3, #1
  400d56:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400d5a:	3c01      	subs	r4, #1
  400d5c:	f855 3904 	ldr.w	r3, [r5], #-4
  400d60:	4798      	blx	r3
  400d62:	2c00      	cmp	r4, #0
  400d64:	d1f9      	bne.n	400d5a <__libc_fini_array+0x16>
  400d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400d6a:	f000 b863 	b.w	400e34 <_fini>
  400d6e:	bf00      	nop
  400d70:	00400e44 	.word	0x00400e44
  400d74:	00400e40 	.word	0x00400e40

00400d78 <__register_exitproc>:
  400d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d7c:	4c25      	ldr	r4, [pc, #148]	; (400e14 <__register_exitproc+0x9c>)
  400d7e:	6825      	ldr	r5, [r4, #0]
  400d80:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400d84:	4606      	mov	r6, r0
  400d86:	4688      	mov	r8, r1
  400d88:	4692      	mov	sl, r2
  400d8a:	4699      	mov	r9, r3
  400d8c:	b3c4      	cbz	r4, 400e00 <__register_exitproc+0x88>
  400d8e:	6860      	ldr	r0, [r4, #4]
  400d90:	281f      	cmp	r0, #31
  400d92:	dc17      	bgt.n	400dc4 <__register_exitproc+0x4c>
  400d94:	1c43      	adds	r3, r0, #1
  400d96:	b176      	cbz	r6, 400db6 <__register_exitproc+0x3e>
  400d98:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400d9c:	2201      	movs	r2, #1
  400d9e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400da2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400da6:	4082      	lsls	r2, r0
  400da8:	4311      	orrs	r1, r2
  400daa:	2e02      	cmp	r6, #2
  400dac:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400db0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400db4:	d01e      	beq.n	400df4 <__register_exitproc+0x7c>
  400db6:	3002      	adds	r0, #2
  400db8:	6063      	str	r3, [r4, #4]
  400dba:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400dbe:	2000      	movs	r0, #0
  400dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400dc4:	4b14      	ldr	r3, [pc, #80]	; (400e18 <__register_exitproc+0xa0>)
  400dc6:	b303      	cbz	r3, 400e0a <__register_exitproc+0x92>
  400dc8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400dcc:	f3af 8000 	nop.w
  400dd0:	4604      	mov	r4, r0
  400dd2:	b1d0      	cbz	r0, 400e0a <__register_exitproc+0x92>
  400dd4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400dd8:	2700      	movs	r7, #0
  400dda:	e880 0088 	stmia.w	r0, {r3, r7}
  400dde:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400de2:	4638      	mov	r0, r7
  400de4:	2301      	movs	r3, #1
  400de6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400dea:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400dee:	2e00      	cmp	r6, #0
  400df0:	d0e1      	beq.n	400db6 <__register_exitproc+0x3e>
  400df2:	e7d1      	b.n	400d98 <__register_exitproc+0x20>
  400df4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400df8:	430a      	orrs	r2, r1
  400dfa:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400dfe:	e7da      	b.n	400db6 <__register_exitproc+0x3e>
  400e00:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400e04:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400e08:	e7c1      	b.n	400d8e <__register_exitproc+0x16>
  400e0a:	f04f 30ff 	mov.w	r0, #4294967295
  400e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400e12:	bf00      	nop
  400e14:	00400e1c 	.word	0x00400e1c
  400e18:	00000000 	.word	0x00000000

00400e1c <_global_impure_ptr>:
  400e1c:	20400010                                ..@ 

00400e20 <_init>:
  400e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e22:	bf00      	nop
  400e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400e26:	bc08      	pop	{r3}
  400e28:	469e      	mov	lr, r3
  400e2a:	4770      	bx	lr

00400e2c <__init_array_start>:
  400e2c:	00400d25 	.word	0x00400d25

00400e30 <__frame_dummy_init_array_entry>:
  400e30:	00400165                                e.@.

00400e34 <_fini>:
  400e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e36:	bf00      	nop
  400e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400e3a:	bc08      	pop	{r3}
  400e3c:	469e      	mov	lr, r3
  400e3e:	4770      	bx	lr

00400e40 <__fini_array_start>:
  400e40:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <impure_data>:
20400010:	0000 0000 02fc 2040 0364 2040 03cc 2040     ......@ d.@ ..@ 
	...
204000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
