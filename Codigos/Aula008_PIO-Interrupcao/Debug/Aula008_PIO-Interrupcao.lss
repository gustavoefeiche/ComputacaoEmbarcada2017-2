
Aula008_PIO-Interrupcao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fd4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20400000  00400fd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000098  20400438  0040140c  00020438  2**2
                  ALLOC
  3 .stack        00002000  204004d0  004014a4  00020438  2**0
                  ALLOC
  4 .heap         00000200  204024d0  004034a4  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000ec4a  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f8b  00000000  00000000  0002f109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002ca4  00000000  00000000  00031094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005e0  00000000  00000000  00033d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000698  00000000  00000000  00034318  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d0e5  00000000  00000000  000349b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000080c5  00000000  00000000  00051a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089763  00000000  00000000  00059b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000d04  00000000  00000000  000e32c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 24 40 20 69 09 40 00 65 09 40 00 65 09 40 00     .$@ i.@.e.@.e.@.
  400010:	65 09 40 00 65 09 40 00 65 09 40 00 00 00 00 00     e.@.e.@.e.@.....
	...
  40002c:	65 09 40 00 65 09 40 00 00 00 00 00 65 09 40 00     e.@.e.@.....e.@.
  40003c:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  40004c:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  40005c:	65 09 40 00 65 09 40 00 00 00 00 00 cd 04 40 00     e.@.e.@.......@.
  40006c:	e1 04 40 00 f5 04 40 00 65 09 40 00 65 09 40 00     ..@...@.e.@.e.@.
  40007c:	65 09 40 00 09 05 40 00 1d 05 40 00 65 09 40 00     e.@...@...@.e.@.
  40008c:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  40009c:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  4000ac:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  4000bc:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  4000cc:	65 09 40 00 00 00 00 00 65 09 40 00 00 00 00 00     e.@.....e.@.....
  4000dc:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  4000ec:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  4000fc:	65 09 40 00 65 09 40 00 65 09 40 00 65 09 40 00     e.@.e.@.e.@.e.@.
  40010c:	65 09 40 00 65 09 40 00 00 00 00 00 00 00 00 00     e.@.e.@.........
  40011c:	00 00 00 00 65 09 40 00 65 09 40 00 65 09 40 00     ....e.@.e.@.e.@.
  40012c:	65 09 40 00 65 09 40 00 00 00 00 00 65 09 40 00     e.@.e.@.....e.@.
  40013c:	65 09 40 00                                         e.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400438 	.word	0x20400438
  40015c:	00000000 	.word	0x00000000
  400160:	00400fd4 	.word	0x00400fd4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00400fd4 	.word	0x00400fd4
  4001a0:	2040043c 	.word	0x2040043c
  4001a4:	00400fd4 	.word	0x00400fd4
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400b3d 	.word	0x00400b3d
  4001f8:	004005cd 	.word	0x004005cd
  4001fc:	00400621 	.word	0x00400621
  400200:	00400631 	.word	0x00400631
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400641 	.word	0x00400641
  400210:	00400531 	.word	0x00400531
  400214:	00400569 	.word	0x00400569
  400218:	00400a31 	.word	0x00400a31

0040021c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400222:	4b48      	ldr	r3, [pc, #288]	; (400344 <board_init+0x128>)
  400224:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40022a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40022e:	4b46      	ldr	r3, [pc, #280]	; (400348 <board_init+0x12c>)
  400230:	2200      	movs	r2, #0
  400232:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400236:	695a      	ldr	r2, [r3, #20]
  400238:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40023c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40023e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400242:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400246:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40024a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40024e:	f007 0007 	and.w	r0, r7, #7
  400252:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400254:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400258:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40025c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400260:	f3bf 8f4f 	dsb	sy
  400264:	f04f 34ff 	mov.w	r4, #4294967295
  400268:	fa04 fc00 	lsl.w	ip, r4, r0
  40026c:	fa06 f000 	lsl.w	r0, r6, r0
  400270:	fa04 f40e 	lsl.w	r4, r4, lr
  400274:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400278:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40027a:	463a      	mov	r2, r7
  40027c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40027e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400282:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400286:	3a01      	subs	r2, #1
  400288:	4423      	add	r3, r4
  40028a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40028e:	d1f6      	bne.n	40027e <board_init+0x62>
        } while(sets--);
  400290:	3e01      	subs	r6, #1
  400292:	4460      	add	r0, ip
  400294:	f1b6 3fff 	cmp.w	r6, #4294967295
  400298:	d1ef      	bne.n	40027a <board_init+0x5e>
  40029a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40029e:	4b2a      	ldr	r3, [pc, #168]	; (400348 <board_init+0x12c>)
  4002a0:	695a      	ldr	r2, [r3, #20]
  4002a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4002a6:	615a      	str	r2, [r3, #20]
  4002a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ac:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002b0:	4a26      	ldr	r2, [pc, #152]	; (40034c <board_init+0x130>)
  4002b2:	4927      	ldr	r1, [pc, #156]	; (400350 <board_init+0x134>)
  4002b4:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002b6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4002ba:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4002bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002c0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002c4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002c8:	f022 0201 	bic.w	r2, r2, #1
  4002cc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4002d0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4002d4:	f022 0201 	bic.w	r2, r2, #1
  4002d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002e0:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002e4:	200a      	movs	r0, #10
  4002e6:	4c1b      	ldr	r4, [pc, #108]	; (400354 <board_init+0x138>)
  4002e8:	47a0      	blx	r4
  4002ea:	200b      	movs	r0, #11
  4002ec:	47a0      	blx	r4
  4002ee:	200c      	movs	r0, #12
  4002f0:	47a0      	blx	r4
  4002f2:	2010      	movs	r0, #16
  4002f4:	47a0      	blx	r4
  4002f6:	2011      	movs	r0, #17
  4002f8:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002fa:	4b17      	ldr	r3, [pc, #92]	; (400358 <board_init+0x13c>)
  4002fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  400300:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400306:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400308:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40030c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400310:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400312:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400316:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40031c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40031e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400324:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400326:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40032a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40032c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40032e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400332:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400334:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400338:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40033c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400342:	bf00      	nop
  400344:	400e1850 	.word	0x400e1850
  400348:	e000ed00 	.word	0xe000ed00
  40034c:	400e0c00 	.word	0x400e0c00
  400350:	5a00080c 	.word	0x5a00080c
  400354:	00400651 	.word	0x00400651
  400358:	400e1200 	.word	0x400e1200

0040035c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40035c:	6301      	str	r1, [r0, #48]	; 0x30
  40035e:	4770      	bx	lr

00400360 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400360:	6341      	str	r1, [r0, #52]	; 0x34
  400362:	4770      	bx	lr

00400364 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400364:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400366:	f012 0f01 	tst.w	r2, #1
  40036a:	d10d      	bne.n	400388 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40036c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40036e:	f012 0f0a 	tst.w	r2, #10
  400372:	d00b      	beq.n	40038c <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400374:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400376:	f012 0f02 	tst.w	r2, #2
  40037a:	d109      	bne.n	400390 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40037c:	f012 0f08 	tst.w	r2, #8
  400380:	d008      	beq.n	400394 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400382:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400386:	e005      	b.n	400394 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400388:	6641      	str	r1, [r0, #100]	; 0x64
  40038a:	e7f0      	b.n	40036e <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40038c:	6241      	str	r1, [r0, #36]	; 0x24
  40038e:	e7f2      	b.n	400376 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400390:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400394:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400396:	6001      	str	r1, [r0, #0]
  400398:	4770      	bx	lr

0040039a <pio_set_output>:
{
  40039a:	b410      	push	{r4}
  40039c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40039e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4003a0:	b94c      	cbnz	r4, 4003b6 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4003a2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4003a4:	b14b      	cbz	r3, 4003ba <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4003a6:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4003a8:	b94a      	cbnz	r2, 4003be <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4003aa:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4003ac:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4003ae:	6001      	str	r1, [r0, #0]
}
  4003b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003b4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4003b6:	6641      	str	r1, [r0, #100]	; 0x64
  4003b8:	e7f4      	b.n	4003a4 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4003ba:	6541      	str	r1, [r0, #84]	; 0x54
  4003bc:	e7f4      	b.n	4003a8 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4003be:	6301      	str	r1, [r0, #48]	; 0x30
  4003c0:	e7f4      	b.n	4003ac <pio_set_output+0x12>

004003c2 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4003c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4003c4:	420b      	tst	r3, r1
}
  4003c6:	bf14      	ite	ne
  4003c8:	2001      	movne	r0, #1
  4003ca:	2000      	moveq	r0, #0
  4003cc:	4770      	bx	lr

004003ce <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4003ce:	f012 0f10 	tst.w	r2, #16
  4003d2:	d012      	beq.n	4003fa <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4003d4:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4003d8:	f012 0f20 	tst.w	r2, #32
  4003dc:	d007      	beq.n	4003ee <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4003de:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4003e2:	f012 0f40 	tst.w	r2, #64	; 0x40
  4003e6:	d005      	beq.n	4003f4 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4003e8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4003ec:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4003ee:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4003f2:	e7f6      	b.n	4003e2 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4003f4:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4003f8:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4003fa:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4003fe:	4770      	bx	lr

00400400 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400400:	6401      	str	r1, [r0, #64]	; 0x40
  400402:	4770      	bx	lr

00400404 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400404:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400406:	4770      	bx	lr

00400408 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400408:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40040a:	4770      	bx	lr

0040040c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400410:	4604      	mov	r4, r0
  400412:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400414:	4b0e      	ldr	r3, [pc, #56]	; (400450 <pio_handler_process+0x44>)
  400416:	4798      	blx	r3
  400418:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40041a:	4620      	mov	r0, r4
  40041c:	4b0d      	ldr	r3, [pc, #52]	; (400454 <pio_handler_process+0x48>)
  40041e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400420:	4005      	ands	r5, r0
  400422:	d013      	beq.n	40044c <pio_handler_process+0x40>
  400424:	4c0c      	ldr	r4, [pc, #48]	; (400458 <pio_handler_process+0x4c>)
  400426:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40042a:	e003      	b.n	400434 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40042c:	42b4      	cmp	r4, r6
  40042e:	d00d      	beq.n	40044c <pio_handler_process+0x40>
  400430:	3410      	adds	r4, #16
		while (status != 0) {
  400432:	b15d      	cbz	r5, 40044c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400434:	6820      	ldr	r0, [r4, #0]
  400436:	4540      	cmp	r0, r8
  400438:	d1f8      	bne.n	40042c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40043a:	6861      	ldr	r1, [r4, #4]
  40043c:	4229      	tst	r1, r5
  40043e:	d0f5      	beq.n	40042c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400440:	68e3      	ldr	r3, [r4, #12]
  400442:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400444:	6863      	ldr	r3, [r4, #4]
  400446:	ea25 0503 	bic.w	r5, r5, r3
  40044a:	e7ef      	b.n	40042c <pio_handler_process+0x20>
  40044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400450:	00400405 	.word	0x00400405
  400454:	00400409 	.word	0x00400409
  400458:	20400454 	.word	0x20400454

0040045c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40045e:	4c18      	ldr	r4, [pc, #96]	; (4004c0 <pio_handler_set+0x64>)
  400460:	6826      	ldr	r6, [r4, #0]
  400462:	2e06      	cmp	r6, #6
  400464:	d82a      	bhi.n	4004bc <pio_handler_set+0x60>
  400466:	f04f 0c00 	mov.w	ip, #0
  40046a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40046c:	4f15      	ldr	r7, [pc, #84]	; (4004c4 <pio_handler_set+0x68>)
  40046e:	e004      	b.n	40047a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400470:	3401      	adds	r4, #1
  400472:	b2e4      	uxtb	r4, r4
  400474:	46a4      	mov	ip, r4
  400476:	42a6      	cmp	r6, r4
  400478:	d309      	bcc.n	40048e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40047a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40047c:	0125      	lsls	r5, r4, #4
  40047e:	597d      	ldr	r5, [r7, r5]
  400480:	428d      	cmp	r5, r1
  400482:	d1f5      	bne.n	400470 <pio_handler_set+0x14>
  400484:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400488:	686d      	ldr	r5, [r5, #4]
  40048a:	4295      	cmp	r5, r2
  40048c:	d1f0      	bne.n	400470 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40048e:	4d0d      	ldr	r5, [pc, #52]	; (4004c4 <pio_handler_set+0x68>)
  400490:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400494:	eb05 040e 	add.w	r4, r5, lr
  400498:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  40049c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40049e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4004a0:	9906      	ldr	r1, [sp, #24]
  4004a2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4004a4:	3601      	adds	r6, #1
  4004a6:	4566      	cmp	r6, ip
  4004a8:	d005      	beq.n	4004b6 <pio_handler_set+0x5a>
  4004aa:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4004ac:	461a      	mov	r2, r3
  4004ae:	4b06      	ldr	r3, [pc, #24]	; (4004c8 <pio_handler_set+0x6c>)
  4004b0:	4798      	blx	r3

	return 0;
  4004b2:	2000      	movs	r0, #0
  4004b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4004b6:	4902      	ldr	r1, [pc, #8]	; (4004c0 <pio_handler_set+0x64>)
  4004b8:	600e      	str	r6, [r1, #0]
  4004ba:	e7f6      	b.n	4004aa <pio_handler_set+0x4e>
		return 1;
  4004bc:	2001      	movs	r0, #1
}
  4004be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004c0:	204004c4 	.word	0x204004c4
  4004c4:	20400454 	.word	0x20400454
  4004c8:	004003cf 	.word	0x004003cf

004004cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4004cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4004ce:	210a      	movs	r1, #10
  4004d0:	4801      	ldr	r0, [pc, #4]	; (4004d8 <PIOA_Handler+0xc>)
  4004d2:	4b02      	ldr	r3, [pc, #8]	; (4004dc <PIOA_Handler+0x10>)
  4004d4:	4798      	blx	r3
  4004d6:	bd08      	pop	{r3, pc}
  4004d8:	400e0e00 	.word	0x400e0e00
  4004dc:	0040040d 	.word	0x0040040d

004004e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4004e0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4004e2:	210b      	movs	r1, #11
  4004e4:	4801      	ldr	r0, [pc, #4]	; (4004ec <PIOB_Handler+0xc>)
  4004e6:	4b02      	ldr	r3, [pc, #8]	; (4004f0 <PIOB_Handler+0x10>)
  4004e8:	4798      	blx	r3
  4004ea:	bd08      	pop	{r3, pc}
  4004ec:	400e1000 	.word	0x400e1000
  4004f0:	0040040d 	.word	0x0040040d

004004f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4004f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4004f6:	210c      	movs	r1, #12
  4004f8:	4801      	ldr	r0, [pc, #4]	; (400500 <PIOC_Handler+0xc>)
  4004fa:	4b02      	ldr	r3, [pc, #8]	; (400504 <PIOC_Handler+0x10>)
  4004fc:	4798      	blx	r3
  4004fe:	bd08      	pop	{r3, pc}
  400500:	400e1200 	.word	0x400e1200
  400504:	0040040d 	.word	0x0040040d

00400508 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400508:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40050a:	2110      	movs	r1, #16
  40050c:	4801      	ldr	r0, [pc, #4]	; (400514 <PIOD_Handler+0xc>)
  40050e:	4b02      	ldr	r3, [pc, #8]	; (400518 <PIOD_Handler+0x10>)
  400510:	4798      	blx	r3
  400512:	bd08      	pop	{r3, pc}
  400514:	400e1400 	.word	0x400e1400
  400518:	0040040d 	.word	0x0040040d

0040051c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40051c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40051e:	2111      	movs	r1, #17
  400520:	4801      	ldr	r0, [pc, #4]	; (400528 <PIOE_Handler+0xc>)
  400522:	4b02      	ldr	r3, [pc, #8]	; (40052c <PIOE_Handler+0x10>)
  400524:	4798      	blx	r3
  400526:	bd08      	pop	{r3, pc}
  400528:	400e1600 	.word	0x400e1600
  40052c:	0040040d 	.word	0x0040040d

00400530 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400530:	2803      	cmp	r0, #3
  400532:	d011      	beq.n	400558 <pmc_mck_set_division+0x28>
  400534:	2804      	cmp	r0, #4
  400536:	d012      	beq.n	40055e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400538:	2802      	cmp	r0, #2
  40053a:	bf0c      	ite	eq
  40053c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400540:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400542:	4a08      	ldr	r2, [pc, #32]	; (400564 <pmc_mck_set_division+0x34>)
  400544:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40054a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40054c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40054e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400550:	f013 0f08 	tst.w	r3, #8
  400554:	d0fb      	beq.n	40054e <pmc_mck_set_division+0x1e>
}
  400556:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400558:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40055c:	e7f1      	b.n	400542 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40055e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400562:	e7ee      	b.n	400542 <pmc_mck_set_division+0x12>
  400564:	400e0600 	.word	0x400e0600

00400568 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400568:	4a17      	ldr	r2, [pc, #92]	; (4005c8 <pmc_switch_mck_to_pllack+0x60>)
  40056a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40056c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400570:	4318      	orrs	r0, r3
  400572:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400574:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400576:	f013 0f08 	tst.w	r3, #8
  40057a:	d10a      	bne.n	400592 <pmc_switch_mck_to_pllack+0x2a>
  40057c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400580:	4911      	ldr	r1, [pc, #68]	; (4005c8 <pmc_switch_mck_to_pllack+0x60>)
  400582:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400584:	f012 0f08 	tst.w	r2, #8
  400588:	d103      	bne.n	400592 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40058a:	3b01      	subs	r3, #1
  40058c:	d1f9      	bne.n	400582 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40058e:	2001      	movs	r0, #1
  400590:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400592:	4a0d      	ldr	r2, [pc, #52]	; (4005c8 <pmc_switch_mck_to_pllack+0x60>)
  400594:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400596:	f023 0303 	bic.w	r3, r3, #3
  40059a:	f043 0302 	orr.w	r3, r3, #2
  40059e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005a2:	f013 0f08 	tst.w	r3, #8
  4005a6:	d10a      	bne.n	4005be <pmc_switch_mck_to_pllack+0x56>
  4005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005ac:	4906      	ldr	r1, [pc, #24]	; (4005c8 <pmc_switch_mck_to_pllack+0x60>)
  4005ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005b0:	f012 0f08 	tst.w	r2, #8
  4005b4:	d105      	bne.n	4005c2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005b6:	3b01      	subs	r3, #1
  4005b8:	d1f9      	bne.n	4005ae <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4005ba:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4005bc:	4770      	bx	lr
	return 0;
  4005be:	2000      	movs	r0, #0
  4005c0:	4770      	bx	lr
  4005c2:	2000      	movs	r0, #0
  4005c4:	4770      	bx	lr
  4005c6:	bf00      	nop
  4005c8:	400e0600 	.word	0x400e0600

004005cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4005cc:	b9a0      	cbnz	r0, 4005f8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005ce:	480e      	ldr	r0, [pc, #56]	; (400608 <pmc_switch_mainck_to_xtal+0x3c>)
  4005d0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4005d2:	0209      	lsls	r1, r1, #8
  4005d4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005d6:	4a0d      	ldr	r2, [pc, #52]	; (40060c <pmc_switch_mainck_to_xtal+0x40>)
  4005d8:	401a      	ands	r2, r3
  4005da:	4b0d      	ldr	r3, [pc, #52]	; (400610 <pmc_switch_mainck_to_xtal+0x44>)
  4005dc:	4313      	orrs	r3, r2
  4005de:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005e0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005e2:	4602      	mov	r2, r0
  4005e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005e6:	f013 0f01 	tst.w	r3, #1
  4005ea:	d0fb      	beq.n	4005e4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4005ec:	4a06      	ldr	r2, [pc, #24]	; (400608 <pmc_switch_mainck_to_xtal+0x3c>)
  4005ee:	6a11      	ldr	r1, [r2, #32]
  4005f0:	4b08      	ldr	r3, [pc, #32]	; (400614 <pmc_switch_mainck_to_xtal+0x48>)
  4005f2:	430b      	orrs	r3, r1
  4005f4:	6213      	str	r3, [r2, #32]
  4005f6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005f8:	4903      	ldr	r1, [pc, #12]	; (400608 <pmc_switch_mainck_to_xtal+0x3c>)
  4005fa:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4005fc:	4a06      	ldr	r2, [pc, #24]	; (400618 <pmc_switch_mainck_to_xtal+0x4c>)
  4005fe:	401a      	ands	r2, r3
  400600:	4b06      	ldr	r3, [pc, #24]	; (40061c <pmc_switch_mainck_to_xtal+0x50>)
  400602:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400604:	620b      	str	r3, [r1, #32]
  400606:	4770      	bx	lr
  400608:	400e0600 	.word	0x400e0600
  40060c:	ffc8fffc 	.word	0xffc8fffc
  400610:	00370001 	.word	0x00370001
  400614:	01370000 	.word	0x01370000
  400618:	fec8fffc 	.word	0xfec8fffc
  40061c:	01370002 	.word	0x01370002

00400620 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400620:	4b02      	ldr	r3, [pc, #8]	; (40062c <pmc_osc_is_ready_mainck+0xc>)
  400622:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400624:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400628:	4770      	bx	lr
  40062a:	bf00      	nop
  40062c:	400e0600 	.word	0x400e0600

00400630 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400630:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400634:	4b01      	ldr	r3, [pc, #4]	; (40063c <pmc_disable_pllack+0xc>)
  400636:	629a      	str	r2, [r3, #40]	; 0x28
  400638:	4770      	bx	lr
  40063a:	bf00      	nop
  40063c:	400e0600 	.word	0x400e0600

00400640 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400640:	4b02      	ldr	r3, [pc, #8]	; (40064c <pmc_is_locked_pllack+0xc>)
  400642:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400644:	f000 0002 	and.w	r0, r0, #2
  400648:	4770      	bx	lr
  40064a:	bf00      	nop
  40064c:	400e0600 	.word	0x400e0600

00400650 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400650:	283f      	cmp	r0, #63	; 0x3f
  400652:	d81e      	bhi.n	400692 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400654:	281f      	cmp	r0, #31
  400656:	d80c      	bhi.n	400672 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400658:	4b11      	ldr	r3, [pc, #68]	; (4006a0 <pmc_enable_periph_clk+0x50>)
  40065a:	699a      	ldr	r2, [r3, #24]
  40065c:	2301      	movs	r3, #1
  40065e:	4083      	lsls	r3, r0
  400660:	4393      	bics	r3, r2
  400662:	d018      	beq.n	400696 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400664:	2301      	movs	r3, #1
  400666:	fa03 f000 	lsl.w	r0, r3, r0
  40066a:	4b0d      	ldr	r3, [pc, #52]	; (4006a0 <pmc_enable_periph_clk+0x50>)
  40066c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40066e:	2000      	movs	r0, #0
  400670:	4770      	bx	lr
		ul_id -= 32;
  400672:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400674:	4b0a      	ldr	r3, [pc, #40]	; (4006a0 <pmc_enable_periph_clk+0x50>)
  400676:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40067a:	2301      	movs	r3, #1
  40067c:	4083      	lsls	r3, r0
  40067e:	4393      	bics	r3, r2
  400680:	d00b      	beq.n	40069a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400682:	2301      	movs	r3, #1
  400684:	fa03 f000 	lsl.w	r0, r3, r0
  400688:	4b05      	ldr	r3, [pc, #20]	; (4006a0 <pmc_enable_periph_clk+0x50>)
  40068a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40068e:	2000      	movs	r0, #0
  400690:	4770      	bx	lr
		return 1;
  400692:	2001      	movs	r0, #1
  400694:	4770      	bx	lr
	return 0;
  400696:	2000      	movs	r0, #0
  400698:	4770      	bx	lr
  40069a:	2000      	movs	r0, #0
}
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop
  4006a0:	400e0600 	.word	0x400e0600

004006a4 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4006a4:	4770      	bx	lr
	...

004006a8 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4006a8:	4a10      	ldr	r2, [pc, #64]	; (4006ec <pmc_enable_waitmode+0x44>)
  4006aa:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4006ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4006b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4006b4:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4006b6:	6a11      	ldr	r1, [r2, #32]
  4006b8:	4b0d      	ldr	r3, [pc, #52]	; (4006f0 <pmc_enable_waitmode+0x48>)
  4006ba:	430b      	orrs	r3, r1
  4006bc:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4006be:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006c0:	f013 0f08 	tst.w	r3, #8
  4006c4:	d0fb      	beq.n	4006be <pmc_enable_waitmode+0x16>
  4006c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4006ca:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4006cc:	3b01      	subs	r3, #1
  4006ce:	d1fc      	bne.n	4006ca <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4006d0:	4a06      	ldr	r2, [pc, #24]	; (4006ec <pmc_enable_waitmode+0x44>)
  4006d2:	6a13      	ldr	r3, [r2, #32]
  4006d4:	f013 0f08 	tst.w	r3, #8
  4006d8:	d0fb      	beq.n	4006d2 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4006da:	4a04      	ldr	r2, [pc, #16]	; (4006ec <pmc_enable_waitmode+0x44>)
  4006dc:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4006de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4006e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4006e6:	6713      	str	r3, [r2, #112]	; 0x70
  4006e8:	4770      	bx	lr
  4006ea:	bf00      	nop
  4006ec:	400e0600 	.word	0x400e0600
  4006f0:	00370004 	.word	0x00370004

004006f4 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4006f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4006f8:	1e43      	subs	r3, r0, #1
  4006fa:	2b04      	cmp	r3, #4
  4006fc:	f200 8105 	bhi.w	40090a <pmc_sleep+0x216>
  400700:	e8df f013 	tbh	[pc, r3, lsl #1]
  400704:	00050005 	.word	0x00050005
  400708:	00130013 	.word	0x00130013
  40070c:	00f4      	.short	0x00f4
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40070e:	4a80      	ldr	r2, [pc, #512]	; (400910 <pmc_sleep+0x21c>)
  400710:	6913      	ldr	r3, [r2, #16]
  400712:	f023 0304 	bic.w	r3, r3, #4
  400716:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400718:	2201      	movs	r2, #1
  40071a:	4b7e      	ldr	r3, [pc, #504]	; (400914 <pmc_sleep+0x220>)
  40071c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40071e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400722:	b662      	cpsie	i
  __ASM volatile ("wfi");
  400724:	bf30      	wfi
  400726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40072a:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40072c:	2803      	cmp	r0, #3
  40072e:	bf0c      	ite	eq
  400730:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400732:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400736:	4b78      	ldr	r3, [pc, #480]	; (400918 <pmc_sleep+0x224>)
  400738:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40073a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40073c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400740:	2200      	movs	r2, #0
  400742:	4b74      	ldr	r3, [pc, #464]	; (400914 <pmc_sleep+0x220>)
  400744:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400746:	2201      	movs	r2, #1
  400748:	4b74      	ldr	r3, [pc, #464]	; (40091c <pmc_sleep+0x228>)
  40074a:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  40074c:	4b74      	ldr	r3, [pc, #464]	; (400920 <pmc_sleep+0x22c>)
  40074e:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  400750:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  400752:	4a74      	ldr	r2, [pc, #464]	; (400924 <pmc_sleep+0x230>)
  400754:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400758:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40075a:	4a73      	ldr	r2, [pc, #460]	; (400928 <pmc_sleep+0x234>)
  40075c:	433a      	orrs	r2, r7
  40075e:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400760:	f005 0903 	and.w	r9, r5, #3
  400764:	f1b9 0f01 	cmp.w	r9, #1
  400768:	f240 8089 	bls.w	40087e <pmc_sleep+0x18a>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40076c:	f025 0103 	bic.w	r1, r5, #3
  400770:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400774:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400776:	461a      	mov	r2, r3
  400778:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40077a:	f013 0f08 	tst.w	r3, #8
  40077e:	d0fb      	beq.n	400778 <pmc_sleep+0x84>
	if (mckr & PMC_MCKR_PRES_Msk) {
  400780:	f011 0f70 	tst.w	r1, #112	; 0x70
  400784:	d008      	beq.n	400798 <pmc_sleep+0xa4>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400786:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  40078a:	4b65      	ldr	r3, [pc, #404]	; (400920 <pmc_sleep+0x22c>)
  40078c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40078e:	461a      	mov	r2, r3
  400790:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400792:	f013 0f08 	tst.w	r3, #8
  400796:	d0fb      	beq.n	400790 <pmc_sleep+0x9c>
	pmc_disable_pllack();
  400798:	4b64      	ldr	r3, [pc, #400]	; (40092c <pmc_sleep+0x238>)
  40079a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40079c:	4a60      	ldr	r2, [pc, #384]	; (400920 <pmc_sleep+0x22c>)
  40079e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4007a4:	d0fb      	beq.n	40079e <pmc_sleep+0xaa>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4007a6:	4a5e      	ldr	r2, [pc, #376]	; (400920 <pmc_sleep+0x22c>)
  4007a8:	6a11      	ldr	r1, [r2, #32]
  4007aa:	4b61      	ldr	r3, [pc, #388]	; (400930 <pmc_sleep+0x23c>)
  4007ac:	400b      	ands	r3, r1
  4007ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4007b2:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4007b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4007ba:	d0fb      	beq.n	4007b4 <pmc_sleep+0xc0>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4007bc:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4007c0:	4a58      	ldr	r2, [pc, #352]	; (400924 <pmc_sleep+0x230>)
  4007c2:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4007c4:	2c04      	cmp	r4, #4
  4007c6:	d05c      	beq.n	400882 <pmc_sleep+0x18e>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4007c8:	4c52      	ldr	r4, [pc, #328]	; (400914 <pmc_sleep+0x220>)
  4007ca:	2301      	movs	r3, #1
  4007cc:	7023      	strb	r3, [r4, #0]
  4007ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007d2:	b662      	cpsie	i

		pmc_enable_waitmode();
  4007d4:	4b57      	ldr	r3, [pc, #348]	; (400934 <pmc_sleep+0x240>)
  4007d6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4007d8:	b672      	cpsid	i
  4007da:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4007de:	2300      	movs	r3, #0
  4007e0:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4007e2:	f017 0f02 	tst.w	r7, #2
  4007e6:	d055      	beq.n	400894 <pmc_sleep+0x1a0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007e8:	4a4d      	ldr	r2, [pc, #308]	; (400920 <pmc_sleep+0x22c>)
  4007ea:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007ec:	4952      	ldr	r1, [pc, #328]	; (400938 <pmc_sleep+0x244>)
  4007ee:	4019      	ands	r1, r3
  4007f0:	4b52      	ldr	r3, [pc, #328]	; (40093c <pmc_sleep+0x248>)
  4007f2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007f4:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4007f6:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4007f8:	4b51      	ldr	r3, [pc, #324]	; (400940 <pmc_sleep+0x24c>)
  4007fa:	400b      	ands	r3, r1
  4007fc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400800:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  400802:	4b50      	ldr	r3, [pc, #320]	; (400944 <pmc_sleep+0x250>)
  400804:	4033      	ands	r3, r6
  400806:	2b00      	cmp	r3, #0
  400808:	d06e      	beq.n	4008e8 <pmc_sleep+0x1f4>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40080a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40080e:	4b44      	ldr	r3, [pc, #272]	; (400920 <pmc_sleep+0x22c>)
  400810:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  400812:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400814:	f1b9 0f02 	cmp.w	r9, #2
  400818:	d104      	bne.n	400824 <pmc_sleep+0x130>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40081a:	4a41      	ldr	r2, [pc, #260]	; (400920 <pmc_sleep+0x22c>)
  40081c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40081e:	f013 0f02 	tst.w	r3, #2
  400822:	d0fb      	beq.n	40081c <pmc_sleep+0x128>
	mckr = PMC->PMC_MCKR;
  400824:	4a3e      	ldr	r2, [pc, #248]	; (400920 <pmc_sleep+0x22c>)
  400826:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40082c:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400830:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400832:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400834:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400836:	f013 0f08 	tst.w	r3, #8
  40083a:	d0fb      	beq.n	400834 <pmc_sleep+0x140>
	EFC0->EEFC_FMR = fmr_setting;
  40083c:	4b39      	ldr	r3, [pc, #228]	; (400924 <pmc_sleep+0x230>)
  40083e:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  400842:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400846:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400848:	461a      	mov	r2, r3
  40084a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40084c:	f013 0f08 	tst.w	r3, #8
  400850:	d0fb      	beq.n	40084a <pmc_sleep+0x156>
	while (!(PMC->PMC_SR & pll_sr));
  400852:	4a33      	ldr	r2, [pc, #204]	; (400920 <pmc_sleep+0x22c>)
  400854:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400856:	420b      	tst	r3, r1
  400858:	d0fc      	beq.n	400854 <pmc_sleep+0x160>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40085a:	2200      	movs	r2, #0
  40085c:	4b2f      	ldr	r3, [pc, #188]	; (40091c <pmc_sleep+0x228>)
  40085e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400860:	4b39      	ldr	r3, [pc, #228]	; (400948 <pmc_sleep+0x254>)
  400862:	681b      	ldr	r3, [r3, #0]
  400864:	b11b      	cbz	r3, 40086e <pmc_sleep+0x17a>
			callback_clocks_restored();
  400866:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400868:	2200      	movs	r2, #0
  40086a:	4b37      	ldr	r3, [pc, #220]	; (400948 <pmc_sleep+0x254>)
  40086c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40086e:	2201      	movs	r2, #1
  400870:	4b28      	ldr	r3, [pc, #160]	; (400914 <pmc_sleep+0x220>)
  400872:	701a      	strb	r2, [r3, #0]
  400874:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400878:	b662      	cpsie	i
  40087a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40087e:	4629      	mov	r1, r5
  400880:	e77e      	b.n	400780 <pmc_sleep+0x8c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400882:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  400886:	6a11      	ldr	r1, [r2, #32]
  400888:	4b30      	ldr	r3, [pc, #192]	; (40094c <pmc_sleep+0x258>)
  40088a:	400b      	ands	r3, r1
  40088c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400890:	6213      	str	r3, [r2, #32]
  400892:	e799      	b.n	4007c8 <pmc_sleep+0xd4>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400894:	f017 0f01 	tst.w	r7, #1
  400898:	d0b3      	beq.n	400802 <pmc_sleep+0x10e>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40089a:	4b21      	ldr	r3, [pc, #132]	; (400920 <pmc_sleep+0x22c>)
  40089c:	6a1b      	ldr	r3, [r3, #32]
  40089e:	f013 0f01 	tst.w	r3, #1
  4008a2:	d10b      	bne.n	4008bc <pmc_sleep+0x1c8>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008a4:	491e      	ldr	r1, [pc, #120]	; (400920 <pmc_sleep+0x22c>)
  4008a6:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4008a8:	4a29      	ldr	r2, [pc, #164]	; (400950 <pmc_sleep+0x25c>)
  4008aa:	401a      	ands	r2, r3
  4008ac:	4b29      	ldr	r3, [pc, #164]	; (400954 <pmc_sleep+0x260>)
  4008ae:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008b0:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008b2:	460a      	mov	r2, r1
  4008b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008b6:	f013 0f01 	tst.w	r3, #1
  4008ba:	d0fb      	beq.n	4008b4 <pmc_sleep+0x1c0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4008bc:	4b18      	ldr	r3, [pc, #96]	; (400920 <pmc_sleep+0x22c>)
  4008be:	6a1b      	ldr	r3, [r3, #32]
  4008c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4008c4:	d108      	bne.n	4008d8 <pmc_sleep+0x1e4>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008c6:	4a16      	ldr	r2, [pc, #88]	; (400920 <pmc_sleep+0x22c>)
  4008c8:	6a11      	ldr	r1, [r2, #32]
  4008ca:	4b23      	ldr	r3, [pc, #140]	; (400958 <pmc_sleep+0x264>)
  4008cc:	430b      	orrs	r3, r1
  4008ce:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4008d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4008d6:	d0fb      	beq.n	4008d0 <pmc_sleep+0x1dc>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4008d8:	4a11      	ldr	r2, [pc, #68]	; (400920 <pmc_sleep+0x22c>)
  4008da:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4008dc:	4b18      	ldr	r3, [pc, #96]	; (400940 <pmc_sleep+0x24c>)
  4008de:	400b      	ands	r3, r1
  4008e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4008e4:	6213      	str	r3, [r2, #32]
  4008e6:	e78c      	b.n	400802 <pmc_sleep+0x10e>
	uint32_t pll_sr = 0;
  4008e8:	2100      	movs	r1, #0
  4008ea:	e793      	b.n	400814 <pmc_sleep+0x120>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4008ec:	4a08      	ldr	r2, [pc, #32]	; (400910 <pmc_sleep+0x21c>)
  4008ee:	6913      	ldr	r3, [r2, #16]
  4008f0:	f043 0304 	orr.w	r3, r3, #4
  4008f4:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4008f6:	4a19      	ldr	r2, [pc, #100]	; (40095c <pmc_sleep+0x268>)
  4008f8:	4b19      	ldr	r3, [pc, #100]	; (400960 <pmc_sleep+0x26c>)
  4008fa:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4008fc:	2201      	movs	r2, #1
  4008fe:	4b05      	ldr	r3, [pc, #20]	; (400914 <pmc_sleep+0x220>)
  400900:	701a      	strb	r2, [r3, #0]
  400902:	f3bf 8f5f 	dmb	sy
  400906:	b662      	cpsie	i
  __ASM volatile ("wfi");
  400908:	bf30      	wfi
  40090a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40090e:	bf00      	nop
  400910:	e000ed00 	.word	0xe000ed00
  400914:	2040000a 	.word	0x2040000a
  400918:	004006a5 	.word	0x004006a5
  40091c:	204004c8 	.word	0x204004c8
  400920:	400e0600 	.word	0x400e0600
  400924:	400e0c00 	.word	0x400e0c00
  400928:	00370008 	.word	0x00370008
  40092c:	00400631 	.word	0x00400631
  400930:	fec8ffff 	.word	0xfec8ffff
  400934:	004006a9 	.word	0x004006a9
  400938:	fec8fffc 	.word	0xfec8fffc
  40093c:	01370002 	.word	0x01370002
  400940:	ffc8ff87 	.word	0xffc8ff87
  400944:	07ff0000 	.word	0x07ff0000
  400948:	204004cc 	.word	0x204004cc
  40094c:	ffc8fffe 	.word	0xffc8fffe
  400950:	ffc8fffc 	.word	0xffc8fffc
  400954:	00370001 	.word	0x00370001
  400958:	01370000 	.word	0x01370000
  40095c:	a5000004 	.word	0xa5000004
  400960:	400e1810 	.word	0x400e1810

00400964 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400964:	e7fe      	b.n	400964 <Dummy_Handler>
	...

00400968 <Reset_Handler>:
{
  400968:	b500      	push	{lr}
  40096a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40096c:	4b25      	ldr	r3, [pc, #148]	; (400a04 <Reset_Handler+0x9c>)
  40096e:	4a26      	ldr	r2, [pc, #152]	; (400a08 <Reset_Handler+0xa0>)
  400970:	429a      	cmp	r2, r3
  400972:	d010      	beq.n	400996 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400974:	4b25      	ldr	r3, [pc, #148]	; (400a0c <Reset_Handler+0xa4>)
  400976:	4a23      	ldr	r2, [pc, #140]	; (400a04 <Reset_Handler+0x9c>)
  400978:	429a      	cmp	r2, r3
  40097a:	d20c      	bcs.n	400996 <Reset_Handler+0x2e>
  40097c:	3b01      	subs	r3, #1
  40097e:	1a9b      	subs	r3, r3, r2
  400980:	f023 0303 	bic.w	r3, r3, #3
  400984:	3304      	adds	r3, #4
  400986:	4413      	add	r3, r2
  400988:	491f      	ldr	r1, [pc, #124]	; (400a08 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40098a:	f851 0b04 	ldr.w	r0, [r1], #4
  40098e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400992:	429a      	cmp	r2, r3
  400994:	d1f9      	bne.n	40098a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400996:	4b1e      	ldr	r3, [pc, #120]	; (400a10 <Reset_Handler+0xa8>)
  400998:	4a1e      	ldr	r2, [pc, #120]	; (400a14 <Reset_Handler+0xac>)
  40099a:	429a      	cmp	r2, r3
  40099c:	d20a      	bcs.n	4009b4 <Reset_Handler+0x4c>
  40099e:	3b01      	subs	r3, #1
  4009a0:	1a9b      	subs	r3, r3, r2
  4009a2:	f023 0303 	bic.w	r3, r3, #3
  4009a6:	3304      	adds	r3, #4
  4009a8:	4413      	add	r3, r2
                *pDest++ = 0;
  4009aa:	2100      	movs	r1, #0
  4009ac:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4009b0:	4293      	cmp	r3, r2
  4009b2:	d1fb      	bne.n	4009ac <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009b4:	4a18      	ldr	r2, [pc, #96]	; (400a18 <Reset_Handler+0xb0>)
  4009b6:	4b19      	ldr	r3, [pc, #100]	; (400a1c <Reset_Handler+0xb4>)
  4009b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4009bc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4009be:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4009c2:	fab3 f383 	clz	r3, r3
  4009c6:	095b      	lsrs	r3, r3, #5
  4009c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4009ca:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4009cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4009d0:	2200      	movs	r2, #0
  4009d2:	4b13      	ldr	r3, [pc, #76]	; (400a20 <Reset_Handler+0xb8>)
  4009d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4009d6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4009d8:	4a12      	ldr	r2, [pc, #72]	; (400a24 <Reset_Handler+0xbc>)
  4009da:	6813      	ldr	r3, [r2, #0]
  4009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4009e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4009e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009e6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4009ea:	b129      	cbz	r1, 4009f8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4009ec:	2201      	movs	r2, #1
  4009ee:	4b0c      	ldr	r3, [pc, #48]	; (400a20 <Reset_Handler+0xb8>)
  4009f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4009f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009f6:	b662      	cpsie	i
        __libc_init_array();
  4009f8:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <Reset_Handler+0xc0>)
  4009fa:	4798      	blx	r3
        main();
  4009fc:	4b0b      	ldr	r3, [pc, #44]	; (400a2c <Reset_Handler+0xc4>)
  4009fe:	4798      	blx	r3
  400a00:	e7fe      	b.n	400a00 <Reset_Handler+0x98>
  400a02:	bf00      	nop
  400a04:	20400000 	.word	0x20400000
  400a08:	00400fd4 	.word	0x00400fd4
  400a0c:	20400438 	.word	0x20400438
  400a10:	204004d0 	.word	0x204004d0
  400a14:	20400438 	.word	0x20400438
  400a18:	e000ed00 	.word	0xe000ed00
  400a1c:	00400000 	.word	0x00400000
  400a20:	2040000a 	.word	0x2040000a
  400a24:	e000ed88 	.word	0xe000ed88
  400a28:	00400e65 	.word	0x00400e65
  400a2c:	00400d65 	.word	0x00400d65

00400a30 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400a30:	4b3b      	ldr	r3, [pc, #236]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a34:	f003 0303 	and.w	r3, r3, #3
  400a38:	2b01      	cmp	r3, #1
  400a3a:	d01d      	beq.n	400a78 <SystemCoreClockUpdate+0x48>
  400a3c:	b183      	cbz	r3, 400a60 <SystemCoreClockUpdate+0x30>
  400a3e:	2b02      	cmp	r3, #2
  400a40:	d036      	beq.n	400ab0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400a42:	4b37      	ldr	r3, [pc, #220]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a4a:	2b70      	cmp	r3, #112	; 0x70
  400a4c:	d05f      	beq.n	400b0e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a4e:	4b34      	ldr	r3, [pc, #208]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a52:	4934      	ldr	r1, [pc, #208]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400a54:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400a58:	680b      	ldr	r3, [r1, #0]
  400a5a:	40d3      	lsrs	r3, r2
  400a5c:	600b      	str	r3, [r1, #0]
  400a5e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400a60:	4b31      	ldr	r3, [pc, #196]	; (400b28 <SystemCoreClockUpdate+0xf8>)
  400a62:	695b      	ldr	r3, [r3, #20]
  400a64:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a68:	bf14      	ite	ne
  400a6a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a6e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a72:	4b2c      	ldr	r3, [pc, #176]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400a74:	601a      	str	r2, [r3, #0]
  400a76:	e7e4      	b.n	400a42 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a78:	4b29      	ldr	r3, [pc, #164]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400a7a:	6a1b      	ldr	r3, [r3, #32]
  400a7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a80:	d003      	beq.n	400a8a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a82:	4a2a      	ldr	r2, [pc, #168]	; (400b2c <SystemCoreClockUpdate+0xfc>)
  400a84:	4b27      	ldr	r3, [pc, #156]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400a86:	601a      	str	r2, [r3, #0]
  400a88:	e7db      	b.n	400a42 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a8a:	4a29      	ldr	r2, [pc, #164]	; (400b30 <SystemCoreClockUpdate+0x100>)
  400a8c:	4b25      	ldr	r3, [pc, #148]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400a8e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a90:	4b23      	ldr	r3, [pc, #140]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400a92:	6a1b      	ldr	r3, [r3, #32]
  400a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a98:	2b10      	cmp	r3, #16
  400a9a:	d005      	beq.n	400aa8 <SystemCoreClockUpdate+0x78>
  400a9c:	2b20      	cmp	r3, #32
  400a9e:	d1d0      	bne.n	400a42 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400aa0:	4a22      	ldr	r2, [pc, #136]	; (400b2c <SystemCoreClockUpdate+0xfc>)
  400aa2:	4b20      	ldr	r3, [pc, #128]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400aa4:	601a      	str	r2, [r3, #0]
          break;
  400aa6:	e7cc      	b.n	400a42 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400aa8:	4a22      	ldr	r2, [pc, #136]	; (400b34 <SystemCoreClockUpdate+0x104>)
  400aaa:	4b1e      	ldr	r3, [pc, #120]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400aac:	601a      	str	r2, [r3, #0]
          break;
  400aae:	e7c8      	b.n	400a42 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ab0:	4b1b      	ldr	r3, [pc, #108]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400ab2:	6a1b      	ldr	r3, [r3, #32]
  400ab4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ab8:	d016      	beq.n	400ae8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400aba:	4a1c      	ldr	r2, [pc, #112]	; (400b2c <SystemCoreClockUpdate+0xfc>)
  400abc:	4b19      	ldr	r3, [pc, #100]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400abe:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400ac0:	4b17      	ldr	r3, [pc, #92]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ac4:	f003 0303 	and.w	r3, r3, #3
  400ac8:	2b02      	cmp	r3, #2
  400aca:	d1ba      	bne.n	400a42 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400acc:	4a14      	ldr	r2, [pc, #80]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400ace:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ad0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400ad2:	4814      	ldr	r0, [pc, #80]	; (400b24 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ad4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400ad8:	6803      	ldr	r3, [r0, #0]
  400ada:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ade:	b2d2      	uxtb	r2, r2
  400ae0:	fbb3 f3f2 	udiv	r3, r3, r2
  400ae4:	6003      	str	r3, [r0, #0]
  400ae6:	e7ac      	b.n	400a42 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ae8:	4a11      	ldr	r2, [pc, #68]	; (400b30 <SystemCoreClockUpdate+0x100>)
  400aea:	4b0e      	ldr	r3, [pc, #56]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400aec:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400aee:	4b0c      	ldr	r3, [pc, #48]	; (400b20 <SystemCoreClockUpdate+0xf0>)
  400af0:	6a1b      	ldr	r3, [r3, #32]
  400af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400af6:	2b10      	cmp	r3, #16
  400af8:	d005      	beq.n	400b06 <SystemCoreClockUpdate+0xd6>
  400afa:	2b20      	cmp	r3, #32
  400afc:	d1e0      	bne.n	400ac0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400afe:	4a0b      	ldr	r2, [pc, #44]	; (400b2c <SystemCoreClockUpdate+0xfc>)
  400b00:	4b08      	ldr	r3, [pc, #32]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400b02:	601a      	str	r2, [r3, #0]
          break;
  400b04:	e7dc      	b.n	400ac0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400b06:	4a0b      	ldr	r2, [pc, #44]	; (400b34 <SystemCoreClockUpdate+0x104>)
  400b08:	4b06      	ldr	r3, [pc, #24]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400b0a:	601a      	str	r2, [r3, #0]
          break;
  400b0c:	e7d8      	b.n	400ac0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400b0e:	4a05      	ldr	r2, [pc, #20]	; (400b24 <SystemCoreClockUpdate+0xf4>)
  400b10:	6813      	ldr	r3, [r2, #0]
  400b12:	4909      	ldr	r1, [pc, #36]	; (400b38 <SystemCoreClockUpdate+0x108>)
  400b14:	fba1 1303 	umull	r1, r3, r1, r3
  400b18:	085b      	lsrs	r3, r3, #1
  400b1a:	6013      	str	r3, [r2, #0]
  400b1c:	4770      	bx	lr
  400b1e:	bf00      	nop
  400b20:	400e0600 	.word	0x400e0600
  400b24:	2040000c 	.word	0x2040000c
  400b28:	400e1810 	.word	0x400e1810
  400b2c:	00b71b00 	.word	0x00b71b00
  400b30:	003d0900 	.word	0x003d0900
  400b34:	007a1200 	.word	0x007a1200
  400b38:	aaaaaaab 	.word	0xaaaaaaab

00400b3c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400b3c:	4b12      	ldr	r3, [pc, #72]	; (400b88 <system_init_flash+0x4c>)
  400b3e:	4298      	cmp	r0, r3
  400b40:	d911      	bls.n	400b66 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400b42:	4b12      	ldr	r3, [pc, #72]	; (400b8c <system_init_flash+0x50>)
  400b44:	4298      	cmp	r0, r3
  400b46:	d913      	bls.n	400b70 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400b48:	4b11      	ldr	r3, [pc, #68]	; (400b90 <system_init_flash+0x54>)
  400b4a:	4298      	cmp	r0, r3
  400b4c:	d914      	bls.n	400b78 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400b4e:	4b11      	ldr	r3, [pc, #68]	; (400b94 <system_init_flash+0x58>)
  400b50:	4298      	cmp	r0, r3
  400b52:	d915      	bls.n	400b80 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400b54:	4b10      	ldr	r3, [pc, #64]	; (400b98 <system_init_flash+0x5c>)
  400b56:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b58:	bf94      	ite	ls
  400b5a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b5e:	4a0f      	ldrhi	r2, [pc, #60]	; (400b9c <system_init_flash+0x60>)
  400b60:	4b0f      	ldr	r3, [pc, #60]	; (400ba0 <system_init_flash+0x64>)
  400b62:	601a      	str	r2, [r3, #0]
  400b64:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b6a:	4b0d      	ldr	r3, [pc, #52]	; (400ba0 <system_init_flash+0x64>)
  400b6c:	601a      	str	r2, [r3, #0]
  400b6e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b70:	4a0c      	ldr	r2, [pc, #48]	; (400ba4 <system_init_flash+0x68>)
  400b72:	4b0b      	ldr	r3, [pc, #44]	; (400ba0 <system_init_flash+0x64>)
  400b74:	601a      	str	r2, [r3, #0]
  400b76:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400b78:	4a0b      	ldr	r2, [pc, #44]	; (400ba8 <system_init_flash+0x6c>)
  400b7a:	4b09      	ldr	r3, [pc, #36]	; (400ba0 <system_init_flash+0x64>)
  400b7c:	601a      	str	r2, [r3, #0]
  400b7e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b80:	4a0a      	ldr	r2, [pc, #40]	; (400bac <system_init_flash+0x70>)
  400b82:	4b07      	ldr	r3, [pc, #28]	; (400ba0 <system_init_flash+0x64>)
  400b84:	601a      	str	r2, [r3, #0]
  400b86:	4770      	bx	lr
  400b88:	01312cff 	.word	0x01312cff
  400b8c:	026259ff 	.word	0x026259ff
  400b90:	039386ff 	.word	0x039386ff
  400b94:	04c4b3ff 	.word	0x04c4b3ff
  400b98:	05f5e0ff 	.word	0x05f5e0ff
  400b9c:	04000500 	.word	0x04000500
  400ba0:	400e0c00 	.word	0x400e0c00
  400ba4:	04000100 	.word	0x04000100
  400ba8:	04000200 	.word	0x04000200
  400bac:	04000300 	.word	0x04000300

00400bb0 <BOARD_BUTTON_handler>:
void OLED_BUTTON1_handler(uint32_t a, uint32_t b);
void OLED_BUTTON2_handler(uint32_t a, uint32_t b);
void OLED_BUTTON3_handler(uint32_t a, uint32_t b);

// HANDLERS
void BOARD_BUTTON_handler(uint32_t a, uint32_t b) {
  400bb0:	b508      	push	{r3, lr}
	uint32_t pioIntStatus;
	pioIntStatus = pio_get_interrupt_status(BOARD_BUT_PIO);
  400bb2:	480a      	ldr	r0, [pc, #40]	; (400bdc <BOARD_BUTTON_handler+0x2c>)
  400bb4:	4b0a      	ldr	r3, [pc, #40]	; (400be0 <BOARD_BUTTON_handler+0x30>)
  400bb6:	4798      	blx	r3
	UNUSED(pioIntStatus);
	
	if(pio_get_output_data_status(BOARD_LED_PIO, BOARD_LED_PIN_MASK))
  400bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
  400bbc:	4809      	ldr	r0, [pc, #36]	; (400be4 <BOARD_BUTTON_handler+0x34>)
  400bbe:	4b0a      	ldr	r3, [pc, #40]	; (400be8 <BOARD_BUTTON_handler+0x38>)
  400bc0:	4798      	blx	r3
  400bc2:	b928      	cbnz	r0, 400bd0 <BOARD_BUTTON_handler+0x20>
		pio_clear(BOARD_LED_PIO, BOARD_LED_PIN_MASK);
	else
		pio_set(BOARD_LED_PIO, BOARD_LED_PIN_MASK);
  400bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
  400bc8:	4806      	ldr	r0, [pc, #24]	; (400be4 <BOARD_BUTTON_handler+0x34>)
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <BOARD_BUTTON_handler+0x3c>)
  400bcc:	4798      	blx	r3
  400bce:	bd08      	pop	{r3, pc}
		pio_clear(BOARD_LED_PIO, BOARD_LED_PIN_MASK);
  400bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
  400bd4:	4803      	ldr	r0, [pc, #12]	; (400be4 <BOARD_BUTTON_handler+0x34>)
  400bd6:	4b06      	ldr	r3, [pc, #24]	; (400bf0 <BOARD_BUTTON_handler+0x40>)
  400bd8:	4798      	blx	r3
  400bda:	bd08      	pop	{r3, pc}
  400bdc:	400e0e00 	.word	0x400e0e00
  400be0:	00400405 	.word	0x00400405
  400be4:	400e1200 	.word	0x400e1200
  400be8:	004003c3 	.word	0x004003c3
  400bec:	0040035d 	.word	0x0040035d
  400bf0:	00400361 	.word	0x00400361

00400bf4 <OLED_BUTTON1_handler>:
	
}

void OLED_BUTTON1_handler(uint32_t a, uint32_t b) {
  400bf4:	b508      	push	{r3, lr}
	uint32_t pioIntStatus;
    pioIntStatus = pio_get_interrupt_status(OLED_BUT1_PIO);
  400bf6:	4809      	ldr	r0, [pc, #36]	; (400c1c <OLED_BUTTON1_handler+0x28>)
  400bf8:	4b09      	ldr	r3, [pc, #36]	; (400c20 <OLED_BUTTON1_handler+0x2c>)
  400bfa:	4798      	blx	r3
	UNUSED(pioIntStatus);
	
	if(pio_get_output_data_status(OLED_LED1_PIO, OLED_LED1_PIN_MASK))
  400bfc:	2101      	movs	r1, #1
  400bfe:	4809      	ldr	r0, [pc, #36]	; (400c24 <OLED_BUTTON1_handler+0x30>)
  400c00:	4b09      	ldr	r3, [pc, #36]	; (400c28 <OLED_BUTTON1_handler+0x34>)
  400c02:	4798      	blx	r3
  400c04:	b920      	cbnz	r0, 400c10 <OLED_BUTTON1_handler+0x1c>
		pio_clear(OLED_LED1_PIO, OLED_LED1_PIN_MASK);
	else
		pio_set(OLED_LED1_PIO, OLED_LED1_PIN_MASK); 
  400c06:	2101      	movs	r1, #1
  400c08:	4806      	ldr	r0, [pc, #24]	; (400c24 <OLED_BUTTON1_handler+0x30>)
  400c0a:	4b08      	ldr	r3, [pc, #32]	; (400c2c <OLED_BUTTON1_handler+0x38>)
  400c0c:	4798      	blx	r3
  400c0e:	bd08      	pop	{r3, pc}
		pio_clear(OLED_LED1_PIO, OLED_LED1_PIN_MASK);
  400c10:	2101      	movs	r1, #1
  400c12:	4804      	ldr	r0, [pc, #16]	; (400c24 <OLED_BUTTON1_handler+0x30>)
  400c14:	4b06      	ldr	r3, [pc, #24]	; (400c30 <OLED_BUTTON1_handler+0x3c>)
  400c16:	4798      	blx	r3
  400c18:	bd08      	pop	{r3, pc}
  400c1a:	bf00      	nop
  400c1c:	400e1400 	.word	0x400e1400
  400c20:	00400405 	.word	0x00400405
  400c24:	400e0e00 	.word	0x400e0e00
  400c28:	004003c3 	.word	0x004003c3
  400c2c:	0040035d 	.word	0x0040035d
  400c30:	00400361 	.word	0x00400361

00400c34 <OLED_BUTTON2_handler>:
}

void OLED_BUTTON2_handler(uint32_t a, uint32_t b) {
  400c34:	b510      	push	{r4, lr}
	uint32_t pioIntStatus;
	pioIntStatus = pio_get_interrupt_status(OLED_BUT2_PIO);
  400c36:	4c0b      	ldr	r4, [pc, #44]	; (400c64 <OLED_BUTTON2_handler+0x30>)
  400c38:	4620      	mov	r0, r4
  400c3a:	4b0b      	ldr	r3, [pc, #44]	; (400c68 <OLED_BUTTON2_handler+0x34>)
  400c3c:	4798      	blx	r3
	UNUSED(pioIntStatus);
	
	if(pio_get_output_data_status(OLED_LED2_PIO, OLED_LED2_PIN_MASK))
  400c3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400c42:	4620      	mov	r0, r4
  400c44:	4b09      	ldr	r3, [pc, #36]	; (400c6c <OLED_BUTTON2_handler+0x38>)
  400c46:	4798      	blx	r3
  400c48:	b928      	cbnz	r0, 400c56 <OLED_BUTTON2_handler+0x22>
		pio_clear(OLED_LED2_PIO, OLED_LED2_PIN_MASK);
	else
		pio_set(OLED_LED2_PIO, OLED_LED2_PIN_MASK);
  400c4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400c4e:	4805      	ldr	r0, [pc, #20]	; (400c64 <OLED_BUTTON2_handler+0x30>)
  400c50:	4b07      	ldr	r3, [pc, #28]	; (400c70 <OLED_BUTTON2_handler+0x3c>)
  400c52:	4798      	blx	r3
  400c54:	bd10      	pop	{r4, pc}
		pio_clear(OLED_LED2_PIO, OLED_LED2_PIN_MASK);
  400c56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400c5a:	4620      	mov	r0, r4
  400c5c:	4b05      	ldr	r3, [pc, #20]	; (400c74 <OLED_BUTTON2_handler+0x40>)
  400c5e:	4798      	blx	r3
  400c60:	bd10      	pop	{r4, pc}
  400c62:	bf00      	nop
  400c64:	400e1200 	.word	0x400e1200
  400c68:	00400405 	.word	0x00400405
  400c6c:	004003c3 	.word	0x004003c3
  400c70:	0040035d 	.word	0x0040035d
  400c74:	00400361 	.word	0x00400361

00400c78 <OLED_BUTTON3_handler>:
	
}

void OLED_BUTTON3_handler(uint32_t a, uint32_t b) {
  400c78:	b508      	push	{r3, lr}
	uint32_t pioIntStatus;
	pioIntStatus = pio_get_interrupt_status(OLED_BUT3_PIO);
  400c7a:	4809      	ldr	r0, [pc, #36]	; (400ca0 <OLED_BUTTON3_handler+0x28>)
  400c7c:	4b09      	ldr	r3, [pc, #36]	; (400ca4 <OLED_BUTTON3_handler+0x2c>)
  400c7e:	4798      	blx	r3
	UNUSED(pioIntStatus);
	
	if(pio_get_output_data_status(OLED_LED3_PIO, OLED_LED3_PIN_MASK))
  400c80:	2104      	movs	r1, #4
  400c82:	4809      	ldr	r0, [pc, #36]	; (400ca8 <OLED_BUTTON3_handler+0x30>)
  400c84:	4b09      	ldr	r3, [pc, #36]	; (400cac <OLED_BUTTON3_handler+0x34>)
  400c86:	4798      	blx	r3
  400c88:	b920      	cbnz	r0, 400c94 <OLED_BUTTON3_handler+0x1c>
		pio_clear(OLED_LED3_PIO, OLED_LED3_PIN_MASK);
	else
		pio_set(OLED_LED3_PIO, OLED_LED3_PIN_MASK);
  400c8a:	2104      	movs	r1, #4
  400c8c:	4806      	ldr	r0, [pc, #24]	; (400ca8 <OLED_BUTTON3_handler+0x30>)
  400c8e:	4b08      	ldr	r3, [pc, #32]	; (400cb0 <OLED_BUTTON3_handler+0x38>)
  400c90:	4798      	blx	r3
  400c92:	bd08      	pop	{r3, pc}
		pio_clear(OLED_LED3_PIO, OLED_LED3_PIN_MASK);
  400c94:	2104      	movs	r1, #4
  400c96:	4804      	ldr	r0, [pc, #16]	; (400ca8 <OLED_BUTTON3_handler+0x30>)
  400c98:	4b06      	ldr	r3, [pc, #24]	; (400cb4 <OLED_BUTTON3_handler+0x3c>)
  400c9a:	4798      	blx	r3
  400c9c:	bd08      	pop	{r3, pc}
  400c9e:	bf00      	nop
  400ca0:	400e0e00 	.word	0x400e0e00
  400ca4:	00400405 	.word	0x00400405
  400ca8:	400e1000 	.word	0x400e1000
  400cac:	004003c3 	.word	0x004003c3
  400cb0:	0040035d 	.word	0x0040035d
  400cb4:	00400361 	.word	0x00400361

00400cb8 <LED_init>:
// CONFIG
void WATCHDOG_init(void) {
	WDT->WDT_MR = WDT_MR_WDDIS;
}

void LED_init(Pio *p_pio, uint32_t pio_id, uint32_t pin_mask, uint32_t state) {
  400cb8:	b570      	push	{r4, r5, r6, lr}
  400cba:	b082      	sub	sp, #8
  400cbc:	4604      	mov	r4, r0
  400cbe:	4615      	mov	r5, r2
  400cc0:	461e      	mov	r6, r3
    pmc_enable_periph_clk(pio_id);
  400cc2:	4608      	mov	r0, r1
  400cc4:	4b06      	ldr	r3, [pc, #24]	; (400ce0 <LED_init+0x28>)
  400cc6:	4798      	blx	r3
    pio_set_output(p_pio, pin_mask, !state, 0, 0);
  400cc8:	2300      	movs	r3, #0
  400cca:	9300      	str	r3, [sp, #0]
  400ccc:	fab6 f286 	clz	r2, r6
  400cd0:	0952      	lsrs	r2, r2, #5
  400cd2:	4629      	mov	r1, r5
  400cd4:	4620      	mov	r0, r4
  400cd6:	4c03      	ldr	r4, [pc, #12]	; (400ce4 <LED_init+0x2c>)
  400cd8:	47a0      	blx	r4
};
  400cda:	b002      	add	sp, #8
  400cdc:	bd70      	pop	{r4, r5, r6, pc}
  400cde:	bf00      	nop
  400ce0:	00400651 	.word	0x00400651
  400ce4:	0040039b 	.word	0x0040039b

00400ce8 <BUTTON_init>:

void BUTTON_init(Pio *p_pio, uint32_t pio_id, uint32_t pin_mask, void (*p_handler)(uint32_t, uint32_t), uint32_t interrupt_type) {
  400ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400cea:	b083      	sub	sp, #12
  400cec:	4605      	mov	r5, r0
  400cee:	460c      	mov	r4, r1
  400cf0:	4616      	mov	r6, r2
  400cf2:	461f      	mov	r7, r3
    pmc_enable_periph_clk(pio_id);
  400cf4:	4608      	mov	r0, r1
  400cf6:	4b15      	ldr	r3, [pc, #84]	; (400d4c <BUTTON_init+0x64>)
  400cf8:	4798      	blx	r3
    pio_set_input(p_pio, pin_mask, PIO_PULLUP | PIO_DEBOUNCE);
  400cfa:	2209      	movs	r2, #9
  400cfc:	4631      	mov	r1, r6
  400cfe:	4628      	mov	r0, r5
  400d00:	4b13      	ldr	r3, [pc, #76]	; (400d50 <BUTTON_init+0x68>)
  400d02:	4798      	blx	r3
    
    // Config interrupt as falling edge and set handler
    pio_enable_interrupt(p_pio, pin_mask);
  400d04:	4631      	mov	r1, r6
  400d06:	4628      	mov	r0, r5
  400d08:	4b12      	ldr	r3, [pc, #72]	; (400d54 <BUTTON_init+0x6c>)
  400d0a:	4798      	blx	r3
	
	pio_handler_set(p_pio, pio_id, pin_mask, interrupt_type, *p_handler);
  400d0c:	9700      	str	r7, [sp, #0]
  400d0e:	9b08      	ldr	r3, [sp, #32]
  400d10:	4632      	mov	r2, r6
  400d12:	4621      	mov	r1, r4
  400d14:	4628      	mov	r0, r5
  400d16:	4d10      	ldr	r5, [pc, #64]	; (400d58 <BUTTON_init+0x70>)
  400d18:	47a8      	blx	r5
	
	// Enable interruption for peripheral and set interrupt priority    
    NVIC_EnableIRQ(pio_id);
  400d1a:	b262      	sxtb	r2, r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400d1c:	0950      	lsrs	r0, r2, #5
  400d1e:	b2e4      	uxtb	r4, r4
  400d20:	f004 011f 	and.w	r1, r4, #31
  400d24:	2301      	movs	r3, #1
  400d26:	408b      	lsls	r3, r1
  400d28:	490c      	ldr	r1, [pc, #48]	; (400d5c <BUTTON_init+0x74>)
  400d2a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  if(IRQn < 0) {
  400d2e:	2a00      	cmp	r2, #0
  400d30:	db06      	blt.n	400d40 <BUTTON_init+0x58>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400d32:	4b0a      	ldr	r3, [pc, #40]	; (400d5c <BUTTON_init+0x74>)
  400d34:	4413      	add	r3, r2
  400d36:	2220      	movs	r2, #32
  400d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_SetPriority(pio_id, 1);
};
  400d3c:	b003      	add	sp, #12
  400d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400d40:	f004 040f 	and.w	r4, r4, #15
  400d44:	4b06      	ldr	r3, [pc, #24]	; (400d60 <BUTTON_init+0x78>)
  400d46:	2220      	movs	r2, #32
  400d48:	551a      	strb	r2, [r3, r4]
  400d4a:	e7f7      	b.n	400d3c <BUTTON_init+0x54>
  400d4c:	00400651 	.word	0x00400651
  400d50:	00400365 	.word	0x00400365
  400d54:	00400401 	.word	0x00400401
  400d58:	0040045d 	.word	0x0040045d
  400d5c:	e000e100 	.word	0xe000e100
  400d60:	e000ed14 	.word	0xe000ed14

00400d64 <main>:

// MAIN
int main(void) {
  400d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d68:	b082      	sub	sp, #8
	board_init();
  400d6a:	4b2c      	ldr	r3, [pc, #176]	; (400e1c <main+0xb8>)
  400d6c:	4798      	blx	r3
	sysclk_init();
  400d6e:	4b2c      	ldr	r3, [pc, #176]	; (400e20 <main+0xbc>)
  400d70:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d76:	4b2b      	ldr	r3, [pc, #172]	; (400e24 <main+0xc0>)
  400d78:	605a      	str	r2, [r3, #4]
	
	WATCHDOG_init();
	LED_init(BOARD_LED_PIO, BOARD_LED_PIO_ID, BOARD_LED_PIN_MASK, 1);
  400d7a:	4e2b      	ldr	r6, [pc, #172]	; (400e28 <main+0xc4>)
  400d7c:	2301      	movs	r3, #1
  400d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d82:	210c      	movs	r1, #12
  400d84:	4630      	mov	r0, r6
  400d86:	4c29      	ldr	r4, [pc, #164]	; (400e2c <main+0xc8>)
  400d88:	47a0      	blx	r4
	LED_init(OLED_LED1_PIO, OLED_LED1_PIO_ID, OLED_LED1_PIN_MASK, 1);
  400d8a:	4d29      	ldr	r5, [pc, #164]	; (400e30 <main+0xcc>)
  400d8c:	2301      	movs	r3, #1
  400d8e:	461a      	mov	r2, r3
  400d90:	210a      	movs	r1, #10
  400d92:	4628      	mov	r0, r5
  400d94:	47a0      	blx	r4
	LED_init(OLED_LED2_PIO, OLED_LED2_PIO_ID, OLED_LED2_PIN_MASK, 1);
  400d96:	2301      	movs	r3, #1
  400d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400d9c:	210c      	movs	r1, #12
  400d9e:	4630      	mov	r0, r6
  400da0:	47a0      	blx	r4
	LED_init(OLED_LED3_PIO, OLED_LED3_PIO_ID, OLED_LED3_PIN_MASK, 1);
  400da2:	2301      	movs	r3, #1
  400da4:	2204      	movs	r2, #4
  400da6:	210b      	movs	r1, #11
  400da8:	4822      	ldr	r0, [pc, #136]	; (400e34 <main+0xd0>)
  400daa:	47a0      	blx	r4
    BUTTON_init(BOARD_BUT_PIO, BOARD_BUT_PIO_ID, BOARD_BUT_PIN_MASK, BOARD_BUTTON_handler, PIO_IT_FALL_EDGE);
  400dac:	2750      	movs	r7, #80	; 0x50
  400dae:	9700      	str	r7, [sp, #0]
  400db0:	4b21      	ldr	r3, [pc, #132]	; (400e38 <main+0xd4>)
  400db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400db6:	210a      	movs	r1, #10
  400db8:	4628      	mov	r0, r5
  400dba:	4c20      	ldr	r4, [pc, #128]	; (400e3c <main+0xd8>)
  400dbc:	47a0      	blx	r4
	BUTTON_init(OLED_BUT1_PIO, OLED_BUT1_PIO_ID, OLED_BUT1_PIN_MASK, OLED_BUTTON1_handler, PIO_IT_FALL_EDGE);
  400dbe:	9700      	str	r7, [sp, #0]
  400dc0:	4b1f      	ldr	r3, [pc, #124]	; (400e40 <main+0xdc>)
  400dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400dc6:	2110      	movs	r1, #16
  400dc8:	481e      	ldr	r0, [pc, #120]	; (400e44 <main+0xe0>)
  400dca:	47a0      	blx	r4
	BUTTON_init(OLED_BUT2_PIO, OLED_BUT2_PIO_ID, OLED_BUT2_PIN_MASK, OLED_BUTTON2_handler, PIO_IT_RISE_EDGE);
  400dcc:	2370      	movs	r3, #112	; 0x70
  400dce:	9300      	str	r3, [sp, #0]
  400dd0:	4b1d      	ldr	r3, [pc, #116]	; (400e48 <main+0xe4>)
  400dd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400dd6:	210c      	movs	r1, #12
  400dd8:	4630      	mov	r0, r6
  400dda:	47a0      	blx	r4
	BUTTON_init(OLED_BUT3_PIO, OLED_BUT3_PIO_ID, OLED_BUT3_PIN_MASK, OLED_BUTTON3_handler, PIO_IT_EDGE);
  400ddc:	2340      	movs	r3, #64	; 0x40
  400dde:	9300      	str	r3, [sp, #0]
  400de0:	4b1a      	ldr	r3, [pc, #104]	; (400e4c <main+0xe8>)
  400de2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400de6:	210a      	movs	r1, #10
  400de8:	4628      	mov	r0, r5
  400dea:	47a0      	blx	r4
	
	while(1) {
		// sleep mode
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  400dec:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400e60 <main+0xfc>
		
		uint32_t i = 0;
		while(i <= 6) {
			delay_ms(250);
  400df0:	4f17      	ldr	r7, [pc, #92]	; (400e50 <main+0xec>)
		pmc_sleep(SLEEPMGR_SLEEP_WFI);
  400df2:	2002      	movs	r0, #2
  400df4:	47c0      	blx	r8
  400df6:	2407      	movs	r4, #7
			delay_ms(250);
  400df8:	4d16      	ldr	r5, [pc, #88]	; (400e54 <main+0xf0>)
  400dfa:	4638      	mov	r0, r7
  400dfc:	47a8      	blx	r5
			pio_clear(BOARD_LED_PIO, BOARD_LED_PIN_MASK);
  400dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
  400e02:	4630      	mov	r0, r6
  400e04:	4b14      	ldr	r3, [pc, #80]	; (400e58 <main+0xf4>)
  400e06:	4798      	blx	r3
			delay_ms(250);
  400e08:	4638      	mov	r0, r7
  400e0a:	47a8      	blx	r5
			pio_set(BOARD_LED_PIO, BOARD_LED_PIN_MASK);
  400e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
  400e10:	4630      	mov	r0, r6
  400e12:	4b12      	ldr	r3, [pc, #72]	; (400e5c <main+0xf8>)
  400e14:	4798      	blx	r3
		while(i <= 6) {
  400e16:	3c01      	subs	r4, #1
  400e18:	d1ef      	bne.n	400dfa <main+0x96>
  400e1a:	e7ea      	b.n	400df2 <main+0x8e>
  400e1c:	0040021d 	.word	0x0040021d
  400e20:	004001ad 	.word	0x004001ad
  400e24:	400e1850 	.word	0x400e1850
  400e28:	400e1200 	.word	0x400e1200
  400e2c:	00400cb9 	.word	0x00400cb9
  400e30:	400e0e00 	.word	0x400e0e00
  400e34:	400e1000 	.word	0x400e1000
  400e38:	00400bb1 	.word	0x00400bb1
  400e3c:	00400ce9 	.word	0x00400ce9
  400e40:	00400bf5 	.word	0x00400bf5
  400e44:	400e1400 	.word	0x400e1400
  400e48:	00400c35 	.word	0x00400c35
  400e4c:	00400c79 	.word	0x00400c79
  400e50:	00c0ebdb 	.word	0x00c0ebdb
  400e54:	20400001 	.word	0x20400001
  400e58:	00400361 	.word	0x00400361
  400e5c:	0040035d 	.word	0x0040035d
  400e60:	004006f5 	.word	0x004006f5

00400e64 <__libc_init_array>:
  400e64:	b570      	push	{r4, r5, r6, lr}
  400e66:	4e0f      	ldr	r6, [pc, #60]	; (400ea4 <__libc_init_array+0x40>)
  400e68:	4d0f      	ldr	r5, [pc, #60]	; (400ea8 <__libc_init_array+0x44>)
  400e6a:	1b76      	subs	r6, r6, r5
  400e6c:	10b6      	asrs	r6, r6, #2
  400e6e:	bf18      	it	ne
  400e70:	2400      	movne	r4, #0
  400e72:	d005      	beq.n	400e80 <__libc_init_array+0x1c>
  400e74:	3401      	adds	r4, #1
  400e76:	f855 3b04 	ldr.w	r3, [r5], #4
  400e7a:	4798      	blx	r3
  400e7c:	42a6      	cmp	r6, r4
  400e7e:	d1f9      	bne.n	400e74 <__libc_init_array+0x10>
  400e80:	4e0a      	ldr	r6, [pc, #40]	; (400eac <__libc_init_array+0x48>)
  400e82:	4d0b      	ldr	r5, [pc, #44]	; (400eb0 <__libc_init_array+0x4c>)
  400e84:	1b76      	subs	r6, r6, r5
  400e86:	f000 f893 	bl	400fb0 <_init>
  400e8a:	10b6      	asrs	r6, r6, #2
  400e8c:	bf18      	it	ne
  400e8e:	2400      	movne	r4, #0
  400e90:	d006      	beq.n	400ea0 <__libc_init_array+0x3c>
  400e92:	3401      	adds	r4, #1
  400e94:	f855 3b04 	ldr.w	r3, [r5], #4
  400e98:	4798      	blx	r3
  400e9a:	42a6      	cmp	r6, r4
  400e9c:	d1f9      	bne.n	400e92 <__libc_init_array+0x2e>
  400e9e:	bd70      	pop	{r4, r5, r6, pc}
  400ea0:	bd70      	pop	{r4, r5, r6, pc}
  400ea2:	bf00      	nop
  400ea4:	00400fbc 	.word	0x00400fbc
  400ea8:	00400fbc 	.word	0x00400fbc
  400eac:	00400fc4 	.word	0x00400fc4
  400eb0:	00400fbc 	.word	0x00400fbc

00400eb4 <register_fini>:
  400eb4:	4b02      	ldr	r3, [pc, #8]	; (400ec0 <register_fini+0xc>)
  400eb6:	b113      	cbz	r3, 400ebe <register_fini+0xa>
  400eb8:	4802      	ldr	r0, [pc, #8]	; (400ec4 <register_fini+0x10>)
  400eba:	f000 b805 	b.w	400ec8 <atexit>
  400ebe:	4770      	bx	lr
  400ec0:	00000000 	.word	0x00000000
  400ec4:	00400ed5 	.word	0x00400ed5

00400ec8 <atexit>:
  400ec8:	2300      	movs	r3, #0
  400eca:	4601      	mov	r1, r0
  400ecc:	461a      	mov	r2, r3
  400ece:	4618      	mov	r0, r3
  400ed0:	f000 b81a 	b.w	400f08 <__register_exitproc>

00400ed4 <__libc_fini_array>:
  400ed4:	b538      	push	{r3, r4, r5, lr}
  400ed6:	4c0a      	ldr	r4, [pc, #40]	; (400f00 <__libc_fini_array+0x2c>)
  400ed8:	4d0a      	ldr	r5, [pc, #40]	; (400f04 <__libc_fini_array+0x30>)
  400eda:	1b64      	subs	r4, r4, r5
  400edc:	10a4      	asrs	r4, r4, #2
  400ede:	d00a      	beq.n	400ef6 <__libc_fini_array+0x22>
  400ee0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400ee4:	3b01      	subs	r3, #1
  400ee6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400eea:	3c01      	subs	r4, #1
  400eec:	f855 3904 	ldr.w	r3, [r5], #-4
  400ef0:	4798      	blx	r3
  400ef2:	2c00      	cmp	r4, #0
  400ef4:	d1f9      	bne.n	400eea <__libc_fini_array+0x16>
  400ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400efa:	f000 b863 	b.w	400fc4 <_fini>
  400efe:	bf00      	nop
  400f00:	00400fd4 	.word	0x00400fd4
  400f04:	00400fd0 	.word	0x00400fd0

00400f08 <__register_exitproc>:
  400f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400f0c:	4c25      	ldr	r4, [pc, #148]	; (400fa4 <__register_exitproc+0x9c>)
  400f0e:	6825      	ldr	r5, [r4, #0]
  400f10:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400f14:	4606      	mov	r6, r0
  400f16:	4688      	mov	r8, r1
  400f18:	4692      	mov	sl, r2
  400f1a:	4699      	mov	r9, r3
  400f1c:	b3c4      	cbz	r4, 400f90 <__register_exitproc+0x88>
  400f1e:	6860      	ldr	r0, [r4, #4]
  400f20:	281f      	cmp	r0, #31
  400f22:	dc17      	bgt.n	400f54 <__register_exitproc+0x4c>
  400f24:	1c43      	adds	r3, r0, #1
  400f26:	b176      	cbz	r6, 400f46 <__register_exitproc+0x3e>
  400f28:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400f2c:	2201      	movs	r2, #1
  400f2e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400f32:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400f36:	4082      	lsls	r2, r0
  400f38:	4311      	orrs	r1, r2
  400f3a:	2e02      	cmp	r6, #2
  400f3c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400f40:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400f44:	d01e      	beq.n	400f84 <__register_exitproc+0x7c>
  400f46:	3002      	adds	r0, #2
  400f48:	6063      	str	r3, [r4, #4]
  400f4a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400f4e:	2000      	movs	r0, #0
  400f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400f54:	4b14      	ldr	r3, [pc, #80]	; (400fa8 <__register_exitproc+0xa0>)
  400f56:	b303      	cbz	r3, 400f9a <__register_exitproc+0x92>
  400f58:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400f5c:	f3af 8000 	nop.w
  400f60:	4604      	mov	r4, r0
  400f62:	b1d0      	cbz	r0, 400f9a <__register_exitproc+0x92>
  400f64:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400f68:	2700      	movs	r7, #0
  400f6a:	e880 0088 	stmia.w	r0, {r3, r7}
  400f6e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400f72:	4638      	mov	r0, r7
  400f74:	2301      	movs	r3, #1
  400f76:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400f7a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400f7e:	2e00      	cmp	r6, #0
  400f80:	d0e1      	beq.n	400f46 <__register_exitproc+0x3e>
  400f82:	e7d1      	b.n	400f28 <__register_exitproc+0x20>
  400f84:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400f88:	430a      	orrs	r2, r1
  400f8a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400f8e:	e7da      	b.n	400f46 <__register_exitproc+0x3e>
  400f90:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400f94:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400f98:	e7c1      	b.n	400f1e <__register_exitproc+0x16>
  400f9a:	f04f 30ff 	mov.w	r0, #4294967295
  400f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400fa2:	bf00      	nop
  400fa4:	00400fac 	.word	0x00400fac
  400fa8:	00000000 	.word	0x00000000

00400fac <_global_impure_ptr>:
  400fac:	20400010                                ..@ 

00400fb0 <_init>:
  400fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400fb2:	bf00      	nop
  400fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400fb6:	bc08      	pop	{r3}
  400fb8:	469e      	mov	lr, r3
  400fba:	4770      	bx	lr

00400fbc <__init_array_start>:
  400fbc:	00400eb5 	.word	0x00400eb5

00400fc0 <__frame_dummy_init_array_entry>:
  400fc0:	00400165                                e.@.

00400fc4 <_fini>:
  400fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400fc6:	bf00      	nop
  400fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400fca:	bc08      	pop	{r3}
  400fcc:	469e      	mov	lr, r3
  400fce:	4770      	bx	lr

00400fd0 <__fini_array_start>:
  400fd0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <impure_data>:
20400010:	0000 0000 02fc 2040 0364 2040 03cc 2040     ......@ d.@ ..@ 
	...
204000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
