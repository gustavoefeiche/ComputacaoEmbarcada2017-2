
Projeto2-Otimizacao-Energetica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002618  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20400000  00402618  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a8  20400438  00402a50  00020438  2**2
                  ALLOC
  3 .stack        00002000  204004e0  00402af8  00020438  2**0
                  ALLOC
  4 .heap         00000200  204024e0  00404af8  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   000133c6  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023b4  00000000  00000000  00033885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006e12  00000000  00000000  00035c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ba0  00000000  00000000  0003ca4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b38  00000000  00000000  0003d5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e27b  00000000  00000000  0003e123  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000aeba  00000000  00000000  0005c39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008a828  00000000  00000000  00067258  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000032f8  00000000  00000000  000f1a80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 24 40 20 fd 1a 40 00 ad 1b 40 00 ad 1b 40 00     .$@ ..@...@...@.
  400010:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ad 1b 40 00 ad 1b 40 00 00 00 00 00 ad 1b 40 00     ..@...@.......@.
  40003c:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ..@...@...@...@.
  40004c:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ..@...@...@...@.
  40005c:	ad 1b 40 00 ad 1b 40 00 00 00 00 00 75 0d 40 00     ..@...@.....u.@.
  40006c:	8d 0d 40 00 a5 0d 40 00 ad 1b 40 00 19 21 40 00     ..@...@...@..!@.
  40007c:	ad 1b 40 00 bd 0d 40 00 d5 0d 40 00 ad 1b 40 00     ..@...@...@...@.
  40008c:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ..@...@...@...@.
  40009c:	ad 1b 40 00 d5 20 40 00 ad 1b 40 00 ad 1b 40 00     ..@.. @...@...@.
  4000ac:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ..@...@...@...@.
  4000bc:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ..@...@...@...@.
  4000cc:	ad 1b 40 00 00 00 00 00 ad 1b 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ..@...@...@...@.
  4000ec:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ..@...@...@...@.
  4000fc:	ad 1b 40 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ..@...@...@...@.
  40010c:	ad 1b 40 00 ad 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ad 1b 40 00 ad 1b 40 00 ad 1b 40 00     ......@...@...@.
  40012c:	ad 1b 40 00 ad 1b 40 00 00 00 00 00 ad 1b 40 00     ..@...@.......@.
  40013c:	ad 1b 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400438 	.word	0x20400438
  40015c:	00000000 	.word	0x00000000
  400160:	00402618 	.word	0x00402618

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402618 	.word	0x00402618
  4001a0:	2040043c 	.word	0x2040043c
  4001a4:	00402618 	.word	0x00402618
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400eed 	.word	0x00400eed
  40022c:	00400f59 	.word	0x00400f59
  400230:	00400fc9 	.word	0x00400fc9

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400f25 	.word	0x00400f25
  4002a0:	00401041 	.word	0x00401041

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	0040105d 	.word	0x0040105d
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00401079 	.word	0x00401079
  400418:	00401095 	.word	0x00401095

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
  4004a2:	099b      	lsrs	r3, r3, #6
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a4:	4618      	mov	r0, r3
  4004a6:	bd80      	pop	{r7, pc}
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2060      	movs	r0, #96	; 0x60
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	00401d1d 	.word	0x00401d1d
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400ded 	.word	0x00400ded
  40051c:	00400e69 	.word	0x00400e69
  400520:	00401bb5 	.word	0x00401bb5
  400524:	00400499 	.word	0x00400499

00400528 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  400528:	b480      	push	{r7}
  40052a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40052c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400530:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400534:	4b09      	ldr	r3, [pc, #36]	; (40055c <SCB_EnableICache+0x34>)
  400536:	2200      	movs	r2, #0
  400538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40053c:	4a07      	ldr	r2, [pc, #28]	; (40055c <SCB_EnableICache+0x34>)
  40053e:	4b07      	ldr	r3, [pc, #28]	; (40055c <SCB_EnableICache+0x34>)
  400540:	695b      	ldr	r3, [r3, #20]
  400542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400546:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  400548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40054c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  400550:	bf00      	nop
  400552:	46bd      	mov	sp, r7
  400554:	f85d 7b04 	ldr.w	r7, [sp], #4
  400558:	4770      	bx	lr
  40055a:	bf00      	nop
  40055c:	e000ed00 	.word	0xe000ed00

00400560 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  400560:	b480      	push	{r7}
  400562:	b08b      	sub	sp, #44	; 0x2c
  400564:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400566:	4b26      	ldr	r3, [pc, #152]	; (400600 <SCB_EnableDCache+0xa0>)
  400568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40056c:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40056e:	69fb      	ldr	r3, [r7, #28]
  400570:	0b5b      	lsrs	r3, r3, #13
  400572:	f3c3 030e 	ubfx	r3, r3, #0, #15
  400576:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400578:	69fb      	ldr	r3, [r7, #28]
  40057a:	f003 0307 	and.w	r3, r3, #7
  40057e:	3304      	adds	r3, #4
  400580:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  400582:	69fb      	ldr	r3, [r7, #28]
  400584:	08db      	lsrs	r3, r3, #3
  400586:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40058a:	617b      	str	r3, [r7, #20]
  40058c:	697b      	ldr	r3, [r7, #20]
  40058e:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400590:	68bb      	ldr	r3, [r7, #8]
  400592:	fab3 f383 	clz	r3, r3
  400596:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  400598:	687b      	ldr	r3, [r7, #4]
  40059a:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  40059c:	f003 031f 	and.w	r3, r3, #31
  4005a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  4005a2:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4005a6:	697b      	ldr	r3, [r7, #20]
  4005a8:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4005aa:	6a3a      	ldr	r2, [r7, #32]
  4005ac:	693b      	ldr	r3, [r7, #16]
  4005ae:	fa02 f303 	lsl.w	r3, r2, r3
  4005b2:	4619      	mov	r1, r3
  4005b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4005b6:	69bb      	ldr	r3, [r7, #24]
  4005b8:	fa02 f303 	lsl.w	r3, r2, r3
  4005bc:	430b      	orrs	r3, r1
  4005be:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  4005c0:	4a0f      	ldr	r2, [pc, #60]	; (400600 <SCB_EnableDCache+0xa0>)
  4005c2:	68fb      	ldr	r3, [r7, #12]
  4005c4:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  4005c8:	6a3b      	ldr	r3, [r7, #32]
  4005ca:	1e5a      	subs	r2, r3, #1
  4005cc:	623a      	str	r2, [r7, #32]
  4005ce:	2b00      	cmp	r3, #0
  4005d0:	d1eb      	bne.n	4005aa <SCB_EnableDCache+0x4a>
        } while(sets--);
  4005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4005d4:	1e5a      	subs	r2, r3, #1
  4005d6:	627a      	str	r2, [r7, #36]	; 0x24
  4005d8:	2b00      	cmp	r3, #0
  4005da:	d1e4      	bne.n	4005a6 <SCB_EnableDCache+0x46>
  4005dc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4005e0:	4a07      	ldr	r2, [pc, #28]	; (400600 <SCB_EnableDCache+0xa0>)
  4005e2:	4b07      	ldr	r3, [pc, #28]	; (400600 <SCB_EnableDCache+0xa0>)
  4005e4:	695b      	ldr	r3, [r3, #20]
  4005e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4005ea:	6153      	str	r3, [r2, #20]
  4005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4005f0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4005f4:	bf00      	nop
  4005f6:	372c      	adds	r7, #44	; 0x2c
  4005f8:	46bd      	mov	sp, r7
  4005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005fe:	4770      	bx	lr
  400600:	e000ed00 	.word	0xe000ed00

00400604 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400604:	b580      	push	{r7, lr}
  400606:	b082      	sub	sp, #8
  400608:	af00      	add	r7, sp, #0
  40060a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40060c:	6878      	ldr	r0, [r7, #4]
  40060e:	4b03      	ldr	r3, [pc, #12]	; (40061c <sysclk_enable_peripheral_clock+0x18>)
  400610:	4798      	blx	r3
}
  400612:	bf00      	nop
  400614:	3708      	adds	r7, #8
  400616:	46bd      	mov	sp, r7
  400618:	bd80      	pop	{r7, pc}
  40061a:	bf00      	nop
  40061c:	004010b1 	.word	0x004010b1

00400620 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400620:	b580      	push	{r7, lr}
  400622:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400624:	200a      	movs	r0, #10
  400626:	4b08      	ldr	r3, [pc, #32]	; (400648 <ioport_init+0x28>)
  400628:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40062a:	200b      	movs	r0, #11
  40062c:	4b06      	ldr	r3, [pc, #24]	; (400648 <ioport_init+0x28>)
  40062e:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400630:	200c      	movs	r0, #12
  400632:	4b05      	ldr	r3, [pc, #20]	; (400648 <ioport_init+0x28>)
  400634:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400636:	2010      	movs	r0, #16
  400638:	4b03      	ldr	r3, [pc, #12]	; (400648 <ioport_init+0x28>)
  40063a:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  40063c:	2011      	movs	r0, #17
  40063e:	4b02      	ldr	r3, [pc, #8]	; (400648 <ioport_init+0x28>)
  400640:	4798      	blx	r3
	arch_ioport_init();
}
  400642:	bf00      	nop
  400644:	bd80      	pop	{r7, pc}
  400646:	bf00      	nop
  400648:	00400605 	.word	0x00400605

0040064c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  40064c:	b480      	push	{r7}
  40064e:	b089      	sub	sp, #36	; 0x24
  400650:	af00      	add	r7, sp, #0
  400652:	6078      	str	r0, [r7, #4]
  400654:	687b      	ldr	r3, [r7, #4]
  400656:	61fb      	str	r3, [r7, #28]
  400658:	69fb      	ldr	r3, [r7, #28]
  40065a:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40065c:	69bb      	ldr	r3, [r7, #24]
  40065e:	095a      	lsrs	r2, r3, #5
  400660:	69fb      	ldr	r3, [r7, #28]
  400662:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400664:	697b      	ldr	r3, [r7, #20]
  400666:	f003 031f 	and.w	r3, r3, #31
  40066a:	2101      	movs	r1, #1
  40066c:	fa01 f303 	lsl.w	r3, r1, r3
  400670:	613a      	str	r2, [r7, #16]
  400672:	60fb      	str	r3, [r7, #12]
  400674:	693b      	ldr	r3, [r7, #16]
  400676:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400678:	68ba      	ldr	r2, [r7, #8]
  40067a:	4b06      	ldr	r3, [pc, #24]	; (400694 <ioport_disable_pin+0x48>)
  40067c:	4413      	add	r3, r2
  40067e:	025b      	lsls	r3, r3, #9
  400680:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400686:	bf00      	nop
  400688:	3724      	adds	r7, #36	; 0x24
  40068a:	46bd      	mov	sp, r7
  40068c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	00200707 	.word	0x00200707

00400698 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400698:	b480      	push	{r7}
  40069a:	b08d      	sub	sp, #52	; 0x34
  40069c:	af00      	add	r7, sp, #0
  40069e:	6078      	str	r0, [r7, #4]
  4006a0:	6039      	str	r1, [r7, #0]
  4006a2:	687b      	ldr	r3, [r7, #4]
  4006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006a6:	683b      	ldr	r3, [r7, #0]
  4006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  4006aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006ac:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4006ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006b0:	095a      	lsrs	r2, r3, #5
  4006b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006b4:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4006b6:	6a3b      	ldr	r3, [r7, #32]
  4006b8:	f003 031f 	and.w	r3, r3, #31
  4006bc:	2101      	movs	r1, #1
  4006be:	fa01 f303 	lsl.w	r3, r1, r3
  4006c2:	61fa      	str	r2, [r7, #28]
  4006c4:	61bb      	str	r3, [r7, #24]
  4006c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4006c8:	617b      	str	r3, [r7, #20]
  4006ca:	69fb      	ldr	r3, [r7, #28]
  4006cc:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ce:	693a      	ldr	r2, [r7, #16]
  4006d0:	4b37      	ldr	r3, [pc, #220]	; (4007b0 <ioport_set_pin_mode+0x118>)
  4006d2:	4413      	add	r3, r2
  4006d4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006d6:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	f003 0308 	and.w	r3, r3, #8
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d003      	beq.n	4006ea <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	69ba      	ldr	r2, [r7, #24]
  4006e6:	665a      	str	r2, [r3, #100]	; 0x64
  4006e8:	e002      	b.n	4006f0 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4006ea:	68fb      	ldr	r3, [r7, #12]
  4006ec:	69ba      	ldr	r2, [r7, #24]
  4006ee:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006f0:	697b      	ldr	r3, [r7, #20]
  4006f2:	f003 0310 	and.w	r3, r3, #16
  4006f6:	2b00      	cmp	r3, #0
  4006f8:	d004      	beq.n	400704 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4006fa:	68fb      	ldr	r3, [r7, #12]
  4006fc:	69ba      	ldr	r2, [r7, #24]
  4006fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400702:	e003      	b.n	40070c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400704:	68fb      	ldr	r3, [r7, #12]
  400706:	69ba      	ldr	r2, [r7, #24]
  400708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	f003 0320 	and.w	r3, r3, #32
  400712:	2b00      	cmp	r3, #0
  400714:	d003      	beq.n	40071e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	69ba      	ldr	r2, [r7, #24]
  40071a:	651a      	str	r2, [r3, #80]	; 0x50
  40071c:	e002      	b.n	400724 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40071e:	68fb      	ldr	r3, [r7, #12]
  400720:	69ba      	ldr	r2, [r7, #24]
  400722:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40072a:	2b00      	cmp	r3, #0
  40072c:	d003      	beq.n	400736 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40072e:	68fb      	ldr	r3, [r7, #12]
  400730:	69ba      	ldr	r2, [r7, #24]
  400732:	621a      	str	r2, [r3, #32]
  400734:	e002      	b.n	40073c <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400736:	68fb      	ldr	r3, [r7, #12]
  400738:	69ba      	ldr	r2, [r7, #24]
  40073a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400742:	2b00      	cmp	r3, #0
  400744:	d004      	beq.n	400750 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400746:	68fb      	ldr	r3, [r7, #12]
  400748:	69ba      	ldr	r2, [r7, #24]
  40074a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40074e:	e003      	b.n	400758 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400750:	68fb      	ldr	r3, [r7, #12]
  400752:	69ba      	ldr	r2, [r7, #24]
  400754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	f003 0301 	and.w	r3, r3, #1
  40075e:	2b00      	cmp	r3, #0
  400760:	d006      	beq.n	400770 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400762:	68fb      	ldr	r3, [r7, #12]
  400764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400766:	69bb      	ldr	r3, [r7, #24]
  400768:	431a      	orrs	r2, r3
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	671a      	str	r2, [r3, #112]	; 0x70
  40076e:	e006      	b.n	40077e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400770:	68fb      	ldr	r3, [r7, #12]
  400772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400774:	69bb      	ldr	r3, [r7, #24]
  400776:	43db      	mvns	r3, r3
  400778:	401a      	ands	r2, r3
  40077a:	68fb      	ldr	r3, [r7, #12]
  40077c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	f003 0302 	and.w	r3, r3, #2
  400784:	2b00      	cmp	r3, #0
  400786:	d006      	beq.n	400796 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400788:	68fb      	ldr	r3, [r7, #12]
  40078a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40078c:	69bb      	ldr	r3, [r7, #24]
  40078e:	431a      	orrs	r2, r3
  400790:	68fb      	ldr	r3, [r7, #12]
  400792:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400794:	e006      	b.n	4007a4 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400796:	68fb      	ldr	r3, [r7, #12]
  400798:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40079a:	69bb      	ldr	r3, [r7, #24]
  40079c:	43db      	mvns	r3, r3
  40079e:	401a      	ands	r2, r3
  4007a0:	68fb      	ldr	r3, [r7, #12]
  4007a2:	675a      	str	r2, [r3, #116]	; 0x74
  4007a4:	bf00      	nop
  4007a6:	3734      	adds	r7, #52	; 0x34
  4007a8:	46bd      	mov	sp, r7
  4007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ae:	4770      	bx	lr
  4007b0:	00200707 	.word	0x00200707

004007b4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4007b4:	b480      	push	{r7}
  4007b6:	b08d      	sub	sp, #52	; 0x34
  4007b8:	af00      	add	r7, sp, #0
  4007ba:	6078      	str	r0, [r7, #4]
  4007bc:	460b      	mov	r3, r1
  4007be:	70fb      	strb	r3, [r7, #3]
  4007c0:	687b      	ldr	r3, [r7, #4]
  4007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007c4:	78fb      	ldrb	r3, [r7, #3]
  4007c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4007ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007cc:	627b      	str	r3, [r7, #36]	; 0x24
  4007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007d0:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4007d2:	6a3b      	ldr	r3, [r7, #32]
  4007d4:	095b      	lsrs	r3, r3, #5
  4007d6:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007d8:	69fa      	ldr	r2, [r7, #28]
  4007da:	4b17      	ldr	r3, [pc, #92]	; (400838 <ioport_set_pin_dir+0x84>)
  4007dc:	4413      	add	r3, r2
  4007de:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007e0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4007e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007e6:	2b01      	cmp	r3, #1
  4007e8:	d109      	bne.n	4007fe <ioport_set_pin_dir+0x4a>
  4007ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ec:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4007ee:	697b      	ldr	r3, [r7, #20]
  4007f0:	f003 031f 	and.w	r3, r3, #31
  4007f4:	2201      	movs	r2, #1
  4007f6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007f8:	69bb      	ldr	r3, [r7, #24]
  4007fa:	611a      	str	r2, [r3, #16]
  4007fc:	e00c      	b.n	400818 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4007fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400802:	2b00      	cmp	r3, #0
  400804:	d108      	bne.n	400818 <ioport_set_pin_dir+0x64>
  400806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400808:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40080a:	693b      	ldr	r3, [r7, #16]
  40080c:	f003 031f 	and.w	r3, r3, #31
  400810:	2201      	movs	r2, #1
  400812:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400814:	69bb      	ldr	r3, [r7, #24]
  400816:	615a      	str	r2, [r3, #20]
  400818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40081a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40081c:	68fb      	ldr	r3, [r7, #12]
  40081e:	f003 031f 	and.w	r3, r3, #31
  400822:	2201      	movs	r2, #1
  400824:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400826:	69bb      	ldr	r3, [r7, #24]
  400828:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40082c:	bf00      	nop
  40082e:	3734      	adds	r7, #52	; 0x34
  400830:	46bd      	mov	sp, r7
  400832:	f85d 7b04 	ldr.w	r7, [sp], #4
  400836:	4770      	bx	lr
  400838:	00200707 	.word	0x00200707

0040083c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40083c:	b480      	push	{r7}
  40083e:	b08b      	sub	sp, #44	; 0x2c
  400840:	af00      	add	r7, sp, #0
  400842:	6078      	str	r0, [r7, #4]
  400844:	460b      	mov	r3, r1
  400846:	70fb      	strb	r3, [r7, #3]
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	627b      	str	r3, [r7, #36]	; 0x24
  40084c:	78fb      	ldrb	r3, [r7, #3]
  40084e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400854:	61fb      	str	r3, [r7, #28]
  400856:	69fb      	ldr	r3, [r7, #28]
  400858:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40085a:	69bb      	ldr	r3, [r7, #24]
  40085c:	095b      	lsrs	r3, r3, #5
  40085e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400860:	697a      	ldr	r2, [r7, #20]
  400862:	4b10      	ldr	r3, [pc, #64]	; (4008a4 <ioport_set_pin_level+0x68>)
  400864:	4413      	add	r3, r2
  400866:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400868:	613b      	str	r3, [r7, #16]

	if (level) {
  40086a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40086e:	2b00      	cmp	r3, #0
  400870:	d009      	beq.n	400886 <ioport_set_pin_level+0x4a>
  400872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400874:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400876:	68fb      	ldr	r3, [r7, #12]
  400878:	f003 031f 	and.w	r3, r3, #31
  40087c:	2201      	movs	r2, #1
  40087e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400880:	693b      	ldr	r3, [r7, #16]
  400882:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400884:	e008      	b.n	400898 <ioport_set_pin_level+0x5c>
  400886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400888:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40088a:	68bb      	ldr	r3, [r7, #8]
  40088c:	f003 031f 	and.w	r3, r3, #31
  400890:	2201      	movs	r2, #1
  400892:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400894:	693b      	ldr	r3, [r7, #16]
  400896:	635a      	str	r2, [r3, #52]	; 0x34
  400898:	bf00      	nop
  40089a:	372c      	adds	r7, #44	; 0x2c
  40089c:	46bd      	mov	sp, r7
  40089e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a2:	4770      	bx	lr
  4008a4:	00200707 	.word	0x00200707

004008a8 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4008a8:	b480      	push	{r7}
  4008aa:	b08d      	sub	sp, #52	; 0x34
  4008ac:	af00      	add	r7, sp, #0
  4008ae:	6078      	str	r0, [r7, #4]
  4008b0:	460b      	mov	r3, r1
  4008b2:	70fb      	strb	r3, [r7, #3]
  4008b4:	687b      	ldr	r3, [r7, #4]
  4008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008b8:	78fb      	ldrb	r3, [r7, #3]
  4008ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c4:	095a      	lsrs	r2, r3, #5
  4008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	f003 031f 	and.w	r3, r3, #31
  4008d0:	2101      	movs	r1, #1
  4008d2:	fa01 f303 	lsl.w	r3, r1, r3
  4008d6:	61fa      	str	r2, [r7, #28]
  4008d8:	61bb      	str	r3, [r7, #24]
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	75fb      	strb	r3, [r7, #23]
  4008e0:	69fb      	ldr	r3, [r7, #28]
  4008e2:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008e4:	693a      	ldr	r2, [r7, #16]
  4008e6:	4b23      	ldr	r3, [pc, #140]	; (400974 <ioport_set_pin_sense_mode+0xcc>)
  4008e8:	4413      	add	r3, r2
  4008ea:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4008ec:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4008ee:	7dfb      	ldrb	r3, [r7, #23]
  4008f0:	3b01      	subs	r3, #1
  4008f2:	2b03      	cmp	r3, #3
  4008f4:	d82e      	bhi.n	400954 <ioport_set_pin_sense_mode+0xac>
  4008f6:	a201      	add	r2, pc, #4	; (adr r2, 4008fc <ioport_set_pin_sense_mode+0x54>)
  4008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008fc:	00400931 	.word	0x00400931
  400900:	00400943 	.word	0x00400943
  400904:	0040090d 	.word	0x0040090d
  400908:	0040091f 	.word	0x0040091f
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  40090c:	68fb      	ldr	r3, [r7, #12]
  40090e:	69ba      	ldr	r2, [r7, #24]
  400910:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	69ba      	ldr	r2, [r7, #24]
  400918:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40091c:	e01f      	b.n	40095e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40091e:	68fb      	ldr	r3, [r7, #12]
  400920:	69ba      	ldr	r2, [r7, #24]
  400922:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400926:	68fb      	ldr	r3, [r7, #12]
  400928:	69ba      	ldr	r2, [r7, #24]
  40092a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40092e:	e016      	b.n	40095e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400930:	68fb      	ldr	r3, [r7, #12]
  400932:	69ba      	ldr	r2, [r7, #24]
  400934:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400938:	68fb      	ldr	r3, [r7, #12]
  40093a:	69ba      	ldr	r2, [r7, #24]
  40093c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400940:	e00d      	b.n	40095e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400942:	68fb      	ldr	r3, [r7, #12]
  400944:	69ba      	ldr	r2, [r7, #24]
  400946:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40094a:	68fb      	ldr	r3, [r7, #12]
  40094c:	69ba      	ldr	r2, [r7, #24]
  40094e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400952:	e004      	b.n	40095e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400954:	68fb      	ldr	r3, [r7, #12]
  400956:	69ba      	ldr	r2, [r7, #24]
  400958:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  40095c:	e003      	b.n	400966 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  40095e:	68fb      	ldr	r3, [r7, #12]
  400960:	69ba      	ldr	r2, [r7, #24]
  400962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400966:	bf00      	nop
  400968:	3734      	adds	r7, #52	; 0x34
  40096a:	46bd      	mov	sp, r7
  40096c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400970:	4770      	bx	lr
  400972:	bf00      	nop
  400974:	00200707 	.word	0x00200707

00400978 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400978:	b480      	push	{r7}
  40097a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  40097c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400980:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400984:	4a0c      	ldr	r2, [pc, #48]	; (4009b8 <tcm_disable+0x40>)
  400986:	4b0c      	ldr	r3, [pc, #48]	; (4009b8 <tcm_disable+0x40>)
  400988:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  40098c:	f023 0301 	bic.w	r3, r3, #1
  400990:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400994:	4a08      	ldr	r2, [pc, #32]	; (4009b8 <tcm_disable+0x40>)
  400996:	4b08      	ldr	r3, [pc, #32]	; (4009b8 <tcm_disable+0x40>)
  400998:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  40099c:	f023 0301 	bic.w	r3, r3, #1
  4009a0:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  4009a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009a8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4009ac:	bf00      	nop
  4009ae:	46bd      	mov	sp, r7
  4009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009b4:	4770      	bx	lr
  4009b6:	bf00      	nop
  4009b8:	e000ed00 	.word	0xe000ed00

004009bc <board_init>:
#endif

void board_init(void)
{
  4009bc:	b580      	push	{r7, lr}
  4009be:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009c0:	4b1e      	ldr	r3, [pc, #120]	; (400a3c <board_init+0x80>)
  4009c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009c6:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  4009c8:	4b1d      	ldr	r3, [pc, #116]	; (400a40 <board_init+0x84>)
  4009ca:	4798      	blx	r3
	SCB_EnableDCache();
  4009cc:	4b1d      	ldr	r3, [pc, #116]	; (400a44 <board_init+0x88>)
  4009ce:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009d0:	4b1d      	ldr	r3, [pc, #116]	; (400a48 <board_init+0x8c>)
  4009d2:	4a1e      	ldr	r2, [pc, #120]	; (400a4c <board_init+0x90>)
  4009d4:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009d6:	4b1c      	ldr	r3, [pc, #112]	; (400a48 <board_init+0x8c>)
  4009d8:	4a1d      	ldr	r2, [pc, #116]	; (400a50 <board_init+0x94>)
  4009da:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  4009dc:	4b1d      	ldr	r3, [pc, #116]	; (400a54 <board_init+0x98>)
  4009de:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  4009e0:	4b1d      	ldr	r3, [pc, #116]	; (400a58 <board_init+0x9c>)
  4009e2:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  4009e4:	2101      	movs	r1, #1
  4009e6:	2048      	movs	r0, #72	; 0x48
  4009e8:	4b1c      	ldr	r3, [pc, #112]	; (400a5c <board_init+0xa0>)
  4009ea:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  4009ec:	2101      	movs	r1, #1
  4009ee:	2048      	movs	r0, #72	; 0x48
  4009f0:	4b1b      	ldr	r3, [pc, #108]	; (400a60 <board_init+0xa4>)
  4009f2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  4009f4:	2100      	movs	r1, #0
  4009f6:	200b      	movs	r0, #11
  4009f8:	4b18      	ldr	r3, [pc, #96]	; (400a5c <board_init+0xa0>)
  4009fa:	4798      	blx	r3
  4009fc:	2188      	movs	r1, #136	; 0x88
  4009fe:	200b      	movs	r0, #11
  400a00:	4b18      	ldr	r3, [pc, #96]	; (400a64 <board_init+0xa8>)
  400a02:	4798      	blx	r3
  400a04:	2102      	movs	r1, #2
  400a06:	200b      	movs	r0, #11
  400a08:	4b17      	ldr	r3, [pc, #92]	; (400a68 <board_init+0xac>)
  400a0a:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400a0c:	2100      	movs	r1, #0
  400a0e:	2015      	movs	r0, #21
  400a10:	4b14      	ldr	r3, [pc, #80]	; (400a64 <board_init+0xa8>)
  400a12:	4798      	blx	r3
  400a14:	2015      	movs	r0, #21
  400a16:	4b15      	ldr	r3, [pc, #84]	; (400a6c <board_init+0xb0>)
  400a18:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400a1a:	4a15      	ldr	r2, [pc, #84]	; (400a70 <board_init+0xb4>)
  400a1c:	4b14      	ldr	r3, [pc, #80]	; (400a70 <board_init+0xb4>)
  400a1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400a22:	f043 0310 	orr.w	r3, r3, #16
  400a26:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400a2a:	2103      	movs	r1, #3
  400a2c:	2024      	movs	r0, #36	; 0x24
  400a2e:	4b0d      	ldr	r3, [pc, #52]	; (400a64 <board_init+0xa8>)
  400a30:	4798      	blx	r3
  400a32:	2024      	movs	r0, #36	; 0x24
  400a34:	4b0d      	ldr	r3, [pc, #52]	; (400a6c <board_init+0xb0>)
  400a36:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400a38:	bf00      	nop
  400a3a:	bd80      	pop	{r7, pc}
  400a3c:	400e1850 	.word	0x400e1850
  400a40:	00400529 	.word	0x00400529
  400a44:	00400561 	.word	0x00400561
  400a48:	400e0c00 	.word	0x400e0c00
  400a4c:	5a00080c 	.word	0x5a00080c
  400a50:	5a00070c 	.word	0x5a00070c
  400a54:	00400979 	.word	0x00400979
  400a58:	00400621 	.word	0x00400621
  400a5c:	004007b5 	.word	0x004007b5
  400a60:	0040083d 	.word	0x0040083d
  400a64:	00400699 	.word	0x00400699
  400a68:	004008a9 	.word	0x004008a9
  400a6c:	0040064d 	.word	0x0040064d
  400a70:	40088000 	.word	0x40088000

00400a74 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400a74:	b480      	push	{r7}
  400a76:	b085      	sub	sp, #20
  400a78:	af00      	add	r7, sp, #0
  400a7a:	60f8      	str	r0, [r7, #12]
  400a7c:	60b9      	str	r1, [r7, #8]
  400a7e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a80:	687b      	ldr	r3, [r7, #4]
  400a82:	2b00      	cmp	r3, #0
  400a84:	d003      	beq.n	400a8e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400a86:	68fb      	ldr	r3, [r7, #12]
  400a88:	68ba      	ldr	r2, [r7, #8]
  400a8a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400a8c:	e002      	b.n	400a94 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400a8e:	68fb      	ldr	r3, [r7, #12]
  400a90:	68ba      	ldr	r2, [r7, #8]
  400a92:	661a      	str	r2, [r3, #96]	; 0x60
}
  400a94:	bf00      	nop
  400a96:	3714      	adds	r7, #20
  400a98:	46bd      	mov	sp, r7
  400a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a9e:	4770      	bx	lr

00400aa0 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400aa0:	b480      	push	{r7}
  400aa2:	b083      	sub	sp, #12
  400aa4:	af00      	add	r7, sp, #0
  400aa6:	6078      	str	r0, [r7, #4]
  400aa8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  400aaa:	687b      	ldr	r3, [r7, #4]
  400aac:	683a      	ldr	r2, [r7, #0]
  400aae:	631a      	str	r2, [r3, #48]	; 0x30
}
  400ab0:	bf00      	nop
  400ab2:	370c      	adds	r7, #12
  400ab4:	46bd      	mov	sp, r7
  400ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aba:	4770      	bx	lr

00400abc <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400abc:	b480      	push	{r7}
  400abe:	b083      	sub	sp, #12
  400ac0:	af00      	add	r7, sp, #0
  400ac2:	6078      	str	r0, [r7, #4]
  400ac4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  400ac6:	687b      	ldr	r3, [r7, #4]
  400ac8:	683a      	ldr	r2, [r7, #0]
  400aca:	635a      	str	r2, [r3, #52]	; 0x34
}
  400acc:	bf00      	nop
  400ace:	370c      	adds	r7, #12
  400ad0:	46bd      	mov	sp, r7
  400ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ad6:	4770      	bx	lr

00400ad8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400ad8:	b480      	push	{r7}
  400ada:	b087      	sub	sp, #28
  400adc:	af00      	add	r7, sp, #0
  400ade:	60f8      	str	r0, [r7, #12]
  400ae0:	60b9      	str	r1, [r7, #8]
  400ae2:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400ae4:	68fb      	ldr	r3, [r7, #12]
  400ae6:	687a      	ldr	r2, [r7, #4]
  400ae8:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400aea:	68bb      	ldr	r3, [r7, #8]
  400aec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400af0:	d04a      	beq.n	400b88 <pio_set_peripheral+0xb0>
  400af2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400af6:	d808      	bhi.n	400b0a <pio_set_peripheral+0x32>
  400af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400afc:	d016      	beq.n	400b2c <pio_set_peripheral+0x54>
  400afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400b02:	d02c      	beq.n	400b5e <pio_set_peripheral+0x86>
  400b04:	2b00      	cmp	r3, #0
  400b06:	d069      	beq.n	400bdc <pio_set_peripheral+0x104>
  400b08:	e064      	b.n	400bd4 <pio_set_peripheral+0xfc>
  400b0a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b0e:	d065      	beq.n	400bdc <pio_set_peripheral+0x104>
  400b10:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b14:	d803      	bhi.n	400b1e <pio_set_peripheral+0x46>
  400b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400b1a:	d04a      	beq.n	400bb2 <pio_set_peripheral+0xda>
  400b1c:	e05a      	b.n	400bd4 <pio_set_peripheral+0xfc>
  400b1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400b22:	d05b      	beq.n	400bdc <pio_set_peripheral+0x104>
  400b24:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400b28:	d058      	beq.n	400bdc <pio_set_peripheral+0x104>
  400b2a:	e053      	b.n	400bd4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b2c:	68fb      	ldr	r3, [r7, #12]
  400b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400b30:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b32:	68fb      	ldr	r3, [r7, #12]
  400b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b36:	687b      	ldr	r3, [r7, #4]
  400b38:	43d9      	mvns	r1, r3
  400b3a:	697b      	ldr	r3, [r7, #20]
  400b3c:	400b      	ands	r3, r1
  400b3e:	401a      	ands	r2, r3
  400b40:	68fb      	ldr	r3, [r7, #12]
  400b42:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b44:	68fb      	ldr	r3, [r7, #12]
  400b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400b48:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b4a:	68fb      	ldr	r3, [r7, #12]
  400b4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b4e:	687b      	ldr	r3, [r7, #4]
  400b50:	43d9      	mvns	r1, r3
  400b52:	697b      	ldr	r3, [r7, #20]
  400b54:	400b      	ands	r3, r1
  400b56:	401a      	ands	r2, r3
  400b58:	68fb      	ldr	r3, [r7, #12]
  400b5a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400b5c:	e03a      	b.n	400bd4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b5e:	68fb      	ldr	r3, [r7, #12]
  400b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400b62:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b64:	687a      	ldr	r2, [r7, #4]
  400b66:	697b      	ldr	r3, [r7, #20]
  400b68:	431a      	orrs	r2, r3
  400b6a:	68fb      	ldr	r3, [r7, #12]
  400b6c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b6e:	68fb      	ldr	r3, [r7, #12]
  400b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400b72:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400b74:	68fb      	ldr	r3, [r7, #12]
  400b76:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b78:	687b      	ldr	r3, [r7, #4]
  400b7a:	43d9      	mvns	r1, r3
  400b7c:	697b      	ldr	r3, [r7, #20]
  400b7e:	400b      	ands	r3, r1
  400b80:	401a      	ands	r2, r3
  400b82:	68fb      	ldr	r3, [r7, #12]
  400b84:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400b86:	e025      	b.n	400bd4 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b88:	68fb      	ldr	r3, [r7, #12]
  400b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400b8c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400b8e:	68fb      	ldr	r3, [r7, #12]
  400b90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b92:	687b      	ldr	r3, [r7, #4]
  400b94:	43d9      	mvns	r1, r3
  400b96:	697b      	ldr	r3, [r7, #20]
  400b98:	400b      	ands	r3, r1
  400b9a:	401a      	ands	r2, r3
  400b9c:	68fb      	ldr	r3, [r7, #12]
  400b9e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ba0:	68fb      	ldr	r3, [r7, #12]
  400ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400ba4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ba6:	687a      	ldr	r2, [r7, #4]
  400ba8:	697b      	ldr	r3, [r7, #20]
  400baa:	431a      	orrs	r2, r3
  400bac:	68fb      	ldr	r3, [r7, #12]
  400bae:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400bb0:	e010      	b.n	400bd4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400bb2:	68fb      	ldr	r3, [r7, #12]
  400bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400bb6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400bb8:	687a      	ldr	r2, [r7, #4]
  400bba:	697b      	ldr	r3, [r7, #20]
  400bbc:	431a      	orrs	r2, r3
  400bbe:	68fb      	ldr	r3, [r7, #12]
  400bc0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400bc2:	68fb      	ldr	r3, [r7, #12]
  400bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400bc6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400bc8:	687a      	ldr	r2, [r7, #4]
  400bca:	697b      	ldr	r3, [r7, #20]
  400bcc:	431a      	orrs	r2, r3
  400bce:	68fb      	ldr	r3, [r7, #12]
  400bd0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400bd2:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	687a      	ldr	r2, [r7, #4]
  400bd8:	605a      	str	r2, [r3, #4]
  400bda:	e000      	b.n	400bde <pio_set_peripheral+0x106>
		return;
  400bdc:	bf00      	nop
}
  400bde:	371c      	adds	r7, #28
  400be0:	46bd      	mov	sp, r7
  400be2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be6:	4770      	bx	lr

00400be8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400be8:	b580      	push	{r7, lr}
  400bea:	b084      	sub	sp, #16
  400bec:	af00      	add	r7, sp, #0
  400bee:	60f8      	str	r0, [r7, #12]
  400bf0:	60b9      	str	r1, [r7, #8]
  400bf2:	607a      	str	r2, [r7, #4]
  400bf4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400bf6:	68b9      	ldr	r1, [r7, #8]
  400bf8:	68f8      	ldr	r0, [r7, #12]
  400bfa:	4b12      	ldr	r3, [pc, #72]	; (400c44 <pio_set_output+0x5c>)
  400bfc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400bfe:	69ba      	ldr	r2, [r7, #24]
  400c00:	68b9      	ldr	r1, [r7, #8]
  400c02:	68f8      	ldr	r0, [r7, #12]
  400c04:	4b10      	ldr	r3, [pc, #64]	; (400c48 <pio_set_output+0x60>)
  400c06:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400c08:	683b      	ldr	r3, [r7, #0]
  400c0a:	2b00      	cmp	r3, #0
  400c0c:	d003      	beq.n	400c16 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400c0e:	68fb      	ldr	r3, [r7, #12]
  400c10:	68ba      	ldr	r2, [r7, #8]
  400c12:	651a      	str	r2, [r3, #80]	; 0x50
  400c14:	e002      	b.n	400c1c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400c16:	68fb      	ldr	r3, [r7, #12]
  400c18:	68ba      	ldr	r2, [r7, #8]
  400c1a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400c1c:	687b      	ldr	r3, [r7, #4]
  400c1e:	2b00      	cmp	r3, #0
  400c20:	d003      	beq.n	400c2a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400c22:	68fb      	ldr	r3, [r7, #12]
  400c24:	68ba      	ldr	r2, [r7, #8]
  400c26:	631a      	str	r2, [r3, #48]	; 0x30
  400c28:	e002      	b.n	400c30 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400c2a:	68fb      	ldr	r3, [r7, #12]
  400c2c:	68ba      	ldr	r2, [r7, #8]
  400c2e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400c30:	68fb      	ldr	r3, [r7, #12]
  400c32:	68ba      	ldr	r2, [r7, #8]
  400c34:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400c36:	68fb      	ldr	r3, [r7, #12]
  400c38:	68ba      	ldr	r2, [r7, #8]
  400c3a:	601a      	str	r2, [r3, #0]
}
  400c3c:	bf00      	nop
  400c3e:	3710      	adds	r7, #16
  400c40:	46bd      	mov	sp, r7
  400c42:	bd80      	pop	{r7, pc}
  400c44:	00400c75 	.word	0x00400c75
  400c48:	00400a75 	.word	0x00400a75

00400c4c <pio_get_output_data_status>:
 * \retval 1 At least one PIO is configured to output a high level.
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
  400c4c:	b480      	push	{r7}
  400c4e:	b083      	sub	sp, #12
  400c50:	af00      	add	r7, sp, #0
  400c52:	6078      	str	r0, [r7, #4]
  400c54:	6039      	str	r1, [r7, #0]
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400c56:	687b      	ldr	r3, [r7, #4]
  400c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400c5a:	683b      	ldr	r3, [r7, #0]
  400c5c:	4013      	ands	r3, r2
  400c5e:	2b00      	cmp	r3, #0
  400c60:	d101      	bne.n	400c66 <pio_get_output_data_status+0x1a>
		return 0;
  400c62:	2300      	movs	r3, #0
  400c64:	e000      	b.n	400c68 <pio_get_output_data_status+0x1c>
	} else {
		return 1;
  400c66:	2301      	movs	r3, #1
	}
}
  400c68:	4618      	mov	r0, r3
  400c6a:	370c      	adds	r7, #12
  400c6c:	46bd      	mov	sp, r7
  400c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c72:	4770      	bx	lr

00400c74 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
  400c7c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400c7e:	687b      	ldr	r3, [r7, #4]
  400c80:	683a      	ldr	r2, [r7, #0]
  400c82:	645a      	str	r2, [r3, #68]	; 0x44
}
  400c84:	bf00      	nop
  400c86:	370c      	adds	r7, #12
  400c88:	46bd      	mov	sp, r7
  400c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c8e:	4770      	bx	lr

00400c90 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400c90:	b480      	push	{r7}
  400c92:	b083      	sub	sp, #12
  400c94:	af00      	add	r7, sp, #0
  400c96:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400c98:	687b      	ldr	r3, [r7, #4]
  400c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400c9c:	4618      	mov	r0, r3
  400c9e:	370c      	adds	r7, #12
  400ca0:	46bd      	mov	sp, r7
  400ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ca6:	4770      	bx	lr

00400ca8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400ca8:	b480      	push	{r7}
  400caa:	b083      	sub	sp, #12
  400cac:	af00      	add	r7, sp, #0
  400cae:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400cb0:	687b      	ldr	r3, [r7, #4]
  400cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	370c      	adds	r7, #12
  400cb8:	46bd      	mov	sp, r7
  400cba:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cbe:	4770      	bx	lr

00400cc0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400cc0:	b580      	push	{r7, lr}
  400cc2:	b084      	sub	sp, #16
  400cc4:	af00      	add	r7, sp, #0
  400cc6:	6078      	str	r0, [r7, #4]
  400cc8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400cca:	6878      	ldr	r0, [r7, #4]
  400ccc:	4b26      	ldr	r3, [pc, #152]	; (400d68 <pio_handler_process+0xa8>)
  400cce:	4798      	blx	r3
  400cd0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400cd2:	6878      	ldr	r0, [r7, #4]
  400cd4:	4b25      	ldr	r3, [pc, #148]	; (400d6c <pio_handler_process+0xac>)
  400cd6:	4798      	blx	r3
  400cd8:	4602      	mov	r2, r0
  400cda:	68fb      	ldr	r3, [r7, #12]
  400cdc:	4013      	ands	r3, r2
  400cde:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400ce0:	68fb      	ldr	r3, [r7, #12]
  400ce2:	2b00      	cmp	r3, #0
  400ce4:	d03c      	beq.n	400d60 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400ce6:	2300      	movs	r3, #0
  400ce8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400cea:	e034      	b.n	400d56 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400cec:	4a20      	ldr	r2, [pc, #128]	; (400d70 <pio_handler_process+0xb0>)
  400cee:	68bb      	ldr	r3, [r7, #8]
  400cf0:	011b      	lsls	r3, r3, #4
  400cf2:	4413      	add	r3, r2
  400cf4:	681a      	ldr	r2, [r3, #0]
  400cf6:	683b      	ldr	r3, [r7, #0]
  400cf8:	429a      	cmp	r2, r3
  400cfa:	d126      	bne.n	400d4a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400cfc:	4a1c      	ldr	r2, [pc, #112]	; (400d70 <pio_handler_process+0xb0>)
  400cfe:	68bb      	ldr	r3, [r7, #8]
  400d00:	011b      	lsls	r3, r3, #4
  400d02:	4413      	add	r3, r2
  400d04:	3304      	adds	r3, #4
  400d06:	681a      	ldr	r2, [r3, #0]
  400d08:	68fb      	ldr	r3, [r7, #12]
  400d0a:	4013      	ands	r3, r2
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d01c      	beq.n	400d4a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d10:	4a17      	ldr	r2, [pc, #92]	; (400d70 <pio_handler_process+0xb0>)
  400d12:	68bb      	ldr	r3, [r7, #8]
  400d14:	011b      	lsls	r3, r3, #4
  400d16:	4413      	add	r3, r2
  400d18:	330c      	adds	r3, #12
  400d1a:	681b      	ldr	r3, [r3, #0]
  400d1c:	4914      	ldr	r1, [pc, #80]	; (400d70 <pio_handler_process+0xb0>)
  400d1e:	68ba      	ldr	r2, [r7, #8]
  400d20:	0112      	lsls	r2, r2, #4
  400d22:	440a      	add	r2, r1
  400d24:	6810      	ldr	r0, [r2, #0]
  400d26:	4912      	ldr	r1, [pc, #72]	; (400d70 <pio_handler_process+0xb0>)
  400d28:	68ba      	ldr	r2, [r7, #8]
  400d2a:	0112      	lsls	r2, r2, #4
  400d2c:	440a      	add	r2, r1
  400d2e:	3204      	adds	r2, #4
  400d30:	6812      	ldr	r2, [r2, #0]
  400d32:	4611      	mov	r1, r2
  400d34:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d36:	4a0e      	ldr	r2, [pc, #56]	; (400d70 <pio_handler_process+0xb0>)
  400d38:	68bb      	ldr	r3, [r7, #8]
  400d3a:	011b      	lsls	r3, r3, #4
  400d3c:	4413      	add	r3, r2
  400d3e:	3304      	adds	r3, #4
  400d40:	681b      	ldr	r3, [r3, #0]
  400d42:	43db      	mvns	r3, r3
  400d44:	68fa      	ldr	r2, [r7, #12]
  400d46:	4013      	ands	r3, r2
  400d48:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400d4a:	68bb      	ldr	r3, [r7, #8]
  400d4c:	3301      	adds	r3, #1
  400d4e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d50:	68bb      	ldr	r3, [r7, #8]
  400d52:	2b06      	cmp	r3, #6
  400d54:	d803      	bhi.n	400d5e <pio_handler_process+0x9e>
		while (status != 0) {
  400d56:	68fb      	ldr	r3, [r7, #12]
  400d58:	2b00      	cmp	r3, #0
  400d5a:	d1c7      	bne.n	400cec <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400d5c:	e000      	b.n	400d60 <pio_handler_process+0xa0>
				break;
  400d5e:	bf00      	nop
}
  400d60:	bf00      	nop
  400d62:	3710      	adds	r7, #16
  400d64:	46bd      	mov	sp, r7
  400d66:	bd80      	pop	{r7, pc}
  400d68:	00400c91 	.word	0x00400c91
  400d6c:	00400ca9 	.word	0x00400ca9
  400d70:	20400454 	.word	0x20400454

00400d74 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d74:	b580      	push	{r7, lr}
  400d76:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400d78:	210a      	movs	r1, #10
  400d7a:	4802      	ldr	r0, [pc, #8]	; (400d84 <PIOA_Handler+0x10>)
  400d7c:	4b02      	ldr	r3, [pc, #8]	; (400d88 <PIOA_Handler+0x14>)
  400d7e:	4798      	blx	r3
}
  400d80:	bf00      	nop
  400d82:	bd80      	pop	{r7, pc}
  400d84:	400e0e00 	.word	0x400e0e00
  400d88:	00400cc1 	.word	0x00400cc1

00400d8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d8c:	b580      	push	{r7, lr}
  400d8e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400d90:	210b      	movs	r1, #11
  400d92:	4802      	ldr	r0, [pc, #8]	; (400d9c <PIOB_Handler+0x10>)
  400d94:	4b02      	ldr	r3, [pc, #8]	; (400da0 <PIOB_Handler+0x14>)
  400d96:	4798      	blx	r3
}
  400d98:	bf00      	nop
  400d9a:	bd80      	pop	{r7, pc}
  400d9c:	400e1000 	.word	0x400e1000
  400da0:	00400cc1 	.word	0x00400cc1

00400da4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400da4:	b580      	push	{r7, lr}
  400da6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400da8:	210c      	movs	r1, #12
  400daa:	4802      	ldr	r0, [pc, #8]	; (400db4 <PIOC_Handler+0x10>)
  400dac:	4b02      	ldr	r3, [pc, #8]	; (400db8 <PIOC_Handler+0x14>)
  400dae:	4798      	blx	r3
}
  400db0:	bf00      	nop
  400db2:	bd80      	pop	{r7, pc}
  400db4:	400e1200 	.word	0x400e1200
  400db8:	00400cc1 	.word	0x00400cc1

00400dbc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400dbc:	b580      	push	{r7, lr}
  400dbe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400dc0:	2110      	movs	r1, #16
  400dc2:	4802      	ldr	r0, [pc, #8]	; (400dcc <PIOD_Handler+0x10>)
  400dc4:	4b02      	ldr	r3, [pc, #8]	; (400dd0 <PIOD_Handler+0x14>)
  400dc6:	4798      	blx	r3
}
  400dc8:	bf00      	nop
  400dca:	bd80      	pop	{r7, pc}
  400dcc:	400e1400 	.word	0x400e1400
  400dd0:	00400cc1 	.word	0x00400cc1

00400dd4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400dd4:	b580      	push	{r7, lr}
  400dd6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400dd8:	2111      	movs	r1, #17
  400dda:	4802      	ldr	r0, [pc, #8]	; (400de4 <PIOE_Handler+0x10>)
  400ddc:	4b02      	ldr	r3, [pc, #8]	; (400de8 <PIOE_Handler+0x14>)
  400dde:	4798      	blx	r3
}
  400de0:	bf00      	nop
  400de2:	bd80      	pop	{r7, pc}
  400de4:	400e1600 	.word	0x400e1600
  400de8:	00400cc1 	.word	0x00400cc1

00400dec <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400dec:	b480      	push	{r7}
  400dee:	b083      	sub	sp, #12
  400df0:	af00      	add	r7, sp, #0
  400df2:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400df4:	687b      	ldr	r3, [r7, #4]
  400df6:	3b01      	subs	r3, #1
  400df8:	2b03      	cmp	r3, #3
  400dfa:	d81a      	bhi.n	400e32 <pmc_mck_set_division+0x46>
  400dfc:	a201      	add	r2, pc, #4	; (adr r2, 400e04 <pmc_mck_set_division+0x18>)
  400dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e02:	bf00      	nop
  400e04:	00400e15 	.word	0x00400e15
  400e08:	00400e1b 	.word	0x00400e1b
  400e0c:	00400e23 	.word	0x00400e23
  400e10:	00400e2b 	.word	0x00400e2b
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400e14:	2300      	movs	r3, #0
  400e16:	607b      	str	r3, [r7, #4]
			break;
  400e18:	e00e      	b.n	400e38 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e1e:	607b      	str	r3, [r7, #4]
			break;
  400e20:	e00a      	b.n	400e38 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400e22:	f44f 7340 	mov.w	r3, #768	; 0x300
  400e26:	607b      	str	r3, [r7, #4]
			break;
  400e28:	e006      	b.n	400e38 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
  400e2e:	607b      	str	r3, [r7, #4]
			break;
  400e30:	e002      	b.n	400e38 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400e32:	2300      	movs	r3, #0
  400e34:	607b      	str	r3, [r7, #4]
			break;
  400e36:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400e38:	490a      	ldr	r1, [pc, #40]	; (400e64 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400e3a:	4b0a      	ldr	r3, [pc, #40]	; (400e64 <pmc_mck_set_division+0x78>)
  400e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400e42:	687b      	ldr	r3, [r7, #4]
  400e44:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400e46:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e48:	bf00      	nop
  400e4a:	4b06      	ldr	r3, [pc, #24]	; (400e64 <pmc_mck_set_division+0x78>)
  400e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e4e:	f003 0308 	and.w	r3, r3, #8
  400e52:	2b00      	cmp	r3, #0
  400e54:	d0f9      	beq.n	400e4a <pmc_mck_set_division+0x5e>
}
  400e56:	bf00      	nop
  400e58:	370c      	adds	r7, #12
  400e5a:	46bd      	mov	sp, r7
  400e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e60:	4770      	bx	lr
  400e62:	bf00      	nop
  400e64:	400e0600 	.word	0x400e0600

00400e68 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400e68:	b480      	push	{r7}
  400e6a:	b085      	sub	sp, #20
  400e6c:	af00      	add	r7, sp, #0
  400e6e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400e70:	491d      	ldr	r1, [pc, #116]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400e72:	4b1d      	ldr	r3, [pc, #116]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400e7a:	687b      	ldr	r3, [r7, #4]
  400e7c:	4313      	orrs	r3, r2
  400e7e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e84:	60fb      	str	r3, [r7, #12]
  400e86:	e007      	b.n	400e98 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e88:	68fb      	ldr	r3, [r7, #12]
  400e8a:	2b00      	cmp	r3, #0
  400e8c:	d101      	bne.n	400e92 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400e8e:	2301      	movs	r3, #1
  400e90:	e023      	b.n	400eda <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e92:	68fb      	ldr	r3, [r7, #12]
  400e94:	3b01      	subs	r3, #1
  400e96:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e98:	4b13      	ldr	r3, [pc, #76]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e9c:	f003 0308 	and.w	r3, r3, #8
  400ea0:	2b00      	cmp	r3, #0
  400ea2:	d0f1      	beq.n	400e88 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ea4:	4a10      	ldr	r2, [pc, #64]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400ea6:	4b10      	ldr	r3, [pc, #64]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400eaa:	f023 0303 	bic.w	r3, r3, #3
  400eae:	f043 0302 	orr.w	r3, r3, #2
  400eb2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400eb8:	60fb      	str	r3, [r7, #12]
  400eba:	e007      	b.n	400ecc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ebc:	68fb      	ldr	r3, [r7, #12]
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d101      	bne.n	400ec6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400ec2:	2301      	movs	r3, #1
  400ec4:	e009      	b.n	400eda <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400ec6:	68fb      	ldr	r3, [r7, #12]
  400ec8:	3b01      	subs	r3, #1
  400eca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ecc:	4b06      	ldr	r3, [pc, #24]	; (400ee8 <pmc_switch_mck_to_pllack+0x80>)
  400ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ed0:	f003 0308 	and.w	r3, r3, #8
  400ed4:	2b00      	cmp	r3, #0
  400ed6:	d0f1      	beq.n	400ebc <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400ed8:	2300      	movs	r3, #0
}
  400eda:	4618      	mov	r0, r3
  400edc:	3714      	adds	r7, #20
  400ede:	46bd      	mov	sp, r7
  400ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee4:	4770      	bx	lr
  400ee6:	bf00      	nop
  400ee8:	400e0600 	.word	0x400e0600

00400eec <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400eec:	b480      	push	{r7}
  400eee:	b083      	sub	sp, #12
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400ef4:	687b      	ldr	r3, [r7, #4]
  400ef6:	2b01      	cmp	r3, #1
  400ef8:	d105      	bne.n	400f06 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400efa:	4907      	ldr	r1, [pc, #28]	; (400f18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400efc:	4b06      	ldr	r3, [pc, #24]	; (400f18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400efe:	689a      	ldr	r2, [r3, #8]
  400f00:	4b06      	ldr	r3, [pc, #24]	; (400f1c <pmc_switch_sclk_to_32kxtal+0x30>)
  400f02:	4313      	orrs	r3, r2
  400f04:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400f06:	4b04      	ldr	r3, [pc, #16]	; (400f18 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400f08:	4a05      	ldr	r2, [pc, #20]	; (400f20 <pmc_switch_sclk_to_32kxtal+0x34>)
  400f0a:	601a      	str	r2, [r3, #0]
}
  400f0c:	bf00      	nop
  400f0e:	370c      	adds	r7, #12
  400f10:	46bd      	mov	sp, r7
  400f12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f16:	4770      	bx	lr
  400f18:	400e1810 	.word	0x400e1810
  400f1c:	a5100000 	.word	0xa5100000
  400f20:	a5000008 	.word	0xa5000008

00400f24 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400f24:	b480      	push	{r7}
  400f26:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400f28:	4b09      	ldr	r3, [pc, #36]	; (400f50 <pmc_osc_is_ready_32kxtal+0x2c>)
  400f2a:	695b      	ldr	r3, [r3, #20]
  400f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400f30:	2b00      	cmp	r3, #0
  400f32:	d007      	beq.n	400f44 <pmc_osc_is_ready_32kxtal+0x20>
  400f34:	4b07      	ldr	r3, [pc, #28]	; (400f54 <pmc_osc_is_ready_32kxtal+0x30>)
  400f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	d001      	beq.n	400f44 <pmc_osc_is_ready_32kxtal+0x20>
  400f40:	2301      	movs	r3, #1
  400f42:	e000      	b.n	400f46 <pmc_osc_is_ready_32kxtal+0x22>
  400f44:	2300      	movs	r3, #0
}
  400f46:	4618      	mov	r0, r3
  400f48:	46bd      	mov	sp, r7
  400f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4e:	4770      	bx	lr
  400f50:	400e1810 	.word	0x400e1810
  400f54:	400e0600 	.word	0x400e0600

00400f58 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400f58:	b480      	push	{r7}
  400f5a:	b083      	sub	sp, #12
  400f5c:	af00      	add	r7, sp, #0
  400f5e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400f60:	4915      	ldr	r1, [pc, #84]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f62:	4b15      	ldr	r3, [pc, #84]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f64:	6a1a      	ldr	r2, [r3, #32]
  400f66:	4b15      	ldr	r3, [pc, #84]	; (400fbc <pmc_switch_mainck_to_fastrc+0x64>)
  400f68:	4313      	orrs	r3, r2
  400f6a:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f6c:	bf00      	nop
  400f6e:	4b12      	ldr	r3, [pc, #72]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f76:	2b00      	cmp	r3, #0
  400f78:	d0f9      	beq.n	400f6e <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f7a:	490f      	ldr	r1, [pc, #60]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f7c:	4b0e      	ldr	r3, [pc, #56]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f7e:	6a1a      	ldr	r2, [r3, #32]
  400f80:	4b0f      	ldr	r3, [pc, #60]	; (400fc0 <pmc_switch_mainck_to_fastrc+0x68>)
  400f82:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400f84:	687a      	ldr	r2, [r7, #4]
  400f86:	4313      	orrs	r3, r2
  400f88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f8c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f8e:	bf00      	nop
  400f90:	4b09      	ldr	r3, [pc, #36]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d0f9      	beq.n	400f90 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400f9c:	4906      	ldr	r1, [pc, #24]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400f9e:	4b06      	ldr	r3, [pc, #24]	; (400fb8 <pmc_switch_mainck_to_fastrc+0x60>)
  400fa0:	6a1a      	ldr	r2, [r3, #32]
  400fa2:	4b08      	ldr	r3, [pc, #32]	; (400fc4 <pmc_switch_mainck_to_fastrc+0x6c>)
  400fa4:	4013      	ands	r3, r2
  400fa6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400faa:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400fac:	bf00      	nop
  400fae:	370c      	adds	r7, #12
  400fb0:	46bd      	mov	sp, r7
  400fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb6:	4770      	bx	lr
  400fb8:	400e0600 	.word	0x400e0600
  400fbc:	00370008 	.word	0x00370008
  400fc0:	ffc8ff8f 	.word	0xffc8ff8f
  400fc4:	fec8ffff 	.word	0xfec8ffff

00400fc8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400fc8:	b480      	push	{r7}
  400fca:	b083      	sub	sp, #12
  400fcc:	af00      	add	r7, sp, #0
  400fce:	6078      	str	r0, [r7, #4]
  400fd0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400fd2:	687b      	ldr	r3, [r7, #4]
  400fd4:	2b00      	cmp	r3, #0
  400fd6:	d008      	beq.n	400fea <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fd8:	4913      	ldr	r1, [pc, #76]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  400fda:	4b13      	ldr	r3, [pc, #76]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  400fdc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fde:	4a13      	ldr	r2, [pc, #76]	; (40102c <pmc_switch_mainck_to_xtal+0x64>)
  400fe0:	401a      	ands	r2, r3
  400fe2:	4b13      	ldr	r3, [pc, #76]	; (401030 <pmc_switch_mainck_to_xtal+0x68>)
  400fe4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fe6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400fe8:	e018      	b.n	40101c <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fea:	490f      	ldr	r1, [pc, #60]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  400fec:	4b0e      	ldr	r3, [pc, #56]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  400fee:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400ff0:	4b10      	ldr	r3, [pc, #64]	; (401034 <pmc_switch_mainck_to_xtal+0x6c>)
  400ff2:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400ff4:	683a      	ldr	r2, [r7, #0]
  400ff6:	0212      	lsls	r2, r2, #8
  400ff8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400ffa:	431a      	orrs	r2, r3
  400ffc:	4b0e      	ldr	r3, [pc, #56]	; (401038 <pmc_switch_mainck_to_xtal+0x70>)
  400ffe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401000:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401002:	bf00      	nop
  401004:	4b08      	ldr	r3, [pc, #32]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  401006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401008:	f003 0301 	and.w	r3, r3, #1
  40100c:	2b00      	cmp	r3, #0
  40100e:	d0f9      	beq.n	401004 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401010:	4905      	ldr	r1, [pc, #20]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  401012:	4b05      	ldr	r3, [pc, #20]	; (401028 <pmc_switch_mainck_to_xtal+0x60>)
  401014:	6a1a      	ldr	r2, [r3, #32]
  401016:	4b09      	ldr	r3, [pc, #36]	; (40103c <pmc_switch_mainck_to_xtal+0x74>)
  401018:	4313      	orrs	r3, r2
  40101a:	620b      	str	r3, [r1, #32]
}
  40101c:	bf00      	nop
  40101e:	370c      	adds	r7, #12
  401020:	46bd      	mov	sp, r7
  401022:	f85d 7b04 	ldr.w	r7, [sp], #4
  401026:	4770      	bx	lr
  401028:	400e0600 	.word	0x400e0600
  40102c:	fec8fffc 	.word	0xfec8fffc
  401030:	01370002 	.word	0x01370002
  401034:	ffc8fffc 	.word	0xffc8fffc
  401038:	00370001 	.word	0x00370001
  40103c:	01370000 	.word	0x01370000

00401040 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401040:	b480      	push	{r7}
  401042:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401044:	4b04      	ldr	r3, [pc, #16]	; (401058 <pmc_osc_is_ready_mainck+0x18>)
  401046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40104c:	4618      	mov	r0, r3
  40104e:	46bd      	mov	sp, r7
  401050:	f85d 7b04 	ldr.w	r7, [sp], #4
  401054:	4770      	bx	lr
  401056:	bf00      	nop
  401058:	400e0600 	.word	0x400e0600

0040105c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40105c:	b480      	push	{r7}
  40105e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401060:	4b04      	ldr	r3, [pc, #16]	; (401074 <pmc_disable_pllack+0x18>)
  401062:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401066:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401068:	bf00      	nop
  40106a:	46bd      	mov	sp, r7
  40106c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401070:	4770      	bx	lr
  401072:	bf00      	nop
  401074:	400e0600 	.word	0x400e0600

00401078 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401078:	b480      	push	{r7}
  40107a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40107c:	4b04      	ldr	r3, [pc, #16]	; (401090 <pmc_is_locked_pllack+0x18>)
  40107e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401080:	f003 0302 	and.w	r3, r3, #2
}
  401084:	4618      	mov	r0, r3
  401086:	46bd      	mov	sp, r7
  401088:	f85d 7b04 	ldr.w	r7, [sp], #4
  40108c:	4770      	bx	lr
  40108e:	bf00      	nop
  401090:	400e0600 	.word	0x400e0600

00401094 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401094:	b480      	push	{r7}
  401096:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401098:	4b04      	ldr	r3, [pc, #16]	; (4010ac <pmc_is_locked_upll+0x18>)
  40109a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4010a0:	4618      	mov	r0, r3
  4010a2:	46bd      	mov	sp, r7
  4010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010a8:	4770      	bx	lr
  4010aa:	bf00      	nop
  4010ac:	400e0600 	.word	0x400e0600

004010b0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4010b0:	b480      	push	{r7}
  4010b2:	b083      	sub	sp, #12
  4010b4:	af00      	add	r7, sp, #0
  4010b6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4010b8:	687b      	ldr	r3, [r7, #4]
  4010ba:	2b3f      	cmp	r3, #63	; 0x3f
  4010bc:	d901      	bls.n	4010c2 <pmc_enable_periph_clk+0x12>
		return 1;
  4010be:	2301      	movs	r3, #1
  4010c0:	e02f      	b.n	401122 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	2b1f      	cmp	r3, #31
  4010c6:	d813      	bhi.n	4010f0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4010c8:	4b19      	ldr	r3, [pc, #100]	; (401130 <pmc_enable_periph_clk+0x80>)
  4010ca:	699a      	ldr	r2, [r3, #24]
  4010cc:	2101      	movs	r1, #1
  4010ce:	687b      	ldr	r3, [r7, #4]
  4010d0:	fa01 f303 	lsl.w	r3, r1, r3
  4010d4:	401a      	ands	r2, r3
  4010d6:	2101      	movs	r1, #1
  4010d8:	687b      	ldr	r3, [r7, #4]
  4010da:	fa01 f303 	lsl.w	r3, r1, r3
  4010de:	429a      	cmp	r2, r3
  4010e0:	d01e      	beq.n	401120 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4010e2:	4a13      	ldr	r2, [pc, #76]	; (401130 <pmc_enable_periph_clk+0x80>)
  4010e4:	2101      	movs	r1, #1
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	fa01 f303 	lsl.w	r3, r1, r3
  4010ec:	6113      	str	r3, [r2, #16]
  4010ee:	e017      	b.n	401120 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4010f0:	687b      	ldr	r3, [r7, #4]
  4010f2:	3b20      	subs	r3, #32
  4010f4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010f6:	4b0e      	ldr	r3, [pc, #56]	; (401130 <pmc_enable_periph_clk+0x80>)
  4010f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4010fc:	2101      	movs	r1, #1
  4010fe:	687b      	ldr	r3, [r7, #4]
  401100:	fa01 f303 	lsl.w	r3, r1, r3
  401104:	401a      	ands	r2, r3
  401106:	2101      	movs	r1, #1
  401108:	687b      	ldr	r3, [r7, #4]
  40110a:	fa01 f303 	lsl.w	r3, r1, r3
  40110e:	429a      	cmp	r2, r3
  401110:	d006      	beq.n	401120 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401112:	4a07      	ldr	r2, [pc, #28]	; (401130 <pmc_enable_periph_clk+0x80>)
  401114:	2101      	movs	r1, #1
  401116:	687b      	ldr	r3, [r7, #4]
  401118:	fa01 f303 	lsl.w	r3, r1, r3
  40111c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401120:	2300      	movs	r3, #0
}
  401122:	4618      	mov	r0, r3
  401124:	370c      	adds	r7, #12
  401126:	46bd      	mov	sp, r7
  401128:	f85d 7b04 	ldr.w	r7, [sp], #4
  40112c:	4770      	bx	lr
  40112e:	bf00      	nop
  401130:	400e0600 	.word	0x400e0600

00401134 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  401134:	b480      	push	{r7}
  401136:	b083      	sub	sp, #12
  401138:	af00      	add	r7, sp, #0
  40113a:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  40113c:	4a04      	ldr	r2, [pc, #16]	; (401150 <pmc_set_flash_in_wait_mode+0x1c>)
  40113e:	687b      	ldr	r3, [r7, #4]
  401140:	6013      	str	r3, [r2, #0]
}
  401142:	bf00      	nop
  401144:	370c      	adds	r7, #12
  401146:	46bd      	mov	sp, r7
  401148:	f85d 7b04 	ldr.w	r7, [sp], #4
  40114c:	4770      	bx	lr
  40114e:	bf00      	nop
  401150:	20400004 	.word	0x20400004

00401154 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  401154:	b480      	push	{r7}
  401156:	b083      	sub	sp, #12
  401158:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40115a:	4b20      	ldr	r3, [pc, #128]	; (4011dc <pmc_enable_waitmode+0x88>)
  40115c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40115e:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  401160:	687b      	ldr	r3, [r7, #4]
  401162:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  401166:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401168:	687b      	ldr	r3, [r7, #4]
  40116a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40116e:	607b      	str	r3, [r7, #4]
#endif
	PMC->PMC_FSMR = i;
  401170:	4a1a      	ldr	r2, [pc, #104]	; (4011dc <pmc_enable_waitmode+0x88>)
  401172:	687b      	ldr	r3, [r7, #4]
  401174:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  401176:	4919      	ldr	r1, [pc, #100]	; (4011dc <pmc_enable_waitmode+0x88>)
  401178:	4b18      	ldr	r3, [pc, #96]	; (4011dc <pmc_enable_waitmode+0x88>)
  40117a:	6a1a      	ldr	r2, [r3, #32]
  40117c:	4b18      	ldr	r3, [pc, #96]	; (4011e0 <pmc_enable_waitmode+0x8c>)
  40117e:	4313      	orrs	r3, r2
  401180:	620b      	str	r3, [r1, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401182:	bf00      	nop
  401184:	4b15      	ldr	r3, [pc, #84]	; (4011dc <pmc_enable_waitmode+0x88>)
  401186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401188:	f003 0308 	and.w	r3, r3, #8
  40118c:	2b00      	cmp	r3, #0
  40118e:	d0f9      	beq.n	401184 <pmc_enable_waitmode+0x30>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401190:	2300      	movs	r3, #0
  401192:	607b      	str	r3, [r7, #4]
  401194:	e003      	b.n	40119e <pmc_enable_waitmode+0x4a>
  __ASM volatile ("nop");
  401196:	bf00      	nop
  401198:	687b      	ldr	r3, [r7, #4]
  40119a:	3301      	adds	r3, #1
  40119c:	607b      	str	r3, [r7, #4]
  40119e:	687b      	ldr	r3, [r7, #4]
  4011a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4011a4:	d3f7      	bcc.n	401196 <pmc_enable_waitmode+0x42>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4011a6:	bf00      	nop
  4011a8:	4b0c      	ldr	r3, [pc, #48]	; (4011dc <pmc_enable_waitmode+0x88>)
  4011aa:	6a1b      	ldr	r3, [r3, #32]
  4011ac:	f003 0308 	and.w	r3, r3, #8
  4011b0:	2b00      	cmp	r3, #0
  4011b2:	d0f9      	beq.n	4011a8 <pmc_enable_waitmode+0x54>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4011b4:	4b09      	ldr	r3, [pc, #36]	; (4011dc <pmc_enable_waitmode+0x88>)
  4011b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4011b8:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  4011ba:	687b      	ldr	r3, [r7, #4]
  4011bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  4011c0:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4011c2:	687b      	ldr	r3, [r7, #4]
  4011c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4011c8:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  4011ca:	4a04      	ldr	r2, [pc, #16]	; (4011dc <pmc_enable_waitmode+0x88>)
  4011cc:	687b      	ldr	r3, [r7, #4]
  4011ce:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  4011d0:	bf00      	nop
  4011d2:	370c      	adds	r7, #12
  4011d4:	46bd      	mov	sp, r7
  4011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011da:	4770      	bx	lr
  4011dc:	400e0600 	.word	0x400e0600
  4011e0:	00370004 	.word	0x00370004

004011e4 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4011e4:	b590      	push	{r4, r7, lr}
  4011e6:	b099      	sub	sp, #100	; 0x64
  4011e8:	af00      	add	r7, sp, #0
  4011ea:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  4011ec:	687b      	ldr	r3, [r7, #4]
  4011ee:	3b01      	subs	r3, #1
  4011f0:	2b04      	cmp	r3, #4
  4011f2:	f200 81a3 	bhi.w	40153c <pmc_sleep+0x358>
  4011f6:	a201      	add	r2, pc, #4	; (adr r2, 4011fc <pmc_sleep+0x18>)
  4011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4011fc:	00401211 	.word	0x00401211
  401200:	00401211 	.word	0x00401211
  401204:	0040122d 	.word	0x0040122d
  401208:	0040122d 	.word	0x0040122d
  40120c:	0040151b 	.word	0x0040151b
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401210:	4a71      	ldr	r2, [pc, #452]	; (4013d8 <pmc_sleep+0x1f4>)
  401212:	4b71      	ldr	r3, [pc, #452]	; (4013d8 <pmc_sleep+0x1f4>)
  401214:	691b      	ldr	r3, [r3, #16]
  401216:	f023 0304 	bic.w	r3, r3, #4
  40121a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  40121c:	4b6f      	ldr	r3, [pc, #444]	; (4013dc <pmc_sleep+0x1f8>)
  40121e:	2201      	movs	r2, #1
  401220:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401222:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401226:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401228:	bf30      	wfi
		__WFI();
		break;
  40122a:	e187      	b.n	40153c <pmc_sleep+0x358>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40122c:	687b      	ldr	r3, [r7, #4]
  40122e:	2b03      	cmp	r3, #3
  401230:	d103      	bne.n	40123a <pmc_sleep+0x56>
  401232:	2000      	movs	r0, #0
  401234:	4b6a      	ldr	r3, [pc, #424]	; (4013e0 <pmc_sleep+0x1fc>)
  401236:	4798      	blx	r3
  401238:	e003      	b.n	401242 <pmc_sleep+0x5e>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40123a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40123e:	4b68      	ldr	r3, [pc, #416]	; (4013e0 <pmc_sleep+0x1fc>)
  401240:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401242:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401244:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  401248:	4b64      	ldr	r3, [pc, #400]	; (4013dc <pmc_sleep+0x1f8>)
  40124a:	2200      	movs	r2, #0
  40124c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40124e:	4b65      	ldr	r3, [pc, #404]	; (4013e4 <pmc_sleep+0x200>)
  401250:	2201      	movs	r2, #1
  401252:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  401254:	687b      	ldr	r3, [r7, #4]
  401256:	2b04      	cmp	r3, #4
  401258:	bf0c      	ite	eq
  40125a:	2301      	moveq	r3, #1
  40125c:	2300      	movne	r3, #0
  40125e:	b2da      	uxtb	r2, r3
  401260:	f107 031c 	add.w	r3, r7, #28
  401264:	643b      	str	r3, [r7, #64]	; 0x40
  401266:	f107 0318 	add.w	r3, r7, #24
  40126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  40126c:	f107 0314 	add.w	r3, r7, #20
  401270:	63bb      	str	r3, [r7, #56]	; 0x38
  401272:	f107 0310 	add.w	r3, r7, #16
  401276:	637b      	str	r3, [r7, #52]	; 0x34
  401278:	f107 030c 	add.w	r3, r7, #12
  40127c:	633b      	str	r3, [r7, #48]	; 0x30
  40127e:	4613      	mov	r3, r2
  401280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t mor  = PMC->CKGR_MOR;
  401284:	4b58      	ldr	r3, [pc, #352]	; (4013e8 <pmc_sleep+0x204>)
  401286:	6a1b      	ldr	r3, [r3, #32]
  401288:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  40128a:	4b57      	ldr	r3, [pc, #348]	; (4013e8 <pmc_sleep+0x204>)
  40128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40128e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  401290:	4b56      	ldr	r3, [pc, #344]	; (4013ec <pmc_sleep+0x208>)
  401292:	681b      	ldr	r3, [r3, #0]
  401294:	623b      	str	r3, [r7, #32]
	if (p_osc_setting) {
  401296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  401298:	2b00      	cmp	r3, #0
  40129a:	d002      	beq.n	4012a2 <pmc_sleep+0xbe>
		*p_osc_setting = mor;
  40129c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40129e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4012a0:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
  4012a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4012a4:	2b00      	cmp	r3, #0
  4012a6:	d003      	beq.n	4012b0 <pmc_sleep+0xcc>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4012a8:	4b4f      	ldr	r3, [pc, #316]	; (4013e8 <pmc_sleep+0x204>)
  4012aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4012ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4012ae:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
  4012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4012b2:	2b00      	cmp	r3, #0
  4012b4:	d002      	beq.n	4012bc <pmc_sleep+0xd8>
		*p_pll1_setting = 0;
  4012b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4012b8:	2200      	movs	r2, #0
  4012ba:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
  4012bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4012be:	2b00      	cmp	r3, #0
  4012c0:	d002      	beq.n	4012c8 <pmc_sleep+0xe4>
		*p_mck_setting  = mckr;
  4012c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4012c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4012c6:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
  4012c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4012ca:	2b00      	cmp	r3, #0
  4012cc:	d002      	beq.n	4012d4 <pmc_sleep+0xf0>
		*p_fmr_setting  = fmr;
  4012ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4012d0:	6a3a      	ldr	r2, [r7, #32]
  4012d2:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4012d4:	4944      	ldr	r1, [pc, #272]	; (4013e8 <pmc_sleep+0x204>)
  4012d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4012d8:	4b45      	ldr	r3, [pc, #276]	; (4013f0 <pmc_sleep+0x20c>)
  4012da:	4313      	orrs	r3, r2
  4012dc:	620b      	str	r3, [r1, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  4012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012e0:	f003 0303 	and.w	r3, r3, #3
  4012e4:	2b01      	cmp	r3, #1
  4012e6:	d90e      	bls.n	401306 <pmc_sleep+0x122>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012ea:	f023 0303 	bic.w	r3, r3, #3
  4012ee:	f043 0301 	orr.w	r3, r3, #1
  4012f2:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  4012f4:	4a3c      	ldr	r2, [pc, #240]	; (4013e8 <pmc_sleep+0x204>)
  4012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012f8:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012fa:	4b3b      	ldr	r3, [pc, #236]	; (4013e8 <pmc_sleep+0x204>)
  4012fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4012fe:	f003 0308 	and.w	r3, r3, #8
  401302:	2b00      	cmp	r3, #0
  401304:	d0f9      	beq.n	4012fa <pmc_sleep+0x116>
	if (mckr & PMC_MCKR_PRES_Msk) {
  401306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401308:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40130c:	2b00      	cmp	r3, #0
  40130e:	d00c      	beq.n	40132a <pmc_sleep+0x146>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401316:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  401318:	4a33      	ldr	r2, [pc, #204]	; (4013e8 <pmc_sleep+0x204>)
  40131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40131c:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40131e:	4b32      	ldr	r3, [pc, #200]	; (4013e8 <pmc_sleep+0x204>)
  401320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401322:	f003 0308 	and.w	r3, r3, #8
  401326:	2b00      	cmp	r3, #0
  401328:	d0f9      	beq.n	40131e <pmc_sleep+0x13a>
	pmc_disable_pllack();
  40132a:	4b32      	ldr	r3, [pc, #200]	; (4013f4 <pmc_sleep+0x210>)
  40132c:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40132e:	4b2e      	ldr	r3, [pc, #184]	; (4013e8 <pmc_sleep+0x204>)
  401330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401336:	2b00      	cmp	r3, #0
  401338:	d0f9      	beq.n	40132e <pmc_sleep+0x14a>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40133a:	492b      	ldr	r1, [pc, #172]	; (4013e8 <pmc_sleep+0x204>)
  40133c:	4b2a      	ldr	r3, [pc, #168]	; (4013e8 <pmc_sleep+0x204>)
  40133e:	6a1a      	ldr	r2, [r3, #32]
  401340:	4b2d      	ldr	r3, [pc, #180]	; (4013f8 <pmc_sleep+0x214>)
  401342:	4013      	ands	r3, r2
  401344:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401348:	620b      	str	r3, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40134a:	4b27      	ldr	r3, [pc, #156]	; (4013e8 <pmc_sleep+0x204>)
  40134c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  401352:	2b00      	cmp	r3, #0
  401354:	d0f9      	beq.n	40134a <pmc_sleep+0x166>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  401356:	4a25      	ldr	r2, [pc, #148]	; (4013ec <pmc_sleep+0x208>)
  401358:	6a3b      	ldr	r3, [r7, #32]
  40135a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  40135e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  401364:	2b00      	cmp	r3, #0
  401366:	d007      	beq.n	401378 <pmc_sleep+0x194>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401368:	491f      	ldr	r1, [pc, #124]	; (4013e8 <pmc_sleep+0x204>)
  40136a:	4b1f      	ldr	r3, [pc, #124]	; (4013e8 <pmc_sleep+0x204>)
  40136c:	6a1a      	ldr	r2, [r3, #32]
  40136e:	4b23      	ldr	r3, [pc, #140]	; (4013fc <pmc_sleep+0x218>)
  401370:	4013      	ands	r3, r2
  401372:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401376:	620b      	str	r3, [r1, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401378:	4b18      	ldr	r3, [pc, #96]	; (4013dc <pmc_sleep+0x1f8>)
  40137a:	2201      	movs	r2, #1
  40137c:	701a      	strb	r2, [r3, #0]
  40137e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401382:	b662      	cpsie	i

		pmc_enable_waitmode();
  401384:	4b1e      	ldr	r3, [pc, #120]	; (401400 <pmc_sleep+0x21c>)
  401386:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401388:	b672      	cpsid	i
  40138a:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40138e:	4b13      	ldr	r3, [pc, #76]	; (4013dc <pmc_sleep+0x1f8>)
  401390:	2200      	movs	r2, #0
  401392:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  401394:	69fc      	ldr	r4, [r7, #28]
  401396:	69b8      	ldr	r0, [r7, #24]
  401398:	6979      	ldr	r1, [r7, #20]
  40139a:	693a      	ldr	r2, [r7, #16]
  40139c:	68fb      	ldr	r3, [r7, #12]
  40139e:	65fc      	str	r4, [r7, #92]	; 0x5c
  4013a0:	65b8      	str	r0, [r7, #88]	; 0x58
  4013a2:	6579      	str	r1, [r7, #84]	; 0x54
  4013a4:	653a      	str	r2, [r7, #80]	; 0x50
  4013a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t pll_sr = 0;
  4013a8:	2300      	movs	r3, #0
  4013aa:	64bb      	str	r3, [r7, #72]	; 0x48
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4013ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  4013ae:	f003 0302 	and.w	r3, r3, #2
  4013b2:	2b00      	cmp	r3, #0
  4013b4:	d02c      	beq.n	401410 <pmc_sleep+0x22c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013b6:	490c      	ldr	r1, [pc, #48]	; (4013e8 <pmc_sleep+0x204>)
  4013b8:	4b0b      	ldr	r3, [pc, #44]	; (4013e8 <pmc_sleep+0x204>)
  4013ba:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4013bc:	4a11      	ldr	r2, [pc, #68]	; (401404 <pmc_sleep+0x220>)
  4013be:	401a      	ands	r2, r3
  4013c0:	4b11      	ldr	r3, [pc, #68]	; (401408 <pmc_sleep+0x224>)
  4013c2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013c4:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4013c6:	4908      	ldr	r1, [pc, #32]	; (4013e8 <pmc_sleep+0x204>)
  4013c8:	4b07      	ldr	r3, [pc, #28]	; (4013e8 <pmc_sleep+0x204>)
  4013ca:	6a1a      	ldr	r2, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
  4013cc:	4b0f      	ldr	r3, [pc, #60]	; (40140c <pmc_sleep+0x228>)
  4013ce:	4013      	ands	r3, r2
  4013d0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4013d4:	620b      	str	r3, [r1, #32]
  4013d6:	e04e      	b.n	401476 <pmc_sleep+0x292>
  4013d8:	e000ed00 	.word	0xe000ed00
  4013dc:	20400000 	.word	0x20400000
  4013e0:	00401135 	.word	0x00401135
  4013e4:	204004c4 	.word	0x204004c4
  4013e8:	400e0600 	.word	0x400e0600
  4013ec:	400e0c00 	.word	0x400e0c00
  4013f0:	00370008 	.word	0x00370008
  4013f4:	0040105d 	.word	0x0040105d
  4013f8:	fec8ffff 	.word	0xfec8ffff
  4013fc:	ffc8fffe 	.word	0xffc8fffe
  401400:	00401155 	.word	0x00401155
  401404:	fec8fffc 	.word	0xfec8fffc
  401408:	01370002 	.word	0x01370002
  40140c:	ffc8ff87 	.word	0xffc8ff87
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  401410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  401412:	f003 0301 	and.w	r3, r3, #1
  401416:	2b00      	cmp	r3, #0
  401418:	d02d      	beq.n	401476 <pmc_sleep+0x292>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40141a:	4b4a      	ldr	r3, [pc, #296]	; (401544 <pmc_sleep+0x360>)
  40141c:	6a1b      	ldr	r3, [r3, #32]
  40141e:	f003 0301 	and.w	r3, r3, #1
  401422:	2b00      	cmp	r3, #0
  401424:	d10d      	bne.n	401442 <pmc_sleep+0x25e>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401426:	4947      	ldr	r1, [pc, #284]	; (401544 <pmc_sleep+0x360>)
  401428:	4b46      	ldr	r3, [pc, #280]	; (401544 <pmc_sleep+0x360>)
  40142a:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  40142c:	4a46      	ldr	r2, [pc, #280]	; (401548 <pmc_sleep+0x364>)
  40142e:	401a      	ands	r2, r3
  401430:	4b46      	ldr	r3, [pc, #280]	; (40154c <pmc_sleep+0x368>)
  401432:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401434:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401436:	4b43      	ldr	r3, [pc, #268]	; (401544 <pmc_sleep+0x360>)
  401438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40143a:	f003 0301 	and.w	r3, r3, #1
  40143e:	2b00      	cmp	r3, #0
  401440:	d0f9      	beq.n	401436 <pmc_sleep+0x252>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  401442:	4b40      	ldr	r3, [pc, #256]	; (401544 <pmc_sleep+0x360>)
  401444:	6a1b      	ldr	r3, [r3, #32]
  401446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40144a:	2b00      	cmp	r3, #0
  40144c:	d10b      	bne.n	401466 <pmc_sleep+0x282>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40144e:	493d      	ldr	r1, [pc, #244]	; (401544 <pmc_sleep+0x360>)
  401450:	4b3c      	ldr	r3, [pc, #240]	; (401544 <pmc_sleep+0x360>)
  401452:	6a1a      	ldr	r2, [r3, #32]
  401454:	4b3e      	ldr	r3, [pc, #248]	; (401550 <pmc_sleep+0x36c>)
  401456:	4313      	orrs	r3, r2
  401458:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40145a:	4b3a      	ldr	r3, [pc, #232]	; (401544 <pmc_sleep+0x360>)
  40145c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  401462:	2b00      	cmp	r3, #0
  401464:	d0f9      	beq.n	40145a <pmc_sleep+0x276>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401466:	4937      	ldr	r1, [pc, #220]	; (401544 <pmc_sleep+0x360>)
  401468:	4b36      	ldr	r3, [pc, #216]	; (401544 <pmc_sleep+0x360>)
  40146a:	6a1a      	ldr	r2, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
  40146c:	4b39      	ldr	r3, [pc, #228]	; (401554 <pmc_sleep+0x370>)
  40146e:	4013      	ands	r3, r2
  401470:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401474:	620b      	str	r3, [r1, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  401476:	6dba      	ldr	r2, [r7, #88]	; 0x58
  401478:	4b37      	ldr	r3, [pc, #220]	; (401558 <pmc_sleep+0x374>)
  40147a:	4013      	ands	r3, r2
  40147c:	2b00      	cmp	r3, #0
  40147e:	d008      	beq.n	401492 <pmc_sleep+0x2ae>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401480:	4a30      	ldr	r2, [pc, #192]	; (401544 <pmc_sleep+0x360>)
  401482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  401484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401488:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40148a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40148c:	f043 0302 	orr.w	r3, r3, #2
  401490:	64bb      	str	r3, [r7, #72]	; 0x48
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  401494:	f003 0303 	and.w	r3, r3, #3
  401498:	2b02      	cmp	r3, #2
  40149a:	d105      	bne.n	4014a8 <pmc_sleep+0x2c4>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40149c:	4b29      	ldr	r3, [pc, #164]	; (401544 <pmc_sleep+0x360>)
  40149e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014a0:	f003 0302 	and.w	r3, r3, #2
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	d0f9      	beq.n	40149c <pmc_sleep+0x2b8>
	mckr = PMC->PMC_MCKR;
  4014a8:	4b26      	ldr	r3, [pc, #152]	; (401544 <pmc_sleep+0x360>)
  4014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014ac:	647b      	str	r3, [r7, #68]	; 0x44
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4014ae:	4925      	ldr	r1, [pc, #148]	; (401544 <pmc_sleep+0x360>)
  4014b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4014b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4014b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4014b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014bc:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4014be:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014c0:	4b20      	ldr	r3, [pc, #128]	; (401544 <pmc_sleep+0x360>)
  4014c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014c4:	f003 0308 	and.w	r3, r3, #8
  4014c8:	2b00      	cmp	r3, #0
  4014ca:	d0f9      	beq.n	4014c0 <pmc_sleep+0x2dc>
	EFC0->EEFC_FMR = fmr_setting;
  4014cc:	4a23      	ldr	r2, [pc, #140]	; (40155c <pmc_sleep+0x378>)
  4014ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4014d0:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
  4014d2:	4a1c      	ldr	r2, [pc, #112]	; (401544 <pmc_sleep+0x360>)
  4014d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4014d6:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014d8:	4b1a      	ldr	r3, [pc, #104]	; (401544 <pmc_sleep+0x360>)
  4014da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014dc:	f003 0308 	and.w	r3, r3, #8
  4014e0:	2b00      	cmp	r3, #0
  4014e2:	d0f9      	beq.n	4014d8 <pmc_sleep+0x2f4>
	while (!(PMC->PMC_SR & pll_sr));
  4014e4:	4b17      	ldr	r3, [pc, #92]	; (401544 <pmc_sleep+0x360>)
  4014e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4014e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4014ea:	4013      	ands	r3, r2
  4014ec:	2b00      	cmp	r3, #0
  4014ee:	d0f9      	beq.n	4014e4 <pmc_sleep+0x300>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4014f0:	4b1b      	ldr	r3, [pc, #108]	; (401560 <pmc_sleep+0x37c>)
  4014f2:	2200      	movs	r2, #0
  4014f4:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4014f6:	4b1b      	ldr	r3, [pc, #108]	; (401564 <pmc_sleep+0x380>)
  4014f8:	681b      	ldr	r3, [r3, #0]
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	d005      	beq.n	40150a <pmc_sleep+0x326>
			callback_clocks_restored();
  4014fe:	4b19      	ldr	r3, [pc, #100]	; (401564 <pmc_sleep+0x380>)
  401500:	681b      	ldr	r3, [r3, #0]
  401502:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401504:	4b17      	ldr	r3, [pc, #92]	; (401564 <pmc_sleep+0x380>)
  401506:	2200      	movs	r2, #0
  401508:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40150a:	4b17      	ldr	r3, [pc, #92]	; (401568 <pmc_sleep+0x384>)
  40150c:	2201      	movs	r2, #1
  40150e:	701a      	strb	r2, [r3, #0]
  401510:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401514:	b662      	cpsie	i

		break;
  401516:	bf00      	nop
  401518:	e010      	b.n	40153c <pmc_sleep+0x358>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40151a:	4a14      	ldr	r2, [pc, #80]	; (40156c <pmc_sleep+0x388>)
  40151c:	4b13      	ldr	r3, [pc, #76]	; (40156c <pmc_sleep+0x388>)
  40151e:	691b      	ldr	r3, [r3, #16]
  401520:	f043 0304 	orr.w	r3, r3, #4
  401524:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401526:	4b12      	ldr	r3, [pc, #72]	; (401570 <pmc_sleep+0x38c>)
  401528:	4a12      	ldr	r2, [pc, #72]	; (401574 <pmc_sleep+0x390>)
  40152a:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40152c:	4b0e      	ldr	r3, [pc, #56]	; (401568 <pmc_sleep+0x384>)
  40152e:	2201      	movs	r2, #1
  401530:	701a      	strb	r2, [r3, #0]
  401532:	f3bf 8f5f 	dmb	sy
  401536:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401538:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  40153a:	bf00      	nop
#endif
	}
}
  40153c:	bf00      	nop
  40153e:	3764      	adds	r7, #100	; 0x64
  401540:	46bd      	mov	sp, r7
  401542:	bd90      	pop	{r4, r7, pc}
  401544:	400e0600 	.word	0x400e0600
  401548:	ffc8fffc 	.word	0xffc8fffc
  40154c:	00370001 	.word	0x00370001
  401550:	01370000 	.word	0x01370000
  401554:	ffc8ff87 	.word	0xffc8ff87
  401558:	07ff0000 	.word	0x07ff0000
  40155c:	400e0c00 	.word	0x400e0c00
  401560:	204004c4 	.word	0x204004c4
  401564:	204004c8 	.word	0x204004c8
  401568:	20400000 	.word	0x20400000
  40156c:	e000ed00 	.word	0xe000ed00
  401570:	400e1810 	.word	0x400e1810
  401574:	a5000004 	.word	0xa5000004

00401578 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401578:	b480      	push	{r7}
  40157a:	b087      	sub	sp, #28
  40157c:	af00      	add	r7, sp, #0
  40157e:	60f8      	str	r0, [r7, #12]
  401580:	60b9      	str	r1, [r7, #8]
  401582:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401584:	68fa      	ldr	r2, [r7, #12]
  401586:	68bb      	ldr	r3, [r7, #8]
  401588:	019b      	lsls	r3, r3, #6
  40158a:	4413      	add	r3, r2
  40158c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40158e:	697b      	ldr	r3, [r7, #20]
  401590:	2202      	movs	r2, #2
  401592:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401594:	697b      	ldr	r3, [r7, #20]
  401596:	f04f 32ff 	mov.w	r2, #4294967295
  40159a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40159c:	697b      	ldr	r3, [r7, #20]
  40159e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4015a0:	697b      	ldr	r3, [r7, #20]
  4015a2:	687a      	ldr	r2, [r7, #4]
  4015a4:	605a      	str	r2, [r3, #4]
}
  4015a6:	bf00      	nop
  4015a8:	371c      	adds	r7, #28
  4015aa:	46bd      	mov	sp, r7
  4015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015b0:	4770      	bx	lr

004015b2 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4015b2:	b480      	push	{r7}
  4015b4:	b083      	sub	sp, #12
  4015b6:	af00      	add	r7, sp, #0
  4015b8:	6078      	str	r0, [r7, #4]
  4015ba:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4015bc:	687a      	ldr	r2, [r7, #4]
  4015be:	683b      	ldr	r3, [r7, #0]
  4015c0:	019b      	lsls	r3, r3, #6
  4015c2:	4413      	add	r3, r2
  4015c4:	2205      	movs	r2, #5
  4015c6:	601a      	str	r2, [r3, #0]
}
  4015c8:	bf00      	nop
  4015ca:	370c      	adds	r7, #12
  4015cc:	46bd      	mov	sp, r7
  4015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015d2:	4770      	bx	lr

004015d4 <tc_write_ra>:
 */
void tc_write_ra(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4015d4:	b480      	push	{r7}
  4015d6:	b085      	sub	sp, #20
  4015d8:	af00      	add	r7, sp, #0
  4015da:	60f8      	str	r0, [r7, #12]
  4015dc:	60b9      	str	r1, [r7, #8]
  4015de:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  4015e0:	68fa      	ldr	r2, [r7, #12]
  4015e2:	68bb      	ldr	r3, [r7, #8]
  4015e4:	019b      	lsls	r3, r3, #6
  4015e6:	4413      	add	r3, r2
  4015e8:	3314      	adds	r3, #20
  4015ea:	687a      	ldr	r2, [r7, #4]
  4015ec:	601a      	str	r2, [r3, #0]
}
  4015ee:	bf00      	nop
  4015f0:	3714      	adds	r7, #20
  4015f2:	46bd      	mov	sp, r7
  4015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015f8:	4770      	bx	lr

004015fa <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4015fa:	b480      	push	{r7}
  4015fc:	b085      	sub	sp, #20
  4015fe:	af00      	add	r7, sp, #0
  401600:	60f8      	str	r0, [r7, #12]
  401602:	60b9      	str	r1, [r7, #8]
  401604:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401606:	68fa      	ldr	r2, [r7, #12]
  401608:	68bb      	ldr	r3, [r7, #8]
  40160a:	019b      	lsls	r3, r3, #6
  40160c:	4413      	add	r3, r2
  40160e:	331c      	adds	r3, #28
  401610:	687a      	ldr	r2, [r7, #4]
  401612:	601a      	str	r2, [r3, #0]
}
  401614:	bf00      	nop
  401616:	3714      	adds	r7, #20
  401618:	46bd      	mov	sp, r7
  40161a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40161e:	4770      	bx	lr

00401620 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  401620:	b480      	push	{r7}
  401622:	b087      	sub	sp, #28
  401624:	af00      	add	r7, sp, #0
  401626:	60f8      	str	r0, [r7, #12]
  401628:	60b9      	str	r1, [r7, #8]
  40162a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40162c:	68fa      	ldr	r2, [r7, #12]
  40162e:	68bb      	ldr	r3, [r7, #8]
  401630:	019b      	lsls	r3, r3, #6
  401632:	4413      	add	r3, r2
  401634:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  401636:	697b      	ldr	r3, [r7, #20]
  401638:	687a      	ldr	r2, [r7, #4]
  40163a:	625a      	str	r2, [r3, #36]	; 0x24
}
  40163c:	bf00      	nop
  40163e:	371c      	adds	r7, #28
  401640:	46bd      	mov	sp, r7
  401642:	f85d 7b04 	ldr.w	r7, [sp], #4
  401646:	4770      	bx	lr

00401648 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  401648:	b480      	push	{r7}
  40164a:	b085      	sub	sp, #20
  40164c:	af00      	add	r7, sp, #0
  40164e:	6078      	str	r0, [r7, #4]
  401650:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401652:	687a      	ldr	r2, [r7, #4]
  401654:	683b      	ldr	r3, [r7, #0]
  401656:	019b      	lsls	r3, r3, #6
  401658:	4413      	add	r3, r2
  40165a:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40165c:	68fb      	ldr	r3, [r7, #12]
  40165e:	6a1b      	ldr	r3, [r3, #32]
}
  401660:	4618      	mov	r0, r3
  401662:	3714      	adds	r7, #20
  401664:	46bd      	mov	sp, r7
  401666:	f85d 7b04 	ldr.w	r7, [sp], #4
  40166a:	4770      	bx	lr

0040166c <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40166c:	b480      	push	{r7}
  40166e:	b08d      	sub	sp, #52	; 0x34
  401670:	af00      	add	r7, sp, #0
  401672:	60f8      	str	r0, [r7, #12]
  401674:	60b9      	str	r1, [r7, #8]
  401676:	607a      	str	r2, [r7, #4]
  401678:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40167a:	2302      	movs	r3, #2
  40167c:	613b      	str	r3, [r7, #16]
  40167e:	2308      	movs	r3, #8
  401680:	617b      	str	r3, [r7, #20]
  401682:	2320      	movs	r3, #32
  401684:	61bb      	str	r3, [r7, #24]
  401686:	2380      	movs	r3, #128	; 0x80
  401688:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40168a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40168c:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40168e:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401690:	2300      	movs	r3, #0
  401692:	62fb      	str	r3, [r7, #44]	; 0x2c
  401694:	e01a      	b.n	4016cc <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  401696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401698:	009b      	lsls	r3, r3, #2
  40169a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40169e:	4413      	add	r3, r2
  4016a0:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4016a4:	68ba      	ldr	r2, [r7, #8]
  4016a6:	fbb2 f3f3 	udiv	r3, r2, r3
  4016aa:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4016ae:	0c1b      	lsrs	r3, r3, #16
  4016b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4016b2:	68fa      	ldr	r2, [r7, #12]
  4016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4016b6:	429a      	cmp	r2, r3
  4016b8:	d901      	bls.n	4016be <tc_find_mck_divisor+0x52>
			return 0;
  4016ba:	2300      	movs	r3, #0
  4016bc:	e023      	b.n	401706 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4016be:	68fa      	ldr	r2, [r7, #12]
  4016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016c2:	429a      	cmp	r2, r3
  4016c4:	d206      	bcs.n	4016d4 <tc_find_mck_divisor+0x68>
			ul_index++) {
  4016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016c8:	3301      	adds	r3, #1
  4016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  4016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016ce:	2b04      	cmp	r3, #4
  4016d0:	d9e1      	bls.n	401696 <tc_find_mck_divisor+0x2a>
  4016d2:	e000      	b.n	4016d6 <tc_find_mck_divisor+0x6a>
			break;
  4016d4:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  4016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016d8:	2b04      	cmp	r3, #4
  4016da:	d901      	bls.n	4016e0 <tc_find_mck_divisor+0x74>
		return 0;
  4016dc:	2300      	movs	r3, #0
  4016de:	e012      	b.n	401706 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  4016e0:	687b      	ldr	r3, [r7, #4]
  4016e2:	2b00      	cmp	r3, #0
  4016e4:	d008      	beq.n	4016f8 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  4016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016e8:	009b      	lsls	r3, r3, #2
  4016ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4016ee:	4413      	add	r3, r2
  4016f0:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4016f8:	683b      	ldr	r3, [r7, #0]
  4016fa:	2b00      	cmp	r3, #0
  4016fc:	d002      	beq.n	401704 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4016fe:	683b      	ldr	r3, [r7, #0]
  401700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  401702:	601a      	str	r2, [r3, #0]
	}

	return 1;
  401704:	2301      	movs	r3, #1
}
  401706:	4618      	mov	r0, r3
  401708:	3734      	adds	r7, #52	; 0x34
  40170a:	46bd      	mov	sp, r7
  40170c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401710:	4770      	bx	lr

00401712 <uart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
  401712:	b480      	push	{r7}
  401714:	b083      	sub	sp, #12
  401716:	af00      	add	r7, sp, #0
  401718:	6078      	str	r0, [r7, #4]
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  40171a:	687b      	ldr	r3, [r7, #4]
  40171c:	695b      	ldr	r3, [r3, #20]
  40171e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401722:	2b00      	cmp	r3, #0
  401724:	bf14      	ite	ne
  401726:	2301      	movne	r3, #1
  401728:	2300      	moveq	r3, #0
  40172a:	b2db      	uxtb	r3, r3
}
  40172c:	4618      	mov	r0, r3
  40172e:	370c      	adds	r7, #12
  401730:	46bd      	mov	sp, r7
  401732:	f85d 7b04 	ldr.w	r7, [sp], #4
  401736:	4770      	bx	lr

00401738 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401738:	b480      	push	{r7}
  40173a:	b083      	sub	sp, #12
  40173c:	af00      	add	r7, sp, #0
  40173e:	6078      	str	r0, [r7, #4]
  401740:	460b      	mov	r3, r1
  401742:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401744:	687b      	ldr	r3, [r7, #4]
  401746:	695b      	ldr	r3, [r3, #20]
  401748:	f003 0302 	and.w	r3, r3, #2
  40174c:	2b00      	cmp	r3, #0
  40174e:	d101      	bne.n	401754 <uart_write+0x1c>
		return 1;
  401750:	2301      	movs	r3, #1
  401752:	e003      	b.n	40175c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401754:	78fa      	ldrb	r2, [r7, #3]
  401756:	687b      	ldr	r3, [r7, #4]
  401758:	61da      	str	r2, [r3, #28]
	return 0;
  40175a:	2300      	movs	r3, #0
}
  40175c:	4618      	mov	r0, r3
  40175e:	370c      	adds	r7, #12
  401760:	46bd      	mov	sp, r7
  401762:	f85d 7b04 	ldr.w	r7, [sp], #4
  401766:	4770      	bx	lr

00401768 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401768:	b480      	push	{r7}
  40176a:	b083      	sub	sp, #12
  40176c:	af00      	add	r7, sp, #0
  40176e:	6078      	str	r0, [r7, #4]
  401770:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401772:	687b      	ldr	r3, [r7, #4]
  401774:	695b      	ldr	r3, [r3, #20]
  401776:	f003 0301 	and.w	r3, r3, #1
  40177a:	2b00      	cmp	r3, #0
  40177c:	d101      	bne.n	401782 <uart_read+0x1a>
		return 1;
  40177e:	2301      	movs	r3, #1
  401780:	e005      	b.n	40178e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401782:	687b      	ldr	r3, [r7, #4]
  401784:	699b      	ldr	r3, [r3, #24]
  401786:	b2da      	uxtb	r2, r3
  401788:	683b      	ldr	r3, [r7, #0]
  40178a:	701a      	strb	r2, [r3, #0]
	return 0;
  40178c:	2300      	movs	r3, #0
}
  40178e:	4618      	mov	r0, r3
  401790:	370c      	adds	r7, #12
  401792:	46bd      	mov	sp, r7
  401794:	f85d 7b04 	ldr.w	r7, [sp], #4
  401798:	4770      	bx	lr

0040179a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40179a:	b480      	push	{r7}
  40179c:	b089      	sub	sp, #36	; 0x24
  40179e:	af00      	add	r7, sp, #0
  4017a0:	60f8      	str	r0, [r7, #12]
  4017a2:	60b9      	str	r1, [r7, #8]
  4017a4:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4017a6:	68bb      	ldr	r3, [r7, #8]
  4017a8:	011a      	lsls	r2, r3, #4
  4017aa:	687b      	ldr	r3, [r7, #4]
  4017ac:	429a      	cmp	r2, r3
  4017ae:	d802      	bhi.n	4017b6 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4017b0:	2310      	movs	r3, #16
  4017b2:	61fb      	str	r3, [r7, #28]
  4017b4:	e001      	b.n	4017ba <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4017b6:	2308      	movs	r3, #8
  4017b8:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4017ba:	687b      	ldr	r3, [r7, #4]
  4017bc:	00da      	lsls	r2, r3, #3
  4017be:	69fb      	ldr	r3, [r7, #28]
  4017c0:	68b9      	ldr	r1, [r7, #8]
  4017c2:	fb01 f303 	mul.w	r3, r1, r3
  4017c6:	085b      	lsrs	r3, r3, #1
  4017c8:	441a      	add	r2, r3
  4017ca:	69fb      	ldr	r3, [r7, #28]
  4017cc:	68b9      	ldr	r1, [r7, #8]
  4017ce:	fb01 f303 	mul.w	r3, r1, r3
  4017d2:	fbb2 f3f3 	udiv	r3, r2, r3
  4017d6:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4017d8:	69bb      	ldr	r3, [r7, #24]
  4017da:	08db      	lsrs	r3, r3, #3
  4017dc:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4017de:	69bb      	ldr	r3, [r7, #24]
  4017e0:	f003 0307 	and.w	r3, r3, #7
  4017e4:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4017e6:	697b      	ldr	r3, [r7, #20]
  4017e8:	2b00      	cmp	r3, #0
  4017ea:	d003      	beq.n	4017f4 <usart_set_async_baudrate+0x5a>
  4017ec:	697b      	ldr	r3, [r7, #20]
  4017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4017f2:	d301      	bcc.n	4017f8 <usart_set_async_baudrate+0x5e>
		return 1;
  4017f4:	2301      	movs	r3, #1
  4017f6:	e00f      	b.n	401818 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4017f8:	69fb      	ldr	r3, [r7, #28]
  4017fa:	2b08      	cmp	r3, #8
  4017fc:	d105      	bne.n	40180a <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4017fe:	68fb      	ldr	r3, [r7, #12]
  401800:	685b      	ldr	r3, [r3, #4]
  401802:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401806:	68fb      	ldr	r3, [r7, #12]
  401808:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40180a:	693b      	ldr	r3, [r7, #16]
  40180c:	041a      	lsls	r2, r3, #16
  40180e:	697b      	ldr	r3, [r7, #20]
  401810:	431a      	orrs	r2, r3
  401812:	68fb      	ldr	r3, [r7, #12]
  401814:	621a      	str	r2, [r3, #32]

	return 0;
  401816:	2300      	movs	r3, #0
}
  401818:	4618      	mov	r0, r3
  40181a:	3724      	adds	r7, #36	; 0x24
  40181c:	46bd      	mov	sp, r7
  40181e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401822:	4770      	bx	lr

00401824 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401824:	b580      	push	{r7, lr}
  401826:	b082      	sub	sp, #8
  401828:	af00      	add	r7, sp, #0
  40182a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40182c:	6878      	ldr	r0, [r7, #4]
  40182e:	4b0d      	ldr	r3, [pc, #52]	; (401864 <usart_reset+0x40>)
  401830:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401832:	687b      	ldr	r3, [r7, #4]
  401834:	2200      	movs	r2, #0
  401836:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401838:	687b      	ldr	r3, [r7, #4]
  40183a:	2200      	movs	r2, #0
  40183c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40183e:	687b      	ldr	r3, [r7, #4]
  401840:	2200      	movs	r2, #0
  401842:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401844:	6878      	ldr	r0, [r7, #4]
  401846:	4b08      	ldr	r3, [pc, #32]	; (401868 <usart_reset+0x44>)
  401848:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40184a:	6878      	ldr	r0, [r7, #4]
  40184c:	4b07      	ldr	r3, [pc, #28]	; (40186c <usart_reset+0x48>)
  40184e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401850:	6878      	ldr	r0, [r7, #4]
  401852:	4b07      	ldr	r3, [pc, #28]	; (401870 <usart_reset+0x4c>)
  401854:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401856:	6878      	ldr	r0, [r7, #4]
  401858:	4b06      	ldr	r3, [pc, #24]	; (401874 <usart_reset+0x50>)
  40185a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  40185c:	bf00      	nop
  40185e:	3708      	adds	r7, #8
  401860:	46bd      	mov	sp, r7
  401862:	bd80      	pop	{r7, pc}
  401864:	00401a39 	.word	0x00401a39
  401868:	00401917 	.word	0x00401917
  40186c:	0040194b 	.word	0x0040194b
  401870:	00401999 	.word	0x00401999
  401874:	004019b5 	.word	0x004019b5

00401878 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401878:	b580      	push	{r7, lr}
  40187a:	b084      	sub	sp, #16
  40187c:	af00      	add	r7, sp, #0
  40187e:	60f8      	str	r0, [r7, #12]
  401880:	60b9      	str	r1, [r7, #8]
  401882:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401884:	68f8      	ldr	r0, [r7, #12]
  401886:	4b1a      	ldr	r3, [pc, #104]	; (4018f0 <usart_init_rs232+0x78>)
  401888:	4798      	blx	r3

	ul_reg_val = 0;
  40188a:	4b1a      	ldr	r3, [pc, #104]	; (4018f4 <usart_init_rs232+0x7c>)
  40188c:	2200      	movs	r2, #0
  40188e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401890:	68bb      	ldr	r3, [r7, #8]
  401892:	2b00      	cmp	r3, #0
  401894:	d009      	beq.n	4018aa <usart_init_rs232+0x32>
  401896:	68bb      	ldr	r3, [r7, #8]
  401898:	681b      	ldr	r3, [r3, #0]
  40189a:	687a      	ldr	r2, [r7, #4]
  40189c:	4619      	mov	r1, r3
  40189e:	68f8      	ldr	r0, [r7, #12]
  4018a0:	4b15      	ldr	r3, [pc, #84]	; (4018f8 <usart_init_rs232+0x80>)
  4018a2:	4798      	blx	r3
  4018a4:	4603      	mov	r3, r0
  4018a6:	2b00      	cmp	r3, #0
  4018a8:	d001      	beq.n	4018ae <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4018aa:	2301      	movs	r3, #1
  4018ac:	e01b      	b.n	4018e6 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4018ae:	68bb      	ldr	r3, [r7, #8]
  4018b0:	685a      	ldr	r2, [r3, #4]
  4018b2:	68bb      	ldr	r3, [r7, #8]
  4018b4:	689b      	ldr	r3, [r3, #8]
  4018b6:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4018b8:	68bb      	ldr	r3, [r7, #8]
  4018ba:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4018bc:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4018be:	68bb      	ldr	r3, [r7, #8]
  4018c0:	68db      	ldr	r3, [r3, #12]
  4018c2:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4018c4:	4b0b      	ldr	r3, [pc, #44]	; (4018f4 <usart_init_rs232+0x7c>)
  4018c6:	681b      	ldr	r3, [r3, #0]
  4018c8:	4313      	orrs	r3, r2
  4018ca:	4a0a      	ldr	r2, [pc, #40]	; (4018f4 <usart_init_rs232+0x7c>)
  4018cc:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4018ce:	4b09      	ldr	r3, [pc, #36]	; (4018f4 <usart_init_rs232+0x7c>)
  4018d0:	681b      	ldr	r3, [r3, #0]
  4018d2:	4a08      	ldr	r2, [pc, #32]	; (4018f4 <usart_init_rs232+0x7c>)
  4018d4:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4018d6:	68fb      	ldr	r3, [r7, #12]
  4018d8:	685a      	ldr	r2, [r3, #4]
  4018da:	4b06      	ldr	r3, [pc, #24]	; (4018f4 <usart_init_rs232+0x7c>)
  4018dc:	681b      	ldr	r3, [r3, #0]
  4018de:	431a      	orrs	r2, r3
  4018e0:	68fb      	ldr	r3, [r7, #12]
  4018e2:	605a      	str	r2, [r3, #4]

	return 0;
  4018e4:	2300      	movs	r3, #0
}
  4018e6:	4618      	mov	r0, r3
  4018e8:	3710      	adds	r7, #16
  4018ea:	46bd      	mov	sp, r7
  4018ec:	bd80      	pop	{r7, pc}
  4018ee:	bf00      	nop
  4018f0:	00401825 	.word	0x00401825
  4018f4:	204004cc 	.word	0x204004cc
  4018f8:	0040179b 	.word	0x0040179b

004018fc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4018fc:	b480      	push	{r7}
  4018fe:	b083      	sub	sp, #12
  401900:	af00      	add	r7, sp, #0
  401902:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401904:	687b      	ldr	r3, [r7, #4]
  401906:	2240      	movs	r2, #64	; 0x40
  401908:	601a      	str	r2, [r3, #0]
}
  40190a:	bf00      	nop
  40190c:	370c      	adds	r7, #12
  40190e:	46bd      	mov	sp, r7
  401910:	f85d 7b04 	ldr.w	r7, [sp], #4
  401914:	4770      	bx	lr

00401916 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401916:	b480      	push	{r7}
  401918:	b083      	sub	sp, #12
  40191a:	af00      	add	r7, sp, #0
  40191c:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40191e:	687b      	ldr	r3, [r7, #4]
  401920:	2288      	movs	r2, #136	; 0x88
  401922:	601a      	str	r2, [r3, #0]
}
  401924:	bf00      	nop
  401926:	370c      	adds	r7, #12
  401928:	46bd      	mov	sp, r7
  40192a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40192e:	4770      	bx	lr

00401930 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401930:	b480      	push	{r7}
  401932:	b083      	sub	sp, #12
  401934:	af00      	add	r7, sp, #0
  401936:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401938:	687b      	ldr	r3, [r7, #4]
  40193a:	2210      	movs	r2, #16
  40193c:	601a      	str	r2, [r3, #0]
}
  40193e:	bf00      	nop
  401940:	370c      	adds	r7, #12
  401942:	46bd      	mov	sp, r7
  401944:	f85d 7b04 	ldr.w	r7, [sp], #4
  401948:	4770      	bx	lr

0040194a <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40194a:	b480      	push	{r7}
  40194c:	b083      	sub	sp, #12
  40194e:	af00      	add	r7, sp, #0
  401950:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401952:	687b      	ldr	r3, [r7, #4]
  401954:	2224      	movs	r2, #36	; 0x24
  401956:	601a      	str	r2, [r3, #0]
}
  401958:	bf00      	nop
  40195a:	370c      	adds	r7, #12
  40195c:	46bd      	mov	sp, r7
  40195e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401962:	4770      	bx	lr

00401964 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  401964:	b480      	push	{r7}
  401966:	b083      	sub	sp, #12
  401968:	af00      	add	r7, sp, #0
  40196a:	6078      	str	r0, [r7, #4]
  40196c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	683a      	ldr	r2, [r7, #0]
  401972:	609a      	str	r2, [r3, #8]
}
  401974:	bf00      	nop
  401976:	370c      	adds	r7, #12
  401978:	46bd      	mov	sp, r7
  40197a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40197e:	4770      	bx	lr

00401980 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401980:	b480      	push	{r7}
  401982:	b083      	sub	sp, #12
  401984:	af00      	add	r7, sp, #0
  401986:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401988:	687b      	ldr	r3, [r7, #4]
  40198a:	695b      	ldr	r3, [r3, #20]
}
  40198c:	4618      	mov	r0, r3
  40198e:	370c      	adds	r7, #12
  401990:	46bd      	mov	sp, r7
  401992:	f85d 7b04 	ldr.w	r7, [sp], #4
  401996:	4770      	bx	lr

00401998 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401998:	b480      	push	{r7}
  40199a:	b083      	sub	sp, #12
  40199c:	af00      	add	r7, sp, #0
  40199e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4019a0:	687b      	ldr	r3, [r7, #4]
  4019a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019a6:	601a      	str	r2, [r3, #0]
}
  4019a8:	bf00      	nop
  4019aa:	370c      	adds	r7, #12
  4019ac:	46bd      	mov	sp, r7
  4019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019b2:	4770      	bx	lr

004019b4 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4019b4:	b480      	push	{r7}
  4019b6:	b083      	sub	sp, #12
  4019b8:	af00      	add	r7, sp, #0
  4019ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4019bc:	687b      	ldr	r3, [r7, #4]
  4019be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4019c2:	601a      	str	r2, [r3, #0]
}
  4019c4:	bf00      	nop
  4019c6:	370c      	adds	r7, #12
  4019c8:	46bd      	mov	sp, r7
  4019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ce:	4770      	bx	lr

004019d0 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4019d0:	b480      	push	{r7}
  4019d2:	b083      	sub	sp, #12
  4019d4:	af00      	add	r7, sp, #0
  4019d6:	6078      	str	r0, [r7, #4]
  4019d8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4019da:	687b      	ldr	r3, [r7, #4]
  4019dc:	695b      	ldr	r3, [r3, #20]
  4019de:	f003 0302 	and.w	r3, r3, #2
  4019e2:	2b00      	cmp	r3, #0
  4019e4:	d101      	bne.n	4019ea <usart_write+0x1a>
		return 1;
  4019e6:	2301      	movs	r3, #1
  4019e8:	e005      	b.n	4019f6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4019ea:	683b      	ldr	r3, [r7, #0]
  4019ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4019f0:	687b      	ldr	r3, [r7, #4]
  4019f2:	61da      	str	r2, [r3, #28]
	return 0;
  4019f4:	2300      	movs	r3, #0
}
  4019f6:	4618      	mov	r0, r3
  4019f8:	370c      	adds	r7, #12
  4019fa:	46bd      	mov	sp, r7
  4019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a00:	4770      	bx	lr

00401a02 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401a02:	b480      	push	{r7}
  401a04:	b083      	sub	sp, #12
  401a06:	af00      	add	r7, sp, #0
  401a08:	6078      	str	r0, [r7, #4]
  401a0a:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401a0c:	687b      	ldr	r3, [r7, #4]
  401a0e:	695b      	ldr	r3, [r3, #20]
  401a10:	f003 0301 	and.w	r3, r3, #1
  401a14:	2b00      	cmp	r3, #0
  401a16:	d101      	bne.n	401a1c <usart_read+0x1a>
		return 1;
  401a18:	2301      	movs	r3, #1
  401a1a:	e006      	b.n	401a2a <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401a1c:	687b      	ldr	r3, [r7, #4]
  401a1e:	699b      	ldr	r3, [r3, #24]
  401a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401a24:	683b      	ldr	r3, [r7, #0]
  401a26:	601a      	str	r2, [r3, #0]

	return 0;
  401a28:	2300      	movs	r3, #0
}
  401a2a:	4618      	mov	r0, r3
  401a2c:	370c      	adds	r7, #12
  401a2e:	46bd      	mov	sp, r7
  401a30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a34:	4770      	bx	lr
	...

00401a38 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401a38:	b480      	push	{r7}
  401a3a:	b083      	sub	sp, #12
  401a3c:	af00      	add	r7, sp, #0
  401a3e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401a40:	687b      	ldr	r3, [r7, #4]
  401a42:	4a04      	ldr	r2, [pc, #16]	; (401a54 <usart_disable_writeprotect+0x1c>)
  401a44:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401a48:	bf00      	nop
  401a4a:	370c      	adds	r7, #12
  401a4c:	46bd      	mov	sp, r7
  401a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a52:	4770      	bx	lr
  401a54:	55534100 	.word	0x55534100

00401a58 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401a58:	b480      	push	{r7}
  401a5a:	b083      	sub	sp, #12
  401a5c:	af00      	add	r7, sp, #0
  401a5e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401a60:	687b      	ldr	r3, [r7, #4]
  401a62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401a66:	605a      	str	r2, [r3, #4]

}
  401a68:	bf00      	nop
  401a6a:	370c      	adds	r7, #12
  401a6c:	46bd      	mov	sp, r7
  401a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a72:	4770      	bx	lr

00401a74 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401a74:	b480      	push	{r7}
  401a76:	b083      	sub	sp, #12
  401a78:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401a7a:	f3ef 8310 	mrs	r3, PRIMASK
  401a7e:	607b      	str	r3, [r7, #4]
  return(result);
  401a80:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401a82:	2b00      	cmp	r3, #0
  401a84:	bf0c      	ite	eq
  401a86:	2301      	moveq	r3, #1
  401a88:	2300      	movne	r3, #0
  401a8a:	b2db      	uxtb	r3, r3
  401a8c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401a8e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401a90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401a94:	4b04      	ldr	r3, [pc, #16]	; (401aa8 <cpu_irq_save+0x34>)
  401a96:	2200      	movs	r2, #0
  401a98:	701a      	strb	r2, [r3, #0]
	return flags;
  401a9a:	683b      	ldr	r3, [r7, #0]
}
  401a9c:	4618      	mov	r0, r3
  401a9e:	370c      	adds	r7, #12
  401aa0:	46bd      	mov	sp, r7
  401aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aa6:	4770      	bx	lr
  401aa8:	20400000 	.word	0x20400000

00401aac <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401aac:	b480      	push	{r7}
  401aae:	b083      	sub	sp, #12
  401ab0:	af00      	add	r7, sp, #0
  401ab2:	6078      	str	r0, [r7, #4]
	return (flags);
  401ab4:	687b      	ldr	r3, [r7, #4]
  401ab6:	2b00      	cmp	r3, #0
  401ab8:	bf14      	ite	ne
  401aba:	2301      	movne	r3, #1
  401abc:	2300      	moveq	r3, #0
  401abe:	b2db      	uxtb	r3, r3
}
  401ac0:	4618      	mov	r0, r3
  401ac2:	370c      	adds	r7, #12
  401ac4:	46bd      	mov	sp, r7
  401ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aca:	4770      	bx	lr

00401acc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401acc:	b580      	push	{r7, lr}
  401ace:	b082      	sub	sp, #8
  401ad0:	af00      	add	r7, sp, #0
  401ad2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401ad4:	6878      	ldr	r0, [r7, #4]
  401ad6:	4b07      	ldr	r3, [pc, #28]	; (401af4 <cpu_irq_restore+0x28>)
  401ad8:	4798      	blx	r3
  401ada:	4603      	mov	r3, r0
  401adc:	2b00      	cmp	r3, #0
  401ade:	d005      	beq.n	401aec <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401ae0:	4b05      	ldr	r3, [pc, #20]	; (401af8 <cpu_irq_restore+0x2c>)
  401ae2:	2201      	movs	r2, #1
  401ae4:	701a      	strb	r2, [r3, #0]
  401ae6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401aea:	b662      	cpsie	i
}
  401aec:	bf00      	nop
  401aee:	3708      	adds	r7, #8
  401af0:	46bd      	mov	sp, r7
  401af2:	bd80      	pop	{r7, pc}
  401af4:	00401aad 	.word	0x00401aad
  401af8:	20400000 	.word	0x20400000

00401afc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401afc:	b580      	push	{r7, lr}
  401afe:	b084      	sub	sp, #16
  401b00:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401b02:	4b1e      	ldr	r3, [pc, #120]	; (401b7c <Reset_Handler+0x80>)
  401b04:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401b06:	4b1e      	ldr	r3, [pc, #120]	; (401b80 <Reset_Handler+0x84>)
  401b08:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401b0a:	68fa      	ldr	r2, [r7, #12]
  401b0c:	68bb      	ldr	r3, [r7, #8]
  401b0e:	429a      	cmp	r2, r3
  401b10:	d00c      	beq.n	401b2c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401b12:	e007      	b.n	401b24 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401b14:	68bb      	ldr	r3, [r7, #8]
  401b16:	1d1a      	adds	r2, r3, #4
  401b18:	60ba      	str	r2, [r7, #8]
  401b1a:	68fa      	ldr	r2, [r7, #12]
  401b1c:	1d11      	adds	r1, r2, #4
  401b1e:	60f9      	str	r1, [r7, #12]
  401b20:	6812      	ldr	r2, [r2, #0]
  401b22:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401b24:	68bb      	ldr	r3, [r7, #8]
  401b26:	4a17      	ldr	r2, [pc, #92]	; (401b84 <Reset_Handler+0x88>)
  401b28:	4293      	cmp	r3, r2
  401b2a:	d3f3      	bcc.n	401b14 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401b2c:	4b16      	ldr	r3, [pc, #88]	; (401b88 <Reset_Handler+0x8c>)
  401b2e:	60bb      	str	r3, [r7, #8]
  401b30:	e004      	b.n	401b3c <Reset_Handler+0x40>
                *pDest++ = 0;
  401b32:	68bb      	ldr	r3, [r7, #8]
  401b34:	1d1a      	adds	r2, r3, #4
  401b36:	60ba      	str	r2, [r7, #8]
  401b38:	2200      	movs	r2, #0
  401b3a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401b3c:	68bb      	ldr	r3, [r7, #8]
  401b3e:	4a13      	ldr	r2, [pc, #76]	; (401b8c <Reset_Handler+0x90>)
  401b40:	4293      	cmp	r3, r2
  401b42:	d3f6      	bcc.n	401b32 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401b44:	4b12      	ldr	r3, [pc, #72]	; (401b90 <Reset_Handler+0x94>)
  401b46:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401b48:	4a12      	ldr	r2, [pc, #72]	; (401b94 <Reset_Handler+0x98>)
  401b4a:	68fb      	ldr	r3, [r7, #12]
  401b4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401b50:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401b52:	4b11      	ldr	r3, [pc, #68]	; (401b98 <Reset_Handler+0x9c>)
  401b54:	4798      	blx	r3
  401b56:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401b58:	4a10      	ldr	r2, [pc, #64]	; (401b9c <Reset_Handler+0xa0>)
  401b5a:	4b10      	ldr	r3, [pc, #64]	; (401b9c <Reset_Handler+0xa0>)
  401b5c:	681b      	ldr	r3, [r3, #0]
  401b5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401b62:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401b64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401b68:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401b6c:	6878      	ldr	r0, [r7, #4]
  401b6e:	4b0c      	ldr	r3, [pc, #48]	; (401ba0 <Reset_Handler+0xa4>)
  401b70:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401b72:	4b0c      	ldr	r3, [pc, #48]	; (401ba4 <Reset_Handler+0xa8>)
  401b74:	4798      	blx	r3

        /* Branch to main function */
        main();
  401b76:	4b0c      	ldr	r3, [pc, #48]	; (401ba8 <Reset_Handler+0xac>)
  401b78:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401b7a:	e7fe      	b.n	401b7a <Reset_Handler+0x7e>
  401b7c:	00402618 	.word	0x00402618
  401b80:	20400000 	.word	0x20400000
  401b84:	20400438 	.word	0x20400438
  401b88:	20400438 	.word	0x20400438
  401b8c:	204004e0 	.word	0x204004e0
  401b90:	00400000 	.word	0x00400000
  401b94:	e000ed00 	.word	0xe000ed00
  401b98:	00401a75 	.word	0x00401a75
  401b9c:	e000ed88 	.word	0xe000ed88
  401ba0:	00401acd 	.word	0x00401acd
  401ba4:	00402489 	.word	0x00402489
  401ba8:	004023e9 	.word	0x004023e9

00401bac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401bac:	b480      	push	{r7}
  401bae:	af00      	add	r7, sp, #0
        while (1) {
  401bb0:	e7fe      	b.n	401bb0 <Dummy_Handler+0x4>
	...

00401bb4 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401bb4:	b480      	push	{r7}
  401bb6:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401bb8:	4b52      	ldr	r3, [pc, #328]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bbc:	f003 0303 	and.w	r3, r3, #3
  401bc0:	2b01      	cmp	r3, #1
  401bc2:	d014      	beq.n	401bee <SystemCoreClockUpdate+0x3a>
  401bc4:	2b01      	cmp	r3, #1
  401bc6:	d302      	bcc.n	401bce <SystemCoreClockUpdate+0x1a>
  401bc8:	2b02      	cmp	r3, #2
  401bca:	d038      	beq.n	401c3e <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401bcc:	e07a      	b.n	401cc4 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401bce:	4b4e      	ldr	r3, [pc, #312]	; (401d08 <SystemCoreClockUpdate+0x154>)
  401bd0:	695b      	ldr	r3, [r3, #20]
  401bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401bd6:	2b00      	cmp	r3, #0
  401bd8:	d004      	beq.n	401be4 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401bda:	4b4c      	ldr	r3, [pc, #304]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401bdc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401be0:	601a      	str	r2, [r3, #0]
    break;
  401be2:	e06f      	b.n	401cc4 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401be4:	4b49      	ldr	r3, [pc, #292]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401be6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401bea:	601a      	str	r2, [r3, #0]
    break;
  401bec:	e06a      	b.n	401cc4 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401bee:	4b45      	ldr	r3, [pc, #276]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401bf0:	6a1b      	ldr	r3, [r3, #32]
  401bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401bf6:	2b00      	cmp	r3, #0
  401bf8:	d003      	beq.n	401c02 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401bfa:	4b44      	ldr	r3, [pc, #272]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401bfc:	4a44      	ldr	r2, [pc, #272]	; (401d10 <SystemCoreClockUpdate+0x15c>)
  401bfe:	601a      	str	r2, [r3, #0]
    break;
  401c00:	e060      	b.n	401cc4 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c02:	4b42      	ldr	r3, [pc, #264]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c04:	4a43      	ldr	r2, [pc, #268]	; (401d14 <SystemCoreClockUpdate+0x160>)
  401c06:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c08:	4b3e      	ldr	r3, [pc, #248]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401c0a:	6a1b      	ldr	r3, [r3, #32]
  401c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c10:	2b10      	cmp	r3, #16
  401c12:	d004      	beq.n	401c1e <SystemCoreClockUpdate+0x6a>
  401c14:	2b20      	cmp	r3, #32
  401c16:	d008      	beq.n	401c2a <SystemCoreClockUpdate+0x76>
  401c18:	2b00      	cmp	r3, #0
  401c1a:	d00e      	beq.n	401c3a <SystemCoreClockUpdate+0x86>
          break;
  401c1c:	e00e      	b.n	401c3c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401c1e:	4b3b      	ldr	r3, [pc, #236]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c20:	681b      	ldr	r3, [r3, #0]
  401c22:	005b      	lsls	r3, r3, #1
  401c24:	4a39      	ldr	r2, [pc, #228]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c26:	6013      	str	r3, [r2, #0]
          break;
  401c28:	e008      	b.n	401c3c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401c2a:	4b38      	ldr	r3, [pc, #224]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c2c:	681a      	ldr	r2, [r3, #0]
  401c2e:	4613      	mov	r3, r2
  401c30:	005b      	lsls	r3, r3, #1
  401c32:	4413      	add	r3, r2
  401c34:	4a35      	ldr	r2, [pc, #212]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c36:	6013      	str	r3, [r2, #0]
          break;
  401c38:	e000      	b.n	401c3c <SystemCoreClockUpdate+0x88>
          break;
  401c3a:	bf00      	nop
    break;
  401c3c:	e042      	b.n	401cc4 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c3e:	4b31      	ldr	r3, [pc, #196]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401c40:	6a1b      	ldr	r3, [r3, #32]
  401c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c46:	2b00      	cmp	r3, #0
  401c48:	d003      	beq.n	401c52 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401c4a:	4b30      	ldr	r3, [pc, #192]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c4c:	4a30      	ldr	r2, [pc, #192]	; (401d10 <SystemCoreClockUpdate+0x15c>)
  401c4e:	601a      	str	r2, [r3, #0]
  401c50:	e01c      	b.n	401c8c <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c52:	4b2e      	ldr	r3, [pc, #184]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c54:	4a2f      	ldr	r2, [pc, #188]	; (401d14 <SystemCoreClockUpdate+0x160>)
  401c56:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c58:	4b2a      	ldr	r3, [pc, #168]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401c5a:	6a1b      	ldr	r3, [r3, #32]
  401c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c60:	2b10      	cmp	r3, #16
  401c62:	d004      	beq.n	401c6e <SystemCoreClockUpdate+0xba>
  401c64:	2b20      	cmp	r3, #32
  401c66:	d008      	beq.n	401c7a <SystemCoreClockUpdate+0xc6>
  401c68:	2b00      	cmp	r3, #0
  401c6a:	d00e      	beq.n	401c8a <SystemCoreClockUpdate+0xd6>
          break;
  401c6c:	e00e      	b.n	401c8c <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401c6e:	4b27      	ldr	r3, [pc, #156]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c70:	681b      	ldr	r3, [r3, #0]
  401c72:	005b      	lsls	r3, r3, #1
  401c74:	4a25      	ldr	r2, [pc, #148]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c76:	6013      	str	r3, [r2, #0]
          break;
  401c78:	e008      	b.n	401c8c <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401c7a:	4b24      	ldr	r3, [pc, #144]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c7c:	681a      	ldr	r2, [r3, #0]
  401c7e:	4613      	mov	r3, r2
  401c80:	005b      	lsls	r3, r3, #1
  401c82:	4413      	add	r3, r2
  401c84:	4a21      	ldr	r2, [pc, #132]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401c86:	6013      	str	r3, [r2, #0]
          break;
  401c88:	e000      	b.n	401c8c <SystemCoreClockUpdate+0xd8>
          break;
  401c8a:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401c8c:	4b1d      	ldr	r3, [pc, #116]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c90:	f003 0303 	and.w	r3, r3, #3
  401c94:	2b02      	cmp	r3, #2
  401c96:	d114      	bne.n	401cc2 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401c98:	4b1a      	ldr	r3, [pc, #104]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401c9c:	0c1b      	lsrs	r3, r3, #16
  401c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401ca2:	3301      	adds	r3, #1
  401ca4:	4a19      	ldr	r2, [pc, #100]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401ca6:	6812      	ldr	r2, [r2, #0]
  401ca8:	fb02 f303 	mul.w	r3, r2, r3
  401cac:	4a17      	ldr	r2, [pc, #92]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401cae:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401cb0:	4b14      	ldr	r3, [pc, #80]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401cb4:	b2db      	uxtb	r3, r3
  401cb6:	4a15      	ldr	r2, [pc, #84]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401cb8:	6812      	ldr	r2, [r2, #0]
  401cba:	fbb2 f3f3 	udiv	r3, r2, r3
  401cbe:	4a13      	ldr	r2, [pc, #76]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401cc0:	6013      	str	r3, [r2, #0]
    break;
  401cc2:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401cc4:	4b0f      	ldr	r3, [pc, #60]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ccc:	2b70      	cmp	r3, #112	; 0x70
  401cce:	d108      	bne.n	401ce2 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401cd0:	4b0e      	ldr	r3, [pc, #56]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401cd2:	681b      	ldr	r3, [r3, #0]
  401cd4:	4a10      	ldr	r2, [pc, #64]	; (401d18 <SystemCoreClockUpdate+0x164>)
  401cd6:	fba2 2303 	umull	r2, r3, r2, r3
  401cda:	085b      	lsrs	r3, r3, #1
  401cdc:	4a0b      	ldr	r2, [pc, #44]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401cde:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401ce0:	e00a      	b.n	401cf8 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401ce2:	4b08      	ldr	r3, [pc, #32]	; (401d04 <SystemCoreClockUpdate+0x150>)
  401ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ce6:	091b      	lsrs	r3, r3, #4
  401ce8:	f003 0307 	and.w	r3, r3, #7
  401cec:	4a07      	ldr	r2, [pc, #28]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401cee:	6812      	ldr	r2, [r2, #0]
  401cf0:	fa22 f303 	lsr.w	r3, r2, r3
  401cf4:	4a05      	ldr	r2, [pc, #20]	; (401d0c <SystemCoreClockUpdate+0x158>)
  401cf6:	6013      	str	r3, [r2, #0]
}
  401cf8:	bf00      	nop
  401cfa:	46bd      	mov	sp, r7
  401cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d00:	4770      	bx	lr
  401d02:	bf00      	nop
  401d04:	400e0600 	.word	0x400e0600
  401d08:	400e1810 	.word	0x400e1810
  401d0c:	20400008 	.word	0x20400008
  401d10:	00b71b00 	.word	0x00b71b00
  401d14:	003d0900 	.word	0x003d0900
  401d18:	aaaaaaab 	.word	0xaaaaaaab

00401d1c <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401d1c:	b480      	push	{r7}
  401d1e:	b083      	sub	sp, #12
  401d20:	af00      	add	r7, sp, #0
  401d22:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401d24:	687b      	ldr	r3, [r7, #4]
  401d26:	4a19      	ldr	r2, [pc, #100]	; (401d8c <system_init_flash+0x70>)
  401d28:	4293      	cmp	r3, r2
  401d2a:	d804      	bhi.n	401d36 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d2c:	4b18      	ldr	r3, [pc, #96]	; (401d90 <system_init_flash+0x74>)
  401d2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d32:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401d34:	e023      	b.n	401d7e <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  401d36:	687b      	ldr	r3, [r7, #4]
  401d38:	4a16      	ldr	r2, [pc, #88]	; (401d94 <system_init_flash+0x78>)
  401d3a:	4293      	cmp	r3, r2
  401d3c:	d803      	bhi.n	401d46 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d3e:	4b14      	ldr	r3, [pc, #80]	; (401d90 <system_init_flash+0x74>)
  401d40:	4a15      	ldr	r2, [pc, #84]	; (401d98 <system_init_flash+0x7c>)
  401d42:	601a      	str	r2, [r3, #0]
}
  401d44:	e01b      	b.n	401d7e <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401d46:	687b      	ldr	r3, [r7, #4]
  401d48:	4a14      	ldr	r2, [pc, #80]	; (401d9c <system_init_flash+0x80>)
  401d4a:	4293      	cmp	r3, r2
  401d4c:	d803      	bhi.n	401d56 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d4e:	4b10      	ldr	r3, [pc, #64]	; (401d90 <system_init_flash+0x74>)
  401d50:	4a13      	ldr	r2, [pc, #76]	; (401da0 <system_init_flash+0x84>)
  401d52:	601a      	str	r2, [r3, #0]
}
  401d54:	e013      	b.n	401d7e <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401d56:	687b      	ldr	r3, [r7, #4]
  401d58:	4a12      	ldr	r2, [pc, #72]	; (401da4 <system_init_flash+0x88>)
  401d5a:	4293      	cmp	r3, r2
  401d5c:	d803      	bhi.n	401d66 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401d5e:	4b0c      	ldr	r3, [pc, #48]	; (401d90 <system_init_flash+0x74>)
  401d60:	4a11      	ldr	r2, [pc, #68]	; (401da8 <system_init_flash+0x8c>)
  401d62:	601a      	str	r2, [r3, #0]
}
  401d64:	e00b      	b.n	401d7e <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401d66:	687b      	ldr	r3, [r7, #4]
  401d68:	4a10      	ldr	r2, [pc, #64]	; (401dac <system_init_flash+0x90>)
  401d6a:	4293      	cmp	r3, r2
  401d6c:	d804      	bhi.n	401d78 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401d6e:	4b08      	ldr	r3, [pc, #32]	; (401d90 <system_init_flash+0x74>)
  401d70:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401d74:	601a      	str	r2, [r3, #0]
}
  401d76:	e002      	b.n	401d7e <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401d78:	4b05      	ldr	r3, [pc, #20]	; (401d90 <system_init_flash+0x74>)
  401d7a:	4a0d      	ldr	r2, [pc, #52]	; (401db0 <system_init_flash+0x94>)
  401d7c:	601a      	str	r2, [r3, #0]
}
  401d7e:	bf00      	nop
  401d80:	370c      	adds	r7, #12
  401d82:	46bd      	mov	sp, r7
  401d84:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d88:	4770      	bx	lr
  401d8a:	bf00      	nop
  401d8c:	01312cff 	.word	0x01312cff
  401d90:	400e0c00 	.word	0x400e0c00
  401d94:	026259ff 	.word	0x026259ff
  401d98:	04000100 	.word	0x04000100
  401d9c:	039386ff 	.word	0x039386ff
  401da0:	04000200 	.word	0x04000200
  401da4:	04c4b3ff 	.word	0x04c4b3ff
  401da8:	04000300 	.word	0x04000300
  401dac:	05f5e0ff 	.word	0x05f5e0ff
  401db0:	04000500 	.word	0x04000500

00401db4 <NVIC_EnableIRQ>:
{
  401db4:	b480      	push	{r7}
  401db6:	b083      	sub	sp, #12
  401db8:	af00      	add	r7, sp, #0
  401dba:	4603      	mov	r3, r0
  401dbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401dbe:	4909      	ldr	r1, [pc, #36]	; (401de4 <NVIC_EnableIRQ+0x30>)
  401dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401dc4:	095b      	lsrs	r3, r3, #5
  401dc6:	79fa      	ldrb	r2, [r7, #7]
  401dc8:	f002 021f 	and.w	r2, r2, #31
  401dcc:	2001      	movs	r0, #1
  401dce:	fa00 f202 	lsl.w	r2, r0, r2
  401dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401dd6:	bf00      	nop
  401dd8:	370c      	adds	r7, #12
  401dda:	46bd      	mov	sp, r7
  401ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401de0:	4770      	bx	lr
  401de2:	bf00      	nop
  401de4:	e000e100 	.word	0xe000e100

00401de8 <osc_get_rate>:
{
  401de8:	b480      	push	{r7}
  401dea:	b083      	sub	sp, #12
  401dec:	af00      	add	r7, sp, #0
  401dee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401df0:	687b      	ldr	r3, [r7, #4]
  401df2:	2b07      	cmp	r3, #7
  401df4:	d825      	bhi.n	401e42 <osc_get_rate+0x5a>
  401df6:	a201      	add	r2, pc, #4	; (adr r2, 401dfc <osc_get_rate+0x14>)
  401df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401dfc:	00401e1d 	.word	0x00401e1d
  401e00:	00401e23 	.word	0x00401e23
  401e04:	00401e29 	.word	0x00401e29
  401e08:	00401e2f 	.word	0x00401e2f
  401e0c:	00401e33 	.word	0x00401e33
  401e10:	00401e37 	.word	0x00401e37
  401e14:	00401e3b 	.word	0x00401e3b
  401e18:	00401e3f 	.word	0x00401e3f
		return OSC_SLCK_32K_RC_HZ;
  401e1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401e20:	e010      	b.n	401e44 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401e26:	e00d      	b.n	401e44 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401e2c:	e00a      	b.n	401e44 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401e2e:	4b08      	ldr	r3, [pc, #32]	; (401e50 <osc_get_rate+0x68>)
  401e30:	e008      	b.n	401e44 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401e32:	4b08      	ldr	r3, [pc, #32]	; (401e54 <osc_get_rate+0x6c>)
  401e34:	e006      	b.n	401e44 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401e36:	4b08      	ldr	r3, [pc, #32]	; (401e58 <osc_get_rate+0x70>)
  401e38:	e004      	b.n	401e44 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401e3a:	4b07      	ldr	r3, [pc, #28]	; (401e58 <osc_get_rate+0x70>)
  401e3c:	e002      	b.n	401e44 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401e3e:	4b06      	ldr	r3, [pc, #24]	; (401e58 <osc_get_rate+0x70>)
  401e40:	e000      	b.n	401e44 <osc_get_rate+0x5c>
	return 0;
  401e42:	2300      	movs	r3, #0
}
  401e44:	4618      	mov	r0, r3
  401e46:	370c      	adds	r7, #12
  401e48:	46bd      	mov	sp, r7
  401e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e4e:	4770      	bx	lr
  401e50:	003d0900 	.word	0x003d0900
  401e54:	007a1200 	.word	0x007a1200
  401e58:	00b71b00 	.word	0x00b71b00

00401e5c <sysclk_get_main_hz>:
{
  401e5c:	b580      	push	{r7, lr}
  401e5e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401e60:	2006      	movs	r0, #6
  401e62:	4b05      	ldr	r3, [pc, #20]	; (401e78 <sysclk_get_main_hz+0x1c>)
  401e64:	4798      	blx	r3
  401e66:	4602      	mov	r2, r0
  401e68:	4613      	mov	r3, r2
  401e6a:	009b      	lsls	r3, r3, #2
  401e6c:	4413      	add	r3, r2
  401e6e:	009a      	lsls	r2, r3, #2
  401e70:	4413      	add	r3, r2
}
  401e72:	4618      	mov	r0, r3
  401e74:	bd80      	pop	{r7, pc}
  401e76:	bf00      	nop
  401e78:	00401de9 	.word	0x00401de9

00401e7c <sysclk_get_cpu_hz>:
{
  401e7c:	b580      	push	{r7, lr}
  401e7e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401e80:	4b02      	ldr	r3, [pc, #8]	; (401e8c <sysclk_get_cpu_hz+0x10>)
  401e82:	4798      	blx	r3
  401e84:	4603      	mov	r3, r0
  401e86:	099b      	lsrs	r3, r3, #6
}
  401e88:	4618      	mov	r0, r3
  401e8a:	bd80      	pop	{r7, pc}
  401e8c:	00401e5d 	.word	0x00401e5d

00401e90 <sysclk_get_peripheral_hz>:
{
  401e90:	b580      	push	{r7, lr}
  401e92:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401e94:	4b02      	ldr	r3, [pc, #8]	; (401ea0 <sysclk_get_peripheral_hz+0x10>)
  401e96:	4798      	blx	r3
  401e98:	4603      	mov	r3, r0
  401e9a:	09db      	lsrs	r3, r3, #7
}
  401e9c:	4618      	mov	r0, r3
  401e9e:	bd80      	pop	{r7, pc}
  401ea0:	00401e5d 	.word	0x00401e5d

00401ea4 <sysclk_enable_peripheral_clock>:
{
  401ea4:	b580      	push	{r7, lr}
  401ea6:	b082      	sub	sp, #8
  401ea8:	af00      	add	r7, sp, #0
  401eaa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401eac:	6878      	ldr	r0, [r7, #4]
  401eae:	4b03      	ldr	r3, [pc, #12]	; (401ebc <sysclk_enable_peripheral_clock+0x18>)
  401eb0:	4798      	blx	r3
}
  401eb2:	bf00      	nop
  401eb4:	3708      	adds	r7, #8
  401eb6:	46bd      	mov	sp, r7
  401eb8:	bd80      	pop	{r7, pc}
  401eba:	bf00      	nop
  401ebc:	004010b1 	.word	0x004010b1

00401ec0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401ec0:	b580      	push	{r7, lr}
  401ec2:	b082      	sub	sp, #8
  401ec4:	af00      	add	r7, sp, #0
  401ec6:	6078      	str	r0, [r7, #4]
  401ec8:	460b      	mov	r3, r1
  401eca:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401ecc:	687b      	ldr	r3, [r7, #4]
  401ece:	4a36      	ldr	r2, [pc, #216]	; (401fa8 <usart_serial_putchar+0xe8>)
  401ed0:	4293      	cmp	r3, r2
  401ed2:	d10a      	bne.n	401eea <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401ed4:	bf00      	nop
  401ed6:	78fb      	ldrb	r3, [r7, #3]
  401ed8:	4619      	mov	r1, r3
  401eda:	6878      	ldr	r0, [r7, #4]
  401edc:	4b33      	ldr	r3, [pc, #204]	; (401fac <usart_serial_putchar+0xec>)
  401ede:	4798      	blx	r3
  401ee0:	4603      	mov	r3, r0
  401ee2:	2b00      	cmp	r3, #0
  401ee4:	d1f7      	bne.n	401ed6 <usart_serial_putchar+0x16>
		return 1;
  401ee6:	2301      	movs	r3, #1
  401ee8:	e05a      	b.n	401fa0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401eea:	687b      	ldr	r3, [r7, #4]
  401eec:	4a30      	ldr	r2, [pc, #192]	; (401fb0 <usart_serial_putchar+0xf0>)
  401eee:	4293      	cmp	r3, r2
  401ef0:	d10a      	bne.n	401f08 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401ef2:	bf00      	nop
  401ef4:	78fb      	ldrb	r3, [r7, #3]
  401ef6:	4619      	mov	r1, r3
  401ef8:	6878      	ldr	r0, [r7, #4]
  401efa:	4b2c      	ldr	r3, [pc, #176]	; (401fac <usart_serial_putchar+0xec>)
  401efc:	4798      	blx	r3
  401efe:	4603      	mov	r3, r0
  401f00:	2b00      	cmp	r3, #0
  401f02:	d1f7      	bne.n	401ef4 <usart_serial_putchar+0x34>
		return 1;
  401f04:	2301      	movs	r3, #1
  401f06:	e04b      	b.n	401fa0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401f08:	687b      	ldr	r3, [r7, #4]
  401f0a:	4a2a      	ldr	r2, [pc, #168]	; (401fb4 <usart_serial_putchar+0xf4>)
  401f0c:	4293      	cmp	r3, r2
  401f0e:	d10a      	bne.n	401f26 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401f10:	bf00      	nop
  401f12:	78fb      	ldrb	r3, [r7, #3]
  401f14:	4619      	mov	r1, r3
  401f16:	6878      	ldr	r0, [r7, #4]
  401f18:	4b24      	ldr	r3, [pc, #144]	; (401fac <usart_serial_putchar+0xec>)
  401f1a:	4798      	blx	r3
  401f1c:	4603      	mov	r3, r0
  401f1e:	2b00      	cmp	r3, #0
  401f20:	d1f7      	bne.n	401f12 <usart_serial_putchar+0x52>
		return 1;
  401f22:	2301      	movs	r3, #1
  401f24:	e03c      	b.n	401fa0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	4a23      	ldr	r2, [pc, #140]	; (401fb8 <usart_serial_putchar+0xf8>)
  401f2a:	4293      	cmp	r3, r2
  401f2c:	d10a      	bne.n	401f44 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401f2e:	bf00      	nop
  401f30:	78fb      	ldrb	r3, [r7, #3]
  401f32:	4619      	mov	r1, r3
  401f34:	6878      	ldr	r0, [r7, #4]
  401f36:	4b1d      	ldr	r3, [pc, #116]	; (401fac <usart_serial_putchar+0xec>)
  401f38:	4798      	blx	r3
  401f3a:	4603      	mov	r3, r0
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d1f7      	bne.n	401f30 <usart_serial_putchar+0x70>
		return 1;
  401f40:	2301      	movs	r3, #1
  401f42:	e02d      	b.n	401fa0 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401f44:	687b      	ldr	r3, [r7, #4]
  401f46:	4a1d      	ldr	r2, [pc, #116]	; (401fbc <usart_serial_putchar+0xfc>)
  401f48:	4293      	cmp	r3, r2
  401f4a:	d10a      	bne.n	401f62 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401f4c:	bf00      	nop
  401f4e:	78fb      	ldrb	r3, [r7, #3]
  401f50:	4619      	mov	r1, r3
  401f52:	6878      	ldr	r0, [r7, #4]
  401f54:	4b1a      	ldr	r3, [pc, #104]	; (401fc0 <usart_serial_putchar+0x100>)
  401f56:	4798      	blx	r3
  401f58:	4603      	mov	r3, r0
  401f5a:	2b00      	cmp	r3, #0
  401f5c:	d1f7      	bne.n	401f4e <usart_serial_putchar+0x8e>
		return 1;
  401f5e:	2301      	movs	r3, #1
  401f60:	e01e      	b.n	401fa0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401f62:	687b      	ldr	r3, [r7, #4]
  401f64:	4a17      	ldr	r2, [pc, #92]	; (401fc4 <usart_serial_putchar+0x104>)
  401f66:	4293      	cmp	r3, r2
  401f68:	d10a      	bne.n	401f80 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401f6a:	bf00      	nop
  401f6c:	78fb      	ldrb	r3, [r7, #3]
  401f6e:	4619      	mov	r1, r3
  401f70:	6878      	ldr	r0, [r7, #4]
  401f72:	4b13      	ldr	r3, [pc, #76]	; (401fc0 <usart_serial_putchar+0x100>)
  401f74:	4798      	blx	r3
  401f76:	4603      	mov	r3, r0
  401f78:	2b00      	cmp	r3, #0
  401f7a:	d1f7      	bne.n	401f6c <usart_serial_putchar+0xac>
		return 1;
  401f7c:	2301      	movs	r3, #1
  401f7e:	e00f      	b.n	401fa0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401f80:	687b      	ldr	r3, [r7, #4]
  401f82:	4a11      	ldr	r2, [pc, #68]	; (401fc8 <usart_serial_putchar+0x108>)
  401f84:	4293      	cmp	r3, r2
  401f86:	d10a      	bne.n	401f9e <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401f88:	bf00      	nop
  401f8a:	78fb      	ldrb	r3, [r7, #3]
  401f8c:	4619      	mov	r1, r3
  401f8e:	6878      	ldr	r0, [r7, #4]
  401f90:	4b0b      	ldr	r3, [pc, #44]	; (401fc0 <usart_serial_putchar+0x100>)
  401f92:	4798      	blx	r3
  401f94:	4603      	mov	r3, r0
  401f96:	2b00      	cmp	r3, #0
  401f98:	d1f7      	bne.n	401f8a <usart_serial_putchar+0xca>
		return 1;
  401f9a:	2301      	movs	r3, #1
  401f9c:	e000      	b.n	401fa0 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401f9e:	2300      	movs	r3, #0
}
  401fa0:	4618      	mov	r0, r3
  401fa2:	3708      	adds	r7, #8
  401fa4:	46bd      	mov	sp, r7
  401fa6:	bd80      	pop	{r7, pc}
  401fa8:	400e0800 	.word	0x400e0800
  401fac:	00401739 	.word	0x00401739
  401fb0:	400e0a00 	.word	0x400e0a00
  401fb4:	400e1a00 	.word	0x400e1a00
  401fb8:	400e1c00 	.word	0x400e1c00
  401fbc:	40024000 	.word	0x40024000
  401fc0:	004019d1 	.word	0x004019d1
  401fc4:	40028000 	.word	0x40028000
  401fc8:	4002c000 	.word	0x4002c000

00401fcc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401fcc:	b580      	push	{r7, lr}
  401fce:	b084      	sub	sp, #16
  401fd0:	af00      	add	r7, sp, #0
  401fd2:	6078      	str	r0, [r7, #4]
  401fd4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401fd6:	2300      	movs	r3, #0
  401fd8:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401fda:	687b      	ldr	r3, [r7, #4]
  401fdc:	4a34      	ldr	r2, [pc, #208]	; (4020b0 <usart_serial_getchar+0xe4>)
  401fde:	4293      	cmp	r3, r2
  401fe0:	d107      	bne.n	401ff2 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401fe2:	bf00      	nop
  401fe4:	6839      	ldr	r1, [r7, #0]
  401fe6:	6878      	ldr	r0, [r7, #4]
  401fe8:	4b32      	ldr	r3, [pc, #200]	; (4020b4 <usart_serial_getchar+0xe8>)
  401fea:	4798      	blx	r3
  401fec:	4603      	mov	r3, r0
  401fee:	2b00      	cmp	r3, #0
  401ff0:	d1f8      	bne.n	401fe4 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401ff2:	687b      	ldr	r3, [r7, #4]
  401ff4:	4a30      	ldr	r2, [pc, #192]	; (4020b8 <usart_serial_getchar+0xec>)
  401ff6:	4293      	cmp	r3, r2
  401ff8:	d107      	bne.n	40200a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401ffa:	bf00      	nop
  401ffc:	6839      	ldr	r1, [r7, #0]
  401ffe:	6878      	ldr	r0, [r7, #4]
  402000:	4b2c      	ldr	r3, [pc, #176]	; (4020b4 <usart_serial_getchar+0xe8>)
  402002:	4798      	blx	r3
  402004:	4603      	mov	r3, r0
  402006:	2b00      	cmp	r3, #0
  402008:	d1f8      	bne.n	401ffc <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40200a:	687b      	ldr	r3, [r7, #4]
  40200c:	4a2b      	ldr	r2, [pc, #172]	; (4020bc <usart_serial_getchar+0xf0>)
  40200e:	4293      	cmp	r3, r2
  402010:	d107      	bne.n	402022 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  402012:	bf00      	nop
  402014:	6839      	ldr	r1, [r7, #0]
  402016:	6878      	ldr	r0, [r7, #4]
  402018:	4b26      	ldr	r3, [pc, #152]	; (4020b4 <usart_serial_getchar+0xe8>)
  40201a:	4798      	blx	r3
  40201c:	4603      	mov	r3, r0
  40201e:	2b00      	cmp	r3, #0
  402020:	d1f8      	bne.n	402014 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402022:	687b      	ldr	r3, [r7, #4]
  402024:	4a26      	ldr	r2, [pc, #152]	; (4020c0 <usart_serial_getchar+0xf4>)
  402026:	4293      	cmp	r3, r2
  402028:	d107      	bne.n	40203a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40202a:	bf00      	nop
  40202c:	6839      	ldr	r1, [r7, #0]
  40202e:	6878      	ldr	r0, [r7, #4]
  402030:	4b20      	ldr	r3, [pc, #128]	; (4020b4 <usart_serial_getchar+0xe8>)
  402032:	4798      	blx	r3
  402034:	4603      	mov	r3, r0
  402036:	2b00      	cmp	r3, #0
  402038:	d1f8      	bne.n	40202c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40203a:	687b      	ldr	r3, [r7, #4]
  40203c:	4a21      	ldr	r2, [pc, #132]	; (4020c4 <usart_serial_getchar+0xf8>)
  40203e:	4293      	cmp	r3, r2
  402040:	d10d      	bne.n	40205e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  402042:	bf00      	nop
  402044:	f107 030c 	add.w	r3, r7, #12
  402048:	4619      	mov	r1, r3
  40204a:	6878      	ldr	r0, [r7, #4]
  40204c:	4b1e      	ldr	r3, [pc, #120]	; (4020c8 <usart_serial_getchar+0xfc>)
  40204e:	4798      	blx	r3
  402050:	4603      	mov	r3, r0
  402052:	2b00      	cmp	r3, #0
  402054:	d1f6      	bne.n	402044 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402056:	68fb      	ldr	r3, [r7, #12]
  402058:	b2da      	uxtb	r2, r3
  40205a:	683b      	ldr	r3, [r7, #0]
  40205c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40205e:	687b      	ldr	r3, [r7, #4]
  402060:	4a1a      	ldr	r2, [pc, #104]	; (4020cc <usart_serial_getchar+0x100>)
  402062:	4293      	cmp	r3, r2
  402064:	d10d      	bne.n	402082 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  402066:	bf00      	nop
  402068:	f107 030c 	add.w	r3, r7, #12
  40206c:	4619      	mov	r1, r3
  40206e:	6878      	ldr	r0, [r7, #4]
  402070:	4b15      	ldr	r3, [pc, #84]	; (4020c8 <usart_serial_getchar+0xfc>)
  402072:	4798      	blx	r3
  402074:	4603      	mov	r3, r0
  402076:	2b00      	cmp	r3, #0
  402078:	d1f6      	bne.n	402068 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  40207a:	68fb      	ldr	r3, [r7, #12]
  40207c:	b2da      	uxtb	r2, r3
  40207e:	683b      	ldr	r3, [r7, #0]
  402080:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402082:	687b      	ldr	r3, [r7, #4]
  402084:	4a12      	ldr	r2, [pc, #72]	; (4020d0 <usart_serial_getchar+0x104>)
  402086:	4293      	cmp	r3, r2
  402088:	d10d      	bne.n	4020a6 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  40208a:	bf00      	nop
  40208c:	f107 030c 	add.w	r3, r7, #12
  402090:	4619      	mov	r1, r3
  402092:	6878      	ldr	r0, [r7, #4]
  402094:	4b0c      	ldr	r3, [pc, #48]	; (4020c8 <usart_serial_getchar+0xfc>)
  402096:	4798      	blx	r3
  402098:	4603      	mov	r3, r0
  40209a:	2b00      	cmp	r3, #0
  40209c:	d1f6      	bne.n	40208c <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  40209e:	68fb      	ldr	r3, [r7, #12]
  4020a0:	b2da      	uxtb	r2, r3
  4020a2:	683b      	ldr	r3, [r7, #0]
  4020a4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4020a6:	bf00      	nop
  4020a8:	3710      	adds	r7, #16
  4020aa:	46bd      	mov	sp, r7
  4020ac:	bd80      	pop	{r7, pc}
  4020ae:	bf00      	nop
  4020b0:	400e0800 	.word	0x400e0800
  4020b4:	00401769 	.word	0x00401769
  4020b8:	400e0a00 	.word	0x400e0a00
  4020bc:	400e1a00 	.word	0x400e1a00
  4020c0:	400e1c00 	.word	0x400e1c00
  4020c4:	40024000 	.word	0x40024000
  4020c8:	00401a03 	.word	0x00401a03
  4020cc:	40028000 	.word	0x40028000
  4020d0:	4002c000 	.word	0x4002c000

004020d4 <TC1_Handler>:
static void TC1_init(uint32_t ul_freq);
static void WATCHDOG_init(uint8_t b_enable);
static void pin_toggle(const Pio *p_pio, const uint32_t ul_mask);

// HANDLERS
void TC1_Handler(void) {
  4020d4:	b580      	push	{r7, lr}
  4020d6:	b082      	sub	sp, #8
  4020d8:	af00      	add	r7, sp, #0

  volatile uint32_t ul_dummy;
	ul_dummy = tc_get_status(TC0, 1);
  4020da:	2101      	movs	r1, #1
  4020dc:	4809      	ldr	r0, [pc, #36]	; (402104 <TC1_Handler+0x30>)
  4020de:	4b0a      	ldr	r3, [pc, #40]	; (402108 <TC1_Handler+0x34>)
  4020e0:	4798      	blx	r3
  4020e2:	4603      	mov	r3, r0
  4020e4:	607b      	str	r3, [r7, #4]
	UNUSED(ul_dummy);
  4020e6:	687b      	ldr	r3, [r7, #4]

  if(g_led_blink)
  4020e8:	4b08      	ldr	r3, [pc, #32]	; (40210c <TC1_Handler+0x38>)
  4020ea:	681b      	ldr	r3, [r3, #0]
  4020ec:	2b00      	cmp	r3, #0
  4020ee:	d004      	beq.n	4020fa <TC1_Handler+0x26>
    pin_toggle(LED_PIO, LED_PIN_MASK);
  4020f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4020f4:	4806      	ldr	r0, [pc, #24]	; (402110 <TC1_Handler+0x3c>)
  4020f6:	4b07      	ldr	r3, [pc, #28]	; (402114 <TC1_Handler+0x40>)
  4020f8:	4798      	blx	r3

}
  4020fa:	bf00      	nop
  4020fc:	3708      	adds	r7, #8
  4020fe:	46bd      	mov	sp, r7
  402100:	bd80      	pop	{r7, pc}
  402102:	bf00      	nop
  402104:	4000c000 	.word	0x4000c000
  402108:	00401649 	.word	0x00401649
  40210c:	2040000c 	.word	0x2040000c
  402110:	400e1200 	.word	0x400e1200
  402114:	00402291 	.word	0x00402291

00402118 <USART1_Handler>:

void USART1_Handler(void) {
  402118:	b580      	push	{r7, lr}
  40211a:	b082      	sub	sp, #8
  40211c:	af00      	add	r7, sp, #0
  uint32_t ret = usart_get_status(USART_COM);
  40211e:	4815      	ldr	r0, [pc, #84]	; (402174 <USART1_Handler+0x5c>)
  402120:	4b15      	ldr	r3, [pc, #84]	; (402178 <USART1_Handler+0x60>)
  402122:	4798      	blx	r3
  402124:	6078      	str	r0, [r7, #4]
  uint8_t c = NULL;
  402126:	2300      	movs	r3, #0
  402128:	70fb      	strb	r3, [r7, #3]

  if(ret & US_IER_RXRDY) {
  40212a:	687b      	ldr	r3, [r7, #4]
  40212c:	f003 0301 	and.w	r3, r3, #1
  402130:	2b00      	cmp	r3, #0
  402132:	d01b      	beq.n	40216c <USART1_Handler+0x54>
    usart_serial_getchar(USART_COM, &c);
  402134:	1cfb      	adds	r3, r7, #3
  402136:	4619      	mov	r1, r3
  402138:	480e      	ldr	r0, [pc, #56]	; (402174 <USART1_Handler+0x5c>)
  40213a:	4b10      	ldr	r3, [pc, #64]	; (40217c <USART1_Handler+0x64>)
  40213c:	4798      	blx	r3
    if(c != '\n') {
  40213e:	78fb      	ldrb	r3, [r7, #3]
  402140:	2b0a      	cmp	r3, #10
  402142:	d008      	beq.n	402156 <USART1_Handler+0x3e>
      g_bufferRX[g_count++] = c;
  402144:	4b0e      	ldr	r3, [pc, #56]	; (402180 <USART1_Handler+0x68>)
  402146:	681b      	ldr	r3, [r3, #0]
  402148:	1c5a      	adds	r2, r3, #1
  40214a:	490d      	ldr	r1, [pc, #52]	; (402180 <USART1_Handler+0x68>)
  40214c:	600a      	str	r2, [r1, #0]
  40214e:	78f9      	ldrb	r1, [r7, #3]
  402150:	4a0c      	ldr	r2, [pc, #48]	; (402184 <USART1_Handler+0x6c>)
  402152:	54d1      	strb	r1, [r2, r3]
      g_bufferRX[g_count] = 0x00;
      g_usart_transmission_done = 1;
      g_count = 0;
    }
  }
}
  402154:	e00a      	b.n	40216c <USART1_Handler+0x54>
      g_bufferRX[g_count] = 0x00;
  402156:	4b0a      	ldr	r3, [pc, #40]	; (402180 <USART1_Handler+0x68>)
  402158:	681b      	ldr	r3, [r3, #0]
  40215a:	4a0a      	ldr	r2, [pc, #40]	; (402184 <USART1_Handler+0x6c>)
  40215c:	2100      	movs	r1, #0
  40215e:	54d1      	strb	r1, [r2, r3]
      g_usart_transmission_done = 1;
  402160:	4b09      	ldr	r3, [pc, #36]	; (402188 <USART1_Handler+0x70>)
  402162:	2201      	movs	r2, #1
  402164:	601a      	str	r2, [r3, #0]
      g_count = 0;
  402166:	4b06      	ldr	r3, [pc, #24]	; (402180 <USART1_Handler+0x68>)
  402168:	2200      	movs	r2, #0
  40216a:	601a      	str	r2, [r3, #0]
}
  40216c:	bf00      	nop
  40216e:	3708      	adds	r7, #8
  402170:	46bd      	mov	sp, r7
  402172:	bd80      	pop	{r7, pc}
  402174:	40028000 	.word	0x40028000
  402178:	00401981 	.word	0x00401981
  40217c:	00401fcd 	.word	0x00401fcd
  402180:	204004d4 	.word	0x204004d4
  402184:	204004d8 	.word	0x204004d8
  402188:	204004d0 	.word	0x204004d0

0040218c <LED_init>:

// INITIALIZATION
static void LED_init(const uint32_t ul_default_level) {
  40218c:	b590      	push	{r4, r7, lr}
  40218e:	b085      	sub	sp, #20
  402190:	af02      	add	r7, sp, #8
  402192:	6078      	str	r0, [r7, #4]

  pmc_enable_periph_clk(LED_PIO_ID);
  402194:	200c      	movs	r0, #12
  402196:	4b0a      	ldr	r3, [pc, #40]	; (4021c0 <LED_init+0x34>)
  402198:	4798      	blx	r3
  pio_set_output(LED_PIO, LED_PIN_MASK, !ul_default_level, 0, 0);
  40219a:	687b      	ldr	r3, [r7, #4]
  40219c:	2b00      	cmp	r3, #0
  40219e:	bf0c      	ite	eq
  4021a0:	2301      	moveq	r3, #1
  4021a2:	2300      	movne	r3, #0
  4021a4:	b2db      	uxtb	r3, r3
  4021a6:	461a      	mov	r2, r3
  4021a8:	2300      	movs	r3, #0
  4021aa:	9300      	str	r3, [sp, #0]
  4021ac:	2300      	movs	r3, #0
  4021ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4021b2:	4804      	ldr	r0, [pc, #16]	; (4021c4 <LED_init+0x38>)
  4021b4:	4c04      	ldr	r4, [pc, #16]	; (4021c8 <LED_init+0x3c>)
  4021b6:	47a0      	blx	r4

};
  4021b8:	bf00      	nop
  4021ba:	370c      	adds	r7, #12
  4021bc:	46bd      	mov	sp, r7
  4021be:	bd90      	pop	{r4, r7, pc}
  4021c0:	004010b1 	.word	0x004010b1
  4021c4:	400e1200 	.word	0x400e1200
  4021c8:	00400be9 	.word	0x00400be9

004021cc <TC1_init>:

static void TC1_init(uint32_t ul_freq) {
  4021cc:	b590      	push	{r4, r7, lr}
  4021ce:	b089      	sub	sp, #36	; 0x24
  4021d0:	af02      	add	r7, sp, #8
  4021d2:	6078      	str	r0, [r7, #4]

  uint32_t ul_div;
  uint32_t ul_tcclks;
  uint32_t ul_sysclk = sysclk_get_cpu_hz();
  4021d4:	4b1a      	ldr	r3, [pc, #104]	; (402240 <TC1_init+0x74>)
  4021d6:	4798      	blx	r3
  4021d8:	6178      	str	r0, [r7, #20]

  pmc_enable_periph_clk(ID_TC1);
  4021da:	2018      	movs	r0, #24
  4021dc:	4b19      	ldr	r3, [pc, #100]	; (402244 <TC1_init+0x78>)
  4021de:	4798      	blx	r3

  tc_find_mck_divisor(ul_freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4021e0:	f107 010c 	add.w	r1, r7, #12
  4021e4:	f107 0210 	add.w	r2, r7, #16
  4021e8:	697b      	ldr	r3, [r7, #20]
  4021ea:	9300      	str	r3, [sp, #0]
  4021ec:	460b      	mov	r3, r1
  4021ee:	6979      	ldr	r1, [r7, #20]
  4021f0:	6878      	ldr	r0, [r7, #4]
  4021f2:	4c15      	ldr	r4, [pc, #84]	; (402248 <TC1_init+0x7c>)
  4021f4:	47a0      	blx	r4
  tc_init(TC0, TC0_CHANNEL, ul_tcclks | TC0_MODE);
  4021f6:	68fb      	ldr	r3, [r7, #12]
  4021f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4021fc:	461a      	mov	r2, r3
  4021fe:	2101      	movs	r1, #1
  402200:	4812      	ldr	r0, [pc, #72]	; (40224c <TC1_init+0x80>)
  402202:	4b13      	ldr	r3, [pc, #76]	; (402250 <TC1_init+0x84>)
  402204:	4798      	blx	r3

  // Enable TC interrupts
  tc_write_ra(TC0, TC0_CHANNEL, 1525); // 1525 = (ul_sysclk / ul_div) / 2
  402206:	f240 52f5 	movw	r2, #1525	; 0x5f5
  40220a:	2101      	movs	r1, #1
  40220c:	480f      	ldr	r0, [pc, #60]	; (40224c <TC1_init+0x80>)
  40220e:	4b11      	ldr	r3, [pc, #68]	; (402254 <TC1_init+0x88>)
  402210:	4798      	blx	r3
  tc_write_rc(TC0, TC0_CHANNEL, 1541); // 1541 = (ul_sysclk / ul_div) / 2
  402212:	f240 6205 	movw	r2, #1541	; 0x605
  402216:	2101      	movs	r1, #1
  402218:	480c      	ldr	r0, [pc, #48]	; (40224c <TC1_init+0x80>)
  40221a:	4b0f      	ldr	r3, [pc, #60]	; (402258 <TC1_init+0x8c>)
  40221c:	4798      	blx	r3

  NVIC_EnableIRQ((IRQn_Type) ID_TC1);
  40221e:	2018      	movs	r0, #24
  402220:	4b0e      	ldr	r3, [pc, #56]	; (40225c <TC1_init+0x90>)
  402222:	4798      	blx	r3
  tc_enable_interrupt(TC0, TC0_CHANNEL, TC0_INTERRUPT_SOURCE);
  402224:	2214      	movs	r2, #20
  402226:	2101      	movs	r1, #1
  402228:	4808      	ldr	r0, [pc, #32]	; (40224c <TC1_init+0x80>)
  40222a:	4b0d      	ldr	r3, [pc, #52]	; (402260 <TC1_init+0x94>)
  40222c:	4798      	blx	r3

  tc_start(TC0, TC0_CHANNEL);
  40222e:	2101      	movs	r1, #1
  402230:	4806      	ldr	r0, [pc, #24]	; (40224c <TC1_init+0x80>)
  402232:	4b0c      	ldr	r3, [pc, #48]	; (402264 <TC1_init+0x98>)
  402234:	4798      	blx	r3

}
  402236:	bf00      	nop
  402238:	371c      	adds	r7, #28
  40223a:	46bd      	mov	sp, r7
  40223c:	bd90      	pop	{r4, r7, pc}
  40223e:	bf00      	nop
  402240:	00401e7d 	.word	0x00401e7d
  402244:	004010b1 	.word	0x004010b1
  402248:	0040166d 	.word	0x0040166d
  40224c:	4000c000 	.word	0x4000c000
  402250:	00401579 	.word	0x00401579
  402254:	004015d5 	.word	0x004015d5
  402258:	004015fb 	.word	0x004015fb
  40225c:	00401db5 	.word	0x00401db5
  402260:	00401621 	.word	0x00401621
  402264:	004015b3 	.word	0x004015b3

00402268 <WATCHDOG_init>:

static void WATCHDOG_init(uint8_t b_enable) {
  402268:	b580      	push	{r7, lr}
  40226a:	b082      	sub	sp, #8
  40226c:	af00      	add	r7, sp, #0
  40226e:	4603      	mov	r3, r0
  402270:	71fb      	strb	r3, [r7, #7]

  if(!b_enable)
  402272:	79fb      	ldrb	r3, [r7, #7]
  402274:	2b00      	cmp	r3, #0
  402276:	d102      	bne.n	40227e <WATCHDOG_init+0x16>
    wdt_disable(WDT);
  402278:	4803      	ldr	r0, [pc, #12]	; (402288 <WATCHDOG_init+0x20>)
  40227a:	4b04      	ldr	r3, [pc, #16]	; (40228c <WATCHDOG_init+0x24>)
  40227c:	4798      	blx	r3

}
  40227e:	bf00      	nop
  402280:	3708      	adds	r7, #8
  402282:	46bd      	mov	sp, r7
  402284:	bd80      	pop	{r7, pc}
  402286:	bf00      	nop
  402288:	400e1850 	.word	0x400e1850
  40228c:	00401a59 	.word	0x00401a59

00402290 <pin_toggle>:

// FUNCTIONS
void pin_toggle(const Pio *p_pio, const uint32_t ul_mask) {
  402290:	b580      	push	{r7, lr}
  402292:	b082      	sub	sp, #8
  402294:	af00      	add	r7, sp, #0
  402296:	6078      	str	r0, [r7, #4]
  402298:	6039      	str	r1, [r7, #0]

  if(pio_get_output_data_status(p_pio, ul_mask))
  40229a:	6839      	ldr	r1, [r7, #0]
  40229c:	6878      	ldr	r0, [r7, #4]
  40229e:	4b09      	ldr	r3, [pc, #36]	; (4022c4 <pin_toggle+0x34>)
  4022a0:	4798      	blx	r3
  4022a2:	4603      	mov	r3, r0
  4022a4:	2b00      	cmp	r3, #0
  4022a6:	d004      	beq.n	4022b2 <pin_toggle+0x22>
    pio_clear(p_pio, ul_mask);
  4022a8:	6839      	ldr	r1, [r7, #0]
  4022aa:	6878      	ldr	r0, [r7, #4]
  4022ac:	4b06      	ldr	r3, [pc, #24]	; (4022c8 <pin_toggle+0x38>)
  4022ae:	4798      	blx	r3
  else
    pio_set(p_pio, ul_mask);

}
  4022b0:	e003      	b.n	4022ba <pin_toggle+0x2a>
    pio_set(p_pio, ul_mask);
  4022b2:	6839      	ldr	r1, [r7, #0]
  4022b4:	6878      	ldr	r0, [r7, #4]
  4022b6:	4b05      	ldr	r3, [pc, #20]	; (4022cc <pin_toggle+0x3c>)
  4022b8:	4798      	blx	r3
}
  4022ba:	bf00      	nop
  4022bc:	3708      	adds	r7, #8
  4022be:	46bd      	mov	sp, r7
  4022c0:	bd80      	pop	{r7, pc}
  4022c2:	bf00      	nop
  4022c4:	00400c4d 	.word	0x00400c4d
  4022c8:	00400abd 	.word	0x00400abd
  4022cc:	00400aa1 	.word	0x00400aa1

004022d0 <usart_puts>:

uint32_t usart_puts(uint8_t *pstring) {
  4022d0:	b580      	push	{r7, lr}
  4022d2:	b084      	sub	sp, #16
  4022d4:	af00      	add	r7, sp, #0
  4022d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  4022d8:	2300      	movs	r3, #0
  4022da:	60fb      	str	r3, [r7, #12]

  while(*(pstring + i)){
  4022dc:	e010      	b.n	402300 <usart_puts+0x30>
    usart_serial_putchar(USART_COM, *(pstring+i++));
  4022de:	68fb      	ldr	r3, [r7, #12]
  4022e0:	1c5a      	adds	r2, r3, #1
  4022e2:	60fa      	str	r2, [r7, #12]
  4022e4:	687a      	ldr	r2, [r7, #4]
  4022e6:	4413      	add	r3, r2
  4022e8:	781b      	ldrb	r3, [r3, #0]
  4022ea:	4619      	mov	r1, r3
  4022ec:	480a      	ldr	r0, [pc, #40]	; (402318 <usart_puts+0x48>)
  4022ee:	4b0b      	ldr	r3, [pc, #44]	; (40231c <usart_puts+0x4c>)
  4022f0:	4798      	blx	r3
    while(!uart_is_tx_empty(USART_COM)){};
  4022f2:	bf00      	nop
  4022f4:	4808      	ldr	r0, [pc, #32]	; (402318 <usart_puts+0x48>)
  4022f6:	4b0a      	ldr	r3, [pc, #40]	; (402320 <usart_puts+0x50>)
  4022f8:	4798      	blx	r3
  4022fa:	4603      	mov	r3, r0
  4022fc:	2b00      	cmp	r3, #0
  4022fe:	d0f9      	beq.n	4022f4 <usart_puts+0x24>
  while(*(pstring + i)){
  402300:	687a      	ldr	r2, [r7, #4]
  402302:	68fb      	ldr	r3, [r7, #12]
  402304:	4413      	add	r3, r2
  402306:	781b      	ldrb	r3, [r3, #0]
  402308:	2b00      	cmp	r3, #0
  40230a:	d1e8      	bne.n	4022de <usart_puts+0xe>
  }
  return(i);
  40230c:	68fb      	ldr	r3, [r7, #12]
}
  40230e:	4618      	mov	r0, r3
  402310:	3710      	adds	r7, #16
  402312:	46bd      	mov	sp, r7
  402314:	bd80      	pop	{r7, pc}
  402316:	bf00      	nop
  402318:	40028000 	.word	0x40028000
  40231c:	00401ec1 	.word	0x00401ec1
  402320:	00401713 	.word	0x00401713

00402324 <USART1_init>:

static void USART1_init(void) {
  402324:	b580      	push	{r7, lr}
  402326:	b086      	sub	sp, #24
  402328:	af00      	add	r7, sp, #0

  /* Configura USART1 Pinos */
  sysclk_enable_peripheral_clock(ID_PIOB);
  40232a:	200b      	movs	r0, #11
  40232c:	4b22      	ldr	r3, [pc, #136]	; (4023b8 <USART1_init+0x94>)
  40232e:	4798      	blx	r3
  sysclk_enable_peripheral_clock(ID_PIOA);
  402330:	200a      	movs	r0, #10
  402332:	4b21      	ldr	r3, [pc, #132]	; (4023b8 <USART1_init+0x94>)
  402334:	4798      	blx	r3
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  402336:	2210      	movs	r2, #16
  402338:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40233c:	481f      	ldr	r0, [pc, #124]	; (4023bc <USART1_init+0x98>)
  40233e:	4b20      	ldr	r3, [pc, #128]	; (4023c0 <USART1_init+0x9c>)
  402340:	4798      	blx	r3
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  402342:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402346:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40234a:	481e      	ldr	r0, [pc, #120]	; (4023c4 <USART1_init+0xa0>)
  40234c:	4b1c      	ldr	r3, [pc, #112]	; (4023c0 <USART1_init+0x9c>)
  40234e:	4798      	blx	r3
  MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402350:	4a1d      	ldr	r2, [pc, #116]	; (4023c8 <USART1_init+0xa4>)
  402352:	4b1d      	ldr	r3, [pc, #116]	; (4023c8 <USART1_init+0xa4>)
  402354:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  402358:	f043 0310 	orr.w	r3, r3, #16
  40235c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

  /* Configura opcoes USART */
  const sam_usart_opt_t usart_settings = {
  402360:	463b      	mov	r3, r7
  402362:	2200      	movs	r2, #0
  402364:	601a      	str	r2, [r3, #0]
  402366:	605a      	str	r2, [r3, #4]
  402368:	609a      	str	r2, [r3, #8]
  40236a:	60da      	str	r2, [r3, #12]
  40236c:	611a      	str	r2, [r3, #16]
  40236e:	615a      	str	r2, [r3, #20]
  402370:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402374:	603b      	str	r3, [r7, #0]
  402376:	23c0      	movs	r3, #192	; 0xc0
  402378:	607b      	str	r3, [r7, #4]
  40237a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40237e:	60bb      	str	r3, [r7, #8]
    .stop_bits    = US_MR_NBSTOP_1_BIT,
    .channel_mode = US_MR_CHMODE_NORMAL
  };

  /* Ativa Clock periferico USART0 */
  sysclk_enable_peripheral_clock(USART_COM_ID);
  402380:	200e      	movs	r0, #14
  402382:	4b0d      	ldr	r3, [pc, #52]	; (4023b8 <USART1_init+0x94>)
  402384:	4798      	blx	r3

  /* Configura USART para operar em modo RS232 */
  usart_init_rs232(USART_COM, &usart_settings, sysclk_get_peripheral_hz());
  402386:	4b11      	ldr	r3, [pc, #68]	; (4023cc <USART1_init+0xa8>)
  402388:	4798      	blx	r3
  40238a:	4602      	mov	r2, r0
  40238c:	463b      	mov	r3, r7
  40238e:	4619      	mov	r1, r3
  402390:	480f      	ldr	r0, [pc, #60]	; (4023d0 <USART1_init+0xac>)
  402392:	4b10      	ldr	r3, [pc, #64]	; (4023d4 <USART1_init+0xb0>)
  402394:	4798      	blx	r3

  /* Enable the receiver and transmitter. */
  usart_enable_tx(USART_COM);
  402396:	480e      	ldr	r0, [pc, #56]	; (4023d0 <USART1_init+0xac>)
  402398:	4b0f      	ldr	r3, [pc, #60]	; (4023d8 <USART1_init+0xb4>)
  40239a:	4798      	blx	r3
  usart_enable_rx(USART_COM);
  40239c:	480c      	ldr	r0, [pc, #48]	; (4023d0 <USART1_init+0xac>)
  40239e:	4b0f      	ldr	r3, [pc, #60]	; (4023dc <USART1_init+0xb8>)
  4023a0:	4798      	blx	r3

  usart_enable_interrupt(USART_COM, US_IER_RXRDY);
  4023a2:	2101      	movs	r1, #1
  4023a4:	480a      	ldr	r0, [pc, #40]	; (4023d0 <USART1_init+0xac>)
  4023a6:	4b0e      	ldr	r3, [pc, #56]	; (4023e0 <USART1_init+0xbc>)
  4023a8:	4798      	blx	r3
  NVIC_EnableIRQ(USART_COM_ID);
  4023aa:	200e      	movs	r0, #14
  4023ac:	4b0d      	ldr	r3, [pc, #52]	; (4023e4 <USART1_init+0xc0>)
  4023ae:	4798      	blx	r3

}
  4023b0:	bf00      	nop
  4023b2:	3718      	adds	r7, #24
  4023b4:	46bd      	mov	sp, r7
  4023b6:	bd80      	pop	{r7, pc}
  4023b8:	00401ea5 	.word	0x00401ea5
  4023bc:	400e1000 	.word	0x400e1000
  4023c0:	00400ad9 	.word	0x00400ad9
  4023c4:	400e0e00 	.word	0x400e0e00
  4023c8:	40088000 	.word	0x40088000
  4023cc:	00401e91 	.word	0x00401e91
  4023d0:	40028000 	.word	0x40028000
  4023d4:	00401879 	.word	0x00401879
  4023d8:	004018fd 	.word	0x004018fd
  4023dc:	00401931 	.word	0x00401931
  4023e0:	00401965 	.word	0x00401965
  4023e4:	00401db5 	.word	0x00401db5

004023e8 <main>:

// MAIN LOOP
int main(void) {
  4023e8:	b580      	push	{r7, lr}
  4023ea:	af00      	add	r7, sp, #0

	sysclk_init();
  4023ec:	4b19      	ldr	r3, [pc, #100]	; (402454 <main+0x6c>)
  4023ee:	4798      	blx	r3
  board_init();
  4023f0:	4b19      	ldr	r3, [pc, #100]	; (402458 <main+0x70>)
  4023f2:	4798      	blx	r3

  WATCHDOG_init(DISABLE);
  4023f4:	2000      	movs	r0, #0
  4023f6:	4b19      	ldr	r3, [pc, #100]	; (40245c <main+0x74>)
  4023f8:	4798      	blx	r3
  LED_init(ON);
  4023fa:	2001      	movs	r0, #1
  4023fc:	4b18      	ldr	r3, [pc, #96]	; (402460 <main+0x78>)
  4023fe:	4798      	blx	r3
  TC1_init(2);
  402400:	2002      	movs	r0, #2
  402402:	4b18      	ldr	r3, [pc, #96]	; (402464 <main+0x7c>)
  402404:	4798      	blx	r3
  USART1_init();
  402406:	4b18      	ldr	r3, [pc, #96]	; (402468 <main+0x80>)
  402408:	4798      	blx	r3

	while(MAINLOOP) {
    if(g_usart_transmission_done) {
  40240a:	4b18      	ldr	r3, [pc, #96]	; (40246c <main+0x84>)
  40240c:	681b      	ldr	r3, [r3, #0]
  40240e:	2b00      	cmp	r3, #0
  402410:	d01b      	beq.n	40244a <main+0x62>
      if(g_bufferRX[0] == 't') {
  402412:	4b17      	ldr	r3, [pc, #92]	; (402470 <main+0x88>)
  402414:	781b      	ldrb	r3, [r3, #0]
  402416:	2b74      	cmp	r3, #116	; 0x74
  402418:	d114      	bne.n	402444 <main+0x5c>
        g_led_blink = !g_led_blink;
  40241a:	4b16      	ldr	r3, [pc, #88]	; (402474 <main+0x8c>)
  40241c:	681b      	ldr	r3, [r3, #0]
  40241e:	2b00      	cmp	r3, #0
  402420:	bf0c      	ite	eq
  402422:	2301      	moveq	r3, #1
  402424:	2300      	movne	r3, #0
  402426:	b2db      	uxtb	r3, r3
  402428:	461a      	mov	r2, r3
  40242a:	4b12      	ldr	r3, [pc, #72]	; (402474 <main+0x8c>)
  40242c:	601a      	str	r2, [r3, #0]

        if(g_led_blink)
  40242e:	4b11      	ldr	r3, [pc, #68]	; (402474 <main+0x8c>)
  402430:	681b      	ldr	r3, [r3, #0]
  402432:	2b00      	cmp	r3, #0
  402434:	d003      	beq.n	40243e <main+0x56>
          usart_puts("LED BLINK ON\n");
  402436:	4810      	ldr	r0, [pc, #64]	; (402478 <main+0x90>)
  402438:	4b10      	ldr	r3, [pc, #64]	; (40247c <main+0x94>)
  40243a:	4798      	blx	r3
  40243c:	e002      	b.n	402444 <main+0x5c>
        else
          usart_puts("LED BLINK OFF\n");
  40243e:	4810      	ldr	r0, [pc, #64]	; (402480 <main+0x98>)
  402440:	4b0e      	ldr	r3, [pc, #56]	; (40247c <main+0x94>)
  402442:	4798      	blx	r3
      }
      g_usart_transmission_done = 0;
  402444:	4b09      	ldr	r3, [pc, #36]	; (40246c <main+0x84>)
  402446:	2200      	movs	r2, #0
  402448:	601a      	str	r2, [r3, #0]
    }

    pmc_sleep(SLEEPMGR_SLEEP_WFI);
  40244a:	2002      	movs	r0, #2
  40244c:	4b0d      	ldr	r3, [pc, #52]	; (402484 <main+0x9c>)
  40244e:	4798      	blx	r3
    if(g_usart_transmission_done) {
  402450:	e7db      	b.n	40240a <main+0x22>
  402452:	bf00      	nop
  402454:	004004ad 	.word	0x004004ad
  402458:	004009bd 	.word	0x004009bd
  40245c:	00402269 	.word	0x00402269
  402460:	0040218d 	.word	0x0040218d
  402464:	004021cd 	.word	0x004021cd
  402468:	00402325 	.word	0x00402325
  40246c:	204004d0 	.word	0x204004d0
  402470:	204004d8 	.word	0x204004d8
  402474:	2040000c 	.word	0x2040000c
  402478:	004025d0 	.word	0x004025d0
  40247c:	004022d1 	.word	0x004022d1
  402480:	004025e0 	.word	0x004025e0
  402484:	004011e5 	.word	0x004011e5

00402488 <__libc_init_array>:
  402488:	b570      	push	{r4, r5, r6, lr}
  40248a:	4e0f      	ldr	r6, [pc, #60]	; (4024c8 <__libc_init_array+0x40>)
  40248c:	4d0f      	ldr	r5, [pc, #60]	; (4024cc <__libc_init_array+0x44>)
  40248e:	1b76      	subs	r6, r6, r5
  402490:	10b6      	asrs	r6, r6, #2
  402492:	bf18      	it	ne
  402494:	2400      	movne	r4, #0
  402496:	d005      	beq.n	4024a4 <__libc_init_array+0x1c>
  402498:	3401      	adds	r4, #1
  40249a:	f855 3b04 	ldr.w	r3, [r5], #4
  40249e:	4798      	blx	r3
  4024a0:	42a6      	cmp	r6, r4
  4024a2:	d1f9      	bne.n	402498 <__libc_init_array+0x10>
  4024a4:	4e0a      	ldr	r6, [pc, #40]	; (4024d0 <__libc_init_array+0x48>)
  4024a6:	4d0b      	ldr	r5, [pc, #44]	; (4024d4 <__libc_init_array+0x4c>)
  4024a8:	1b76      	subs	r6, r6, r5
  4024aa:	f000 f8a3 	bl	4025f4 <_init>
  4024ae:	10b6      	asrs	r6, r6, #2
  4024b0:	bf18      	it	ne
  4024b2:	2400      	movne	r4, #0
  4024b4:	d006      	beq.n	4024c4 <__libc_init_array+0x3c>
  4024b6:	3401      	adds	r4, #1
  4024b8:	f855 3b04 	ldr.w	r3, [r5], #4
  4024bc:	4798      	blx	r3
  4024be:	42a6      	cmp	r6, r4
  4024c0:	d1f9      	bne.n	4024b6 <__libc_init_array+0x2e>
  4024c2:	bd70      	pop	{r4, r5, r6, pc}
  4024c4:	bd70      	pop	{r4, r5, r6, pc}
  4024c6:	bf00      	nop
  4024c8:	00402600 	.word	0x00402600
  4024cc:	00402600 	.word	0x00402600
  4024d0:	00402608 	.word	0x00402608
  4024d4:	00402600 	.word	0x00402600

004024d8 <register_fini>:
  4024d8:	4b02      	ldr	r3, [pc, #8]	; (4024e4 <register_fini+0xc>)
  4024da:	b113      	cbz	r3, 4024e2 <register_fini+0xa>
  4024dc:	4802      	ldr	r0, [pc, #8]	; (4024e8 <register_fini+0x10>)
  4024de:	f000 b805 	b.w	4024ec <atexit>
  4024e2:	4770      	bx	lr
  4024e4:	00000000 	.word	0x00000000
  4024e8:	004024f9 	.word	0x004024f9

004024ec <atexit>:
  4024ec:	2300      	movs	r3, #0
  4024ee:	4601      	mov	r1, r0
  4024f0:	461a      	mov	r2, r3
  4024f2:	4618      	mov	r0, r3
  4024f4:	f000 b81a 	b.w	40252c <__register_exitproc>

004024f8 <__libc_fini_array>:
  4024f8:	b538      	push	{r3, r4, r5, lr}
  4024fa:	4c0a      	ldr	r4, [pc, #40]	; (402524 <__libc_fini_array+0x2c>)
  4024fc:	4d0a      	ldr	r5, [pc, #40]	; (402528 <__libc_fini_array+0x30>)
  4024fe:	1b64      	subs	r4, r4, r5
  402500:	10a4      	asrs	r4, r4, #2
  402502:	d00a      	beq.n	40251a <__libc_fini_array+0x22>
  402504:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402508:	3b01      	subs	r3, #1
  40250a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40250e:	3c01      	subs	r4, #1
  402510:	f855 3904 	ldr.w	r3, [r5], #-4
  402514:	4798      	blx	r3
  402516:	2c00      	cmp	r4, #0
  402518:	d1f9      	bne.n	40250e <__libc_fini_array+0x16>
  40251a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40251e:	f000 b873 	b.w	402608 <_fini>
  402522:	bf00      	nop
  402524:	00402618 	.word	0x00402618
  402528:	00402614 	.word	0x00402614

0040252c <__register_exitproc>:
  40252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402530:	4c25      	ldr	r4, [pc, #148]	; (4025c8 <__register_exitproc+0x9c>)
  402532:	6825      	ldr	r5, [r4, #0]
  402534:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402538:	4606      	mov	r6, r0
  40253a:	4688      	mov	r8, r1
  40253c:	4692      	mov	sl, r2
  40253e:	4699      	mov	r9, r3
  402540:	b3c4      	cbz	r4, 4025b4 <__register_exitproc+0x88>
  402542:	6860      	ldr	r0, [r4, #4]
  402544:	281f      	cmp	r0, #31
  402546:	dc17      	bgt.n	402578 <__register_exitproc+0x4c>
  402548:	1c43      	adds	r3, r0, #1
  40254a:	b176      	cbz	r6, 40256a <__register_exitproc+0x3e>
  40254c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402550:	2201      	movs	r2, #1
  402552:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402556:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40255a:	4082      	lsls	r2, r0
  40255c:	4311      	orrs	r1, r2
  40255e:	2e02      	cmp	r6, #2
  402560:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402564:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402568:	d01e      	beq.n	4025a8 <__register_exitproc+0x7c>
  40256a:	3002      	adds	r0, #2
  40256c:	6063      	str	r3, [r4, #4]
  40256e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402572:	2000      	movs	r0, #0
  402574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402578:	4b14      	ldr	r3, [pc, #80]	; (4025cc <__register_exitproc+0xa0>)
  40257a:	b303      	cbz	r3, 4025be <__register_exitproc+0x92>
  40257c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402580:	f3af 8000 	nop.w
  402584:	4604      	mov	r4, r0
  402586:	b1d0      	cbz	r0, 4025be <__register_exitproc+0x92>
  402588:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40258c:	2700      	movs	r7, #0
  40258e:	e880 0088 	stmia.w	r0, {r3, r7}
  402592:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402596:	4638      	mov	r0, r7
  402598:	2301      	movs	r3, #1
  40259a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40259e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4025a2:	2e00      	cmp	r6, #0
  4025a4:	d0e1      	beq.n	40256a <__register_exitproc+0x3e>
  4025a6:	e7d1      	b.n	40254c <__register_exitproc+0x20>
  4025a8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4025ac:	430a      	orrs	r2, r1
  4025ae:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4025b2:	e7da      	b.n	40256a <__register_exitproc+0x3e>
  4025b4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4025b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4025bc:	e7c1      	b.n	402542 <__register_exitproc+0x16>
  4025be:	f04f 30ff 	mov.w	r0, #4294967295
  4025c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025c6:	bf00      	nop
  4025c8:	004025f0 	.word	0x004025f0
  4025cc:	00000000 	.word	0x00000000
  4025d0:	2044454c 	.word	0x2044454c
  4025d4:	4e494c42 	.word	0x4e494c42
  4025d8:	4e4f204b 	.word	0x4e4f204b
  4025dc:	0000000a 	.word	0x0000000a
  4025e0:	2044454c 	.word	0x2044454c
  4025e4:	4e494c42 	.word	0x4e494c42
  4025e8:	464f204b 	.word	0x464f204b
  4025ec:	00000a46 	.word	0x00000a46

004025f0 <_global_impure_ptr>:
  4025f0:	20400010                                ..@ 

004025f4 <_init>:
  4025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025f6:	bf00      	nop
  4025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4025fa:	bc08      	pop	{r3}
  4025fc:	469e      	mov	lr, r3
  4025fe:	4770      	bx	lr

00402600 <__init_array_start>:
  402600:	004024d9 	.word	0x004024d9

00402604 <__frame_dummy_init_array_entry>:
  402604:	00400165                                e.@.

00402608 <_fini>:
  402608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40260a:	bf00      	nop
  40260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40260e:	bc08      	pop	{r3}
  402610:	469e      	mov	lr, r3
  402612:	4770      	bx	lr

00402614 <__fini_array_start>:
  402614:	00400141 	.word	0x00400141
