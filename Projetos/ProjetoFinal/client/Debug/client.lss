
client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c274  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040c274  0040c274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009cc  20400000  0040c27c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000d74  204009cc  0040cc48  000209cc  2**2
                  ALLOC
  4 .stack        00002000  20401740  0040d9bc  000209cc  2**0
                  ALLOC
  5 .heap         00000200  20403740  0040f9bc  000209cc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209cc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fa  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002f7fd  00000000  00000000  00020a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005db3  00000000  00000000  00050250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001238  00000000  00000000  00056003  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00026245  00000000  00000000  0005723b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018042  00000000  00000000  0007d480  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000933e3  00000000  00000000  000954c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000efce  00000000  00000000  001288a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001410  00000000  00000000  00137873  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004280  00000000  00000000  00138c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 37 40 20 d5 3a 40 00 d3 3a 40 00 d3 3a 40 00     @7@ .:@..:@..:@.
  400010:	d3 3a 40 00 d3 3a 40 00 d3 3a 40 00 00 00 00 00     .:@..:@..:@.....
	...
  40002c:	d3 3a 40 00 d3 3a 40 00 00 00 00 00 d3 3a 40 00     .:@..:@......:@.
  40003c:	d3 3a 40 00 d3 3a 40 00 d3 3a 40 00 d3 3a 40 00     .:@..:@..:@..:@.
  40004c:	d3 3a 40 00 d3 3a 40 00 d3 3a 40 00 d3 3a 40 00     .:@..:@..:@..:@.
  40005c:	d3 3a 40 00 d3 3a 40 00 00 00 00 00 45 35 40 00     .:@..:@.....E5@.
  40006c:	59 35 40 00 6d 35 40 00 d3 3a 40 00 d3 3a 40 00     Y5@.m5@..:@..:@.
  40007c:	d3 3a 40 00 81 35 40 00 95 35 40 00 d3 3a 40 00     .:@..5@..5@..:@.
  40008c:	d3 3a 40 00 d3 3a 40 00 d3 3a 40 00 d3 3a 40 00     .:@..:@..:@..:@.
  40009c:	89 42 40 00 d3 3a 40 00 d3 3a 40 00 bd 42 40 00     .B@..:@..:@..B@.
  4000ac:	d3 3a 40 00 d3 3a 40 00 21 04 40 00 d3 3a 40 00     .:@..:@.!.@..:@.
  4000bc:	d3 3a 40 00 d3 3a 40 00 d3 3a 40 00 d3 3a 40 00     .:@..:@..:@..:@.
  4000cc:	d3 3a 40 00 00 00 00 00 d3 3a 40 00 00 00 00 00     .:@......:@.....
  4000dc:	d3 3a 40 00 35 04 40 00 d3 3a 40 00 d3 3a 40 00     .:@.5.@..:@..:@.
  4000ec:	d3 3a 40 00 d3 3a 40 00 d3 3a 40 00 d3 3a 40 00     .:@..:@..:@..:@.
  4000fc:	d3 3a 40 00 d3 3a 40 00 d3 3a 40 00 d3 3a 40 00     .:@..:@..:@..:@.
  40010c:	d3 3a 40 00 d3 3a 40 00 00 00 00 00 00 00 00 00     .:@..:@.........
  40011c:	00 00 00 00 d3 3a 40 00 d3 3a 40 00 d3 3a 40 00     .....:@..:@..:@.
  40012c:	d3 3a 40 00 d3 3a 40 00 00 00 00 00 d3 3a 40 00     .:@..:@......:@.
  40013c:	d3 3a 40 00                                         .:@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009cc 	.word	0x204009cc
  40015c:	00000000 	.word	0x00000000
  400160:	0040c27c 	.word	0x0040c27c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040c27c 	.word	0x0040c27c
  4001a0:	204009d0 	.word	0x204009d0
  4001a4:	0040c27c 	.word	0x0040c27c
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	204015ec 	.word	0x204015ec
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	11e1a300 	.word	0x11e1a300
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	204015e8 	.word	0x204015e8
  40038c:	2040162c 	.word	0x2040162c

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	204015ec 	.word	0x204015ec
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001ad 	.word	0x004001ad

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001ad 	.word	0x004001ad

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	0040374d 	.word	0x0040374d
  4004a4:	204015e4 	.word	0x204015e4
  4004a8:	20400014 	.word	0x20400014

004004ac <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  4004ac:	2810      	cmp	r0, #16
  4004ae:	d108      	bne.n	4004c2 <chip_isr+0x16>
  4004b0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4004b4:	d105      	bne.n	4004c2 <chip_isr+0x16>
{
  4004b6:	b508      	push	{r3, lr}
		if (gpfIsr) {
  4004b8:	4b02      	ldr	r3, [pc, #8]	; (4004c4 <chip_isr+0x18>)
  4004ba:	681b      	ldr	r3, [r3, #0]
  4004bc:	b103      	cbz	r3, 4004c0 <chip_isr+0x14>
			gpfIsr();
  4004be:	4798      	blx	r3
  4004c0:	bd08      	pop	{r3, pc}
  4004c2:	4770      	bx	lr
  4004c4:	204009e8 	.word	0x204009e8

004004c8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4004c8:	b150      	cbz	r0, 4004e0 <nm_bsp_sleep+0x18>
{
  4004ca:	b570      	push	{r4, r5, r6, lr}
  4004cc:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  4004ce:	4e05      	ldr	r6, [pc, #20]	; (4004e4 <nm_bsp_sleep+0x1c>)
  4004d0:	4d05      	ldr	r5, [pc, #20]	; (4004e8 <nm_bsp_sleep+0x20>)
  4004d2:	4630      	mov	r0, r6
  4004d4:	47a8      	blx	r5
	while(u32TimeMsec--) {
  4004d6:	3c01      	subs	r4, #1
  4004d8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4004dc:	d1f9      	bne.n	4004d2 <nm_bsp_sleep+0xa>
  4004de:	bd70      	pop	{r4, r5, r6, pc}
  4004e0:	4770      	bx	lr
  4004e2:	bf00      	nop
  4004e4:	00031635 	.word	0x00031635
  4004e8:	20400001 	.word	0x20400001

004004ec <nm_bsp_reset>:
{
  4004ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4004f0:	4f09      	ldr	r7, [pc, #36]	; (400518 <nm_bsp_reset+0x2c>)
  4004f2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4004f6:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4004fa:	4d08      	ldr	r5, [pc, #32]	; (40051c <nm_bsp_reset+0x30>)
  4004fc:	2608      	movs	r6, #8
  4004fe:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  400500:	2064      	movs	r0, #100	; 0x64
  400502:	4c07      	ldr	r4, [pc, #28]	; (400520 <nm_bsp_reset+0x34>)
  400504:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400506:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  40050a:	2064      	movs	r0, #100	; 0x64
  40050c:	47a0      	blx	r4
  40050e:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  400510:	2064      	movs	r0, #100	; 0x64
  400512:	47a0      	blx	r4
  400514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400518:	400e1200 	.word	0x400e1200
  40051c:	400e1000 	.word	0x400e1000
  400520:	004004c9 	.word	0x004004c9

00400524 <nm_bsp_init>:
{
  400524:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  400526:	2200      	movs	r2, #0
  400528:	4b14      	ldr	r3, [pc, #80]	; (40057c <nm_bsp_init+0x58>)
  40052a:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40052c:	200a      	movs	r0, #10
  40052e:	4c14      	ldr	r4, [pc, #80]	; (400580 <nm_bsp_init+0x5c>)
  400530:	47a0      	blx	r4
  400532:	200b      	movs	r0, #11
  400534:	47a0      	blx	r4
  400536:	200c      	movs	r0, #12
  400538:	47a0      	blx	r4
  40053a:	2010      	movs	r0, #16
  40053c:	47a0      	blx	r4
  40053e:	2011      	movs	r0, #17
  400540:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400542:	4b10      	ldr	r3, [pc, #64]	; (400584 <nm_bsp_init+0x60>)
  400544:	2208      	movs	r2, #8
  400546:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400548:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40054c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40054e:	4a0e      	ldr	r2, [pc, #56]	; (400588 <nm_bsp_init+0x64>)
  400550:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400554:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400556:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40055a:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40055c:	2204      	movs	r2, #4
  40055e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400560:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400564:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400566:	4b09      	ldr	r3, [pc, #36]	; (40058c <nm_bsp_init+0x68>)
  400568:	681b      	ldr	r3, [r3, #0]
  40056a:	f013 0f01 	tst.w	r3, #1
  40056e:	d001      	beq.n	400574 <nm_bsp_init+0x50>
  400570:	4b06      	ldr	r3, [pc, #24]	; (40058c <nm_bsp_init+0x68>)
  400572:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  400574:	4b06      	ldr	r3, [pc, #24]	; (400590 <nm_bsp_init+0x6c>)
  400576:	4798      	blx	r3
}
  400578:	2000      	movs	r0, #0
  40057a:	bd10      	pop	{r4, pc}
  40057c:	204009e8 	.word	0x204009e8
  400580:	0040374d 	.word	0x0040374d
  400584:	400e1000 	.word	0x400e1000
  400588:	400e1200 	.word	0x400e1200
  40058c:	e000e010 	.word	0xe000e010
  400590:	004004ed 	.word	0x004004ed

00400594 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400594:	b530      	push	{r4, r5, lr}
  400596:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400598:	4b14      	ldr	r3, [pc, #80]	; (4005ec <nm_bsp_register_isr+0x58>)
  40059a:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40059c:	2010      	movs	r0, #16
  40059e:	4b14      	ldr	r3, [pc, #80]	; (4005f0 <nm_bsp_register_isr+0x5c>)
  4005a0:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  4005a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4005a6:	207c      	movs	r0, #124	; 0x7c
  4005a8:	4b12      	ldr	r3, [pc, #72]	; (4005f4 <nm_bsp_register_isr+0x60>)
  4005aa:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  4005ac:	4c12      	ldr	r4, [pc, #72]	; (4005f8 <nm_bsp_register_isr+0x64>)
  4005ae:	2201      	movs	r2, #1
  4005b0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005b4:	4620      	mov	r0, r4
  4005b6:	4b11      	ldr	r3, [pc, #68]	; (4005fc <nm_bsp_register_isr+0x68>)
  4005b8:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4005ba:	4b11      	ldr	r3, [pc, #68]	; (400600 <nm_bsp_register_isr+0x6c>)
  4005bc:	9300      	str	r3, [sp, #0]
  4005be:	2351      	movs	r3, #81	; 0x51
  4005c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4005c4:	2110      	movs	r1, #16
  4005c6:	4620      	mov	r0, r4
  4005c8:	4d0e      	ldr	r5, [pc, #56]	; (400604 <nm_bsp_register_isr+0x70>)
  4005ca:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4005cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005d0:	4620      	mov	r0, r4
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <nm_bsp_register_isr+0x74>)
  4005d4:	4798      	blx	r3
  4005d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4005da:	4b0c      	ldr	r3, [pc, #48]	; (40060c <nm_bsp_register_isr+0x78>)
  4005dc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4005de:	2200      	movs	r2, #0
  4005e0:	2110      	movs	r1, #16
  4005e2:	4620      	mov	r0, r4
  4005e4:	4b0a      	ldr	r3, [pc, #40]	; (400610 <nm_bsp_register_isr+0x7c>)
  4005e6:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4005e8:	b003      	add	sp, #12
  4005ea:	bd30      	pop	{r4, r5, pc}
  4005ec:	204009e8 	.word	0x204009e8
  4005f0:	0040374d 	.word	0x0040374d
  4005f4:	00403355 	.word	0x00403355
  4005f8:	400e1400 	.word	0x400e1400
  4005fc:	00403211 	.word	0x00403211
  400600:	004004ad 	.word	0x004004ad
  400604:	004034d5 	.word	0x004034d5
  400608:	00403345 	.word	0x00403345
  40060c:	e000e100 	.word	0xe000e100
  400610:	004035a9 	.word	0x004035a9

00400614 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400614:	b508      	push	{r3, lr}
	if (u8Enable) {
  400616:	b928      	cbnz	r0, 400624 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400618:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40061c:	4804      	ldr	r0, [pc, #16]	; (400630 <nm_bsp_interrupt_ctrl+0x1c>)
  40061e:	4b05      	ldr	r3, [pc, #20]	; (400634 <nm_bsp_interrupt_ctrl+0x20>)
  400620:	4798      	blx	r3
  400622:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400624:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400628:	4801      	ldr	r0, [pc, #4]	; (400630 <nm_bsp_interrupt_ctrl+0x1c>)
  40062a:	4b03      	ldr	r3, [pc, #12]	; (400638 <nm_bsp_interrupt_ctrl+0x24>)
  40062c:	4798      	blx	r3
  40062e:	bd08      	pop	{r3, pc}
  400630:	400e1400 	.word	0x400e1400
  400634:	00403349 	.word	0x00403349
  400638:	00403345 	.word	0x00403345

0040063c <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  40063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  40063e:	4c39      	ldr	r4, [pc, #228]	; (400724 <nm_bus_init+0xe8>)
  400640:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400644:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400646:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40064a:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40064c:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40064e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400652:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400654:	430b      	orrs	r3, r1
  400656:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400658:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40065a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40065e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  400660:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400664:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400666:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40066a:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40066c:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40066e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400672:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400674:	4313      	orrs	r3, r2
  400676:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400678:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40067a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40067e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  400680:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  400684:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400686:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40068a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40068c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40068e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400692:	6f20      	ldr	r0, [r4, #112]	; 0x70
  400694:	4318      	orrs	r0, r3
  400696:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400698:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40069a:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40069e:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006a0:	6061      	str	r1, [r4, #4]
  4006a2:	6062      	str	r2, [r4, #4]
  4006a4:	6063      	str	r3, [r4, #4]
  4006a6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  4006aa:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  4006ac:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  4006ae:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  4006b0:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  4006b2:	4d1d      	ldr	r5, [pc, #116]	; (400728 <nm_bus_init+0xec>)
  4006b4:	4628      	mov	r0, r5
  4006b6:	4b1d      	ldr	r3, [pc, #116]	; (40072c <nm_bus_init+0xf0>)
  4006b8:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4006ba:	2302      	movs	r3, #2
  4006bc:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4006be:	2380      	movs	r3, #128	; 0x80
  4006c0:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4006c2:	686b      	ldr	r3, [r5, #4]
  4006c4:	f043 0301 	orr.w	r3, r3, #1
  4006c8:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4006ca:	686b      	ldr	r3, [r5, #4]
  4006cc:	f043 0310 	orr.w	r3, r3, #16
  4006d0:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4006d2:	2101      	movs	r1, #1
  4006d4:	4628      	mov	r0, r5
  4006d6:	4b16      	ldr	r3, [pc, #88]	; (400730 <nm_bus_init+0xf4>)
  4006d8:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4006da:	2200      	movs	r2, #0
  4006dc:	2101      	movs	r1, #1
  4006de:	4628      	mov	r0, r5
  4006e0:	4b14      	ldr	r3, [pc, #80]	; (400734 <nm_bus_init+0xf8>)
  4006e2:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4006e4:	2201      	movs	r2, #1
  4006e6:	4611      	mov	r1, r2
  4006e8:	4628      	mov	r0, r5
  4006ea:	4b13      	ldr	r3, [pc, #76]	; (400738 <nm_bus_init+0xfc>)
  4006ec:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4006ee:	2200      	movs	r2, #0
  4006f0:	2101      	movs	r1, #1
  4006f2:	4628      	mov	r0, r5
  4006f4:	4b11      	ldr	r3, [pc, #68]	; (40073c <nm_bus_init+0x100>)
  4006f6:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4006f8:	4911      	ldr	r1, [pc, #68]	; (400740 <nm_bus_init+0x104>)
  4006fa:	4812      	ldr	r0, [pc, #72]	; (400744 <nm_bus_init+0x108>)
  4006fc:	4b12      	ldr	r3, [pc, #72]	; (400748 <nm_bus_init+0x10c>)
  4006fe:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  400700:	b2c2      	uxtb	r2, r0
  400702:	2101      	movs	r1, #1
  400704:	4628      	mov	r0, r5
  400706:	4b11      	ldr	r3, [pc, #68]	; (40074c <nm_bus_init+0x110>)
  400708:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  40070a:	2300      	movs	r3, #0
  40070c:	461a      	mov	r2, r3
  40070e:	2101      	movs	r1, #1
  400710:	4628      	mov	r0, r5
  400712:	4f0f      	ldr	r7, [pc, #60]	; (400750 <nm_bus_init+0x114>)
  400714:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400716:	2301      	movs	r3, #1
  400718:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  40071a:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  40071c:	4b0d      	ldr	r3, [pc, #52]	; (400754 <nm_bus_init+0x118>)
  40071e:	4798      	blx	r3
#endif
	return result;
}
  400720:	2000      	movs	r0, #0
  400722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400724:	400e1400 	.word	0x400e1400
  400728:	40008000 	.word	0x40008000
  40072c:	004037a1 	.word	0x004037a1
  400730:	004037cd 	.word	0x004037cd
  400734:	00403847 	.word	0x00403847
  400738:	00403865 	.word	0x00403865
  40073c:	00403883 	.word	0x00403883
  400740:	11e1a300 	.word	0x11e1a300
  400744:	02dc6c00 	.word	0x02dc6c00
  400748:	00403897 	.word	0x00403897
  40074c:	004038ad 	.word	0x004038ad
  400750:	004038d5 	.word	0x004038d5
  400754:	004004ed 	.word	0x004004ed

00400758 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40075c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40075e:	2803      	cmp	r0, #3
  400760:	d144      	bne.n	4007ec <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  400762:	680e      	ldr	r6, [r1, #0]
  400764:	684d      	ldr	r5, [r1, #4]
  400766:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  400768:	2300      	movs	r3, #0
  40076a:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40076e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  400772:	b186      	cbz	r6, 400796 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  400774:	2d00      	cmp	r5, #0
  400776:	d136      	bne.n	4007e6 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  400778:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40077c:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40077e:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  400780:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400784:	4b20      	ldr	r3, [pc, #128]	; (400808 <nm_bus_ioctl+0xb0>)
  400786:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  400788:	b32c      	cbz	r4, 4007d6 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40078a:	4f20      	ldr	r7, [pc, #128]	; (40080c <nm_bus_ioctl+0xb4>)
  40078c:	f8df b094 	ldr.w	fp, [pc, #148]	; 400824 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400790:	f8df a094 	ldr.w	sl, [pc, #148]	; 400828 <nm_bus_ioctl+0xd0>
  400794:	e006      	b.n	4007a4 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400796:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  40079a:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40079e:	ae01      	add	r6, sp, #4
  4007a0:	e7ee      	b.n	400780 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  4007a2:	b1c4      	cbz	r4, 4007d6 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4007a4:	2300      	movs	r3, #0
  4007a6:	461a      	mov	r2, r3
  4007a8:	7831      	ldrb	r1, [r6, #0]
  4007aa:	4638      	mov	r0, r7
  4007ac:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4007ae:	f10d 0205 	add.w	r2, sp, #5
  4007b2:	f10d 0106 	add.w	r1, sp, #6
  4007b6:	4638      	mov	r0, r7
  4007b8:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4007ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4007be:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  4007c0:	3c01      	subs	r4, #1
  4007c2:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4007c4:	f1b8 0f00 	cmp.w	r8, #0
  4007c8:	d100      	bne.n	4007cc <nm_bus_ioctl+0x74>
			pu8Miso++;
  4007ca:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4007cc:	f1b9 0f00 	cmp.w	r9, #0
  4007d0:	d1e7      	bne.n	4007a2 <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  4007d2:	3601      	adds	r6, #1
  4007d4:	e7e5      	b.n	4007a2 <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  4007d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007da:	4b0b      	ldr	r3, [pc, #44]	; (400808 <nm_bus_ioctl+0xb0>)
  4007dc:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  4007de:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4007e0:	b003      	add	sp, #12
  4007e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  4007e6:	f06f 0005 	mvn.w	r0, #5
		break;
  4007ea:	e7f9      	b.n	4007e0 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  4007ec:	f240 121f 	movw	r2, #287	; 0x11f
  4007f0:	4907      	ldr	r1, [pc, #28]	; (400810 <nm_bus_ioctl+0xb8>)
  4007f2:	4808      	ldr	r0, [pc, #32]	; (400814 <nm_bus_ioctl+0xbc>)
  4007f4:	4c08      	ldr	r4, [pc, #32]	; (400818 <nm_bus_ioctl+0xc0>)
  4007f6:	47a0      	blx	r4
  4007f8:	4808      	ldr	r0, [pc, #32]	; (40081c <nm_bus_ioctl+0xc4>)
  4007fa:	47a0      	blx	r4
  4007fc:	4808      	ldr	r0, [pc, #32]	; (400820 <nm_bus_ioctl+0xc8>)
  4007fe:	47a0      	blx	r4
			s8Ret = -1;
  400800:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  400804:	e7ec      	b.n	4007e0 <nm_bus_ioctl+0x88>
  400806:	bf00      	nop
  400808:	400e1400 	.word	0x400e1400
  40080c:	40008000 	.word	0x40008000
  400810:	0040b0bc 	.word	0x0040b0bc
  400814:	0040b0cc 	.word	0x0040b0cc
  400818:	00404879 	.word	0x00404879
  40081c:	0040b0e0 	.word	0x0040b0e0
  400820:	0040b0f8 	.word	0x0040b0f8
  400824:	00403813 	.word	0x00403813
  400828:	004037e3 	.word	0x004037e3

0040082c <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40082c:	2202      	movs	r2, #2
  40082e:	4b0e      	ldr	r3, [pc, #56]	; (400868 <nm_bus_deinit+0x3c>)
  400830:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400832:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  400836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40083a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40083e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400840:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400844:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400848:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40084a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40084e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400852:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400854:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40085c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40085e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  400862:	2000      	movs	r0, #0
  400864:	4770      	bx	lr
  400866:	bf00      	nop
  400868:	40008000 	.word	0x40008000

0040086c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  40086c:	b13a      	cbz	r2, 40087e <m2m_memcpy+0x12>
  40086e:	3901      	subs	r1, #1
  400870:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  400872:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  400876:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  40087a:	4290      	cmp	r0, r2
  40087c:	d1f9      	bne.n	400872 <m2m_memcpy+0x6>
  40087e:	4770      	bx	lr

00400880 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  400880:	b122      	cbz	r2, 40088c <m2m_memset+0xc>
  400882:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  400884:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400888:	4290      	cmp	r0, r2
  40088a:	d1fb      	bne.n	400884 <m2m_memset+0x4>
  40088c:	4770      	bx	lr

0040088e <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40088e:	7803      	ldrb	r3, [r0, #0]
  400890:	b143      	cbz	r3, 4008a4 <m2m_strlen+0x16>
  400892:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  400894:	3301      	adds	r3, #1
  400896:	b29b      	uxth	r3, r3
	while(*pcStr)
  400898:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40089c:	2a00      	cmp	r2, #0
  40089e:	d1f9      	bne.n	400894 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  4008a0:	4618      	mov	r0, r3
  4008a2:	4770      	bx	lr
	uint16	u16StrLen = 0;
  4008a4:	2300      	movs	r3, #0
  4008a6:	e7fb      	b.n	4008a0 <m2m_strlen+0x12>

004008a8 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  4008a8:	4a02      	ldr	r2, [pc, #8]	; (4008b4 <isr+0xc>)
  4008aa:	7813      	ldrb	r3, [r2, #0]
  4008ac:	3301      	adds	r3, #1
  4008ae:	b2db      	uxtb	r3, r3
  4008b0:	7013      	strb	r3, [r2, #0]
  4008b2:	4770      	bx	lr
  4008b4:	204009ef 	.word	0x204009ef

004008b8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4008b8:	4770      	bx	lr
	...

004008bc <hif_set_rx_done>:
{
  4008bc:	b500      	push	{lr}
  4008be:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  4008c0:	2001      	movs	r0, #1
  4008c2:	4b0b      	ldr	r3, [pc, #44]	; (4008f0 <hif_set_rx_done+0x34>)
  4008c4:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4008c6:	a901      	add	r1, sp, #4
  4008c8:	f241 0070 	movw	r0, #4208	; 0x1070
  4008cc:	4b09      	ldr	r3, [pc, #36]	; (4008f4 <hif_set_rx_done+0x38>)
  4008ce:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4008d0:	4603      	mov	r3, r0
  4008d2:	b118      	cbz	r0, 4008dc <hif_set_rx_done+0x20>
}
  4008d4:	4618      	mov	r0, r3
  4008d6:	b003      	add	sp, #12
  4008d8:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  4008dc:	9901      	ldr	r1, [sp, #4]
  4008de:	f041 0102 	orr.w	r1, r1, #2
  4008e2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4008e4:	f241 0070 	movw	r0, #4208	; 0x1070
  4008e8:	4b03      	ldr	r3, [pc, #12]	; (4008f8 <hif_set_rx_done+0x3c>)
  4008ea:	4798      	blx	r3
  4008ec:	4603      	mov	r3, r0
  4008ee:	e7f1      	b.n	4008d4 <hif_set_rx_done+0x18>
  4008f0:	00400615 	.word	0x00400615
  4008f4:	00401ba9 	.word	0x00401ba9
  4008f8:	00401bb5 	.word	0x00401bb5

004008fc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4008fc:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4008fe:	4b12      	ldr	r3, [pc, #72]	; (400948 <hif_chip_wake+0x4c>)
  400900:	781b      	ldrb	r3, [r3, #0]
  400902:	b94b      	cbnz	r3, 400918 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400904:	4b11      	ldr	r3, [pc, #68]	; (40094c <hif_chip_wake+0x50>)
  400906:	781b      	ldrb	r3, [r3, #0]
  400908:	b2db      	uxtb	r3, r3
  40090a:	2b03      	cmp	r3, #3
  40090c:	d00c      	beq.n	400928 <hif_chip_wake+0x2c>
  40090e:	4b0f      	ldr	r3, [pc, #60]	; (40094c <hif_chip_wake+0x50>)
  400910:	781b      	ldrb	r3, [r3, #0]
  400912:	b2db      	uxtb	r3, r3
  400914:	2b04      	cmp	r3, #4
  400916:	d007      	beq.n	400928 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  400918:	4a0b      	ldr	r2, [pc, #44]	; (400948 <hif_chip_wake+0x4c>)
  40091a:	7813      	ldrb	r3, [r2, #0]
  40091c:	3301      	adds	r3, #1
  40091e:	b2db      	uxtb	r3, r3
  400920:	7013      	strb	r3, [r2, #0]
  400922:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  400924:	4618      	mov	r0, r3
  400926:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  400928:	4b09      	ldr	r3, [pc, #36]	; (400950 <hif_chip_wake+0x54>)
  40092a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40092c:	4603      	mov	r3, r0
  40092e:	2800      	cmp	r0, #0
  400930:	d1f8      	bne.n	400924 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  400932:	f245 6178 	movw	r1, #22136	; 0x5678
  400936:	f241 0074 	movw	r0, #4212	; 0x1074
  40093a:	4b06      	ldr	r3, [pc, #24]	; (400954 <hif_chip_wake+0x58>)
  40093c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40093e:	4603      	mov	r3, r0
  400940:	2800      	cmp	r0, #0
  400942:	d0e9      	beq.n	400918 <hif_chip_wake+0x1c>
  400944:	e7ee      	b.n	400924 <hif_chip_wake+0x28>
  400946:	bf00      	nop
  400948:	204009ed 	.word	0x204009ed
  40094c:	204009ec 	.word	0x204009ec
  400950:	00401719 	.word	0x00401719
  400954:	00401bb5 	.word	0x00401bb5

00400958 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  400958:	4b1e      	ldr	r3, [pc, #120]	; (4009d4 <hif_chip_sleep+0x7c>)
  40095a:	781b      	ldrb	r3, [r3, #0]
  40095c:	b123      	cbz	r3, 400968 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  40095e:	4a1d      	ldr	r2, [pc, #116]	; (4009d4 <hif_chip_sleep+0x7c>)
  400960:	7813      	ldrb	r3, [r2, #0]
  400962:	3b01      	subs	r3, #1
  400964:	b2db      	uxtb	r3, r3
  400966:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  400968:	4b1a      	ldr	r3, [pc, #104]	; (4009d4 <hif_chip_sleep+0x7c>)
  40096a:	781b      	ldrb	r3, [r3, #0]
  40096c:	2b00      	cmp	r3, #0
  40096e:	d12e      	bne.n	4009ce <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400970:	4b19      	ldr	r3, [pc, #100]	; (4009d8 <hif_chip_sleep+0x80>)
  400972:	781b      	ldrb	r3, [r3, #0]
  400974:	b2db      	uxtb	r3, r3
  400976:	2b03      	cmp	r3, #3
  400978:	d006      	beq.n	400988 <hif_chip_sleep+0x30>
  40097a:	4b17      	ldr	r3, [pc, #92]	; (4009d8 <hif_chip_sleep+0x80>)
  40097c:	781b      	ldrb	r3, [r3, #0]
  40097e:	b2db      	uxtb	r3, r3
  400980:	2b04      	cmp	r3, #4
  400982:	d001      	beq.n	400988 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  400984:	2300      	movs	r3, #0
  400986:	e023      	b.n	4009d0 <hif_chip_sleep+0x78>
{
  400988:	b500      	push	{lr}
  40098a:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  40098c:	2300      	movs	r3, #0
  40098e:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  400990:	f244 3121 	movw	r1, #17185	; 0x4321
  400994:	f241 0074 	movw	r0, #4212	; 0x1074
  400998:	4b10      	ldr	r3, [pc, #64]	; (4009dc <hif_chip_sleep+0x84>)
  40099a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40099c:	4603      	mov	r3, r0
  40099e:	b118      	cbz	r0, 4009a8 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  4009a0:	4618      	mov	r0, r3
  4009a2:	b003      	add	sp, #12
  4009a4:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  4009a8:	a901      	add	r1, sp, #4
  4009aa:	2001      	movs	r0, #1
  4009ac:	4b0c      	ldr	r3, [pc, #48]	; (4009e0 <hif_chip_sleep+0x88>)
  4009ae:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4009b0:	4603      	mov	r3, r0
  4009b2:	2800      	cmp	r0, #0
  4009b4:	d1f4      	bne.n	4009a0 <hif_chip_sleep+0x48>
			if(reg&0x2)
  4009b6:	9901      	ldr	r1, [sp, #4]
  4009b8:	f011 0f02 	tst.w	r1, #2
  4009bc:	d0f0      	beq.n	4009a0 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  4009be:	f021 0102 	bic.w	r1, r1, #2
  4009c2:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4009c4:	2001      	movs	r0, #1
  4009c6:	4b05      	ldr	r3, [pc, #20]	; (4009dc <hif_chip_sleep+0x84>)
  4009c8:	4798      	blx	r3
  4009ca:	4603      	mov	r3, r0
  4009cc:	e7e8      	b.n	4009a0 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  4009ce:	2300      	movs	r3, #0
}
  4009d0:	4618      	mov	r0, r3
  4009d2:	4770      	bx	lr
  4009d4:	204009ed 	.word	0x204009ed
  4009d8:	204009ec 	.word	0x204009ec
  4009dc:	00401bb5 	.word	0x00401bb5
  4009e0:	00401ba9 	.word	0x00401ba9

004009e4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4009e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009e8:	b087      	sub	sp, #28
  4009ea:	4607      	mov	r7, r0
  4009ec:	4688      	mov	r8, r1
  4009ee:	4692      	mov	sl, r2
  4009f0:	4699      	mov	r9, r3
  4009f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4009f4:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4009f8:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4009fc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  400a00:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  400a04:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  400a08:	2308      	movs	r3, #8
  400a0a:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  400a0e:	2c00      	cmp	r4, #0
  400a10:	f000 809f 	beq.w	400b52 <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  400a14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400a18:	fa16 f383 	uxtah	r3, r6, r3
  400a1c:	442b      	add	r3, r5
  400a1e:	b29b      	uxth	r3, r3
  400a20:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  400a24:	4b5c      	ldr	r3, [pc, #368]	; (400b98 <hif_send+0x1b4>)
  400a26:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  400a28:	4683      	mov	fp, r0
  400a2a:	2800      	cmp	r0, #0
  400a2c:	f040 80a2 	bne.w	400b74 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  400a30:	2300      	movs	r3, #0
  400a32:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  400a34:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  400a38:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  400a3a:	9b02      	ldr	r3, [sp, #8]
  400a3c:	431f      	orrs	r7, r3
  400a3e:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  400a40:	9b02      	ldr	r3, [sp, #8]
  400a42:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  400a46:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  400a48:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400a4c:	9b02      	ldr	r3, [sp, #8]
  400a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400a52:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  400a54:	9902      	ldr	r1, [sp, #8]
  400a56:	f241 008c 	movw	r0, #4236	; 0x108c
  400a5a:	4b50      	ldr	r3, [pc, #320]	; (400b9c <hif_send+0x1b8>)
  400a5c:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400a5e:	4683      	mov	fp, r0
  400a60:	2800      	cmp	r0, #0
  400a62:	f040 8091 	bne.w	400b88 <hif_send+0x1a4>


		reg = 0;
  400a66:	2300      	movs	r3, #0
  400a68:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  400a6a:	9b02      	ldr	r3, [sp, #8]
  400a6c:	f043 0302 	orr.w	r3, r3, #2
  400a70:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  400a72:	9902      	ldr	r1, [sp, #8]
  400a74:	f241 0078 	movw	r0, #4216	; 0x1078
  400a78:	4b48      	ldr	r3, [pc, #288]	; (400b9c <hif_send+0x1b8>)
  400a7a:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400a7c:	4683      	mov	fp, r0
  400a7e:	2800      	cmp	r0, #0
  400a80:	f040 8082 	bne.w	400b88 <hif_send+0x1a4>
		dma_addr = 0;
  400a84:	2300      	movs	r3, #0
  400a86:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400a88:	f8ad 3006 	strh.w	r3, [sp, #6]
  400a8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400a90:	b29b      	uxth	r3, r3
  400a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400a96:	d216      	bcs.n	400ac6 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  400a98:	f241 0878 	movw	r8, #4216	; 0x1078
  400a9c:	4f40      	ldr	r7, [pc, #256]	; (400ba0 <hif_send+0x1bc>)
  400a9e:	a902      	add	r1, sp, #8
  400aa0:	4640      	mov	r0, r8
  400aa2:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  400aa4:	b978      	cbnz	r0, 400ac6 <hif_send+0xe2>
			if (!(reg & 0x2))
  400aa6:	9b02      	ldr	r3, [sp, #8]
  400aa8:	f013 0f02 	tst.w	r3, #2
  400aac:	d059      	beq.n	400b62 <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  400aae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400ab2:	3301      	adds	r3, #1
  400ab4:	b29b      	uxth	r3, r3
  400ab6:	f8ad 3006 	strh.w	r3, [sp, #6]
  400aba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400abe:	b29b      	uxth	r3, r3
  400ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400ac4:	d3eb      	bcc.n	400a9e <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  400ac6:	9b03      	ldr	r3, [sp, #12]
  400ac8:	2b00      	cmp	r3, #0
  400aca:	d061      	beq.n	400b90 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  400acc:	9b03      	ldr	r3, [sp, #12]
  400ace:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  400ad0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400ad4:	b29b      	uxth	r3, r3
  400ad6:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  400ada:	9804      	ldr	r0, [sp, #16]
  400adc:	2208      	movs	r2, #8
  400ade:	a905      	add	r1, sp, #20
  400ae0:	4b30      	ldr	r3, [pc, #192]	; (400ba4 <hif_send+0x1c0>)
  400ae2:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  400ae4:	4683      	mov	fp, r0
  400ae6:	2800      	cmp	r0, #0
  400ae8:	d14e      	bne.n	400b88 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  400aea:	9b04      	ldr	r3, [sp, #16]
  400aec:	3308      	adds	r3, #8
  400aee:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  400af0:	f1ba 0f00 	cmp.w	sl, #0
  400af4:	d00a      	beq.n	400b0c <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  400af6:	9804      	ldr	r0, [sp, #16]
  400af8:	464a      	mov	r2, r9
  400afa:	4651      	mov	r1, sl
  400afc:	4b29      	ldr	r3, [pc, #164]	; (400ba4 <hif_send+0x1c0>)
  400afe:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400b00:	4683      	mov	fp, r0
  400b02:	2800      	cmp	r0, #0
  400b04:	d140      	bne.n	400b88 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  400b06:	9b04      	ldr	r3, [sp, #16]
  400b08:	444b      	add	r3, r9
  400b0a:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  400b0c:	b17c      	cbz	r4, 400b2e <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  400b0e:	9b04      	ldr	r3, [sp, #16]
  400b10:	eba5 0509 	sub.w	r5, r5, r9
  400b14:	441d      	add	r5, r3
  400b16:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  400b18:	9804      	ldr	r0, [sp, #16]
  400b1a:	4632      	mov	r2, r6
  400b1c:	4621      	mov	r1, r4
  400b1e:	4b21      	ldr	r3, [pc, #132]	; (400ba4 <hif_send+0x1c0>)
  400b20:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  400b22:	4683      	mov	fp, r0
  400b24:	2800      	cmp	r0, #0
  400b26:	d12f      	bne.n	400b88 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  400b28:	9b04      	ldr	r3, [sp, #16]
  400b2a:	441e      	add	r6, r3
  400b2c:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  400b2e:	9b03      	ldr	r3, [sp, #12]
  400b30:	009b      	lsls	r3, r3, #2
  400b32:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  400b34:	9b02      	ldr	r3, [sp, #8]
  400b36:	f043 0302 	orr.w	r3, r3, #2
  400b3a:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  400b3c:	9902      	ldr	r1, [sp, #8]
  400b3e:	f241 006c 	movw	r0, #4204	; 0x106c
  400b42:	4b16      	ldr	r3, [pc, #88]	; (400b9c <hif_send+0x1b8>)
  400b44:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  400b46:	4683      	mov	fp, r0
  400b48:	b9f0      	cbnz	r0, 400b88 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  400b4a:	4b17      	ldr	r3, [pc, #92]	; (400ba8 <hif_send+0x1c4>)
  400b4c:	4798      	blx	r3
  400b4e:	4683      	mov	fp, r0
  400b50:	e01a      	b.n	400b88 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  400b52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400b56:	fa19 f383 	uxtah	r3, r9, r3
  400b5a:	b29b      	uxth	r3, r3
  400b5c:	f8ad 3016 	strh.w	r3, [sp, #22]
  400b60:	e760      	b.n	400a24 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  400b62:	a903      	add	r1, sp, #12
  400b64:	4811      	ldr	r0, [pc, #68]	; (400bac <hif_send+0x1c8>)
  400b66:	4b0e      	ldr	r3, [pc, #56]	; (400ba0 <hif_send+0x1bc>)
  400b68:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  400b6a:	2800      	cmp	r0, #0
  400b6c:	d0ab      	beq.n	400ac6 <hif_send+0xe2>
					dma_addr = 0;
  400b6e:	2300      	movs	r3, #0
  400b70:	9303      	str	r3, [sp, #12]
  400b72:	e7a8      	b.n	400ac6 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  400b74:	f240 129f 	movw	r2, #415	; 0x19f
  400b78:	490d      	ldr	r1, [pc, #52]	; (400bb0 <hif_send+0x1cc>)
  400b7a:	480e      	ldr	r0, [pc, #56]	; (400bb4 <hif_send+0x1d0>)
  400b7c:	4c0e      	ldr	r4, [pc, #56]	; (400bb8 <hif_send+0x1d4>)
  400b7e:	47a0      	blx	r4
  400b80:	480e      	ldr	r0, [pc, #56]	; (400bbc <hif_send+0x1d8>)
  400b82:	47a0      	blx	r4
  400b84:	480e      	ldr	r0, [pc, #56]	; (400bc0 <hif_send+0x1dc>)
  400b86:	47a0      	blx	r4

ERR1:
	return ret;
}
  400b88:	4658      	mov	r0, fp
  400b8a:	b007      	add	sp, #28
  400b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  400b90:	f06f 0b02 	mvn.w	fp, #2
  400b94:	e7f8      	b.n	400b88 <hif_send+0x1a4>
  400b96:	bf00      	nop
  400b98:	004008fd 	.word	0x004008fd
  400b9c:	00401bb5 	.word	0x00401bb5
  400ba0:	00401ba9 	.word	0x00401ba9
  400ba4:	00401c1d 	.word	0x00401c1d
  400ba8:	00400959 	.word	0x00400959
  400bac:	00150400 	.word	0x00150400
  400bb0:	0040b0fc 	.word	0x0040b0fc
  400bb4:	0040b0cc 	.word	0x0040b0cc
  400bb8:	00404879 	.word	0x00404879
  400bbc:	0040b350 	.word	0x0040b350
  400bc0:	0040b0f8 	.word	0x0040b0f8

00400bc4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  400bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bc8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  400bca:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 400ec4 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  400bce:	4fa2      	ldr	r7, [pc, #648]	; (400e58 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400bd0:	4ea2      	ldr	r6, [pc, #648]	; (400e5c <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400bd2:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 400ec8 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  400bd6:	e0d5      	b.n	400d84 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  400bd8:	2204      	movs	r2, #4
  400bda:	a904      	add	r1, sp, #16
  400bdc:	9805      	ldr	r0, [sp, #20]
  400bde:	4ba0      	ldr	r3, [pc, #640]	; (400e60 <hif_handle_isr+0x29c>)
  400be0:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  400be2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400be6:	b29b      	uxth	r3, r3
  400be8:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  400bec:	4604      	mov	r4, r0
  400bee:	2800      	cmp	r0, #0
  400bf0:	d130      	bne.n	400c54 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  400bf2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400bf6:	b29b      	uxth	r3, r3
  400bf8:	429d      	cmp	r5, r3
  400bfa:	d005      	beq.n	400c08 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  400bfc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400c00:	b29b      	uxth	r3, r3
  400c02:	1aeb      	subs	r3, r5, r3
  400c04:	2b04      	cmp	r3, #4
  400c06:	dc33      	bgt.n	400c70 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  400c08:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c0c:	b2db      	uxtb	r3, r3
  400c0e:	2b01      	cmp	r3, #1
  400c10:	d047      	beq.n	400ca2 <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  400c12:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c16:	b2db      	uxtb	r3, r3
  400c18:	2b02      	cmp	r3, #2
  400c1a:	d05f      	beq.n	400cdc <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  400c1c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c20:	b2db      	uxtb	r3, r3
  400c22:	2b04      	cmp	r3, #4
  400c24:	d068      	beq.n	400cf8 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  400c26:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c2a:	b2db      	uxtb	r3, r3
  400c2c:	2b06      	cmp	r3, #6
  400c2e:	d071      	beq.n	400d14 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  400c30:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c34:	b2db      	uxtb	r3, r3
  400c36:	2b07      	cmp	r3, #7
  400c38:	d07a      	beq.n	400d30 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  400c3a:	f240 2202 	movw	r2, #514	; 0x202
  400c3e:	4641      	mov	r1, r8
  400c40:	4630      	mov	r0, r6
  400c42:	4c88      	ldr	r4, [pc, #544]	; (400e64 <hif_handle_isr+0x2a0>)
  400c44:	47a0      	blx	r4
  400c46:	4888      	ldr	r0, [pc, #544]	; (400e68 <hif_handle_isr+0x2a4>)
  400c48:	47a0      	blx	r4
  400c4a:	4888      	ldr	r0, [pc, #544]	; (400e6c <hif_handle_isr+0x2a8>)
  400c4c:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  400c4e:	f06f 0405 	mvn.w	r4, #5
  400c52:	e096      	b.n	400d82 <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  400c54:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  400c58:	4641      	mov	r1, r8
  400c5a:	4630      	mov	r0, r6
  400c5c:	4d81      	ldr	r5, [pc, #516]	; (400e64 <hif_handle_isr+0x2a0>)
  400c5e:	47a8      	blx	r5
  400c60:	4883      	ldr	r0, [pc, #524]	; (400e70 <hif_handle_isr+0x2ac>)
  400c62:	47a8      	blx	r5
  400c64:	4881      	ldr	r0, [pc, #516]	; (400e6c <hif_handle_isr+0x2a8>)
  400c66:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400c68:	2001      	movs	r0, #1
  400c6a:	4b82      	ldr	r3, [pc, #520]	; (400e74 <hif_handle_isr+0x2b0>)
  400c6c:	4798      	blx	r3
  400c6e:	e088      	b.n	400d82 <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  400c70:	f240 12df 	movw	r2, #479	; 0x1df
  400c74:	4641      	mov	r1, r8
  400c76:	4630      	mov	r0, r6
  400c78:	4c7a      	ldr	r4, [pc, #488]	; (400e64 <hif_handle_isr+0x2a0>)
  400c7a:	47a0      	blx	r4
  400c7c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  400c80:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c84:	f89d 1011 	ldrb.w	r1, [sp, #17]
  400c88:	9100      	str	r1, [sp, #0]
  400c8a:	b292      	uxth	r2, r2
  400c8c:	4629      	mov	r1, r5
  400c8e:	487a      	ldr	r0, [pc, #488]	; (400e78 <hif_handle_isr+0x2b4>)
  400c90:	47a0      	blx	r4
  400c92:	4876      	ldr	r0, [pc, #472]	; (400e6c <hif_handle_isr+0x2a8>)
  400c94:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  400c96:	2001      	movs	r0, #1
  400c98:	4b76      	ldr	r3, [pc, #472]	; (400e74 <hif_handle_isr+0x2b0>)
  400c9a:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  400c9c:	f06f 0405 	mvn.w	r4, #5
  400ca0:	e06f      	b.n	400d82 <hif_handle_isr+0x1be>
						if(pfWifiCb)
  400ca2:	4b76      	ldr	r3, [pc, #472]	; (400e7c <hif_handle_isr+0x2b8>)
  400ca4:	681b      	ldr	r3, [r3, #0]
  400ca6:	b143      	cbz	r3, 400cba <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400ca8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400cac:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400cb0:	3908      	subs	r1, #8
  400cb2:	9a05      	ldr	r2, [sp, #20]
  400cb4:	3208      	adds	r2, #8
  400cb6:	b289      	uxth	r1, r1
  400cb8:	4798      	blx	r3
					if(!gu8HifSizeDone)
  400cba:	4b71      	ldr	r3, [pc, #452]	; (400e80 <hif_handle_isr+0x2bc>)
  400cbc:	781b      	ldrb	r3, [r3, #0]
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d15c      	bne.n	400d7c <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  400cc2:	f240 2209 	movw	r2, #521	; 0x209
  400cc6:	4641      	mov	r1, r8
  400cc8:	4630      	mov	r0, r6
  400cca:	4c66      	ldr	r4, [pc, #408]	; (400e64 <hif_handle_isr+0x2a0>)
  400ccc:	47a0      	blx	r4
  400cce:	486d      	ldr	r0, [pc, #436]	; (400e84 <hif_handle_isr+0x2c0>)
  400cd0:	47a0      	blx	r4
  400cd2:	4866      	ldr	r0, [pc, #408]	; (400e6c <hif_handle_isr+0x2a8>)
  400cd4:	47a0      	blx	r4
						ret = hif_set_rx_done();
  400cd6:	4b6c      	ldr	r3, [pc, #432]	; (400e88 <hif_handle_isr+0x2c4>)
  400cd8:	4798      	blx	r3
  400cda:	e04f      	b.n	400d7c <hif_handle_isr+0x1b8>
						if(pfIpCb)
  400cdc:	4b6b      	ldr	r3, [pc, #428]	; (400e8c <hif_handle_isr+0x2c8>)
  400cde:	681b      	ldr	r3, [r3, #0]
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d0ea      	beq.n	400cba <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400ce4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400ce8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400cec:	3908      	subs	r1, #8
  400cee:	9a05      	ldr	r2, [sp, #20]
  400cf0:	3208      	adds	r2, #8
  400cf2:	b289      	uxth	r1, r1
  400cf4:	4798      	blx	r3
  400cf6:	e7e0      	b.n	400cba <hif_handle_isr+0xf6>
						if(pfOtaCb)
  400cf8:	4b65      	ldr	r3, [pc, #404]	; (400e90 <hif_handle_isr+0x2cc>)
  400cfa:	681b      	ldr	r3, [r3, #0]
  400cfc:	2b00      	cmp	r3, #0
  400cfe:	d0dc      	beq.n	400cba <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400d00:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400d04:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400d08:	3908      	subs	r1, #8
  400d0a:	9a05      	ldr	r2, [sp, #20]
  400d0c:	3208      	adds	r2, #8
  400d0e:	b289      	uxth	r1, r1
  400d10:	4798      	blx	r3
  400d12:	e7d2      	b.n	400cba <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  400d14:	4b5f      	ldr	r3, [pc, #380]	; (400e94 <hif_handle_isr+0x2d0>)
  400d16:	681b      	ldr	r3, [r3, #0]
  400d18:	2b00      	cmp	r3, #0
  400d1a:	d0ce      	beq.n	400cba <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400d1c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400d20:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400d24:	3908      	subs	r1, #8
  400d26:	9a05      	ldr	r2, [sp, #20]
  400d28:	3208      	adds	r2, #8
  400d2a:	b289      	uxth	r1, r1
  400d2c:	4798      	blx	r3
  400d2e:	e7c4      	b.n	400cba <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  400d30:	4b59      	ldr	r3, [pc, #356]	; (400e98 <hif_handle_isr+0x2d4>)
  400d32:	681b      	ldr	r3, [r3, #0]
  400d34:	2b00      	cmp	r3, #0
  400d36:	d0c0      	beq.n	400cba <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400d38:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400d3c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400d40:	3908      	subs	r1, #8
  400d42:	9a05      	ldr	r2, [sp, #20]
  400d44:	3208      	adds	r2, #8
  400d46:	b289      	uxth	r1, r1
  400d48:	4798      	blx	r3
  400d4a:	e7b6      	b.n	400cba <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  400d4c:	f240 2211 	movw	r2, #529	; 0x211
  400d50:	4641      	mov	r1, r8
  400d52:	4630      	mov	r0, r6
  400d54:	4c43      	ldr	r4, [pc, #268]	; (400e64 <hif_handle_isr+0x2a0>)
  400d56:	47a0      	blx	r4
  400d58:	4850      	ldr	r0, [pc, #320]	; (400e9c <hif_handle_isr+0x2d8>)
  400d5a:	47a0      	blx	r4
  400d5c:	4843      	ldr	r0, [pc, #268]	; (400e6c <hif_handle_isr+0x2a8>)
  400d5e:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  400d60:	f06f 0401 	mvn.w	r4, #1
  400d64:	e02f      	b.n	400dc6 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  400d66:	f44f 7206 	mov.w	r2, #536	; 0x218
  400d6a:	4641      	mov	r1, r8
  400d6c:	4630      	mov	r0, r6
  400d6e:	4c3d      	ldr	r4, [pc, #244]	; (400e64 <hif_handle_isr+0x2a0>)
  400d70:	47a0      	blx	r4
  400d72:	9903      	ldr	r1, [sp, #12]
  400d74:	484a      	ldr	r0, [pc, #296]	; (400ea0 <hif_handle_isr+0x2dc>)
  400d76:	47a0      	blx	r4
  400d78:	483c      	ldr	r0, [pc, #240]	; (400e6c <hif_handle_isr+0x2a8>)
  400d7a:	47a0      	blx	r4
	ret = hif_chip_sleep();
  400d7c:	4b49      	ldr	r3, [pc, #292]	; (400ea4 <hif_handle_isr+0x2e0>)
  400d7e:	4798      	blx	r3
  400d80:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  400d82:	bb04      	cbnz	r4, 400dc6 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  400d84:	f899 3000 	ldrb.w	r3, [r9]
  400d88:	2b00      	cmp	r3, #0
  400d8a:	f000 809f 	beq.w	400ecc <hif_handle_isr+0x308>
		gu8Interrupt--;
  400d8e:	f899 3000 	ldrb.w	r3, [r9]
  400d92:	3b01      	subs	r3, #1
  400d94:	b2db      	uxtb	r3, r3
  400d96:	f889 3000 	strb.w	r3, [r9]
  400d9a:	e01f      	b.n	400ddc <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400d9c:	f240 221e 	movw	r2, #542	; 0x21e
  400da0:	4641      	mov	r1, r8
  400da2:	4630      	mov	r0, r6
  400da4:	4d2f      	ldr	r5, [pc, #188]	; (400e64 <hif_handle_isr+0x2a0>)
  400da6:	47a8      	blx	r5
  400da8:	483f      	ldr	r0, [pc, #252]	; (400ea8 <hif_handle_isr+0x2e4>)
  400daa:	47a8      	blx	r5
  400dac:	482f      	ldr	r0, [pc, #188]	; (400e6c <hif_handle_isr+0x2a8>)
  400dae:	47a8      	blx	r5
  400db0:	e009      	b.n	400dc6 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400db2:	f44f 7209 	mov.w	r2, #548	; 0x224
  400db6:	4641      	mov	r1, r8
  400db8:	4630      	mov	r0, r6
  400dba:	4d2a      	ldr	r5, [pc, #168]	; (400e64 <hif_handle_isr+0x2a0>)
  400dbc:	47a8      	blx	r5
  400dbe:	483b      	ldr	r0, [pc, #236]	; (400eac <hif_handle_isr+0x2e8>)
  400dc0:	47a8      	blx	r5
  400dc2:	482a      	ldr	r0, [pc, #168]	; (400e6c <hif_handle_isr+0x2a8>)
  400dc4:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400dc6:	f240 2243 	movw	r2, #579	; 0x243
  400dca:	4939      	ldr	r1, [pc, #228]	; (400eb0 <hif_handle_isr+0x2ec>)
  400dcc:	4630      	mov	r0, r6
  400dce:	4d25      	ldr	r5, [pc, #148]	; (400e64 <hif_handle_isr+0x2a0>)
  400dd0:	47a8      	blx	r5
  400dd2:	4621      	mov	r1, r4
  400dd4:	4837      	ldr	r0, [pc, #220]	; (400eb4 <hif_handle_isr+0x2f0>)
  400dd6:	47a8      	blx	r5
  400dd8:	4824      	ldr	r0, [pc, #144]	; (400e6c <hif_handle_isr+0x2a8>)
  400dda:	47a8      	blx	r5
	ret = hif_chip_wake();
  400ddc:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  400dde:	4604      	mov	r4, r0
  400de0:	2800      	cmp	r0, #0
  400de2:	d1e6      	bne.n	400db2 <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  400de4:	a903      	add	r1, sp, #12
  400de6:	f241 0070 	movw	r0, #4208	; 0x1070
  400dea:	4b33      	ldr	r3, [pc, #204]	; (400eb8 <hif_handle_isr+0x2f4>)
  400dec:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  400dee:	4604      	mov	r4, r0
  400df0:	2800      	cmp	r0, #0
  400df2:	d1d3      	bne.n	400d9c <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  400df4:	9b03      	ldr	r3, [sp, #12]
  400df6:	f013 0f01 	tst.w	r3, #1
  400dfa:	d0b4      	beq.n	400d66 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  400dfc:	4b1d      	ldr	r3, [pc, #116]	; (400e74 <hif_handle_isr+0x2b0>)
  400dfe:	4798      	blx	r3
				reg &= ~(1<<0);
  400e00:	9903      	ldr	r1, [sp, #12]
  400e02:	f021 0101 	bic.w	r1, r1, #1
  400e06:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  400e08:	f241 0070 	movw	r0, #4208	; 0x1070
  400e0c:	4b2b      	ldr	r3, [pc, #172]	; (400ebc <hif_handle_isr+0x2f8>)
  400e0e:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  400e10:	4604      	mov	r4, r0
  400e12:	2800      	cmp	r0, #0
  400e14:	d1d7      	bne.n	400dc6 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  400e16:	2200      	movs	r2, #0
  400e18:	4b19      	ldr	r3, [pc, #100]	; (400e80 <hif_handle_isr+0x2bc>)
  400e1a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  400e1c:	9d03      	ldr	r5, [sp, #12]
  400e1e:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  400e22:	2d00      	cmp	r5, #0
  400e24:	d092      	beq.n	400d4c <hif_handle_isr+0x188>
					uint32 address = 0;
  400e26:	a906      	add	r1, sp, #24
  400e28:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  400e2c:	f241 0084 	movw	r0, #4228	; 0x1084
  400e30:	4b21      	ldr	r3, [pc, #132]	; (400eb8 <hif_handle_isr+0x2f4>)
  400e32:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  400e34:	4604      	mov	r4, r0
  400e36:	2800      	cmp	r0, #0
  400e38:	f43f aece 	beq.w	400bd8 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  400e3c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  400e40:	4641      	mov	r1, r8
  400e42:	4630      	mov	r0, r6
  400e44:	4d07      	ldr	r5, [pc, #28]	; (400e64 <hif_handle_isr+0x2a0>)
  400e46:	47a8      	blx	r5
  400e48:	481d      	ldr	r0, [pc, #116]	; (400ec0 <hif_handle_isr+0x2fc>)
  400e4a:	47a8      	blx	r5
  400e4c:	4807      	ldr	r0, [pc, #28]	; (400e6c <hif_handle_isr+0x2a8>)
  400e4e:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400e50:	2001      	movs	r0, #1
  400e52:	4b08      	ldr	r3, [pc, #32]	; (400e74 <hif_handle_isr+0x2b0>)
  400e54:	4798      	blx	r3
  400e56:	e794      	b.n	400d82 <hif_handle_isr+0x1be>
  400e58:	004008fd 	.word	0x004008fd
  400e5c:	0040b0cc 	.word	0x0040b0cc
  400e60:	00401bc1 	.word	0x00401bc1
  400e64:	00404879 	.word	0x00404879
  400e68:	0040b1bc 	.word	0x0040b1bc
  400e6c:	0040b0f8 	.word	0x0040b0f8
  400e70:	0040b164 	.word	0x0040b164
  400e74:	00400615 	.word	0x00400615
  400e78:	0040b17c 	.word	0x0040b17c
  400e7c:	20400a04 	.word	0x20400a04
  400e80:	204009ee 	.word	0x204009ee
  400e84:	0040b1d4 	.word	0x0040b1d4
  400e88:	004008bd 	.word	0x004008bd
  400e8c:	204009f8 	.word	0x204009f8
  400e90:	204009fc 	.word	0x204009fc
  400e94:	204009f0 	.word	0x204009f0
  400e98:	20400a00 	.word	0x20400a00
  400e9c:	0040b1f8 	.word	0x0040b1f8
  400ea0:	0040b20c 	.word	0x0040b20c
  400ea4:	00400959 	.word	0x00400959
  400ea8:	0040b228 	.word	0x0040b228
  400eac:	0040b24c 	.word	0x0040b24c
  400eb0:	0040b110 	.word	0x0040b110
  400eb4:	0040b26c 	.word	0x0040b26c
  400eb8:	00401ba9 	.word	0x00401ba9
  400ebc:	00401bb5 	.word	0x00401bb5
  400ec0:	0040b13c 	.word	0x0040b13c
  400ec4:	204009ef 	.word	0x204009ef
  400ec8:	0040b108 	.word	0x0040b108
			}
		}
	}

	return ret;
}
  400ecc:	2000      	movs	r0, #0
  400ece:	b007      	add	sp, #28
  400ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00400ed4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  400ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400ed8:	b083      	sub	sp, #12
  400eda:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  400edc:	2a00      	cmp	r2, #0
  400ede:	bf18      	it	ne
  400ee0:	2900      	cmpne	r1, #0
  400ee2:	d003      	beq.n	400eec <hif_receive+0x18>
  400ee4:	4605      	mov	r5, r0
  400ee6:	460f      	mov	r7, r1
  400ee8:	4616      	mov	r6, r2
  400eea:	b9b8      	cbnz	r0, 400f1c <hif_receive+0x48>
	{
		if(isDone)
  400eec:	b14c      	cbz	r4, 400f02 <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  400eee:	2201      	movs	r2, #1
  400ef0:	4b32      	ldr	r3, [pc, #200]	; (400fbc <hif_receive+0xe8>)
  400ef2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  400ef4:	4b32      	ldr	r3, [pc, #200]	; (400fc0 <hif_receive+0xec>)
  400ef6:	4798      	blx	r3
  400ef8:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  400efa:	4618      	mov	r0, r3
  400efc:	b003      	add	sp, #12
  400efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  400f02:	f240 2269 	movw	r2, #617	; 0x269
  400f06:	492f      	ldr	r1, [pc, #188]	; (400fc4 <hif_receive+0xf0>)
  400f08:	482f      	ldr	r0, [pc, #188]	; (400fc8 <hif_receive+0xf4>)
  400f0a:	4c30      	ldr	r4, [pc, #192]	; (400fcc <hif_receive+0xf8>)
  400f0c:	47a0      	blx	r4
  400f0e:	4830      	ldr	r0, [pc, #192]	; (400fd0 <hif_receive+0xfc>)
  400f10:	47a0      	blx	r4
  400f12:	4830      	ldr	r0, [pc, #192]	; (400fd4 <hif_receive+0x100>)
  400f14:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  400f16:	f06f 030b 	mvn.w	r3, #11
  400f1a:	e7ee      	b.n	400efa <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400f1c:	4669      	mov	r1, sp
  400f1e:	f241 0070 	movw	r0, #4208	; 0x1070
  400f22:	4b2d      	ldr	r3, [pc, #180]	; (400fd8 <hif_receive+0x104>)
  400f24:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400f26:	4603      	mov	r3, r0
  400f28:	2800      	cmp	r0, #0
  400f2a:	d1e6      	bne.n	400efa <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  400f2c:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  400f30:	a901      	add	r1, sp, #4
  400f32:	f241 0084 	movw	r0, #4228	; 0x1084
  400f36:	4b28      	ldr	r3, [pc, #160]	; (400fd8 <hif_receive+0x104>)
  400f38:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400f3a:	4603      	mov	r3, r0
  400f3c:	2800      	cmp	r0, #0
  400f3e:	d1dc      	bne.n	400efa <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  400f40:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  400f44:	4546      	cmp	r6, r8
  400f46:	d81c      	bhi.n	400f82 <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  400f48:	9b01      	ldr	r3, [sp, #4]
  400f4a:	429d      	cmp	r5, r3
  400f4c:	d328      	bcc.n	400fa0 <hif_receive+0xcc>
  400f4e:	eb05 0906 	add.w	r9, r5, r6
  400f52:	4443      	add	r3, r8
  400f54:	4599      	cmp	r9, r3
  400f56:	d823      	bhi.n	400fa0 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  400f58:	4632      	mov	r2, r6
  400f5a:	4639      	mov	r1, r7
  400f5c:	4628      	mov	r0, r5
  400f5e:	4b1f      	ldr	r3, [pc, #124]	; (400fdc <hif_receive+0x108>)
  400f60:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400f62:	4603      	mov	r3, r0
  400f64:	2800      	cmp	r0, #0
  400f66:	d1c8      	bne.n	400efa <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  400f68:	9a01      	ldr	r2, [sp, #4]
  400f6a:	4490      	add	r8, r2
  400f6c:	45c8      	cmp	r8, r9
  400f6e:	d001      	beq.n	400f74 <hif_receive+0xa0>
  400f70:	2c00      	cmp	r4, #0
  400f72:	d0c2      	beq.n	400efa <hif_receive+0x26>
		gu8HifSizeDone = 1;
  400f74:	2201      	movs	r2, #1
  400f76:	4b11      	ldr	r3, [pc, #68]	; (400fbc <hif_receive+0xe8>)
  400f78:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  400f7a:	4b11      	ldr	r3, [pc, #68]	; (400fc0 <hif_receive+0xec>)
  400f7c:	4798      	blx	r3
  400f7e:	4603      	mov	r3, r0
  400f80:	e7bb      	b.n	400efa <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  400f82:	f240 227a 	movw	r2, #634	; 0x27a
  400f86:	490f      	ldr	r1, [pc, #60]	; (400fc4 <hif_receive+0xf0>)
  400f88:	480f      	ldr	r0, [pc, #60]	; (400fc8 <hif_receive+0xf4>)
  400f8a:	4c10      	ldr	r4, [pc, #64]	; (400fcc <hif_receive+0xf8>)
  400f8c:	47a0      	blx	r4
  400f8e:	4642      	mov	r2, r8
  400f90:	4631      	mov	r1, r6
  400f92:	4813      	ldr	r0, [pc, #76]	; (400fe0 <hif_receive+0x10c>)
  400f94:	47a0      	blx	r4
  400f96:	480f      	ldr	r0, [pc, #60]	; (400fd4 <hif_receive+0x100>)
  400f98:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  400f9a:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  400f9e:	e7ac      	b.n	400efa <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  400fa0:	f44f 7220 	mov.w	r2, #640	; 0x280
  400fa4:	4907      	ldr	r1, [pc, #28]	; (400fc4 <hif_receive+0xf0>)
  400fa6:	4808      	ldr	r0, [pc, #32]	; (400fc8 <hif_receive+0xf4>)
  400fa8:	4c08      	ldr	r4, [pc, #32]	; (400fcc <hif_receive+0xf8>)
  400faa:	47a0      	blx	r4
  400fac:	480d      	ldr	r0, [pc, #52]	; (400fe4 <hif_receive+0x110>)
  400fae:	47a0      	blx	r4
  400fb0:	4808      	ldr	r0, [pc, #32]	; (400fd4 <hif_receive+0x100>)
  400fb2:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  400fb4:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  400fb8:	e79f      	b.n	400efa <hif_receive+0x26>
  400fba:	bf00      	nop
  400fbc:	204009ee 	.word	0x204009ee
  400fc0:	004008bd 	.word	0x004008bd
  400fc4:	0040b120 	.word	0x0040b120
  400fc8:	0040b0cc 	.word	0x0040b0cc
  400fcc:	00404879 	.word	0x00404879
  400fd0:	0040b29c 	.word	0x0040b29c
  400fd4:	0040b0f8 	.word	0x0040b0f8
  400fd8:	00401ba9 	.word	0x00401ba9
  400fdc:	00401bc1 	.word	0x00401bc1
  400fe0:	0040b2bc 	.word	0x0040b2bc
  400fe4:	0040b300 	.word	0x0040b300

00400fe8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  400fe8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  400fea:	1e43      	subs	r3, r0, #1
  400fec:	2b06      	cmp	r3, #6
  400fee:	d81d      	bhi.n	40102c <hif_register_cb+0x44>
  400ff0:	e8df f003 	tbb	[pc, r3]
  400ff4:	0c100408 	.word	0x0c100408
  400ff8:	141c      	.short	0x141c
  400ffa:	18          	.byte	0x18
  400ffb:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  400ffc:	4b13      	ldr	r3, [pc, #76]	; (40104c <hif_register_cb+0x64>)
  400ffe:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401000:	2000      	movs	r0, #0
			break;
  401002:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  401004:	4b12      	ldr	r3, [pc, #72]	; (401050 <hif_register_cb+0x68>)
  401006:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401008:	2000      	movs	r0, #0
			break;
  40100a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  40100c:	4b11      	ldr	r3, [pc, #68]	; (401054 <hif_register_cb+0x6c>)
  40100e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401010:	2000      	movs	r0, #0
			break;
  401012:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  401014:	4b10      	ldr	r3, [pc, #64]	; (401058 <hif_register_cb+0x70>)
  401016:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401018:	2000      	movs	r0, #0
			break;
  40101a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  40101c:	4b0f      	ldr	r3, [pc, #60]	; (40105c <hif_register_cb+0x74>)
  40101e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401020:	2000      	movs	r0, #0
			break;
  401022:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  401024:	4b0e      	ldr	r3, [pc, #56]	; (401060 <hif_register_cb+0x78>)
  401026:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401028:	2000      	movs	r0, #0
			break;
  40102a:	bd38      	pop	{r3, r4, r5, pc}
  40102c:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  40102e:	f240 22b9 	movw	r2, #697	; 0x2b9
  401032:	490c      	ldr	r1, [pc, #48]	; (401064 <hif_register_cb+0x7c>)
  401034:	480c      	ldr	r0, [pc, #48]	; (401068 <hif_register_cb+0x80>)
  401036:	4d0d      	ldr	r5, [pc, #52]	; (40106c <hif_register_cb+0x84>)
  401038:	47a8      	blx	r5
  40103a:	4621      	mov	r1, r4
  40103c:	480c      	ldr	r0, [pc, #48]	; (401070 <hif_register_cb+0x88>)
  40103e:	47a8      	blx	r5
  401040:	480c      	ldr	r0, [pc, #48]	; (401074 <hif_register_cb+0x8c>)
  401042:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  401044:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  401048:	bd38      	pop	{r3, r4, r5, pc}
  40104a:	bf00      	nop
  40104c:	204009f8 	.word	0x204009f8
  401050:	20400a04 	.word	0x20400a04
  401054:	204009fc 	.word	0x204009fc
  401058:	204009f4 	.word	0x204009f4
  40105c:	204009f0 	.word	0x204009f0
  401060:	20400a00 	.word	0x20400a00
  401064:	0040b12c 	.word	0x0040b12c
  401068:	0040b0cc 	.word	0x0040b0cc
  40106c:	00404879 	.word	0x00404879
  401070:	0040b344 	.word	0x0040b344
  401074:	0040b0f8 	.word	0x0040b0f8

00401078 <hif_init>:
{
  401078:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  40107a:	2400      	movs	r4, #0
  40107c:	4b09      	ldr	r3, [pc, #36]	; (4010a4 <hif_init+0x2c>)
  40107e:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  401080:	4b09      	ldr	r3, [pc, #36]	; (4010a8 <hif_init+0x30>)
  401082:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  401084:	4b09      	ldr	r3, [pc, #36]	; (4010ac <hif_init+0x34>)
  401086:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  401088:	4b09      	ldr	r3, [pc, #36]	; (4010b0 <hif_init+0x38>)
  40108a:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  40108c:	4b09      	ldr	r3, [pc, #36]	; (4010b4 <hif_init+0x3c>)
  40108e:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  401090:	4809      	ldr	r0, [pc, #36]	; (4010b8 <hif_init+0x40>)
  401092:	4b0a      	ldr	r3, [pc, #40]	; (4010bc <hif_init+0x44>)
  401094:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  401096:	490a      	ldr	r1, [pc, #40]	; (4010c0 <hif_init+0x48>)
  401098:	2003      	movs	r0, #3
  40109a:	4b0a      	ldr	r3, [pc, #40]	; (4010c4 <hif_init+0x4c>)
  40109c:	4798      	blx	r3
}
  40109e:	4620      	mov	r0, r4
  4010a0:	bd10      	pop	{r4, pc}
  4010a2:	bf00      	nop
  4010a4:	20400a04 	.word	0x20400a04
  4010a8:	204009f8 	.word	0x204009f8
  4010ac:	204009ed 	.word	0x204009ed
  4010b0:	204009ec 	.word	0x204009ec
  4010b4:	204009ef 	.word	0x204009ef
  4010b8:	004008a9 	.word	0x004008a9
  4010bc:	00400595 	.word	0x00400595
  4010c0:	004008b9 	.word	0x004008b9
  4010c4:	00400fe9 	.word	0x00400fe9

004010c8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4010c8:	b530      	push	{r4, r5, lr}
  4010ca:	b09f      	sub	sp, #124	; 0x7c
  4010cc:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  4010ce:	282c      	cmp	r0, #44	; 0x2c
  4010d0:	d02e      	beq.n	401130 <m2m_wifi_cb+0x68>
  4010d2:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  4010d4:	281b      	cmp	r0, #27
  4010d6:	d03b      	beq.n	401150 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  4010d8:	2806      	cmp	r0, #6
  4010da:	d049      	beq.n	401170 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  4010dc:	280e      	cmp	r0, #14
  4010de:	d025      	beq.n	40112c <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  4010e0:	2832      	cmp	r0, #50	; 0x32
  4010e2:	d055      	beq.n	401190 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  4010e4:	282f      	cmp	r0, #47	; 0x2f
  4010e6:	d063      	beq.n	4011b0 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  4010e8:	2834      	cmp	r0, #52	; 0x34
  4010ea:	d076      	beq.n	4011da <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  4010ec:	2811      	cmp	r0, #17
  4010ee:	f000 8093 	beq.w	401218 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  4010f2:	2813      	cmp	r0, #19
  4010f4:	f000 80a8 	beq.w	401248 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  4010f8:	2804      	cmp	r0, #4
  4010fa:	f000 80b7 	beq.w	40126c <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  4010fe:	2865      	cmp	r0, #101	; 0x65
  401100:	f000 80c6 	beq.w	401290 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  401104:	2809      	cmp	r0, #9
  401106:	f000 80d5 	beq.w	4012b4 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  40110a:	282a      	cmp	r0, #42	; 0x2a
  40110c:	f000 80e4 	beq.w	4012d8 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  401110:	2820      	cmp	r0, #32
  401112:	f000 80f3 	beq.w	4012fc <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  401116:	f44f 7295 	mov.w	r2, #298	; 0x12a
  40111a:	4986      	ldr	r1, [pc, #536]	; (401334 <m2m_wifi_cb+0x26c>)
  40111c:	4886      	ldr	r0, [pc, #536]	; (401338 <m2m_wifi_cb+0x270>)
  40111e:	4d87      	ldr	r5, [pc, #540]	; (40133c <m2m_wifi_cb+0x274>)
  401120:	47a8      	blx	r5
  401122:	4621      	mov	r1, r4
  401124:	4886      	ldr	r0, [pc, #536]	; (401340 <m2m_wifi_cb+0x278>)
  401126:	47a8      	blx	r5
  401128:	4886      	ldr	r0, [pc, #536]	; (401344 <m2m_wifi_cb+0x27c>)
  40112a:	47a8      	blx	r5
	}
}
  40112c:	b01f      	add	sp, #124	; 0x7c
  40112e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  401130:	2300      	movs	r3, #0
  401132:	2204      	movs	r2, #4
  401134:	a903      	add	r1, sp, #12
  401136:	4628      	mov	r0, r5
  401138:	4c83      	ldr	r4, [pc, #524]	; (401348 <m2m_wifi_cb+0x280>)
  40113a:	47a0      	blx	r4
  40113c:	2800      	cmp	r0, #0
  40113e:	d1f5      	bne.n	40112c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401140:	4b82      	ldr	r3, [pc, #520]	; (40134c <m2m_wifi_cb+0x284>)
  401142:	681b      	ldr	r3, [r3, #0]
  401144:	2b00      	cmp	r3, #0
  401146:	d0f1      	beq.n	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  401148:	a903      	add	r1, sp, #12
  40114a:	202c      	movs	r0, #44	; 0x2c
  40114c:	4798      	blx	r3
  40114e:	e7ed      	b.n	40112c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  401150:	2300      	movs	r3, #0
  401152:	2208      	movs	r2, #8
  401154:	a903      	add	r1, sp, #12
  401156:	4628      	mov	r0, r5
  401158:	4c7b      	ldr	r4, [pc, #492]	; (401348 <m2m_wifi_cb+0x280>)
  40115a:	47a0      	blx	r4
  40115c:	2800      	cmp	r0, #0
  40115e:	d1e5      	bne.n	40112c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401160:	4b7a      	ldr	r3, [pc, #488]	; (40134c <m2m_wifi_cb+0x284>)
  401162:	681b      	ldr	r3, [r3, #0]
  401164:	2b00      	cmp	r3, #0
  401166:	d0e1      	beq.n	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401168:	a903      	add	r1, sp, #12
  40116a:	201b      	movs	r0, #27
  40116c:	4798      	blx	r3
  40116e:	e7dd      	b.n	40112c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  401170:	2301      	movs	r3, #1
  401172:	2230      	movs	r2, #48	; 0x30
  401174:	a903      	add	r1, sp, #12
  401176:	4628      	mov	r0, r5
  401178:	4c73      	ldr	r4, [pc, #460]	; (401348 <m2m_wifi_cb+0x280>)
  40117a:	47a0      	blx	r4
  40117c:	2800      	cmp	r0, #0
  40117e:	d1d5      	bne.n	40112c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  401180:	4b72      	ldr	r3, [pc, #456]	; (40134c <m2m_wifi_cb+0x284>)
  401182:	681b      	ldr	r3, [r3, #0]
  401184:	2b00      	cmp	r3, #0
  401186:	d0d1      	beq.n	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  401188:	a903      	add	r1, sp, #12
  40118a:	2006      	movs	r0, #6
  40118c:	4798      	blx	r3
  40118e:	e7cd      	b.n	40112c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  401190:	2300      	movs	r3, #0
  401192:	2210      	movs	r2, #16
  401194:	a903      	add	r1, sp, #12
  401196:	4628      	mov	r0, r5
  401198:	4c6b      	ldr	r4, [pc, #428]	; (401348 <m2m_wifi_cb+0x280>)
  40119a:	47a0      	blx	r4
  40119c:	2800      	cmp	r0, #0
  40119e:	d1c5      	bne.n	40112c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4011a0:	4b6a      	ldr	r3, [pc, #424]	; (40134c <m2m_wifi_cb+0x284>)
  4011a2:	681b      	ldr	r3, [r3, #0]
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	d0c1      	beq.n	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  4011a8:	a903      	add	r1, sp, #12
  4011aa:	2032      	movs	r0, #50	; 0x32
  4011ac:	4798      	blx	r3
  4011ae:	e7bd      	b.n	40112c <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  4011b0:	2264      	movs	r2, #100	; 0x64
  4011b2:	2100      	movs	r1, #0
  4011b4:	a803      	add	r0, sp, #12
  4011b6:	4b66      	ldr	r3, [pc, #408]	; (401350 <m2m_wifi_cb+0x288>)
  4011b8:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  4011ba:	2300      	movs	r3, #0
  4011bc:	2264      	movs	r2, #100	; 0x64
  4011be:	a903      	add	r1, sp, #12
  4011c0:	4628      	mov	r0, r5
  4011c2:	4c61      	ldr	r4, [pc, #388]	; (401348 <m2m_wifi_cb+0x280>)
  4011c4:	47a0      	blx	r4
  4011c6:	2800      	cmp	r0, #0
  4011c8:	d1b0      	bne.n	40112c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4011ca:	4b60      	ldr	r3, [pc, #384]	; (40134c <m2m_wifi_cb+0x284>)
  4011cc:	681b      	ldr	r3, [r3, #0]
  4011ce:	2b00      	cmp	r3, #0
  4011d0:	d0ac      	beq.n	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  4011d2:	a903      	add	r1, sp, #12
  4011d4:	202f      	movs	r0, #47	; 0x2f
  4011d6:	4798      	blx	r3
  4011d8:	e7a8      	b.n	40112c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  4011da:	2300      	movs	r3, #0
  4011dc:	2204      	movs	r2, #4
  4011de:	a903      	add	r1, sp, #12
  4011e0:	4628      	mov	r0, r5
  4011e2:	4c59      	ldr	r4, [pc, #356]	; (401348 <m2m_wifi_cb+0x280>)
  4011e4:	47a0      	blx	r4
  4011e6:	2800      	cmp	r0, #0
  4011e8:	d1a0      	bne.n	40112c <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  4011ea:	485a      	ldr	r0, [pc, #360]	; (401354 <m2m_wifi_cb+0x28c>)
  4011ec:	4c53      	ldr	r4, [pc, #332]	; (40133c <m2m_wifi_cb+0x274>)
  4011ee:	47a0      	blx	r4
  4011f0:	9903      	ldr	r1, [sp, #12]
  4011f2:	b2cb      	uxtb	r3, r1
  4011f4:	9300      	str	r3, [sp, #0]
  4011f6:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4011fa:	f3c1 4207 	ubfx	r2, r1, #16, #8
  4011fe:	0e09      	lsrs	r1, r1, #24
  401200:	4855      	ldr	r0, [pc, #340]	; (401358 <m2m_wifi_cb+0x290>)
  401202:	47a0      	blx	r4
  401204:	484f      	ldr	r0, [pc, #316]	; (401344 <m2m_wifi_cb+0x27c>)
  401206:	47a0      	blx	r4
			if (gpfAppWifiCb)
  401208:	4b50      	ldr	r3, [pc, #320]	; (40134c <m2m_wifi_cb+0x284>)
  40120a:	681b      	ldr	r3, [r3, #0]
  40120c:	2b00      	cmp	r3, #0
  40120e:	d08d      	beq.n	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  401210:	2100      	movs	r1, #0
  401212:	2034      	movs	r0, #52	; 0x34
  401214:	4798      	blx	r3
  401216:	e789      	b.n	40112c <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  401218:	2300      	movs	r3, #0
  40121a:	4a50      	ldr	r2, [pc, #320]	; (40135c <m2m_wifi_cb+0x294>)
  40121c:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  40121e:	2204      	movs	r2, #4
  401220:	a903      	add	r1, sp, #12
  401222:	4628      	mov	r0, r5
  401224:	4c48      	ldr	r4, [pc, #288]	; (401348 <m2m_wifi_cb+0x280>)
  401226:	47a0      	blx	r4
  401228:	2800      	cmp	r0, #0
  40122a:	f47f af7f 	bne.w	40112c <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  40122e:	f89d 200c 	ldrb.w	r2, [sp, #12]
  401232:	4b4b      	ldr	r3, [pc, #300]	; (401360 <m2m_wifi_cb+0x298>)
  401234:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  401236:	4b45      	ldr	r3, [pc, #276]	; (40134c <m2m_wifi_cb+0x284>)
  401238:	681b      	ldr	r3, [r3, #0]
  40123a:	2b00      	cmp	r3, #0
  40123c:	f43f af76 	beq.w	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  401240:	a903      	add	r1, sp, #12
  401242:	2011      	movs	r0, #17
  401244:	4798      	blx	r3
  401246:	e771      	b.n	40112c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  401248:	2300      	movs	r3, #0
  40124a:	222c      	movs	r2, #44	; 0x2c
  40124c:	a903      	add	r1, sp, #12
  40124e:	4628      	mov	r0, r5
  401250:	4c3d      	ldr	r4, [pc, #244]	; (401348 <m2m_wifi_cb+0x280>)
  401252:	47a0      	blx	r4
  401254:	2800      	cmp	r0, #0
  401256:	f47f af69 	bne.w	40112c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40125a:	4b3c      	ldr	r3, [pc, #240]	; (40134c <m2m_wifi_cb+0x284>)
  40125c:	681b      	ldr	r3, [r3, #0]
  40125e:	2b00      	cmp	r3, #0
  401260:	f43f af64 	beq.w	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  401264:	a903      	add	r1, sp, #12
  401266:	2013      	movs	r0, #19
  401268:	4798      	blx	r3
  40126a:	e75f      	b.n	40112c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  40126c:	2300      	movs	r3, #0
  40126e:	2204      	movs	r2, #4
  401270:	a91c      	add	r1, sp, #112	; 0x70
  401272:	4628      	mov	r0, r5
  401274:	4c34      	ldr	r4, [pc, #208]	; (401348 <m2m_wifi_cb+0x280>)
  401276:	47a0      	blx	r4
  401278:	2800      	cmp	r0, #0
  40127a:	f47f af57 	bne.w	40112c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40127e:	4b33      	ldr	r3, [pc, #204]	; (40134c <m2m_wifi_cb+0x284>)
  401280:	681b      	ldr	r3, [r3, #0]
  401282:	2b00      	cmp	r3, #0
  401284:	f43f af52 	beq.w	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  401288:	a91c      	add	r1, sp, #112	; 0x70
  40128a:	2004      	movs	r0, #4
  40128c:	4798      	blx	r3
  40128e:	e74d      	b.n	40112c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401290:	2300      	movs	r3, #0
  401292:	2204      	movs	r2, #4
  401294:	a91c      	add	r1, sp, #112	; 0x70
  401296:	4628      	mov	r0, r5
  401298:	4c2b      	ldr	r4, [pc, #172]	; (401348 <m2m_wifi_cb+0x280>)
  40129a:	47a0      	blx	r4
  40129c:	2800      	cmp	r0, #0
  40129e:	f47f af45 	bne.w	40112c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4012a2:	4b2a      	ldr	r3, [pc, #168]	; (40134c <m2m_wifi_cb+0x284>)
  4012a4:	681b      	ldr	r3, [r3, #0]
  4012a6:	2b00      	cmp	r3, #0
  4012a8:	f43f af40 	beq.w	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  4012ac:	a91c      	add	r1, sp, #112	; 0x70
  4012ae:	2065      	movs	r0, #101	; 0x65
  4012b0:	4798      	blx	r3
  4012b2:	e73b      	b.n	40112c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  4012b4:	2301      	movs	r3, #1
  4012b6:	2264      	movs	r2, #100	; 0x64
  4012b8:	a903      	add	r1, sp, #12
  4012ba:	4628      	mov	r0, r5
  4012bc:	4c22      	ldr	r4, [pc, #136]	; (401348 <m2m_wifi_cb+0x280>)
  4012be:	47a0      	blx	r4
  4012c0:	2800      	cmp	r0, #0
  4012c2:	f47f af33 	bne.w	40112c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  4012c6:	4b21      	ldr	r3, [pc, #132]	; (40134c <m2m_wifi_cb+0x284>)
  4012c8:	681b      	ldr	r3, [r3, #0]
  4012ca:	2b00      	cmp	r3, #0
  4012cc:	f43f af2e 	beq.w	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  4012d0:	a903      	add	r1, sp, #12
  4012d2:	2009      	movs	r0, #9
  4012d4:	4798      	blx	r3
  4012d6:	e729      	b.n	40112c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  4012d8:	2301      	movs	r3, #1
  4012da:	2204      	movs	r2, #4
  4012dc:	a903      	add	r1, sp, #12
  4012de:	4628      	mov	r0, r5
  4012e0:	4c19      	ldr	r4, [pc, #100]	; (401348 <m2m_wifi_cb+0x280>)
  4012e2:	47a0      	blx	r4
  4012e4:	2800      	cmp	r0, #0
  4012e6:	f47f af21 	bne.w	40112c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  4012ea:	4b18      	ldr	r3, [pc, #96]	; (40134c <m2m_wifi_cb+0x284>)
  4012ec:	681b      	ldr	r3, [r3, #0]
  4012ee:	2b00      	cmp	r3, #0
  4012f0:	f43f af1c 	beq.w	40112c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  4012f4:	a903      	add	r1, sp, #12
  4012f6:	202a      	movs	r0, #42	; 0x2a
  4012f8:	4798      	blx	r3
  4012fa:	e717      	b.n	40112c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  4012fc:	2300      	movs	r3, #0
  4012fe:	2208      	movs	r2, #8
  401300:	a903      	add	r1, sp, #12
  401302:	4628      	mov	r0, r5
  401304:	4c10      	ldr	r4, [pc, #64]	; (401348 <m2m_wifi_cb+0x280>)
  401306:	47a0      	blx	r4
  401308:	2800      	cmp	r0, #0
  40130a:	f47f af0f 	bne.w	40112c <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  40130e:	2301      	movs	r3, #1
  401310:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401314:	9903      	ldr	r1, [sp, #12]
  401316:	f105 0008 	add.w	r0, r5, #8
  40131a:	47a0      	blx	r4
  40131c:	2800      	cmp	r0, #0
  40131e:	f47f af05 	bne.w	40112c <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  401322:	4b0a      	ldr	r3, [pc, #40]	; (40134c <m2m_wifi_cb+0x284>)
  401324:	681b      	ldr	r3, [r3, #0]
  401326:	2b00      	cmp	r3, #0
  401328:	f43f af00 	beq.w	40112c <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  40132c:	a903      	add	r1, sp, #12
  40132e:	2020      	movs	r0, #32
  401330:	4798      	blx	r3
  401332:	e6fb      	b.n	40112c <m2m_wifi_cb+0x64>
  401334:	0040b370 	.word	0x0040b370
  401338:	0040b0cc 	.word	0x0040b0cc
  40133c:	00404879 	.word	0x00404879
  401340:	0040b3cc 	.word	0x0040b3cc
  401344:	0040b0f8 	.word	0x0040b0f8
  401348:	00400ed5 	.word	0x00400ed5
  40134c:	20400a08 	.word	0x20400a08
  401350:	00400881 	.word	0x00400881
  401354:	0040b3a0 	.word	0x0040b3a0
  401358:	0040b3ac 	.word	0x0040b3ac
  40135c:	20400a0d 	.word	0x20400a0d
  401360:	20400a0c 	.word	0x20400a0c

00401364 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401364:	b5f0      	push	{r4, r5, r6, r7, lr}
  401366:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  401368:	2301      	movs	r3, #1
  40136a:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  40136e:	2800      	cmp	r0, #0
  401370:	d050      	beq.n	401414 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401372:	6802      	ldr	r2, [r0, #0]
  401374:	4b29      	ldr	r3, [pc, #164]	; (40141c <m2m_wifi_init+0xb8>)
  401376:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  401378:	2200      	movs	r2, #0
  40137a:	4b29      	ldr	r3, [pc, #164]	; (401420 <m2m_wifi_init+0xbc>)
  40137c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  40137e:	f10d 0007 	add.w	r0, sp, #7
  401382:	4b28      	ldr	r3, [pc, #160]	; (401424 <m2m_wifi_init+0xc0>)
  401384:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401386:	4604      	mov	r4, r0
  401388:	b110      	cbz	r0, 401390 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40138a:	4620      	mov	r0, r4
  40138c:	b00b      	add	sp, #44	; 0x2c
  40138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  401390:	4b25      	ldr	r3, [pc, #148]	; (401428 <m2m_wifi_init+0xc4>)
  401392:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401394:	4604      	mov	r4, r0
  401396:	2800      	cmp	r0, #0
  401398:	d138      	bne.n	40140c <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40139a:	4924      	ldr	r1, [pc, #144]	; (40142c <m2m_wifi_init+0xc8>)
  40139c:	2001      	movs	r0, #1
  40139e:	4b24      	ldr	r3, [pc, #144]	; (401430 <m2m_wifi_init+0xcc>)
  4013a0:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  4013a2:	a802      	add	r0, sp, #8
  4013a4:	4b23      	ldr	r3, [pc, #140]	; (401434 <m2m_wifi_init+0xd0>)
  4013a6:	4798      	blx	r3
  4013a8:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  4013aa:	4f23      	ldr	r7, [pc, #140]	; (401438 <m2m_wifi_init+0xd4>)
  4013ac:	4638      	mov	r0, r7
  4013ae:	4d23      	ldr	r5, [pc, #140]	; (40143c <m2m_wifi_init+0xd8>)
  4013b0:	47a8      	blx	r5
  4013b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4013b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
  4013ba:	f89d 100c 	ldrb.w	r1, [sp, #12]
  4013be:	4820      	ldr	r0, [pc, #128]	; (401440 <m2m_wifi_init+0xdc>)
  4013c0:	47a8      	blx	r5
  4013c2:	4e20      	ldr	r6, [pc, #128]	; (401444 <m2m_wifi_init+0xe0>)
  4013c4:	4630      	mov	r0, r6
  4013c6:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  4013c8:	4638      	mov	r0, r7
  4013ca:	47a8      	blx	r5
  4013cc:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4013d0:	f89d 2010 	ldrb.w	r2, [sp, #16]
  4013d4:	f89d 100f 	ldrb.w	r1, [sp, #15]
  4013d8:	481b      	ldr	r0, [pc, #108]	; (401448 <m2m_wifi_init+0xe4>)
  4013da:	47a8      	blx	r5
  4013dc:	4630      	mov	r0, r6
  4013de:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4013e0:	4638      	mov	r0, r7
  4013e2:	47a8      	blx	r5
  4013e4:	2300      	movs	r3, #0
  4013e6:	2203      	movs	r2, #3
  4013e8:	2113      	movs	r1, #19
  4013ea:	4818      	ldr	r0, [pc, #96]	; (40144c <m2m_wifi_init+0xe8>)
  4013ec:	47a8      	blx	r5
  4013ee:	4630      	mov	r0, r6
  4013f0:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4013f2:	f114 0f0d 	cmn.w	r4, #13
  4013f6:	d1c8      	bne.n	40138a <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  4013f8:	f240 12d5 	movw	r2, #469	; 0x1d5
  4013fc:	4914      	ldr	r1, [pc, #80]	; (401450 <m2m_wifi_init+0xec>)
  4013fe:	4815      	ldr	r0, [pc, #84]	; (401454 <m2m_wifi_init+0xf0>)
  401400:	47a8      	blx	r5
  401402:	4815      	ldr	r0, [pc, #84]	; (401458 <m2m_wifi_init+0xf4>)
  401404:	47a8      	blx	r5
  401406:	4630      	mov	r0, r6
  401408:	47a8      	blx	r5
  40140a:	e7be      	b.n	40138a <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  40140c:	2000      	movs	r0, #0
  40140e:	4b13      	ldr	r3, [pc, #76]	; (40145c <m2m_wifi_init+0xf8>)
  401410:	4798      	blx	r3
  401412:	e7ba      	b.n	40138a <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  401414:	f06f 040b 	mvn.w	r4, #11
  401418:	e7b7      	b.n	40138a <m2m_wifi_init+0x26>
  40141a:	bf00      	nop
  40141c:	20400a08 	.word	0x20400a08
  401420:	20400a0d 	.word	0x20400a0d
  401424:	00401d29 	.word	0x00401d29
  401428:	00401079 	.word	0x00401079
  40142c:	004010c9 	.word	0x004010c9
  401430:	00400fe9 	.word	0x00400fe9
  401434:	00401c79 	.word	0x00401c79
  401438:	0040b3a0 	.word	0x0040b3a0
  40143c:	00404879 	.word	0x00404879
  401440:	0040b48c 	.word	0x0040b48c
  401444:	0040b0f8 	.word	0x0040b0f8
  401448:	0040b4a8 	.word	0x0040b4a8
  40144c:	0040b4c4 	.word	0x0040b4c4
  401450:	0040b37c 	.word	0x0040b37c
  401454:	0040b0cc 	.word	0x0040b0cc
  401458:	0040b4e0 	.word	0x0040b4e0
  40145c:	00401df5 	.word	0x00401df5

00401460 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  401460:	b508      	push	{r3, lr}
	return hif_handle_isr();
  401462:	4b01      	ldr	r3, [pc, #4]	; (401468 <m2m_wifi_handle_events+0x8>)
  401464:	4798      	blx	r3
}
  401466:	bd08      	pop	{r3, pc}
  401468:	00400bc5 	.word	0x00400bc5

0040146c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  40146c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401470:	b0a0      	sub	sp, #128	; 0x80
  401472:	4680      	mov	r8, r0
  401474:	460d      	mov	r5, r1
  401476:	4614      	mov	r4, r2
  401478:	461e      	mov	r6, r3
  40147a:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  40147e:	2a01      	cmp	r2, #1
  401480:	d003      	beq.n	40148a <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  401482:	2b00      	cmp	r3, #0
  401484:	d037      	beq.n	4014f6 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401486:	2a02      	cmp	r2, #2
  401488:	d042      	beq.n	401510 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40148a:	1e6b      	subs	r3, r5, #1
  40148c:	b2db      	uxtb	r3, r3
  40148e:	2b1f      	cmp	r3, #31
  401490:	d875      	bhi.n	40157e <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  401492:	2fff      	cmp	r7, #255	; 0xff
  401494:	d001      	beq.n	40149a <m2m_wifi_connect_sc+0x2e>
  401496:	2f0d      	cmp	r7, #13
  401498:	d87e      	bhi.n	401598 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  40149a:	462a      	mov	r2, r5
  40149c:	4641      	mov	r1, r8
  40149e:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4014a2:	4b77      	ldr	r3, [pc, #476]	; (401680 <m2m_wifi_connect_sc+0x214>)
  4014a4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4014a6:	ab20      	add	r3, sp, #128	; 0x80
  4014a8:	441d      	add	r5, r3
  4014aa:	2300      	movs	r3, #0
  4014ac:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4014b0:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4014b4:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4014b8:	3300      	adds	r3, #0
  4014ba:	bf18      	it	ne
  4014bc:	2301      	movne	r3, #1
  4014be:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4014c2:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4014c6:	2c03      	cmp	r4, #3
  4014c8:	d073      	beq.n	4015b2 <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4014ca:	2c02      	cmp	r4, #2
  4014cc:	f000 80aa 	beq.w	401624 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4014d0:	2c04      	cmp	r4, #4
  4014d2:	f000 80c1 	beq.w	401658 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4014d6:	2c01      	cmp	r4, #1
  4014d8:	f040 80c4 	bne.w	401664 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4014dc:	2300      	movs	r3, #0
  4014de:	9302      	str	r3, [sp, #8]
  4014e0:	9301      	str	r3, [sp, #4]
  4014e2:	9300      	str	r3, [sp, #0]
  4014e4:	236c      	movs	r3, #108	; 0x6c
  4014e6:	aa05      	add	r2, sp, #20
  4014e8:	2128      	movs	r1, #40	; 0x28
  4014ea:	2001      	movs	r0, #1
  4014ec:	4c65      	ldr	r4, [pc, #404]	; (401684 <m2m_wifi_connect_sc+0x218>)
  4014ee:	47a0      	blx	r4

ERR1:
	return ret;
}
  4014f0:	b020      	add	sp, #128	; 0x80
  4014f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  4014f6:	f240 2203 	movw	r2, #515	; 0x203
  4014fa:	4963      	ldr	r1, [pc, #396]	; (401688 <m2m_wifi_connect_sc+0x21c>)
  4014fc:	4863      	ldr	r0, [pc, #396]	; (40168c <m2m_wifi_connect_sc+0x220>)
  4014fe:	4c64      	ldr	r4, [pc, #400]	; (401690 <m2m_wifi_connect_sc+0x224>)
  401500:	47a0      	blx	r4
  401502:	4864      	ldr	r0, [pc, #400]	; (401694 <m2m_wifi_connect_sc+0x228>)
  401504:	47a0      	blx	r4
  401506:	4864      	ldr	r0, [pc, #400]	; (401698 <m2m_wifi_connect_sc+0x22c>)
  401508:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40150a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40150e:	e7ef      	b.n	4014f0 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401510:	4618      	mov	r0, r3
  401512:	4b62      	ldr	r3, [pc, #392]	; (40169c <m2m_wifi_connect_sc+0x230>)
  401514:	4798      	blx	r3
  401516:	2840      	cmp	r0, #64	; 0x40
  401518:	d1b7      	bne.n	40148a <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  40151a:	7833      	ldrb	r3, [r6, #0]
  40151c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401520:	b2d2      	uxtb	r2, r2
  401522:	2a06      	cmp	r2, #6
  401524:	d91e      	bls.n	401564 <m2m_wifi_connect_sc+0xf8>
  401526:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40152a:	b2d2      	uxtb	r2, r2
  40152c:	2a36      	cmp	r2, #54	; 0x36
  40152e:	d819      	bhi.n	401564 <m2m_wifi_connect_sc+0xf8>
  401530:	3b47      	subs	r3, #71	; 0x47
  401532:	b2db      	uxtb	r3, r3
  401534:	2b19      	cmp	r3, #25
  401536:	d915      	bls.n	401564 <m2m_wifi_connect_sc+0xf8>
  401538:	4631      	mov	r1, r6
  40153a:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  40153e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  401542:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401546:	b2d2      	uxtb	r2, r2
  401548:	2a06      	cmp	r2, #6
  40154a:	d90b      	bls.n	401564 <m2m_wifi_connect_sc+0xf8>
  40154c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401550:	b2d2      	uxtb	r2, r2
  401552:	2a36      	cmp	r2, #54	; 0x36
  401554:	d806      	bhi.n	401564 <m2m_wifi_connect_sc+0xf8>
  401556:	3b47      	subs	r3, #71	; 0x47
  401558:	b2db      	uxtb	r3, r3
  40155a:	2b19      	cmp	r3, #25
  40155c:	d902      	bls.n	401564 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  40155e:	4288      	cmp	r0, r1
  401560:	d1ed      	bne.n	40153e <m2m_wifi_connect_sc+0xd2>
  401562:	e792      	b.n	40148a <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  401564:	f240 220f 	movw	r2, #527	; 0x20f
  401568:	4947      	ldr	r1, [pc, #284]	; (401688 <m2m_wifi_connect_sc+0x21c>)
  40156a:	4848      	ldr	r0, [pc, #288]	; (40168c <m2m_wifi_connect_sc+0x220>)
  40156c:	4c48      	ldr	r4, [pc, #288]	; (401690 <m2m_wifi_connect_sc+0x224>)
  40156e:	47a0      	blx	r4
  401570:	484b      	ldr	r0, [pc, #300]	; (4016a0 <m2m_wifi_connect_sc+0x234>)
  401572:	47a0      	blx	r4
  401574:	4848      	ldr	r0, [pc, #288]	; (401698 <m2m_wifi_connect_sc+0x22c>)
  401576:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  401578:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  40157c:	e7b8      	b.n	4014f0 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  40157e:	f240 2219 	movw	r2, #537	; 0x219
  401582:	4941      	ldr	r1, [pc, #260]	; (401688 <m2m_wifi_connect_sc+0x21c>)
  401584:	4841      	ldr	r0, [pc, #260]	; (40168c <m2m_wifi_connect_sc+0x220>)
  401586:	4c42      	ldr	r4, [pc, #264]	; (401690 <m2m_wifi_connect_sc+0x224>)
  401588:	47a0      	blx	r4
  40158a:	4846      	ldr	r0, [pc, #280]	; (4016a4 <m2m_wifi_connect_sc+0x238>)
  40158c:	47a0      	blx	r4
  40158e:	4842      	ldr	r0, [pc, #264]	; (401698 <m2m_wifi_connect_sc+0x22c>)
  401590:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401592:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  401596:	e7ab      	b.n	4014f0 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  401598:	f240 2222 	movw	r2, #546	; 0x222
  40159c:	493a      	ldr	r1, [pc, #232]	; (401688 <m2m_wifi_connect_sc+0x21c>)
  40159e:	483b      	ldr	r0, [pc, #236]	; (40168c <m2m_wifi_connect_sc+0x220>)
  4015a0:	4c3b      	ldr	r4, [pc, #236]	; (401690 <m2m_wifi_connect_sc+0x224>)
  4015a2:	47a0      	blx	r4
  4015a4:	4840      	ldr	r0, [pc, #256]	; (4016a8 <m2m_wifi_connect_sc+0x23c>)
  4015a6:	47a0      	blx	r4
  4015a8:	483b      	ldr	r0, [pc, #236]	; (401698 <m2m_wifi_connect_sc+0x22c>)
  4015aa:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4015ac:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4015b0:	e79e      	b.n	4014f0 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4015b2:	7833      	ldrb	r3, [r6, #0]
  4015b4:	3b01      	subs	r3, #1
  4015b6:	b2db      	uxtb	r3, r3
  4015b8:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4015bc:	2b03      	cmp	r3, #3
  4015be:	d813      	bhi.n	4015e8 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  4015c0:	7872      	ldrb	r2, [r6, #1]
  4015c2:	1e53      	subs	r3, r2, #1
  4015c4:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  4015c8:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  4015cc:	2b0b      	cmp	r3, #11
  4015ce:	d11a      	bne.n	401606 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4015d0:	1cb1      	adds	r1, r6, #2
  4015d2:	f10d 0016 	add.w	r0, sp, #22
  4015d6:	4b2a      	ldr	r3, [pc, #168]	; (401680 <m2m_wifi_connect_sc+0x214>)
  4015d8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  4015da:	7873      	ldrb	r3, [r6, #1]
  4015dc:	aa20      	add	r2, sp, #128	; 0x80
  4015de:	4413      	add	r3, r2
  4015e0:	2200      	movs	r2, #0
  4015e2:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4015e6:	e779      	b.n	4014dc <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4015e8:	f240 2239 	movw	r2, #569	; 0x239
  4015ec:	4926      	ldr	r1, [pc, #152]	; (401688 <m2m_wifi_connect_sc+0x21c>)
  4015ee:	4827      	ldr	r0, [pc, #156]	; (40168c <m2m_wifi_connect_sc+0x220>)
  4015f0:	4c27      	ldr	r4, [pc, #156]	; (401690 <m2m_wifi_connect_sc+0x224>)
  4015f2:	47a0      	blx	r4
  4015f4:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4015f8:	482c      	ldr	r0, [pc, #176]	; (4016ac <m2m_wifi_connect_sc+0x240>)
  4015fa:	47a0      	blx	r4
  4015fc:	4826      	ldr	r0, [pc, #152]	; (401698 <m2m_wifi_connect_sc+0x22c>)
  4015fe:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401600:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401604:	e774      	b.n	4014f0 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  401606:	f44f 7210 	mov.w	r2, #576	; 0x240
  40160a:	491f      	ldr	r1, [pc, #124]	; (401688 <m2m_wifi_connect_sc+0x21c>)
  40160c:	481f      	ldr	r0, [pc, #124]	; (40168c <m2m_wifi_connect_sc+0x220>)
  40160e:	4c20      	ldr	r4, [pc, #128]	; (401690 <m2m_wifi_connect_sc+0x224>)
  401610:	47a0      	blx	r4
  401612:	f89d 1015 	ldrb.w	r1, [sp, #21]
  401616:	4826      	ldr	r0, [pc, #152]	; (4016b0 <m2m_wifi_connect_sc+0x244>)
  401618:	47a0      	blx	r4
  40161a:	481f      	ldr	r0, [pc, #124]	; (401698 <m2m_wifi_connect_sc+0x22c>)
  40161c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40161e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401622:	e765      	b.n	4014f0 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  401624:	4630      	mov	r0, r6
  401626:	4b1d      	ldr	r3, [pc, #116]	; (40169c <m2m_wifi_connect_sc+0x230>)
  401628:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  40162a:	1e43      	subs	r3, r0, #1
  40162c:	b29b      	uxth	r3, r3
  40162e:	2b3f      	cmp	r3, #63	; 0x3f
  401630:	d805      	bhi.n	40163e <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  401632:	1c42      	adds	r2, r0, #1
  401634:	4631      	mov	r1, r6
  401636:	a805      	add	r0, sp, #20
  401638:	4b11      	ldr	r3, [pc, #68]	; (401680 <m2m_wifi_connect_sc+0x214>)
  40163a:	4798      	blx	r3
  40163c:	e74e      	b.n	4014dc <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  40163e:	f240 224f 	movw	r2, #591	; 0x24f
  401642:	4911      	ldr	r1, [pc, #68]	; (401688 <m2m_wifi_connect_sc+0x21c>)
  401644:	4811      	ldr	r0, [pc, #68]	; (40168c <m2m_wifi_connect_sc+0x220>)
  401646:	4c12      	ldr	r4, [pc, #72]	; (401690 <m2m_wifi_connect_sc+0x224>)
  401648:	47a0      	blx	r4
  40164a:	481a      	ldr	r0, [pc, #104]	; (4016b4 <m2m_wifi_connect_sc+0x248>)
  40164c:	47a0      	blx	r4
  40164e:	4812      	ldr	r0, [pc, #72]	; (401698 <m2m_wifi_connect_sc+0x22c>)
  401650:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401652:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401656:	e74b      	b.n	4014f0 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  401658:	223e      	movs	r2, #62	; 0x3e
  40165a:	4631      	mov	r1, r6
  40165c:	a805      	add	r0, sp, #20
  40165e:	4b08      	ldr	r3, [pc, #32]	; (401680 <m2m_wifi_connect_sc+0x214>)
  401660:	4798      	blx	r3
  401662:	e73b      	b.n	4014dc <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  401664:	f240 225f 	movw	r2, #607	; 0x25f
  401668:	4907      	ldr	r1, [pc, #28]	; (401688 <m2m_wifi_connect_sc+0x21c>)
  40166a:	4808      	ldr	r0, [pc, #32]	; (40168c <m2m_wifi_connect_sc+0x220>)
  40166c:	4c08      	ldr	r4, [pc, #32]	; (401690 <m2m_wifi_connect_sc+0x224>)
  40166e:	47a0      	blx	r4
  401670:	4811      	ldr	r0, [pc, #68]	; (4016b8 <m2m_wifi_connect_sc+0x24c>)
  401672:	47a0      	blx	r4
  401674:	4808      	ldr	r0, [pc, #32]	; (401698 <m2m_wifi_connect_sc+0x22c>)
  401676:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401678:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40167c:	e738      	b.n	4014f0 <m2m_wifi_connect_sc+0x84>
  40167e:	bf00      	nop
  401680:	0040086d 	.word	0x0040086d
  401684:	004009e5 	.word	0x004009e5
  401688:	0040b38c 	.word	0x0040b38c
  40168c:	0040b0cc 	.word	0x0040b0cc
  401690:	00404879 	.word	0x00404879
  401694:	0040b3e0 	.word	0x0040b3e0
  401698:	0040b0f8 	.word	0x0040b0f8
  40169c:	0040088f 	.word	0x0040088f
  4016a0:	0040b3f4 	.word	0x0040b3f4
  4016a4:	0040b404 	.word	0x0040b404
  4016a8:	0040b418 	.word	0x0040b418
  4016ac:	0040b424 	.word	0x0040b424
  4016b0:	0040b440 	.word	0x0040b440
  4016b4:	0040b45c 	.word	0x0040b45c
  4016b8:	0040b478 	.word	0x0040b478

004016bc <m2m_wifi_connect>:
{
  4016bc:	b510      	push	{r4, lr}
  4016be:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  4016c0:	2400      	movs	r4, #0
  4016c2:	9401      	str	r4, [sp, #4]
  4016c4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4016c8:	9400      	str	r4, [sp, #0]
  4016ca:	4c02      	ldr	r4, [pc, #8]	; (4016d4 <m2m_wifi_connect+0x18>)
  4016cc:	47a0      	blx	r4
}
  4016ce:	b002      	add	sp, #8
  4016d0:	bd10      	pop	{r4, pc}
  4016d2:	bf00      	nop
  4016d4:	0040146d 	.word	0x0040146d

004016d8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4016d8:	2000      	movs	r0, #0
  4016da:	4770      	bx	lr

004016dc <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016de:	b083      	sub	sp, #12
  4016e0:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4016e2:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4016e6:	4e0a      	ldr	r6, [pc, #40]	; (401710 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4016e8:	4f0a      	ldr	r7, [pc, #40]	; (401714 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  4016ea:	4621      	mov	r1, r4
  4016ec:	4628      	mov	r0, r5
  4016ee:	47b0      	blx	r6
		if(val32 != 0) {		
  4016f0:	b154      	cbz	r4, 401708 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4016f2:	a902      	add	r1, sp, #8
  4016f4:	2300      	movs	r3, #0
  4016f6:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4016fa:	4628      	mov	r0, r5
  4016fc:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4016fe:	2800      	cmp	r0, #0
  401700:	d1f3      	bne.n	4016ea <chip_apply_conf+0xe>
				if(reg == val32)
  401702:	9b01      	ldr	r3, [sp, #4]
  401704:	429c      	cmp	r4, r3
  401706:	d1f0      	bne.n	4016ea <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  401708:	2000      	movs	r0, #0
  40170a:	b003      	add	sp, #12
  40170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40170e:	bf00      	nop
  401710:	00401bb5 	.word	0x00401bb5
  401714:	00401ba9 	.word	0x00401ba9

00401718 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  401718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40171c:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40171e:	2001      	movs	r0, #1
  401720:	4b3c      	ldr	r3, [pc, #240]	; (401814 <nm_clkless_wake+0xfc>)
  401722:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  401724:	a901      	add	r1, sp, #4
  401726:	2001      	movs	r0, #1
  401728:	4b3b      	ldr	r3, [pc, #236]	; (401818 <nm_clkless_wake+0x100>)
  40172a:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  40172c:	4682      	mov	sl, r0
  40172e:	b938      	cbnz	r0, 401740 <nm_clkless_wake+0x28>
  401730:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  401732:	f04f 0801 	mov.w	r8, #1
  401736:	f8df 9108 	ldr.w	r9, [pc, #264]	; 401840 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  40173a:	4d36      	ldr	r5, [pc, #216]	; (401814 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40173c:	4f37      	ldr	r7, [pc, #220]	; (40181c <nm_clkless_wake+0x104>)
  40173e:	e020      	b.n	401782 <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  401740:	2272      	movs	r2, #114	; 0x72
  401742:	4937      	ldr	r1, [pc, #220]	; (401820 <nm_clkless_wake+0x108>)
  401744:	4837      	ldr	r0, [pc, #220]	; (401824 <nm_clkless_wake+0x10c>)
  401746:	4c38      	ldr	r4, [pc, #224]	; (401828 <nm_clkless_wake+0x110>)
  401748:	47a0      	blx	r4
  40174a:	4838      	ldr	r0, [pc, #224]	; (40182c <nm_clkless_wake+0x114>)
  40174c:	47a0      	blx	r4
  40174e:	4838      	ldr	r0, [pc, #224]	; (401830 <nm_clkless_wake+0x118>)
  401750:	47a0      	blx	r4
		goto _WAKE_EXIT;
  401752:	e009      	b.n	401768 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  401754:	2296      	movs	r2, #150	; 0x96
  401756:	4932      	ldr	r1, [pc, #200]	; (401820 <nm_clkless_wake+0x108>)
  401758:	4832      	ldr	r0, [pc, #200]	; (401824 <nm_clkless_wake+0x10c>)
  40175a:	4c33      	ldr	r4, [pc, #204]	; (401828 <nm_clkless_wake+0x110>)
  40175c:	47a0      	blx	r4
  40175e:	4835      	ldr	r0, [pc, #212]	; (401834 <nm_clkless_wake+0x11c>)
  401760:	47a0      	blx	r4
  401762:	4833      	ldr	r0, [pc, #204]	; (401830 <nm_clkless_wake+0x118>)
  401764:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401766:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  401768:	4650      	mov	r0, sl
  40176a:	b003      	add	sp, #12
  40176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  401770:	9901      	ldr	r1, [sp, #4]
  401772:	f041 0102 	orr.w	r1, r1, #2
  401776:	4640      	mov	r0, r8
  401778:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  40177a:	9b00      	ldr	r3, [sp, #0]
  40177c:	f013 0f04 	tst.w	r3, #4
  401780:	d1f2      	bne.n	401768 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  401782:	9901      	ldr	r1, [sp, #4]
  401784:	f041 0102 	orr.w	r1, r1, #2
  401788:	4640      	mov	r0, r8
  40178a:	47c8      	blx	r9
		nm_bsp_sleep(1);
  40178c:	4640      	mov	r0, r8
  40178e:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401790:	4669      	mov	r1, sp
  401792:	4b29      	ldr	r3, [pc, #164]	; (401838 <nm_clkless_wake+0x120>)
  401794:	6818      	ldr	r0, [r3, #0]
  401796:	4b20      	ldr	r3, [pc, #128]	; (401818 <nm_clkless_wake+0x100>)
  401798:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40179a:	b908      	cbnz	r0, 4017a0 <nm_clkless_wake+0x88>
  40179c:	9b00      	ldr	r3, [sp, #0]
  40179e:	b9bb      	cbnz	r3, 4017d0 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  4017a0:	4e25      	ldr	r6, [pc, #148]	; (401838 <nm_clkless_wake+0x120>)
  4017a2:	230e      	movs	r3, #14
  4017a4:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  4017a6:	4640      	mov	r0, r8
  4017a8:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4017aa:	4669      	mov	r1, sp
  4017ac:	6830      	ldr	r0, [r6, #0]
  4017ae:	4b1a      	ldr	r3, [pc, #104]	; (401818 <nm_clkless_wake+0x100>)
  4017b0:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4017b2:	b908      	cbnz	r0, 4017b8 <nm_clkless_wake+0xa0>
  4017b4:	9b00      	ldr	r3, [sp, #0]
  4017b6:	b95b      	cbnz	r3, 4017d0 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  4017b8:	4e1f      	ldr	r6, [pc, #124]	; (401838 <nm_clkless_wake+0x120>)
  4017ba:	2313      	movs	r3, #19
  4017bc:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  4017be:	4640      	mov	r0, r8
  4017c0:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4017c2:	4669      	mov	r1, sp
  4017c4:	6830      	ldr	r0, [r6, #0]
  4017c6:	4b14      	ldr	r3, [pc, #80]	; (401818 <nm_clkless_wake+0x100>)
  4017c8:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4017ca:	4606      	mov	r6, r0
  4017cc:	2800      	cmp	r0, #0
  4017ce:	d1c1      	bne.n	401754 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4017d0:	4e19      	ldr	r6, [pc, #100]	; (401838 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4017d2:	9b00      	ldr	r3, [sp, #0]
  4017d4:	f013 0f04 	tst.w	r3, #4
  4017d8:	d1c6      	bne.n	401768 <nm_clkless_wake+0x50>
  4017da:	3401      	adds	r4, #1
  4017dc:	fba7 2304 	umull	r2, r3, r7, r4
  4017e0:	085b      	lsrs	r3, r3, #1
  4017e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4017e6:	429c      	cmp	r4, r3
  4017e8:	d1c2      	bne.n	401770 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4017ea:	2002      	movs	r0, #2
  4017ec:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4017ee:	4669      	mov	r1, sp
  4017f0:	6830      	ldr	r0, [r6, #0]
  4017f2:	4b09      	ldr	r3, [pc, #36]	; (401818 <nm_clkless_wake+0x100>)
  4017f4:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  4017f6:	9b00      	ldr	r3, [sp, #0]
  4017f8:	f013 0f04 	tst.w	r3, #4
  4017fc:	d1e9      	bne.n	4017d2 <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4017fe:	22aa      	movs	r2, #170	; 0xaa
  401800:	4907      	ldr	r1, [pc, #28]	; (401820 <nm_clkless_wake+0x108>)
  401802:	4808      	ldr	r0, [pc, #32]	; (401824 <nm_clkless_wake+0x10c>)
  401804:	f8df b020 	ldr.w	fp, [pc, #32]	; 401828 <nm_clkless_wake+0x110>
  401808:	47d8      	blx	fp
  40180a:	480c      	ldr	r0, [pc, #48]	; (40183c <nm_clkless_wake+0x124>)
  40180c:	47d8      	blx	fp
  40180e:	4808      	ldr	r0, [pc, #32]	; (401830 <nm_clkless_wake+0x118>)
  401810:	47d8      	blx	fp
  401812:	e7de      	b.n	4017d2 <nm_clkless_wake+0xba>
  401814:	004004c9 	.word	0x004004c9
  401818:	00401ba9 	.word	0x00401ba9
  40181c:	aaaaaaab 	.word	0xaaaaaaab
  401820:	0040b4fc 	.word	0x0040b4fc
  401824:	0040b0cc 	.word	0x0040b0cc
  401828:	00404879 	.word	0x00404879
  40182c:	0040b56c 	.word	0x0040b56c
  401830:	0040b0f8 	.word	0x0040b0f8
  401834:	0040b58c 	.word	0x0040b58c
  401838:	20400010 	.word	0x20400010
  40183c:	0040b5ac 	.word	0x0040b5ac
  401840:	00401bb5 	.word	0x00401bb5

00401844 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  401844:	b500      	push	{lr}
  401846:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  401848:	a901      	add	r1, sp, #4
  40184a:	f241 4008 	movw	r0, #5128	; 0x1408
  40184e:	4b15      	ldr	r3, [pc, #84]	; (4018a4 <enable_interrupts+0x60>)
  401850:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401852:	b9e8      	cbnz	r0, 401890 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  401854:	9901      	ldr	r1, [sp, #4]
  401856:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  40185a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  40185c:	f241 4008 	movw	r0, #5128	; 0x1408
  401860:	4b11      	ldr	r3, [pc, #68]	; (4018a8 <enable_interrupts+0x64>)
  401862:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401864:	b9b8      	cbnz	r0, 401896 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  401866:	a901      	add	r1, sp, #4
  401868:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40186c:	4b0d      	ldr	r3, [pc, #52]	; (4018a4 <enable_interrupts+0x60>)
  40186e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401870:	b9a0      	cbnz	r0, 40189c <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  401872:	9901      	ldr	r1, [sp, #4]
  401874:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401878:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  40187a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40187e:	4b0a      	ldr	r3, [pc, #40]	; (4018a8 <enable_interrupts+0x64>)
  401880:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401882:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  401884:	bf18      	it	ne
  401886:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  40188a:	b003      	add	sp, #12
  40188c:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  401890:	f06f 0005 	mvn.w	r0, #5
  401894:	e7f9      	b.n	40188a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  401896:	f06f 0005 	mvn.w	r0, #5
  40189a:	e7f6      	b.n	40188a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  40189c:	f06f 0005 	mvn.w	r0, #5
  4018a0:	e7f3      	b.n	40188a <enable_interrupts+0x46>
  4018a2:	bf00      	nop
  4018a4:	00401ba9 	.word	0x00401ba9
  4018a8:	00401bb5 	.word	0x00401bb5

004018ac <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  4018ac:	b510      	push	{r4, lr}
  4018ae:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4018b0:	4b25      	ldr	r3, [pc, #148]	; (401948 <nmi_get_chipid+0x9c>)
  4018b2:	681c      	ldr	r4, [r3, #0]
  4018b4:	b124      	cbz	r4, 4018c0 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  4018b6:	4b24      	ldr	r3, [pc, #144]	; (401948 <nmi_get_chipid+0x9c>)
  4018b8:	681c      	ldr	r4, [r3, #0]
}
  4018ba:	4620      	mov	r0, r4
  4018bc:	b002      	add	sp, #8
  4018be:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4018c0:	4619      	mov	r1, r3
  4018c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4018c6:	4b21      	ldr	r3, [pc, #132]	; (40194c <nmi_get_chipid+0xa0>)
  4018c8:	4798      	blx	r3
  4018ca:	b118      	cbz	r0, 4018d4 <nmi_get_chipid+0x28>
			chipid = 0;
  4018cc:	2200      	movs	r2, #0
  4018ce:	4b1e      	ldr	r3, [pc, #120]	; (401948 <nmi_get_chipid+0x9c>)
  4018d0:	601a      	str	r2, [r3, #0]
			return 0;
  4018d2:	e7f2      	b.n	4018ba <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4018d4:	a901      	add	r1, sp, #4
  4018d6:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4018da:	4b1c      	ldr	r3, [pc, #112]	; (40194c <nmi_get_chipid+0xa0>)
  4018dc:	4798      	blx	r3
  4018de:	b118      	cbz	r0, 4018e8 <nmi_get_chipid+0x3c>
			chipid = 0;
  4018e0:	2200      	movs	r2, #0
  4018e2:	4b19      	ldr	r3, [pc, #100]	; (401948 <nmi_get_chipid+0x9c>)
  4018e4:	601a      	str	r2, [r3, #0]
			return 0;
  4018e6:	e7e8      	b.n	4018ba <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4018e8:	4b17      	ldr	r3, [pc, #92]	; (401948 <nmi_get_chipid+0x9c>)
  4018ea:	681b      	ldr	r3, [r3, #0]
  4018ec:	4a18      	ldr	r2, [pc, #96]	; (401950 <nmi_get_chipid+0xa4>)
  4018ee:	4293      	cmp	r3, r2
  4018f0:	d00d      	beq.n	40190e <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4018f2:	4a18      	ldr	r2, [pc, #96]	; (401954 <nmi_get_chipid+0xa8>)
  4018f4:	4293      	cmp	r3, r2
  4018f6:	d011      	beq.n	40191c <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4018f8:	4a17      	ldr	r2, [pc, #92]	; (401958 <nmi_get_chipid+0xac>)
  4018fa:	4293      	cmp	r3, r2
  4018fc:	d018      	beq.n	401930 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4018fe:	4a12      	ldr	r2, [pc, #72]	; (401948 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  401900:	6813      	ldr	r3, [r2, #0]
  401902:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  401906:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  40190a:	6013      	str	r3, [r2, #0]
  40190c:	e7d3      	b.n	4018b6 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  40190e:	9b01      	ldr	r3, [sp, #4]
  401910:	2b01      	cmp	r3, #1
  401912:	d0f4      	beq.n	4018fe <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  401914:	3201      	adds	r2, #1
  401916:	4b0c      	ldr	r3, [pc, #48]	; (401948 <nmi_get_chipid+0x9c>)
  401918:	601a      	str	r2, [r3, #0]
  40191a:	e7f0      	b.n	4018fe <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  40191c:	9b01      	ldr	r3, [sp, #4]
  40191e:	2b03      	cmp	r3, #3
  401920:	d0ed      	beq.n	4018fe <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  401922:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  401924:	bf0c      	ite	eq
  401926:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  401928:	4a0c      	ldrne	r2, [pc, #48]	; (40195c <nmi_get_chipid+0xb0>)
  40192a:	4b07      	ldr	r3, [pc, #28]	; (401948 <nmi_get_chipid+0x9c>)
  40192c:	601a      	str	r2, [r3, #0]
  40192e:	e7e6      	b.n	4018fe <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  401930:	4905      	ldr	r1, [pc, #20]	; (401948 <nmi_get_chipid+0x9c>)
  401932:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  401936:	4b05      	ldr	r3, [pc, #20]	; (40194c <nmi_get_chipid+0xa0>)
  401938:	4798      	blx	r3
  40193a:	2800      	cmp	r0, #0
  40193c:	d0df      	beq.n	4018fe <nmi_get_chipid+0x52>
			chipid = 0;
  40193e:	2200      	movs	r2, #0
  401940:	4b01      	ldr	r3, [pc, #4]	; (401948 <nmi_get_chipid+0x9c>)
  401942:	601a      	str	r2, [r3, #0]
			return 0;
  401944:	e7b9      	b.n	4018ba <nmi_get_chipid+0xe>
  401946:	bf00      	nop
  401948:	20400a10 	.word	0x20400a10
  40194c:	00401ba9 	.word	0x00401ba9
  401950:	001002a0 	.word	0x001002a0
  401954:	001002b0 	.word	0x001002b0
  401958:	001000f0 	.word	0x001000f0
  40195c:	001002b2 	.word	0x001002b2

00401960 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  401960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401964:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401966:	f241 0514 	movw	r5, #4116	; 0x1014
  40196a:	4c28      	ldr	r4, [pc, #160]	; (401a0c <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40196c:	4e28      	ldr	r6, [pc, #160]	; (401a10 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40196e:	4628      	mov	r0, r5
  401970:	47a0      	blx	r4
		if (reg & 0x80000000) {
  401972:	2800      	cmp	r0, #0
  401974:	db02      	blt.n	40197c <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401976:	2001      	movs	r0, #1
  401978:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40197a:	e7f8      	b.n	40196e <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  40197c:	4825      	ldr	r0, [pc, #148]	; (401a14 <wait_for_bootrom+0xb4>)
  40197e:	4b23      	ldr	r3, [pc, #140]	; (401a0c <wait_for_bootrom+0xac>)
  401980:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  401982:	f010 0f01 	tst.w	r0, #1
  401986:	d110      	bne.n	4019aa <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401988:	f8df 8084 	ldr.w	r8, [pc, #132]	; 401a10 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  40198c:	4e1f      	ldr	r6, [pc, #124]	; (401a0c <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40198e:	4d22      	ldr	r5, [pc, #136]	; (401a18 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  401990:	2001      	movs	r0, #1
  401992:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  401994:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401998:	47b0      	blx	r6
  40199a:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40199c:	462a      	mov	r2, r5
  40199e:	4601      	mov	r1, r0
  4019a0:	481e      	ldr	r0, [pc, #120]	; (401a1c <wait_for_bootrom+0xbc>)
  4019a2:	4b1f      	ldr	r3, [pc, #124]	; (401a20 <wait_for_bootrom+0xc0>)
  4019a4:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  4019a6:	42ac      	cmp	r4, r5
  4019a8:	d1f2      	bne.n	401990 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4019aa:	2f02      	cmp	r7, #2
  4019ac:	d019      	beq.n	4019e2 <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  4019ae:	2f03      	cmp	r7, #3
  4019b0:	d022      	beq.n	4019f8 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4019b2:	2f04      	cmp	r7, #4
  4019b4:	bf14      	ite	ne
  4019b6:	2400      	movne	r4, #0
  4019b8:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4019ba:	4b1a      	ldr	r3, [pc, #104]	; (401a24 <wait_for_bootrom+0xc4>)
  4019bc:	4798      	blx	r3
  4019be:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4019c2:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4019c6:	bf0c      	ite	eq
  4019c8:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4019cc:	4620      	movne	r0, r4
  4019ce:	4b16      	ldr	r3, [pc, #88]	; (401a28 <wait_for_bootrom+0xc8>)
  4019d0:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4019d2:	4916      	ldr	r1, [pc, #88]	; (401a2c <wait_for_bootrom+0xcc>)
  4019d4:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4019d8:	4b15      	ldr	r3, [pc, #84]	; (401a30 <wait_for_bootrom+0xd0>)
  4019da:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4019dc:	2000      	movs	r0, #0
  4019de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4019e2:	4914      	ldr	r1, [pc, #80]	; (401a34 <wait_for_bootrom+0xd4>)
  4019e4:	4814      	ldr	r0, [pc, #80]	; (401a38 <wait_for_bootrom+0xd8>)
  4019e6:	4c12      	ldr	r4, [pc, #72]	; (401a30 <wait_for_bootrom+0xd0>)
  4019e8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4019ea:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4019ee:	f241 008c 	movw	r0, #4236	; 0x108c
  4019f2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4019f4:	2400      	movs	r4, #0
  4019f6:	e7e0      	b.n	4019ba <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4019f8:	490e      	ldr	r1, [pc, #56]	; (401a34 <wait_for_bootrom+0xd4>)
  4019fa:	480f      	ldr	r0, [pc, #60]	; (401a38 <wait_for_bootrom+0xd8>)
  4019fc:	4c0c      	ldr	r4, [pc, #48]	; (401a30 <wait_for_bootrom+0xd0>)
  4019fe:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  401a00:	2100      	movs	r1, #0
  401a02:	f241 008c 	movw	r0, #4236	; 0x108c
  401a06:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  401a08:	2400      	movs	r4, #0
  401a0a:	e7d6      	b.n	4019ba <wait_for_bootrom+0x5a>
  401a0c:	00401b9d 	.word	0x00401b9d
  401a10:	004004c9 	.word	0x004004c9
  401a14:	000207bc 	.word	0x000207bc
  401a18:	10add09e 	.word	0x10add09e
  401a1c:	0040b5d0 	.word	0x0040b5d0
  401a20:	00404879 	.word	0x00404879
  401a24:	004018ad 	.word	0x004018ad
  401a28:	004016dd 	.word	0x004016dd
  401a2c:	ef522f61 	.word	0xef522f61
  401a30:	00401bb5 	.word	0x00401bb5
  401a34:	3c1cd57d 	.word	0x3c1cd57d
  401a38:	000207ac 	.word	0x000207ac

00401a3c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  401a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401a3e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  401a40:	f241 038c 	movw	r3, #4236	; 0x108c
  401a44:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  401a46:	4b18      	ldr	r3, [pc, #96]	; (401aa8 <wait_for_firmware_start+0x6c>)
  401a48:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  401a4a:	3802      	subs	r0, #2
  401a4c:	b2c0      	uxtb	r0, r0
  401a4e:	2801      	cmp	r0, #1
  401a50:	d911      	bls.n	401a76 <wait_for_firmware_start+0x3a>
{
  401a52:	f04f 34ff 	mov.w	r4, #4294967295
  401a56:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401a58:	2702      	movs	r7, #2
  401a5a:	4e14      	ldr	r6, [pc, #80]	; (401aac <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401a5c:	4d14      	ldr	r5, [pc, #80]	; (401ab0 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  401a5e:	9b00      	ldr	r3, [sp, #0]
  401a60:	4298      	cmp	r0, r3
  401a62:	d012      	beq.n	401a8a <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  401a64:	4638      	mov	r0, r7
  401a66:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  401a68:	9801      	ldr	r0, [sp, #4]
  401a6a:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  401a6c:	3c01      	subs	r4, #1
  401a6e:	d1f6      	bne.n	401a5e <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  401a70:	f06f 0004 	mvn.w	r0, #4
  401a74:	e00e      	b.n	401a94 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  401a76:	4b0f      	ldr	r3, [pc, #60]	; (401ab4 <wait_for_firmware_start+0x78>)
  401a78:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  401a7a:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  401a7e:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401a82:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  401a86:	9300      	str	r3, [sp, #0]
  401a88:	e7e3      	b.n	401a52 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  401a8a:	9a00      	ldr	r2, [sp, #0]
  401a8c:	4b06      	ldr	r3, [pc, #24]	; (401aa8 <wait_for_firmware_start+0x6c>)
  401a8e:	429a      	cmp	r2, r3
  401a90:	d002      	beq.n	401a98 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  401a92:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  401a94:	b003      	add	sp, #12
  401a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  401a98:	2100      	movs	r1, #0
  401a9a:	f241 008c 	movw	r0, #4236	; 0x108c
  401a9e:	4b06      	ldr	r3, [pc, #24]	; (401ab8 <wait_for_firmware_start+0x7c>)
  401aa0:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  401aa2:	2000      	movs	r0, #0
  401aa4:	e7f6      	b.n	401a94 <wait_for_firmware_start+0x58>
  401aa6:	bf00      	nop
  401aa8:	02532636 	.word	0x02532636
  401aac:	004004c9 	.word	0x004004c9
  401ab0:	00401b9d 	.word	0x00401b9d
  401ab4:	000207ac 	.word	0x000207ac
  401ab8:	00401bb5 	.word	0x00401bb5

00401abc <chip_deinit>:

sint8 chip_deinit(void)
{
  401abc:	b5f0      	push	{r4, r5, r6, r7, lr}
  401abe:	b083      	sub	sp, #12
	uint32 reg = 0;
  401ac0:	a902      	add	r1, sp, #8
  401ac2:	2300      	movs	r3, #0
  401ac4:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401ac8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401acc:	4b24      	ldr	r3, [pc, #144]	; (401b60 <chip_deinit+0xa4>)
  401ace:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  401ad0:	bb20      	cbnz	r0, 401b1c <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  401ad2:	9901      	ldr	r1, [sp, #4]
  401ad4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401ad8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401ada:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401ade:	4b21      	ldr	r3, [pc, #132]	; (401b64 <chip_deinit+0xa8>)
  401ae0:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  401ae2:	4605      	mov	r5, r0
  401ae4:	bb28      	cbnz	r0, 401b32 <chip_deinit+0x76>
  401ae6:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401ae8:	4e1d      	ldr	r6, [pc, #116]	; (401b60 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401aea:	4f1e      	ldr	r7, [pc, #120]	; (401b64 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401aec:	a901      	add	r1, sp, #4
  401aee:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401af2:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  401af4:	4605      	mov	r5, r0
  401af6:	bb38      	cbnz	r0, 401b48 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  401af8:	9901      	ldr	r1, [sp, #4]
  401afa:	f411 6f80 	tst.w	r1, #1024	; 0x400
  401afe:	d00a      	beq.n	401b16 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  401b00:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  401b04:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  401b06:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401b0a:	47b8      	blx	r7
  401b0c:	4605      	mov	r5, r0
  401b0e:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  401b10:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401b14:	d1ea      	bne.n	401aec <chip_deinit+0x30>

	return ret;
}
  401b16:	4628      	mov	r0, r5
  401b18:	b003      	add	sp, #12
  401b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  401b1c:	f240 2231 	movw	r2, #561	; 0x231
  401b20:	4911      	ldr	r1, [pc, #68]	; (401b68 <chip_deinit+0xac>)
  401b22:	4812      	ldr	r0, [pc, #72]	; (401b6c <chip_deinit+0xb0>)
  401b24:	4c12      	ldr	r4, [pc, #72]	; (401b70 <chip_deinit+0xb4>)
  401b26:	47a0      	blx	r4
  401b28:	4812      	ldr	r0, [pc, #72]	; (401b74 <chip_deinit+0xb8>)
  401b2a:	47a0      	blx	r4
  401b2c:	4812      	ldr	r0, [pc, #72]	; (401b78 <chip_deinit+0xbc>)
  401b2e:	47a0      	blx	r4
  401b30:	e7cf      	b.n	401ad2 <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  401b32:	f240 2237 	movw	r2, #567	; 0x237
  401b36:	490c      	ldr	r1, [pc, #48]	; (401b68 <chip_deinit+0xac>)
  401b38:	480c      	ldr	r0, [pc, #48]	; (401b6c <chip_deinit+0xb0>)
  401b3a:	4c0d      	ldr	r4, [pc, #52]	; (401b70 <chip_deinit+0xb4>)
  401b3c:	47a0      	blx	r4
  401b3e:	480f      	ldr	r0, [pc, #60]	; (401b7c <chip_deinit+0xc0>)
  401b40:	47a0      	blx	r4
  401b42:	480d      	ldr	r0, [pc, #52]	; (401b78 <chip_deinit+0xbc>)
  401b44:	47a0      	blx	r4
		return ret;
  401b46:	e7e6      	b.n	401b16 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  401b48:	f240 223e 	movw	r2, #574	; 0x23e
  401b4c:	4906      	ldr	r1, [pc, #24]	; (401b68 <chip_deinit+0xac>)
  401b4e:	4807      	ldr	r0, [pc, #28]	; (401b6c <chip_deinit+0xb0>)
  401b50:	4c07      	ldr	r4, [pc, #28]	; (401b70 <chip_deinit+0xb4>)
  401b52:	47a0      	blx	r4
  401b54:	480a      	ldr	r0, [pc, #40]	; (401b80 <chip_deinit+0xc4>)
  401b56:	47a0      	blx	r4
  401b58:	4807      	ldr	r0, [pc, #28]	; (401b78 <chip_deinit+0xbc>)
  401b5a:	47a0      	blx	r4
			return ret;
  401b5c:	e7db      	b.n	401b16 <chip_deinit+0x5a>
  401b5e:	bf00      	nop
  401b60:	00401ba9 	.word	0x00401ba9
  401b64:	00401bb5 	.word	0x00401bb5
  401b68:	0040b50c 	.word	0x0040b50c
  401b6c:	0040b0cc 	.word	0x0040b0cc
  401b70:	00404879 	.word	0x00404879
  401b74:	0040b518 	.word	0x0040b518
  401b78:	0040b0f8 	.word	0x0040b0f8
  401b7c:	0040b534 	.word	0x0040b534
  401b80:	0040b550 	.word	0x0040b550

00401b84 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  401b84:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  401b86:	4b01      	ldr	r3, [pc, #4]	; (401b8c <nm_bus_iface_init+0x8>)
  401b88:	4798      	blx	r3

	return ret;
}
  401b8a:	bd08      	pop	{r3, pc}
  401b8c:	0040063d 	.word	0x0040063d

00401b90 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  401b90:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  401b92:	4b01      	ldr	r3, [pc, #4]	; (401b98 <nm_bus_iface_deinit+0x8>)
  401b94:	4798      	blx	r3

	return ret;
}
  401b96:	bd08      	pop	{r3, pc}
  401b98:	0040082d 	.word	0x0040082d

00401b9c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  401b9c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  401b9e:	4b01      	ldr	r3, [pc, #4]	; (401ba4 <nm_read_reg+0x8>)
  401ba0:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  401ba2:	bd08      	pop	{r3, pc}
  401ba4:	004023f1 	.word	0x004023f1

00401ba8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  401ba8:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  401baa:	4b01      	ldr	r3, [pc, #4]	; (401bb0 <nm_read_reg_with_ret+0x8>)
  401bac:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  401bae:	bd08      	pop	{r3, pc}
  401bb0:	00402409 	.word	0x00402409

00401bb4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  401bb4:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  401bb6:	4b01      	ldr	r3, [pc, #4]	; (401bbc <nm_write_reg+0x8>)
  401bb8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  401bba:	bd08      	pop	{r3, pc}
  401bbc:	00402421 	.word	0x00402421

00401bc0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401bc4:	4607      	mov	r7, r0
  401bc6:	4689      	mov	r9, r1
  401bc8:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401bca:	4b12      	ldr	r3, [pc, #72]	; (401c14 <nm_read_block+0x54>)
  401bcc:	f8b3 8000 	ldrh.w	r8, [r3]
  401bd0:	f1a8 0808 	sub.w	r8, r8, #8
  401bd4:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401bd8:	4542      	cmp	r2, r8
  401bda:	d919      	bls.n	401c10 <nm_read_block+0x50>
  401bdc:	4644      	mov	r4, r8
  401bde:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401be0:	f8df a034 	ldr.w	sl, [pc, #52]	; 401c18 <nm_read_block+0x58>
  401be4:	4642      	mov	r2, r8
  401be6:	eb09 0106 	add.w	r1, r9, r6
  401bea:	4638      	mov	r0, r7
  401bec:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401bee:	4603      	mov	r3, r0
  401bf0:	b958      	cbnz	r0, 401c0a <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  401bf2:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401bf4:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401bf6:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  401bf8:	42a5      	cmp	r5, r4
  401bfa:	d8f3      	bhi.n	401be4 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  401bfc:	b2aa      	uxth	r2, r5
  401bfe:	eb09 0106 	add.w	r1, r9, r6
  401c02:	4638      	mov	r0, r7
  401c04:	4b04      	ldr	r3, [pc, #16]	; (401c18 <nm_read_block+0x58>)
  401c06:	4798      	blx	r3
  401c08:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  401c0a:	4618      	mov	r0, r3
  401c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  401c10:	2600      	movs	r6, #0
  401c12:	e7f3      	b.n	401bfc <nm_read_block+0x3c>
  401c14:	2040000c 	.word	0x2040000c
  401c18:	0040254d 	.word	0x0040254d

00401c1c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401c20:	4607      	mov	r7, r0
  401c22:	4689      	mov	r9, r1
  401c24:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  401c26:	4b12      	ldr	r3, [pc, #72]	; (401c70 <nm_write_block+0x54>)
  401c28:	f8b3 8000 	ldrh.w	r8, [r3]
  401c2c:	f1a8 0808 	sub.w	r8, r8, #8
  401c30:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401c34:	4542      	cmp	r2, r8
  401c36:	d919      	bls.n	401c6c <nm_write_block+0x50>
  401c38:	4644      	mov	r4, r8
  401c3a:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401c3c:	f8df a034 	ldr.w	sl, [pc, #52]	; 401c74 <nm_write_block+0x58>
  401c40:	4642      	mov	r2, r8
  401c42:	eb09 0106 	add.w	r1, r9, r6
  401c46:	4638      	mov	r0, r7
  401c48:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401c4a:	4603      	mov	r3, r0
  401c4c:	b958      	cbnz	r0, 401c66 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  401c4e:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  401c50:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  401c52:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  401c54:	42a5      	cmp	r5, r4
  401c56:	d8f3      	bhi.n	401c40 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401c58:	b2aa      	uxth	r2, r5
  401c5a:	eb09 0106 	add.w	r1, r9, r6
  401c5e:	4638      	mov	r0, r7
  401c60:	4b04      	ldr	r3, [pc, #16]	; (401c74 <nm_write_block+0x58>)
  401c62:	4798      	blx	r3
  401c64:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  401c66:	4618      	mov	r0, r3
  401c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  401c6c:	2600      	movs	r6, #0
  401c6e:	e7f3      	b.n	401c58 <nm_write_block+0x3c>
  401c70:	2040000c 	.word	0x2040000c
  401c74:	00402615 	.word	0x00402615

00401c78 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  401c78:	b530      	push	{r4, r5, lr}
  401c7a:	b083      	sub	sp, #12
  401c7c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  401c7e:	a902      	add	r1, sp, #8
  401c80:	2300      	movs	r3, #0
  401c82:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  401c86:	4824      	ldr	r0, [pc, #144]	; (401d18 <nm_get_firmware_info+0xa0>)
  401c88:	4b24      	ldr	r3, [pc, #144]	; (401d1c <nm_get_firmware_info+0xa4>)
  401c8a:	4798      	blx	r3
  401c8c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  401c8e:	9a01      	ldr	r2, [sp, #4]
  401c90:	4b23      	ldr	r3, [pc, #140]	; (401d20 <nm_get_firmware_info+0xa8>)
  401c92:	429a      	cmp	r2, r3
  401c94:	d039      	beq.n	401d0a <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  401c96:	9b01      	ldr	r3, [sp, #4]
  401c98:	0c1a      	lsrs	r2, r3, #16
  401c9a:	b291      	uxth	r1, r2
  401c9c:	0a08      	lsrs	r0, r1, #8
  401c9e:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  401ca0:	f3c1 1103 	ubfx	r1, r1, #4, #4
  401ca4:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  401ca6:	f002 020f 	and.w	r2, r2, #15
  401caa:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  401cac:	b29a      	uxth	r2, r3
  401cae:	0a11      	lsrs	r1, r2, #8
  401cb0:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  401cb2:	f3c2 1203 	ubfx	r2, r2, #4, #4
  401cb6:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  401cb8:	f003 030f 	and.w	r3, r3, #15
  401cbc:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  401cbe:	4b19      	ldr	r3, [pc, #100]	; (401d24 <nm_get_firmware_info+0xac>)
  401cc0:	4798      	blx	r3
  401cc2:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  401cc4:	7922      	ldrb	r2, [r4, #4]
  401cc6:	79a3      	ldrb	r3, [r4, #6]
  401cc8:	f003 030f 	and.w	r3, r3, #15
  401ccc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401cd0:	7962      	ldrb	r2, [r4, #5]
  401cd2:	0112      	lsls	r2, r2, #4
  401cd4:	b2d2      	uxtb	r2, r2
  401cd6:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  401cd8:	79e1      	ldrb	r1, [r4, #7]
  401cda:	7a62      	ldrb	r2, [r4, #9]
  401cdc:	f002 020f 	and.w	r2, r2, #15
  401ce0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  401ce4:	7a21      	ldrb	r1, [r4, #8]
  401ce6:	0109      	lsls	r1, r1, #4
  401ce8:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  401cea:	430a      	orrs	r2, r1
  401cec:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  401cf0:	428a      	cmp	r2, r1
  401cf2:	bf88      	it	hi
  401cf4:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  401cf8:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  401cfc:	4293      	cmp	r3, r2
	}
	return ret;
}
  401cfe:	bf8c      	ite	hi
  401d00:	4628      	movhi	r0, r5
  401d02:	f06f 000c 	mvnls.w	r0, #12
  401d06:	b003      	add	sp, #12
  401d08:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  401d0a:	a901      	add	r1, sp, #4
  401d0c:	f241 0048 	movw	r0, #4168	; 0x1048
  401d10:	4b02      	ldr	r3, [pc, #8]	; (401d1c <nm_get_firmware_info+0xa4>)
  401d12:	4798      	blx	r3
  401d14:	4605      	mov	r5, r0
  401d16:	e7be      	b.n	401c96 <nm_get_firmware_info+0x1e>
  401d18:	000207ac 	.word	0x000207ac
  401d1c:	00401ba9 	.word	0x00401ba9
  401d20:	d75dc1c3 	.word	0xd75dc1c3
  401d24:	004018ad 	.word	0x004018ad

00401d28 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  401d28:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  401d2a:	2800      	cmp	r0, #0
  401d2c:	d037      	beq.n	401d9e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  401d2e:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  401d30:	1e63      	subs	r3, r4, #1
  401d32:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  401d34:	2b04      	cmp	r3, #4
  401d36:	bf28      	it	cs
  401d38:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  401d3a:	2000      	movs	r0, #0
  401d3c:	4b1e      	ldr	r3, [pc, #120]	; (401db8 <nm_drv_init+0x90>)
  401d3e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401d40:	4605      	mov	r5, r0
  401d42:	2800      	cmp	r0, #0
  401d44:	d12d      	bne.n	401da2 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401d46:	481d      	ldr	r0, [pc, #116]	; (401dbc <nm_drv_init+0x94>)
  401d48:	4d1d      	ldr	r5, [pc, #116]	; (401dc0 <nm_drv_init+0x98>)
  401d4a:	47a8      	blx	r5
  401d4c:	4b1d      	ldr	r3, [pc, #116]	; (401dc4 <nm_drv_init+0x9c>)
  401d4e:	4798      	blx	r3
  401d50:	4601      	mov	r1, r0
  401d52:	481d      	ldr	r0, [pc, #116]	; (401dc8 <nm_drv_init+0xa0>)
  401d54:	47a8      	blx	r5
  401d56:	481d      	ldr	r0, [pc, #116]	; (401dcc <nm_drv_init+0xa4>)
  401d58:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401d5a:	4b1d      	ldr	r3, [pc, #116]	; (401dd0 <nm_drv_init+0xa8>)
  401d5c:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  401d5e:	4620      	mov	r0, r4
  401d60:	4b1c      	ldr	r3, [pc, #112]	; (401dd4 <nm_drv_init+0xac>)
  401d62:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401d64:	4605      	mov	r5, r0
  401d66:	b9b0      	cbnz	r0, 401d96 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401d68:	4620      	mov	r0, r4
  401d6a:	4b1b      	ldr	r3, [pc, #108]	; (401dd8 <nm_drv_init+0xb0>)
  401d6c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401d6e:	4605      	mov	r5, r0
  401d70:	b988      	cbnz	r0, 401d96 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401d72:	3c02      	subs	r4, #2
  401d74:	b2e4      	uxtb	r4, r4
  401d76:	2c01      	cmp	r4, #1
  401d78:	d90f      	bls.n	401d9a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401d7a:	4b18      	ldr	r3, [pc, #96]	; (401ddc <nm_drv_init+0xb4>)
  401d7c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401d7e:	4605      	mov	r5, r0
  401d80:	b158      	cbz	r0, 401d9a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  401d82:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401d86:	4916      	ldr	r1, [pc, #88]	; (401de0 <nm_drv_init+0xb8>)
  401d88:	4816      	ldr	r0, [pc, #88]	; (401de4 <nm_drv_init+0xbc>)
  401d8a:	4c0d      	ldr	r4, [pc, #52]	; (401dc0 <nm_drv_init+0x98>)
  401d8c:	47a0      	blx	r4
  401d8e:	4816      	ldr	r0, [pc, #88]	; (401de8 <nm_drv_init+0xc0>)
  401d90:	47a0      	blx	r4
  401d92:	480e      	ldr	r0, [pc, #56]	; (401dcc <nm_drv_init+0xa4>)
  401d94:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401d96:	4b15      	ldr	r3, [pc, #84]	; (401dec <nm_drv_init+0xc4>)
  401d98:	4798      	blx	r3
ERR1:
	return ret;
}
  401d9a:	4628      	mov	r0, r5
  401d9c:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401d9e:	2401      	movs	r4, #1
  401da0:	e7cb      	b.n	401d3a <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  401da2:	f44f 7292 	mov.w	r2, #292	; 0x124
  401da6:	490e      	ldr	r1, [pc, #56]	; (401de0 <nm_drv_init+0xb8>)
  401da8:	480e      	ldr	r0, [pc, #56]	; (401de4 <nm_drv_init+0xbc>)
  401daa:	4c05      	ldr	r4, [pc, #20]	; (401dc0 <nm_drv_init+0x98>)
  401dac:	47a0      	blx	r4
  401dae:	4810      	ldr	r0, [pc, #64]	; (401df0 <nm_drv_init+0xc8>)
  401db0:	47a0      	blx	r4
  401db2:	4806      	ldr	r0, [pc, #24]	; (401dcc <nm_drv_init+0xa4>)
  401db4:	47a0      	blx	r4
		goto ERR1;
  401db6:	e7f0      	b.n	401d9a <nm_drv_init+0x72>
  401db8:	00401b85 	.word	0x00401b85
  401dbc:	0040b3a0 	.word	0x0040b3a0
  401dc0:	00404879 	.word	0x00404879
  401dc4:	004018ad 	.word	0x004018ad
  401dc8:	0040b698 	.word	0x0040b698
  401dcc:	0040b0f8 	.word	0x0040b0f8
  401dd0:	00402439 	.word	0x00402439
  401dd4:	00401961 	.word	0x00401961
  401dd8:	00401a3d 	.word	0x00401a3d
  401ddc:	00401845 	.word	0x00401845
  401de0:	0040b5e0 	.word	0x0040b5e0
  401de4:	0040b0cc 	.word	0x0040b0cc
  401de8:	0040b65c 	.word	0x0040b65c
  401dec:	00401b91 	.word	0x00401b91
  401df0:	0040b67c 	.word	0x0040b67c

00401df4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401df4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401df6:	4b19      	ldr	r3, [pc, #100]	; (401e5c <nm_drv_deinit+0x68>)
  401df8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401dfa:	b958      	cbnz	r0, 401e14 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401dfc:	2000      	movs	r0, #0
  401dfe:	4b18      	ldr	r3, [pc, #96]	; (401e60 <nm_drv_deinit+0x6c>)
  401e00:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e02:	4604      	mov	r4, r0
  401e04:	b998      	cbnz	r0, 401e2e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  401e06:	4b17      	ldr	r3, [pc, #92]	; (401e64 <nm_drv_deinit+0x70>)
  401e08:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401e0a:	4604      	mov	r4, r0
  401e0c:	b9d0      	cbnz	r0, 401e44 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401e0e:	4b16      	ldr	r3, [pc, #88]	; (401e68 <nm_drv_deinit+0x74>)
  401e10:	4798      	blx	r3
  401e12:	e00a      	b.n	401e2a <nm_drv_deinit+0x36>
  401e14:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401e16:	f44f 72ba 	mov.w	r2, #372	; 0x174
  401e1a:	4914      	ldr	r1, [pc, #80]	; (401e6c <nm_drv_deinit+0x78>)
  401e1c:	4814      	ldr	r0, [pc, #80]	; (401e70 <nm_drv_deinit+0x7c>)
  401e1e:	4d15      	ldr	r5, [pc, #84]	; (401e74 <nm_drv_deinit+0x80>)
  401e20:	47a8      	blx	r5
  401e22:	4815      	ldr	r0, [pc, #84]	; (401e78 <nm_drv_deinit+0x84>)
  401e24:	47a8      	blx	r5
  401e26:	4815      	ldr	r0, [pc, #84]	; (401e7c <nm_drv_deinit+0x88>)
  401e28:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  401e2a:	4620      	mov	r0, r4
  401e2c:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401e2e:	f240 127b 	movw	r2, #379	; 0x17b
  401e32:	490e      	ldr	r1, [pc, #56]	; (401e6c <nm_drv_deinit+0x78>)
  401e34:	480e      	ldr	r0, [pc, #56]	; (401e70 <nm_drv_deinit+0x7c>)
  401e36:	4d0f      	ldr	r5, [pc, #60]	; (401e74 <nm_drv_deinit+0x80>)
  401e38:	47a8      	blx	r5
  401e3a:	4811      	ldr	r0, [pc, #68]	; (401e80 <nm_drv_deinit+0x8c>)
  401e3c:	47a8      	blx	r5
  401e3e:	480f      	ldr	r0, [pc, #60]	; (401e7c <nm_drv_deinit+0x88>)
  401e40:	47a8      	blx	r5
		goto ERR1;
  401e42:	e7f2      	b.n	401e2a <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401e44:	f240 1281 	movw	r2, #385	; 0x181
  401e48:	4908      	ldr	r1, [pc, #32]	; (401e6c <nm_drv_deinit+0x78>)
  401e4a:	4809      	ldr	r0, [pc, #36]	; (401e70 <nm_drv_deinit+0x7c>)
  401e4c:	4d09      	ldr	r5, [pc, #36]	; (401e74 <nm_drv_deinit+0x80>)
  401e4e:	47a8      	blx	r5
  401e50:	480c      	ldr	r0, [pc, #48]	; (401e84 <nm_drv_deinit+0x90>)
  401e52:	47a8      	blx	r5
  401e54:	4809      	ldr	r0, [pc, #36]	; (401e7c <nm_drv_deinit+0x88>)
  401e56:	47a8      	blx	r5
		goto ERR1;
  401e58:	e7e7      	b.n	401e2a <nm_drv_deinit+0x36>
  401e5a:	bf00      	nop
  401e5c:	00401abd 	.word	0x00401abd
  401e60:	00402e99 	.word	0x00402e99
  401e64:	00401b91 	.word	0x00401b91
  401e68:	004023e5 	.word	0x004023e5
  401e6c:	0040b5ec 	.word	0x0040b5ec
  401e70:	0040b0cc 	.word	0x0040b0cc
  401e74:	00404879 	.word	0x00404879
  401e78:	0040b5fc 	.word	0x0040b5fc
  401e7c:	0040b0f8 	.word	0x0040b0f8
  401e80:	0040b61c 	.word	0x0040b61c
  401e84:	0040b640 	.word	0x0040b640

00401e88 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  401e88:	b500      	push	{lr}
  401e8a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  401e8c:	2300      	movs	r3, #0
  401e8e:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  401e90:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  401e92:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401e96:	a901      	add	r1, sp, #4
  401e98:	2003      	movs	r0, #3
  401e9a:	4b02      	ldr	r3, [pc, #8]	; (401ea4 <nmi_spi_read+0x1c>)
  401e9c:	4798      	blx	r3
}
  401e9e:	b005      	add	sp, #20
  401ea0:	f85d fb04 	ldr.w	pc, [sp], #4
  401ea4:	00400759 	.word	0x00400759

00401ea8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401eac:	b082      	sub	sp, #8
  401eae:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  401eb0:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  401eb4:	b2db      	uxtb	r3, r3
  401eb6:	2b01      	cmp	r3, #1
  401eb8:	d927      	bls.n	401f0a <spi_cmd_rsp+0x62>
  401eba:	28cf      	cmp	r0, #207	; 0xcf
  401ebc:	d025      	beq.n	401f0a <spi_cmd_rsp+0x62>
{
  401ebe:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401ec0:	f04f 0801 	mov.w	r8, #1
  401ec4:	4f23      	ldr	r7, [pc, #140]	; (401f54 <spi_cmd_rsp+0xac>)
  401ec6:	4641      	mov	r1, r8
  401ec8:	f10d 0007 	add.w	r0, sp, #7
  401ecc:	47b8      	blx	r7
  401ece:	4606      	mov	r6, r0
  401ed0:	bb20      	cbnz	r0, 401f1c <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  401ed2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401ed6:	42ab      	cmp	r3, r5
  401ed8:	d02c      	beq.n	401f34 <spi_cmd_rsp+0x8c>
  401eda:	1e63      	subs	r3, r4, #1
  401edc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401ee0:	d1f1      	bne.n	401ec6 <spi_cmd_rsp+0x1e>
  401ee2:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401ee4:	2701      	movs	r7, #1
  401ee6:	4d1b      	ldr	r5, [pc, #108]	; (401f54 <spi_cmd_rsp+0xac>)
  401ee8:	4639      	mov	r1, r7
  401eea:	f10d 0007 	add.w	r0, sp, #7
  401eee:	47a8      	blx	r5
  401ef0:	bb10      	cbnz	r0, 401f38 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  401ef2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401ef6:	b353      	cbz	r3, 401f4e <spi_cmd_rsp+0xa6>
  401ef8:	1e63      	subs	r3, r4, #1
  401efa:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401efe:	d1f3      	bne.n	401ee8 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  401f00:	2601      	movs	r6, #1

_fail_:

	return result;
}
  401f02:	4630      	mov	r0, r6
  401f04:	b002      	add	sp, #8
  401f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401f0a:	2101      	movs	r1, #1
  401f0c:	f10d 0007 	add.w	r0, sp, #7
  401f10:	4b10      	ldr	r3, [pc, #64]	; (401f54 <spi_cmd_rsp+0xac>)
  401f12:	4798      	blx	r3
  401f14:	2800      	cmp	r0, #0
  401f16:	d0d2      	beq.n	401ebe <spi_cmd_rsp+0x16>
			result = N_FAIL;
  401f18:	2600      	movs	r6, #0
  401f1a:	e7f2      	b.n	401f02 <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401f1c:	f240 1227 	movw	r2, #295	; 0x127
  401f20:	490d      	ldr	r1, [pc, #52]	; (401f58 <spi_cmd_rsp+0xb0>)
  401f22:	480e      	ldr	r0, [pc, #56]	; (401f5c <spi_cmd_rsp+0xb4>)
  401f24:	4c0e      	ldr	r4, [pc, #56]	; (401f60 <spi_cmd_rsp+0xb8>)
  401f26:	47a0      	blx	r4
  401f28:	480e      	ldr	r0, [pc, #56]	; (401f64 <spi_cmd_rsp+0xbc>)
  401f2a:	47a0      	blx	r4
  401f2c:	480e      	ldr	r0, [pc, #56]	; (401f68 <spi_cmd_rsp+0xc0>)
  401f2e:	47a0      	blx	r4
			result = N_FAIL;
  401f30:	2600      	movs	r6, #0
			goto _fail_;
  401f32:	e7e6      	b.n	401f02 <spi_cmd_rsp+0x5a>
  401f34:	240b      	movs	r4, #11
  401f36:	e7d5      	b.n	401ee4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401f38:	f240 1235 	movw	r2, #309	; 0x135
  401f3c:	4906      	ldr	r1, [pc, #24]	; (401f58 <spi_cmd_rsp+0xb0>)
  401f3e:	4807      	ldr	r0, [pc, #28]	; (401f5c <spi_cmd_rsp+0xb4>)
  401f40:	4c07      	ldr	r4, [pc, #28]	; (401f60 <spi_cmd_rsp+0xb8>)
  401f42:	47a0      	blx	r4
  401f44:	4807      	ldr	r0, [pc, #28]	; (401f64 <spi_cmd_rsp+0xbc>)
  401f46:	47a0      	blx	r4
  401f48:	4807      	ldr	r0, [pc, #28]	; (401f68 <spi_cmd_rsp+0xc0>)
  401f4a:	47a0      	blx	r4
			goto _fail_;
  401f4c:	e7d9      	b.n	401f02 <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  401f4e:	2601      	movs	r6, #1
  401f50:	e7d7      	b.n	401f02 <spi_cmd_rsp+0x5a>
  401f52:	bf00      	nop
  401f54:	00401e89 	.word	0x00401e89
  401f58:	0040b6b0 	.word	0x0040b6b0
  401f5c:	0040b0cc 	.word	0x0040b0cc
  401f60:	00404879 	.word	0x00404879
  401f64:	0040baf0 	.word	0x0040baf0
  401f68:	0040b0f8 	.word	0x0040b0f8

00401f6c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  401f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f70:	b085      	sub	sp, #20
  401f72:	4683      	mov	fp, r0
  401f74:	468a      	mov	sl, r1
  401f76:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  401f78:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401f7c:	4d37      	ldr	r5, [pc, #220]	; (40205c <spi_data_read+0xf0>)
  401f7e:	e027      	b.n	401fd0 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  401f80:	f240 1257 	movw	r2, #343	; 0x157
  401f84:	4936      	ldr	r1, [pc, #216]	; (402060 <spi_data_read+0xf4>)
  401f86:	4837      	ldr	r0, [pc, #220]	; (402064 <spi_data_read+0xf8>)
  401f88:	4c37      	ldr	r4, [pc, #220]	; (402068 <spi_data_read+0xfc>)
  401f8a:	47a0      	blx	r4
  401f8c:	4837      	ldr	r0, [pc, #220]	; (40206c <spi_data_read+0x100>)
  401f8e:	47a0      	blx	r4
  401f90:	4837      	ldr	r0, [pc, #220]	; (402070 <spi_data_read+0x104>)
  401f92:	47a0      	blx	r4
  401f94:	2300      	movs	r3, #0
  401f96:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  401f98:	9801      	ldr	r0, [sp, #4]
  401f9a:	b005      	add	sp, #20
  401f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  401fa0:	2c00      	cmp	r4, #0
  401fa2:	dd2e      	ble.n	402002 <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  401fa4:	4641      	mov	r1, r8
  401fa6:	eb0b 0009 	add.w	r0, fp, r9
  401faa:	47a8      	blx	r5
  401fac:	4604      	mov	r4, r0
  401fae:	2800      	cmp	r0, #0
  401fb0:	d134      	bne.n	40201c <spi_data_read+0xb0>
		if(!clockless)
  401fb2:	b91f      	cbnz	r7, 401fbc <spi_data_read+0x50>
			if (!gu8Crc_off) {
  401fb4:	4b2f      	ldr	r3, [pc, #188]	; (402074 <spi_data_read+0x108>)
  401fb6:	781b      	ldrb	r3, [r3, #0]
  401fb8:	2b00      	cmp	r3, #0
  401fba:	d03a      	beq.n	402032 <spi_data_read+0xc6>
		ix += nbytes;
  401fbc:	44c1      	add	r9, r8
  401fbe:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  401fc2:	ebaa 0a08 	sub.w	sl, sl, r8
  401fc6:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  401fca:	f1ba 0f00 	cmp.w	sl, #0
  401fce:	d041      	beq.n	402054 <spi_data_read+0xe8>
  401fd0:	46d0      	mov	r8, sl
  401fd2:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  401fd6:	bf28      	it	cs
  401fd8:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  401fdc:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401fde:	2601      	movs	r6, #1
  401fe0:	4631      	mov	r1, r6
  401fe2:	f10d 000b 	add.w	r0, sp, #11
  401fe6:	47a8      	blx	r5
  401fe8:	9001      	str	r0, [sp, #4]
  401fea:	2800      	cmp	r0, #0
  401fec:	d1c8      	bne.n	401f80 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  401fee:	f89d 300b 	ldrb.w	r3, [sp, #11]
  401ff2:	091b      	lsrs	r3, r3, #4
  401ff4:	2b0f      	cmp	r3, #15
  401ff6:	d0d3      	beq.n	401fa0 <spi_data_read+0x34>
  401ff8:	3c01      	subs	r4, #1
  401ffa:	b224      	sxth	r4, r4
		} while (retry--);
  401ffc:	f1b4 3fff 	cmp.w	r4, #4294967295
  402000:	d1ee      	bne.n	401fe0 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  402002:	f240 1263 	movw	r2, #355	; 0x163
  402006:	4916      	ldr	r1, [pc, #88]	; (402060 <spi_data_read+0xf4>)
  402008:	4816      	ldr	r0, [pc, #88]	; (402064 <spi_data_read+0xf8>)
  40200a:	4c17      	ldr	r4, [pc, #92]	; (402068 <spi_data_read+0xfc>)
  40200c:	47a0      	blx	r4
  40200e:	f89d 100b 	ldrb.w	r1, [sp, #11]
  402012:	4819      	ldr	r0, [pc, #100]	; (402078 <spi_data_read+0x10c>)
  402014:	47a0      	blx	r4
  402016:	4816      	ldr	r0, [pc, #88]	; (402070 <spi_data_read+0x104>)
  402018:	47a0      	blx	r4
			break;
  40201a:	e7bd      	b.n	401f98 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  40201c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  402020:	490f      	ldr	r1, [pc, #60]	; (402060 <spi_data_read+0xf4>)
  402022:	4810      	ldr	r0, [pc, #64]	; (402064 <spi_data_read+0xf8>)
  402024:	4c10      	ldr	r4, [pc, #64]	; (402068 <spi_data_read+0xfc>)
  402026:	47a0      	blx	r4
  402028:	4814      	ldr	r0, [pc, #80]	; (40207c <spi_data_read+0x110>)
  40202a:	47a0      	blx	r4
  40202c:	4810      	ldr	r0, [pc, #64]	; (402070 <spi_data_read+0x104>)
  40202e:	47a0      	blx	r4
			break;
  402030:	e7b2      	b.n	401f98 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  402032:	2102      	movs	r1, #2
  402034:	a803      	add	r0, sp, #12
  402036:	47a8      	blx	r5
  402038:	2800      	cmp	r0, #0
  40203a:	d0bf      	beq.n	401fbc <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  40203c:	f240 1277 	movw	r2, #375	; 0x177
  402040:	4907      	ldr	r1, [pc, #28]	; (402060 <spi_data_read+0xf4>)
  402042:	4808      	ldr	r0, [pc, #32]	; (402064 <spi_data_read+0xf8>)
  402044:	4d08      	ldr	r5, [pc, #32]	; (402068 <spi_data_read+0xfc>)
  402046:	47a8      	blx	r5
  402048:	480d      	ldr	r0, [pc, #52]	; (402080 <spi_data_read+0x114>)
  40204a:	47a8      	blx	r5
  40204c:	4808      	ldr	r0, [pc, #32]	; (402070 <spi_data_read+0x104>)
  40204e:	47a8      	blx	r5
					result = N_FAIL;
  402050:	9401      	str	r4, [sp, #4]
					break;
  402052:	e7a1      	b.n	401f98 <spi_data_read+0x2c>
  402054:	2301      	movs	r3, #1
  402056:	9301      	str	r3, [sp, #4]
  402058:	e79e      	b.n	401f98 <spi_data_read+0x2c>
  40205a:	bf00      	nop
  40205c:	00401e89 	.word	0x00401e89
  402060:	0040b6bc 	.word	0x0040b6bc
  402064:	0040b0cc 	.word	0x0040b0cc
  402068:	00404879 	.word	0x00404879
  40206c:	0040bb24 	.word	0x0040bb24
  402070:	0040b0f8 	.word	0x0040b0f8
  402074:	20400a14 	.word	0x20400a14
  402078:	0040bb58 	.word	0x0040bb58
  40207c:	0040bb88 	.word	0x0040bb88
  402080:	0040bbbc 	.word	0x0040bbbc

00402084 <nmi_spi_write>:
{
  402084:	b500      	push	{lr}
  402086:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  402088:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  40208a:	2300      	movs	r3, #0
  40208c:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  40208e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402092:	a901      	add	r1, sp, #4
  402094:	2003      	movs	r0, #3
  402096:	4b02      	ldr	r3, [pc, #8]	; (4020a0 <nmi_spi_write+0x1c>)
  402098:	4798      	blx	r3
}
  40209a:	b005      	add	sp, #20
  40209c:	f85d fb04 	ldr.w	pc, [sp], #4
  4020a0:	00400759 	.word	0x00400759

004020a4 <spi_cmd>:
{
  4020a4:	b570      	push	{r4, r5, r6, lr}
  4020a6:	b084      	sub	sp, #16
  4020a8:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  4020ac:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  4020b0:	38c1      	subs	r0, #193	; 0xc1
  4020b2:	280e      	cmp	r0, #14
  4020b4:	f200 80a2 	bhi.w	4021fc <spi_cmd+0x158>
  4020b8:	e8df f000 	tbb	[pc, r0]
  4020bc:	19664545 	.word	0x19664545
  4020c0:	5454332a 	.word	0x5454332a
  4020c4:	a0a0087f 	.word	0xa0a0087f
  4020c8:	a0a0      	.short	0xa0a0
  4020ca:	3c          	.byte	0x3c
  4020cb:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  4020cc:	0c0b      	lsrs	r3, r1, #16
  4020ce:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4020d2:	0a0b      	lsrs	r3, r1, #8
  4020d4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  4020d8:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  4020dc:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  4020de:	4b55      	ldr	r3, [pc, #340]	; (402234 <spi_cmd+0x190>)
  4020e0:	781b      	ldrb	r3, [r3, #0]
  4020e2:	2b00      	cmp	r3, #0
  4020e4:	f000 808c 	beq.w	402200 <spi_cmd+0x15c>
			len-=1;
  4020e8:	3901      	subs	r1, #1
  4020ea:	b2c9      	uxtb	r1, r1
  4020ec:	e09a      	b.n	402224 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  4020ee:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  4020f2:	b944      	cbnz	r4, 402106 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  4020f4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  4020f8:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  4020fc:	2300      	movs	r3, #0
  4020fe:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402102:	2105      	movs	r1, #5
		break;
  402104:	e7eb      	b.n	4020de <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  402106:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40210a:	f88d 3005 	strb.w	r3, [sp, #5]
  40210e:	e7f3      	b.n	4020f8 <spi_cmd+0x54>
		bc[1] = 0x00;
  402110:	2300      	movs	r3, #0
  402112:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402116:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  40211a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40211e:	2105      	movs	r1, #5
		break;
  402120:	e7dd      	b.n	4020de <spi_cmd+0x3a>
		bc[1] = 0x00;
  402122:	2300      	movs	r3, #0
  402124:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402128:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  40212c:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402130:	2105      	movs	r1, #5
		break;
  402132:	e7d4      	b.n	4020de <spi_cmd+0x3a>
		bc[1] = 0xff;
  402134:	23ff      	movs	r3, #255	; 0xff
  402136:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  40213a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  40213e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402142:	2105      	movs	r1, #5
		break;
  402144:	e7cb      	b.n	4020de <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  402146:	0c0a      	lsrs	r2, r1, #16
  402148:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40214c:	0a0a      	lsrs	r2, r1, #8
  40214e:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402152:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  402156:	0a1a      	lsrs	r2, r3, #8
  402158:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  40215c:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  402160:	2107      	movs	r1, #7
		break;
  402162:	e7bc      	b.n	4020de <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  402164:	0c0a      	lsrs	r2, r1, #16
  402166:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  40216a:	0a0a      	lsrs	r2, r1, #8
  40216c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402170:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  402174:	0c1a      	lsrs	r2, r3, #16
  402176:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  40217a:	0a1a      	lsrs	r2, r3, #8
  40217c:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  402180:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  402184:	2108      	movs	r1, #8
		break;
  402186:	e7aa      	b.n	4020de <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  402188:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  40218c:	b984      	cbnz	r4, 4021b0 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  40218e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  402192:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  402196:	0e13      	lsrs	r3, r2, #24
  402198:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  40219c:	0c13      	lsrs	r3, r2, #16
  40219e:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  4021a2:	0a13      	lsrs	r3, r2, #8
  4021a4:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  4021a8:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  4021ac:	2108      	movs	r1, #8
		break;
  4021ae:	e796      	b.n	4020de <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  4021b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4021b4:	f88d 3005 	strb.w	r3, [sp, #5]
  4021b8:	e7eb      	b.n	402192 <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  4021ba:	0c0b      	lsrs	r3, r1, #16
  4021bc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4021c0:	0a0b      	lsrs	r3, r1, #8
  4021c2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  4021c6:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  4021ca:	0e13      	lsrs	r3, r2, #24
  4021cc:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  4021d0:	0c13      	lsrs	r3, r2, #16
  4021d2:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  4021d6:	0a13      	lsrs	r3, r2, #8
  4021d8:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  4021dc:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  4021e0:	2109      	movs	r1, #9
		break;
  4021e2:	e77c      	b.n	4020de <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  4021e4:	f44f 7284 	mov.w	r2, #264	; 0x108
  4021e8:	4913      	ldr	r1, [pc, #76]	; (402238 <spi_cmd+0x194>)
  4021ea:	4814      	ldr	r0, [pc, #80]	; (40223c <spi_cmd+0x198>)
  4021ec:	4c14      	ldr	r4, [pc, #80]	; (402240 <spi_cmd+0x19c>)
  4021ee:	47a0      	blx	r4
  4021f0:	4814      	ldr	r0, [pc, #80]	; (402244 <spi_cmd+0x1a0>)
  4021f2:	47a0      	blx	r4
  4021f4:	4814      	ldr	r0, [pc, #80]	; (402248 <spi_cmd+0x1a4>)
  4021f6:	47a0      	blx	r4
			result = N_FAIL;
  4021f8:	2000      	movs	r0, #0
  4021fa:	e019      	b.n	402230 <spi_cmd+0x18c>
	switch (cmd) {
  4021fc:	2000      	movs	r0, #0
  4021fe:	e017      	b.n	402230 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402200:	1e4e      	subs	r6, r1, #1
  402202:	ab01      	add	r3, sp, #4
  402204:	199d      	adds	r5, r3, r6
  402206:	207f      	movs	r0, #127	; 0x7f
  402208:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  40220a:	4c10      	ldr	r4, [pc, #64]	; (40224c <spi_cmd+0x1a8>)
  40220c:	f812 3b01 	ldrb.w	r3, [r2], #1
  402210:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  402214:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  402216:	4295      	cmp	r5, r2
  402218:	d1f8      	bne.n	40220c <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  40221a:	ab04      	add	r3, sp, #16
  40221c:	441e      	add	r6, r3
  40221e:	0043      	lsls	r3, r0, #1
  402220:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402224:	a801      	add	r0, sp, #4
  402226:	4b0a      	ldr	r3, [pc, #40]	; (402250 <spi_cmd+0x1ac>)
  402228:	4798      	blx	r3
  40222a:	2800      	cmp	r0, #0
  40222c:	d1da      	bne.n	4021e4 <spi_cmd+0x140>
  40222e:	2001      	movs	r0, #1
}
  402230:	b004      	add	sp, #16
  402232:	bd70      	pop	{r4, r5, r6, pc}
  402234:	20400a14 	.word	0x20400a14
  402238:	0040b6a8 	.word	0x0040b6a8
  40223c:	0040b0cc 	.word	0x0040b0cc
  402240:	00404879 	.word	0x00404879
  402244:	0040bac4 	.word	0x0040bac4
  402248:	0040b0f8 	.word	0x0040b0f8
  40224c:	0040b724 	.word	0x0040b724
  402250:	00402085 	.word	0x00402085

00402254 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  402254:	b570      	push	{r4, r5, r6, lr}
  402256:	b082      	sub	sp, #8
  402258:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  40225a:	2831      	cmp	r0, #49	; 0x31
  40225c:	bf35      	itete	cc
  40225e:	2301      	movcc	r3, #1
  402260:	2300      	movcs	r3, #0
  402262:	25c3      	movcc	r5, #195	; 0xc3
  402264:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  402266:	9300      	str	r3, [sp, #0]
  402268:	2304      	movs	r3, #4
  40226a:	460a      	mov	r2, r1
  40226c:	4601      	mov	r1, r0
  40226e:	4628      	mov	r0, r5
  402270:	4e15      	ldr	r6, [pc, #84]	; (4022c8 <spi_write_reg+0x74>)
  402272:	47b0      	blx	r6
	if (result != N_OK) {
  402274:	2801      	cmp	r0, #1
  402276:	d00d      	beq.n	402294 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  402278:	f240 12eb 	movw	r2, #491	; 0x1eb
  40227c:	4913      	ldr	r1, [pc, #76]	; (4022cc <spi_write_reg+0x78>)
  40227e:	4814      	ldr	r0, [pc, #80]	; (4022d0 <spi_write_reg+0x7c>)
  402280:	4d14      	ldr	r5, [pc, #80]	; (4022d4 <spi_write_reg+0x80>)
  402282:	47a8      	blx	r5
  402284:	4621      	mov	r1, r4
  402286:	4814      	ldr	r0, [pc, #80]	; (4022d8 <spi_write_reg+0x84>)
  402288:	47a8      	blx	r5
  40228a:	4814      	ldr	r0, [pc, #80]	; (4022dc <spi_write_reg+0x88>)
  40228c:	47a8      	blx	r5
		return N_FAIL;
  40228e:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  402290:	b002      	add	sp, #8
  402292:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  402294:	4628      	mov	r0, r5
  402296:	4b12      	ldr	r3, [pc, #72]	; (4022e0 <spi_write_reg+0x8c>)
  402298:	4798      	blx	r3
	if (result != N_OK) {
  40229a:	2801      	cmp	r0, #1
  40229c:	d0f8      	beq.n	402290 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  40229e:	f240 12f1 	movw	r2, #497	; 0x1f1
  4022a2:	490a      	ldr	r1, [pc, #40]	; (4022cc <spi_write_reg+0x78>)
  4022a4:	480a      	ldr	r0, [pc, #40]	; (4022d0 <spi_write_reg+0x7c>)
  4022a6:	4d0b      	ldr	r5, [pc, #44]	; (4022d4 <spi_write_reg+0x80>)
  4022a8:	47a8      	blx	r5
  4022aa:	4621      	mov	r1, r4
  4022ac:	480d      	ldr	r0, [pc, #52]	; (4022e4 <spi_write_reg+0x90>)
  4022ae:	47a8      	blx	r5
  4022b0:	480a      	ldr	r0, [pc, #40]	; (4022dc <spi_write_reg+0x88>)
  4022b2:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4022b4:	2400      	movs	r4, #0
  4022b6:	9400      	str	r4, [sp, #0]
  4022b8:	4623      	mov	r3, r4
  4022ba:	4622      	mov	r2, r4
  4022bc:	4621      	mov	r1, r4
  4022be:	20cf      	movs	r0, #207	; 0xcf
  4022c0:	4d01      	ldr	r5, [pc, #4]	; (4022c8 <spi_write_reg+0x74>)
  4022c2:	47a8      	blx	r5
		return N_FAIL;
  4022c4:	4620      	mov	r0, r4
  4022c6:	e7e3      	b.n	402290 <spi_write_reg+0x3c>
  4022c8:	004020a5 	.word	0x004020a5
  4022cc:	0040b6dc 	.word	0x0040b6dc
  4022d0:	0040b0cc 	.word	0x0040b0cc
  4022d4:	00404879 	.word	0x00404879
  4022d8:	0040bc74 	.word	0x0040bc74
  4022dc:	0040b0f8 	.word	0x0040b0f8
  4022e0:	00401ea9 	.word	0x00401ea9
  4022e4:	0040bca0 	.word	0x0040bca0

004022e8 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  4022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022ec:	b084      	sub	sp, #16
  4022ee:	4604      	mov	r4, r0
  4022f0:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  4022f2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4022f6:	bf35      	itete	cc
  4022f8:	2601      	movcc	r6, #1
  4022fa:	2600      	movcs	r6, #0
  4022fc:	25c4      	movcc	r5, #196	; 0xc4
  4022fe:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402300:	9600      	str	r6, [sp, #0]
  402302:	2304      	movs	r3, #4
  402304:	2200      	movs	r2, #0
  402306:	4601      	mov	r1, r0
  402308:	4628      	mov	r0, r5
  40230a:	4f2c      	ldr	r7, [pc, #176]	; (4023bc <spi_read_reg+0xd4>)
  40230c:	47b8      	blx	r7
	if (result != N_OK) {
  40230e:	2801      	cmp	r0, #1
  402310:	d00e      	beq.n	402330 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  402312:	f240 2245 	movw	r2, #581	; 0x245
  402316:	492a      	ldr	r1, [pc, #168]	; (4023c0 <spi_read_reg+0xd8>)
  402318:	482a      	ldr	r0, [pc, #168]	; (4023c4 <spi_read_reg+0xdc>)
  40231a:	4d2b      	ldr	r5, [pc, #172]	; (4023c8 <spi_read_reg+0xe0>)
  40231c:	47a8      	blx	r5
  40231e:	4621      	mov	r1, r4
  402320:	482a      	ldr	r0, [pc, #168]	; (4023cc <spi_read_reg+0xe4>)
  402322:	47a8      	blx	r5
  402324:	482a      	ldr	r0, [pc, #168]	; (4023d0 <spi_read_reg+0xe8>)
  402326:	47a8      	blx	r5
		return N_FAIL;
  402328:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  40232a:	b004      	add	sp, #16
  40232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  402330:	4628      	mov	r0, r5
  402332:	4b28      	ldr	r3, [pc, #160]	; (4023d4 <spi_read_reg+0xec>)
  402334:	4798      	blx	r3
	if (result != N_OK) {
  402336:	2801      	cmp	r0, #1
  402338:	d014      	beq.n	402364 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  40233a:	f240 224b 	movw	r2, #587	; 0x24b
  40233e:	4920      	ldr	r1, [pc, #128]	; (4023c0 <spi_read_reg+0xd8>)
  402340:	4820      	ldr	r0, [pc, #128]	; (4023c4 <spi_read_reg+0xdc>)
  402342:	4d21      	ldr	r5, [pc, #132]	; (4023c8 <spi_read_reg+0xe0>)
  402344:	47a8      	blx	r5
  402346:	4621      	mov	r1, r4
  402348:	4823      	ldr	r0, [pc, #140]	; (4023d8 <spi_read_reg+0xf0>)
  40234a:	47a8      	blx	r5
  40234c:	4820      	ldr	r0, [pc, #128]	; (4023d0 <spi_read_reg+0xe8>)
  40234e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402350:	2400      	movs	r4, #0
  402352:	9400      	str	r4, [sp, #0]
  402354:	4623      	mov	r3, r4
  402356:	4622      	mov	r2, r4
  402358:	4621      	mov	r1, r4
  40235a:	20cf      	movs	r0, #207	; 0xcf
  40235c:	4d17      	ldr	r5, [pc, #92]	; (4023bc <spi_read_reg+0xd4>)
  40235e:	47a8      	blx	r5
		return N_FAIL;
  402360:	4620      	mov	r0, r4
  402362:	e7e2      	b.n	40232a <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  402364:	4632      	mov	r2, r6
  402366:	2104      	movs	r1, #4
  402368:	a803      	add	r0, sp, #12
  40236a:	4b1c      	ldr	r3, [pc, #112]	; (4023dc <spi_read_reg+0xf4>)
  40236c:	4798      	blx	r3
	if (result != N_OK) {
  40236e:	2801      	cmp	r0, #1
  402370:	d110      	bne.n	402394 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  402372:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  402376:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40237a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  40237c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  402380:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  402384:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  402386:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  40238a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  40238e:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  402392:	e7ca      	b.n	40232a <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  402394:	f240 2253 	movw	r2, #595	; 0x253
  402398:	4909      	ldr	r1, [pc, #36]	; (4023c0 <spi_read_reg+0xd8>)
  40239a:	480a      	ldr	r0, [pc, #40]	; (4023c4 <spi_read_reg+0xdc>)
  40239c:	4c0a      	ldr	r4, [pc, #40]	; (4023c8 <spi_read_reg+0xe0>)
  40239e:	47a0      	blx	r4
  4023a0:	480f      	ldr	r0, [pc, #60]	; (4023e0 <spi_read_reg+0xf8>)
  4023a2:	47a0      	blx	r4
  4023a4:	480a      	ldr	r0, [pc, #40]	; (4023d0 <spi_read_reg+0xe8>)
  4023a6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4023a8:	2400      	movs	r4, #0
  4023aa:	9400      	str	r4, [sp, #0]
  4023ac:	4623      	mov	r3, r4
  4023ae:	4622      	mov	r2, r4
  4023b0:	4621      	mov	r1, r4
  4023b2:	20cf      	movs	r0, #207	; 0xcf
  4023b4:	4d01      	ldr	r5, [pc, #4]	; (4023bc <spi_read_reg+0xd4>)
  4023b6:	47a8      	blx	r5
		return N_FAIL;
  4023b8:	4620      	mov	r0, r4
  4023ba:	e7b6      	b.n	40232a <spi_read_reg+0x42>
  4023bc:	004020a5 	.word	0x004020a5
  4023c0:	0040b6fc 	.word	0x0040b6fc
  4023c4:	0040b0cc 	.word	0x0040b0cc
  4023c8:	00404879 	.word	0x00404879
  4023cc:	0040bbf4 	.word	0x0040bbf4
  4023d0:	0040b0f8 	.word	0x0040b0f8
  4023d4:	00401ea9 	.word	0x00401ea9
  4023d8:	0040bc20 	.word	0x0040bc20
  4023dc:	00401f6d 	.word	0x00401f6d
  4023e0:	0040bc54 	.word	0x0040bc54

004023e4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4023e4:	2000      	movs	r0, #0
  4023e6:	4b01      	ldr	r3, [pc, #4]	; (4023ec <nm_spi_deinit+0x8>)
  4023e8:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4023ea:	4770      	bx	lr
  4023ec:	20400a14 	.word	0x20400a14

004023f0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4023f0:	b500      	push	{lr}
  4023f2:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4023f4:	a901      	add	r1, sp, #4
  4023f6:	4b03      	ldr	r3, [pc, #12]	; (402404 <nm_spi_read_reg+0x14>)
  4023f8:	4798      	blx	r3

	return u32Val;
}
  4023fa:	9801      	ldr	r0, [sp, #4]
  4023fc:	b003      	add	sp, #12
  4023fe:	f85d fb04 	ldr.w	pc, [sp], #4
  402402:	bf00      	nop
  402404:	004022e9 	.word	0x004022e9

00402408 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402408:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  40240a:	4b04      	ldr	r3, [pc, #16]	; (40241c <nm_spi_read_reg_with_ret+0x14>)
  40240c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40240e:	2801      	cmp	r0, #1

	return s8Ret;
}
  402410:	bf0c      	ite	eq
  402412:	2000      	moveq	r0, #0
  402414:	f06f 0005 	mvnne.w	r0, #5
  402418:	bd08      	pop	{r3, pc}
  40241a:	bf00      	nop
  40241c:	004022e9 	.word	0x004022e9

00402420 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  402420:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  402422:	4b04      	ldr	r3, [pc, #16]	; (402434 <nm_spi_write_reg+0x14>)
  402424:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  402426:	2801      	cmp	r0, #1

	return s8Ret;
}
  402428:	bf0c      	ite	eq
  40242a:	2000      	moveq	r0, #0
  40242c:	f06f 0005 	mvnne.w	r0, #5
  402430:	bd08      	pop	{r3, pc}
  402432:	bf00      	nop
  402434:	00402255 	.word	0x00402255

00402438 <nm_spi_init>:
{
  402438:	b530      	push	{r4, r5, lr}
  40243a:	b083      	sub	sp, #12
	uint32 reg =0;
  40243c:	2300      	movs	r3, #0
  40243e:	a902      	add	r1, sp, #8
  402440:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  402444:	4a34      	ldr	r2, [pc, #208]	; (402518 <nm_spi_init+0xe0>)
  402446:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  402448:	f64e 0024 	movw	r0, #59428	; 0xe824
  40244c:	4b33      	ldr	r3, [pc, #204]	; (40251c <nm_spi_init+0xe4>)
  40244e:	4798      	blx	r3
  402450:	b348      	cbz	r0, 4024a6 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  402452:	4b31      	ldr	r3, [pc, #196]	; (402518 <nm_spi_init+0xe0>)
  402454:	781b      	ldrb	r3, [r3, #0]
  402456:	b97b      	cbnz	r3, 402478 <nm_spi_init+0x40>
		reg &= ~0x70;
  402458:	9900      	ldr	r1, [sp, #0]
  40245a:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  40245e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402462:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  402464:	f64e 0024 	movw	r0, #59428	; 0xe824
  402468:	4b2d      	ldr	r3, [pc, #180]	; (402520 <nm_spi_init+0xe8>)
  40246a:	4798      	blx	r3
  40246c:	4604      	mov	r4, r0
  40246e:	2800      	cmp	r0, #0
  402470:	d039      	beq.n	4024e6 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  402472:	2201      	movs	r2, #1
  402474:	4b28      	ldr	r3, [pc, #160]	; (402518 <nm_spi_init+0xe0>)
  402476:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  402478:	a901      	add	r1, sp, #4
  40247a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40247e:	4b27      	ldr	r3, [pc, #156]	; (40251c <nm_spi_init+0xe4>)
  402480:	4798      	blx	r3
  402482:	2800      	cmp	r0, #0
  402484:	d03a      	beq.n	4024fc <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  402486:	f64e 0024 	movw	r0, #59428	; 0xe824
  40248a:	4b26      	ldr	r3, [pc, #152]	; (402524 <nm_spi_init+0xec>)
  40248c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40248e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  402492:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402496:	f64e 0024 	movw	r0, #59428	; 0xe824
  40249a:	4b23      	ldr	r3, [pc, #140]	; (402528 <nm_spi_init+0xf0>)
  40249c:	4798      	blx	r3
	return M2M_SUCCESS;
  40249e:	2400      	movs	r4, #0
}
  4024a0:	4620      	mov	r0, r4
  4024a2:	b003      	add	sp, #12
  4024a4:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  4024a6:	2201      	movs	r2, #1
  4024a8:	4b1b      	ldr	r3, [pc, #108]	; (402518 <nm_spi_init+0xe0>)
  4024aa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4024ac:	f240 22c5 	movw	r2, #709	; 0x2c5
  4024b0:	491e      	ldr	r1, [pc, #120]	; (40252c <nm_spi_init+0xf4>)
  4024b2:	481f      	ldr	r0, [pc, #124]	; (402530 <nm_spi_init+0xf8>)
  4024b4:	4c1f      	ldr	r4, [pc, #124]	; (402534 <nm_spi_init+0xfc>)
  4024b6:	47a0      	blx	r4
  4024b8:	481f      	ldr	r0, [pc, #124]	; (402538 <nm_spi_init+0x100>)
  4024ba:	47a0      	blx	r4
  4024bc:	481f      	ldr	r0, [pc, #124]	; (40253c <nm_spi_init+0x104>)
  4024be:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4024c0:	4669      	mov	r1, sp
  4024c2:	f64e 0024 	movw	r0, #59428	; 0xe824
  4024c6:	4b15      	ldr	r3, [pc, #84]	; (40251c <nm_spi_init+0xe4>)
  4024c8:	4798      	blx	r3
  4024ca:	4604      	mov	r4, r0
  4024cc:	2800      	cmp	r0, #0
  4024ce:	d1c0      	bne.n	402452 <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4024d0:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4024d4:	4915      	ldr	r1, [pc, #84]	; (40252c <nm_spi_init+0xf4>)
  4024d6:	4816      	ldr	r0, [pc, #88]	; (402530 <nm_spi_init+0xf8>)
  4024d8:	4d16      	ldr	r5, [pc, #88]	; (402534 <nm_spi_init+0xfc>)
  4024da:	47a8      	blx	r5
  4024dc:	4818      	ldr	r0, [pc, #96]	; (402540 <nm_spi_init+0x108>)
  4024de:	47a8      	blx	r5
  4024e0:	4816      	ldr	r0, [pc, #88]	; (40253c <nm_spi_init+0x104>)
  4024e2:	47a8      	blx	r5
			return 0;
  4024e4:	e7dc      	b.n	4024a0 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4024e6:	f240 22d2 	movw	r2, #722	; 0x2d2
  4024ea:	4910      	ldr	r1, [pc, #64]	; (40252c <nm_spi_init+0xf4>)
  4024ec:	4810      	ldr	r0, [pc, #64]	; (402530 <nm_spi_init+0xf8>)
  4024ee:	4d11      	ldr	r5, [pc, #68]	; (402534 <nm_spi_init+0xfc>)
  4024f0:	47a8      	blx	r5
  4024f2:	4814      	ldr	r0, [pc, #80]	; (402544 <nm_spi_init+0x10c>)
  4024f4:	47a8      	blx	r5
  4024f6:	4811      	ldr	r0, [pc, #68]	; (40253c <nm_spi_init+0x104>)
  4024f8:	47a8      	blx	r5
			return 0;
  4024fa:	e7d1      	b.n	4024a0 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4024fc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  402500:	490a      	ldr	r1, [pc, #40]	; (40252c <nm_spi_init+0xf4>)
  402502:	480b      	ldr	r0, [pc, #44]	; (402530 <nm_spi_init+0xf8>)
  402504:	4c0b      	ldr	r4, [pc, #44]	; (402534 <nm_spi_init+0xfc>)
  402506:	47a0      	blx	r4
  402508:	480f      	ldr	r0, [pc, #60]	; (402548 <nm_spi_init+0x110>)
  40250a:	47a0      	blx	r4
  40250c:	480b      	ldr	r0, [pc, #44]	; (40253c <nm_spi_init+0x104>)
  40250e:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  402510:	f06f 0405 	mvn.w	r4, #5
  402514:	e7c4      	b.n	4024a0 <nm_spi_init+0x68>
  402516:	bf00      	nop
  402518:	20400a14 	.word	0x20400a14
  40251c:	004022e9 	.word	0x004022e9
  402520:	00402255 	.word	0x00402255
  402524:	004023f1 	.word	0x004023f1
  402528:	00402421 	.word	0x00402421
  40252c:	0040b718 	.word	0x0040b718
  402530:	0040b0cc 	.word	0x0040b0cc
  402534:	00404879 	.word	0x00404879
  402538:	0040b824 	.word	0x0040b824
  40253c:	0040b0f8 	.word	0x0040b0f8
  402540:	0040b874 	.word	0x0040b874
  402544:	0040b8a4 	.word	0x0040b8a4
  402548:	0040b8d8 	.word	0x0040b8d8

0040254c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40254c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40254e:	b083      	sub	sp, #12
  402550:	4604      	mov	r4, r0
  402552:	460f      	mov	r7, r1
  402554:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  402556:	2200      	movs	r2, #0
  402558:	9200      	str	r2, [sp, #0]
  40255a:	462b      	mov	r3, r5
  40255c:	4601      	mov	r1, r0
  40255e:	20c8      	movs	r0, #200	; 0xc8
  402560:	4e22      	ldr	r6, [pc, #136]	; (4025ec <nm_spi_read_block+0xa0>)
  402562:	47b0      	blx	r6
	if (result != N_OK) {
  402564:	2801      	cmp	r0, #1
  402566:	d00e      	beq.n	402586 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  402568:	f44f 721d 	mov.w	r2, #628	; 0x274
  40256c:	4920      	ldr	r1, [pc, #128]	; (4025f0 <nm_spi_read_block+0xa4>)
  40256e:	4821      	ldr	r0, [pc, #132]	; (4025f4 <nm_spi_read_block+0xa8>)
  402570:	4d21      	ldr	r5, [pc, #132]	; (4025f8 <nm_spi_read_block+0xac>)
  402572:	47a8      	blx	r5
  402574:	4621      	mov	r1, r4
  402576:	4821      	ldr	r0, [pc, #132]	; (4025fc <nm_spi_read_block+0xb0>)
  402578:	47a8      	blx	r5
  40257a:	4821      	ldr	r0, [pc, #132]	; (402600 <nm_spi_read_block+0xb4>)
  40257c:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40257e:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  402582:	b003      	add	sp, #12
  402584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  402586:	20c8      	movs	r0, #200	; 0xc8
  402588:	4b1e      	ldr	r3, [pc, #120]	; (402604 <nm_spi_read_block+0xb8>)
  40258a:	4798      	blx	r3
	if (result != N_OK) {
  40258c:	2801      	cmp	r0, #1
  40258e:	d012      	beq.n	4025b6 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  402590:	f240 227a 	movw	r2, #634	; 0x27a
  402594:	4916      	ldr	r1, [pc, #88]	; (4025f0 <nm_spi_read_block+0xa4>)
  402596:	4817      	ldr	r0, [pc, #92]	; (4025f4 <nm_spi_read_block+0xa8>)
  402598:	4d17      	ldr	r5, [pc, #92]	; (4025f8 <nm_spi_read_block+0xac>)
  40259a:	47a8      	blx	r5
  40259c:	4621      	mov	r1, r4
  40259e:	481a      	ldr	r0, [pc, #104]	; (402608 <nm_spi_read_block+0xbc>)
  4025a0:	47a8      	blx	r5
  4025a2:	4817      	ldr	r0, [pc, #92]	; (402600 <nm_spi_read_block+0xb4>)
  4025a4:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4025a6:	2100      	movs	r1, #0
  4025a8:	9100      	str	r1, [sp, #0]
  4025aa:	460b      	mov	r3, r1
  4025ac:	460a      	mov	r2, r1
  4025ae:	20cf      	movs	r0, #207	; 0xcf
  4025b0:	4c0e      	ldr	r4, [pc, #56]	; (4025ec <nm_spi_read_block+0xa0>)
  4025b2:	47a0      	blx	r4
  4025b4:	e7e3      	b.n	40257e <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  4025b6:	2200      	movs	r2, #0
  4025b8:	4629      	mov	r1, r5
  4025ba:	4638      	mov	r0, r7
  4025bc:	4b13      	ldr	r3, [pc, #76]	; (40260c <nm_spi_read_block+0xc0>)
  4025be:	4798      	blx	r3
	if (result != N_OK) {
  4025c0:	2801      	cmp	r0, #1
  4025c2:	d011      	beq.n	4025e8 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  4025c4:	f44f 7221 	mov.w	r2, #644	; 0x284
  4025c8:	4909      	ldr	r1, [pc, #36]	; (4025f0 <nm_spi_read_block+0xa4>)
  4025ca:	480a      	ldr	r0, [pc, #40]	; (4025f4 <nm_spi_read_block+0xa8>)
  4025cc:	4c0a      	ldr	r4, [pc, #40]	; (4025f8 <nm_spi_read_block+0xac>)
  4025ce:	47a0      	blx	r4
  4025d0:	480f      	ldr	r0, [pc, #60]	; (402610 <nm_spi_read_block+0xc4>)
  4025d2:	47a0      	blx	r4
  4025d4:	480a      	ldr	r0, [pc, #40]	; (402600 <nm_spi_read_block+0xb4>)
  4025d6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4025d8:	2100      	movs	r1, #0
  4025da:	9100      	str	r1, [sp, #0]
  4025dc:	460b      	mov	r3, r1
  4025de:	460a      	mov	r2, r1
  4025e0:	20cf      	movs	r0, #207	; 0xcf
  4025e2:	4c02      	ldr	r4, [pc, #8]	; (4025ec <nm_spi_read_block+0xa0>)
  4025e4:	47a0      	blx	r4
  4025e6:	e7ca      	b.n	40257e <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4025e8:	2000      	movs	r0, #0
  4025ea:	e7ca      	b.n	402582 <nm_spi_read_block+0x36>
  4025ec:	004020a5 	.word	0x004020a5
  4025f0:	0040b70c 	.word	0x0040b70c
  4025f4:	0040b0cc 	.word	0x0040b0cc
  4025f8:	00404879 	.word	0x00404879
  4025fc:	0040b900 	.word	0x0040b900
  402600:	0040b0f8 	.word	0x0040b0f8
  402604:	00401ea9 	.word	0x00401ea9
  402608:	0040b930 	.word	0x0040b930
  40260c:	00401f6d 	.word	0x00401f6d
  402610:	0040b968 	.word	0x0040b968

00402614 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402618:	b085      	sub	sp, #20
  40261a:	4604      	mov	r4, r0
  40261c:	4688      	mov	r8, r1
  40261e:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  402620:	2200      	movs	r2, #0
  402622:	9200      	str	r2, [sp, #0]
  402624:	462b      	mov	r3, r5
  402626:	4601      	mov	r1, r0
  402628:	20c7      	movs	r0, #199	; 0xc7
  40262a:	4e4d      	ldr	r6, [pc, #308]	; (402760 <nm_spi_write_block+0x14c>)
  40262c:	47b0      	blx	r6
	if (result != N_OK) {
  40262e:	2801      	cmp	r0, #1
  402630:	d00f      	beq.n	402652 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  402632:	f240 220f 	movw	r2, #527	; 0x20f
  402636:	494b      	ldr	r1, [pc, #300]	; (402764 <nm_spi_write_block+0x150>)
  402638:	484b      	ldr	r0, [pc, #300]	; (402768 <nm_spi_write_block+0x154>)
  40263a:	4d4c      	ldr	r5, [pc, #304]	; (40276c <nm_spi_write_block+0x158>)
  40263c:	47a8      	blx	r5
  40263e:	4621      	mov	r1, r4
  402640:	484b      	ldr	r0, [pc, #300]	; (402770 <nm_spi_write_block+0x15c>)
  402642:	47a8      	blx	r5
  402644:	484b      	ldr	r0, [pc, #300]	; (402774 <nm_spi_write_block+0x160>)
  402646:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  402648:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40264c:	b005      	add	sp, #20
  40264e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  402652:	20c7      	movs	r0, #199	; 0xc7
  402654:	4b48      	ldr	r3, [pc, #288]	; (402778 <nm_spi_write_block+0x164>)
  402656:	4798      	blx	r3
	if (result != N_OK) {
  402658:	2801      	cmp	r0, #1
  40265a:	d012      	beq.n	402682 <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  40265c:	f240 2215 	movw	r2, #533	; 0x215
  402660:	4940      	ldr	r1, [pc, #256]	; (402764 <nm_spi_write_block+0x150>)
  402662:	4841      	ldr	r0, [pc, #260]	; (402768 <nm_spi_write_block+0x154>)
  402664:	4d41      	ldr	r5, [pc, #260]	; (40276c <nm_spi_write_block+0x158>)
  402666:	47a8      	blx	r5
  402668:	4621      	mov	r1, r4
  40266a:	4844      	ldr	r0, [pc, #272]	; (40277c <nm_spi_write_block+0x168>)
  40266c:	47a8      	blx	r5
  40266e:	4841      	ldr	r0, [pc, #260]	; (402774 <nm_spi_write_block+0x160>)
  402670:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402672:	2100      	movs	r1, #0
  402674:	9100      	str	r1, [sp, #0]
  402676:	460b      	mov	r3, r1
  402678:	460a      	mov	r2, r1
  40267a:	20cf      	movs	r0, #207	; 0xcf
  40267c:	4c38      	ldr	r4, [pc, #224]	; (402760 <nm_spi_write_block+0x14c>)
  40267e:	47a0      	blx	r4
  402680:	e7e2      	b.n	402648 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  402682:	2400      	movs	r4, #0
  402684:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  402688:	4f3d      	ldr	r7, [pc, #244]	; (402780 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  40268a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 402798 <nm_spi_write_block+0x184>
  40268e:	e01d      	b.n	4026cc <nm_spi_write_block+0xb8>
				order = 0x2;
  402690:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402694:	bf94      	ite	ls
  402696:	2303      	movls	r3, #3
  402698:	2302      	movhi	r3, #2
		cmd |= order;
  40269a:	f063 030f 	orn	r3, r3, #15
  40269e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4026a2:	2101      	movs	r1, #1
  4026a4:	f10d 000b 	add.w	r0, sp, #11
  4026a8:	47b8      	blx	r7
  4026aa:	b9e8      	cbnz	r0, 4026e8 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  4026ac:	4631      	mov	r1, r6
  4026ae:	eb08 0004 	add.w	r0, r8, r4
  4026b2:	47b8      	blx	r7
  4026b4:	2800      	cmp	r0, #0
  4026b6:	d135      	bne.n	402724 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  4026b8:	f899 3000 	ldrb.w	r3, [r9]
  4026bc:	2b00      	cmp	r3, #0
  4026be:	d03c      	beq.n	40273a <nm_spi_write_block+0x126>
		ix += nbytes;
  4026c0:	4434      	add	r4, r6
  4026c2:	b224      	sxth	r4, r4
		sz -= nbytes;
  4026c4:	1bad      	subs	r5, r5, r6
  4026c6:	b2ad      	uxth	r5, r5
	} while (sz);
  4026c8:	2d00      	cmp	r5, #0
  4026ca:	d046      	beq.n	40275a <nm_spi_write_block+0x146>
  4026cc:	462e      	mov	r6, r5
  4026ce:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4026d2:	bf28      	it	cs
  4026d4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  4026d8:	2c00      	cmp	r4, #0
  4026da:	d1d9      	bne.n	402690 <nm_spi_write_block+0x7c>
				order = 0x1;
  4026dc:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4026e0:	bf94      	ite	ls
  4026e2:	2303      	movls	r3, #3
  4026e4:	2301      	movhi	r3, #1
  4026e6:	e7d8      	b.n	40269a <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4026e8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4026ec:	4925      	ldr	r1, [pc, #148]	; (402784 <nm_spi_write_block+0x170>)
  4026ee:	481e      	ldr	r0, [pc, #120]	; (402768 <nm_spi_write_block+0x154>)
  4026f0:	4c1e      	ldr	r4, [pc, #120]	; (40276c <nm_spi_write_block+0x158>)
  4026f2:	47a0      	blx	r4
  4026f4:	4824      	ldr	r0, [pc, #144]	; (402788 <nm_spi_write_block+0x174>)
  4026f6:	47a0      	blx	r4
  4026f8:	481e      	ldr	r0, [pc, #120]	; (402774 <nm_spi_write_block+0x160>)
  4026fa:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4026fc:	f240 2226 	movw	r2, #550	; 0x226
  402700:	4918      	ldr	r1, [pc, #96]	; (402764 <nm_spi_write_block+0x150>)
  402702:	4819      	ldr	r0, [pc, #100]	; (402768 <nm_spi_write_block+0x154>)
  402704:	4c19      	ldr	r4, [pc, #100]	; (40276c <nm_spi_write_block+0x158>)
  402706:	47a0      	blx	r4
  402708:	4820      	ldr	r0, [pc, #128]	; (40278c <nm_spi_write_block+0x178>)
  40270a:	47a0      	blx	r4
  40270c:	4819      	ldr	r0, [pc, #100]	; (402774 <nm_spi_write_block+0x160>)
  40270e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402710:	2400      	movs	r4, #0
  402712:	9400      	str	r4, [sp, #0]
  402714:	4623      	mov	r3, r4
  402716:	4622      	mov	r2, r4
  402718:	4621      	mov	r1, r4
  40271a:	20cf      	movs	r0, #207	; 0xcf
  40271c:	4d10      	ldr	r5, [pc, #64]	; (402760 <nm_spi_write_block+0x14c>)
  40271e:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402720:	4620      	mov	r0, r4
  402722:	e793      	b.n	40264c <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  402724:	f240 12b1 	movw	r2, #433	; 0x1b1
  402728:	4916      	ldr	r1, [pc, #88]	; (402784 <nm_spi_write_block+0x170>)
  40272a:	480f      	ldr	r0, [pc, #60]	; (402768 <nm_spi_write_block+0x154>)
  40272c:	4c0f      	ldr	r4, [pc, #60]	; (40276c <nm_spi_write_block+0x158>)
  40272e:	47a0      	blx	r4
  402730:	4817      	ldr	r0, [pc, #92]	; (402790 <nm_spi_write_block+0x17c>)
  402732:	47a0      	blx	r4
  402734:	480f      	ldr	r0, [pc, #60]	; (402774 <nm_spi_write_block+0x160>)
  402736:	47a0      	blx	r4
  402738:	e7e0      	b.n	4026fc <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  40273a:	2102      	movs	r1, #2
  40273c:	a803      	add	r0, sp, #12
  40273e:	47b8      	blx	r7
  402740:	2800      	cmp	r0, #0
  402742:	d0bd      	beq.n	4026c0 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  402744:	f240 12bb 	movw	r2, #443	; 0x1bb
  402748:	490e      	ldr	r1, [pc, #56]	; (402784 <nm_spi_write_block+0x170>)
  40274a:	4807      	ldr	r0, [pc, #28]	; (402768 <nm_spi_write_block+0x154>)
  40274c:	4c07      	ldr	r4, [pc, #28]	; (40276c <nm_spi_write_block+0x158>)
  40274e:	47a0      	blx	r4
  402750:	4810      	ldr	r0, [pc, #64]	; (402794 <nm_spi_write_block+0x180>)
  402752:	47a0      	blx	r4
  402754:	4807      	ldr	r0, [pc, #28]	; (402774 <nm_spi_write_block+0x160>)
  402756:	47a0      	blx	r4
  402758:	e7d0      	b.n	4026fc <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40275a:	2000      	movs	r0, #0
  40275c:	e776      	b.n	40264c <nm_spi_write_block+0x38>
  40275e:	bf00      	nop
  402760:	004020a5 	.word	0x004020a5
  402764:	0040b6ec 	.word	0x0040b6ec
  402768:	0040b0cc 	.word	0x0040b0cc
  40276c:	00404879 	.word	0x00404879
  402770:	0040b990 	.word	0x0040b990
  402774:	0040b0f8 	.word	0x0040b0f8
  402778:	00401ea9 	.word	0x00401ea9
  40277c:	0040b9c0 	.word	0x0040b9c0
  402780:	00402085 	.word	0x00402085
  402784:	0040b6cc 	.word	0x0040b6cc
  402788:	0040b9f8 	.word	0x0040b9f8
  40278c:	0040ba9c 	.word	0x0040ba9c
  402790:	0040ba30 	.word	0x0040ba30
  402794:	0040ba64 	.word	0x0040ba64
  402798:	20400a14 	.word	0x20400a14

0040279c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40279c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027a0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  4027a4:	b194      	cbz	r4, 4027cc <Socket_ReadSocketData+0x30>
  4027a6:	4681      	mov	r9, r0
  4027a8:	460e      	mov	r6, r1
  4027aa:	4692      	mov	sl, r2
  4027ac:	4698      	mov	r8, r3
  4027ae:	0103      	lsls	r3, r0, #4
  4027b0:	4922      	ldr	r1, [pc, #136]	; (40283c <Socket_ReadSocketData+0xa0>)
  4027b2:	58cb      	ldr	r3, [r1, r3]
  4027b4:	b153      	cbz	r3, 4027cc <Socket_ReadSocketData+0x30>
  4027b6:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4027ba:	889b      	ldrh	r3, [r3, #4]
  4027bc:	b29b      	uxth	r3, r3
  4027be:	b12b      	cbz	r3, 4027cc <Socket_ReadSocketData+0x30>
  4027c0:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4027c4:	7a9b      	ldrb	r3, [r3, #10]
  4027c6:	b2db      	uxtb	r3, r3
  4027c8:	2b01      	cmp	r3, #1
  4027ca:	d001      	beq.n	4027d0 <Socket_ReadSocketData+0x34>
  4027cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4027d0:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4027d2:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4027d6:	f8df b07c 	ldr.w	fp, [pc, #124]	; 402854 <Socket_ReadSocketData+0xb8>
  4027da:	e006      	b.n	4027ea <Socket_ReadSocketData+0x4e>
  4027dc:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  4027de:	2301      	movs	r3, #1
  4027e0:	e00b      	b.n	4027fa <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  4027e2:	1b64      	subs	r4, r4, r5
  4027e4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4027e6:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4027e8:	b1ec      	cbz	r4, 402826 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4027ea:	88bb      	ldrh	r3, [r7, #4]
  4027ec:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4027ee:	b21b      	sxth	r3, r3
  4027f0:	2b00      	cmp	r3, #0
  4027f2:	ddf3      	ble.n	4027dc <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4027f4:	88bd      	ldrh	r5, [r7, #4]
  4027f6:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4027f8:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4027fa:	6839      	ldr	r1, [r7, #0]
  4027fc:	462a      	mov	r2, r5
  4027fe:	4640      	mov	r0, r8
  402800:	47d8      	blx	fp
  402802:	b990      	cbnz	r0, 40282a <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  402804:	683b      	ldr	r3, [r7, #0]
  402806:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  402808:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  40280a:	88f3      	ldrh	r3, [r6, #6]
  40280c:	1b5b      	subs	r3, r3, r5
  40280e:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  402810:	4b0b      	ldr	r3, [pc, #44]	; (402840 <Socket_ReadSocketData+0xa4>)
  402812:	681b      	ldr	r3, [r3, #0]
  402814:	2b00      	cmp	r3, #0
  402816:	d0e4      	beq.n	4027e2 <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  402818:	4b09      	ldr	r3, [pc, #36]	; (402840 <Socket_ReadSocketData+0xa4>)
  40281a:	681b      	ldr	r3, [r3, #0]
  40281c:	4632      	mov	r2, r6
  40281e:	4651      	mov	r1, sl
  402820:	4648      	mov	r0, r9
  402822:	4798      	blx	r3
  402824:	e7dd      	b.n	4027e2 <Socket_ReadSocketData+0x46>
  402826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  40282a:	4806      	ldr	r0, [pc, #24]	; (402844 <Socket_ReadSocketData+0xa8>)
  40282c:	4d06      	ldr	r5, [pc, #24]	; (402848 <Socket_ReadSocketData+0xac>)
  40282e:	47a8      	blx	r5
  402830:	4621      	mov	r1, r4
  402832:	4806      	ldr	r0, [pc, #24]	; (40284c <Socket_ReadSocketData+0xb0>)
  402834:	47a8      	blx	r5
  402836:	4806      	ldr	r0, [pc, #24]	; (402850 <Socket_ReadSocketData+0xb4>)
  402838:	47a8      	blx	r5
	}
}
  40283a:	e7c7      	b.n	4027cc <Socket_ReadSocketData+0x30>
  40283c:	20401670 	.word	0x20401670
  402840:	20401720 	.word	0x20401720
  402844:	0040b3a0 	.word	0x0040b3a0
  402848:	00404879 	.word	0x00404879
  40284c:	0040bcd8 	.word	0x0040bcd8
  402850:	0040b0f8 	.word	0x0040b0f8
  402854:	00400ed5 	.word	0x00400ed5

00402858 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  402858:	b5f0      	push	{r4, r5, r6, r7, lr}
  40285a:	b099      	sub	sp, #100	; 0x64
  40285c:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40285e:	2841      	cmp	r0, #65	; 0x41
  402860:	d049      	beq.n	4028f6 <m2m_ip_cb+0x9e>
  402862:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  402864:	2842      	cmp	r0, #66	; 0x42
  402866:	d05f      	beq.n	402928 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  402868:	2843      	cmp	r0, #67	; 0x43
  40286a:	d075      	beq.n	402958 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  40286c:	2844      	cmp	r0, #68	; 0x44
  40286e:	f000 80b0 	beq.w	4029d2 <m2m_ip_cb+0x17a>
  402872:	284b      	cmp	r0, #75	; 0x4b
  402874:	f000 80ad 	beq.w	4029d2 <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  402878:	284a      	cmp	r0, #74	; 0x4a
  40287a:	f000 80cc 	beq.w	402a16 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40287e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  402882:	b2db      	uxtb	r3, r3
  402884:	2b07      	cmp	r3, #7
  402886:	f200 80f4 	bhi.w	402a72 <m2m_ip_cb+0x21a>
  40288a:	2285      	movs	r2, #133	; 0x85
  40288c:	fa22 f303 	lsr.w	r3, r2, r3
  402890:	f013 0f01 	tst.w	r3, #1
  402894:	f000 80ed 	beq.w	402a72 <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  402898:	2848      	cmp	r0, #72	; 0x48
  40289a:	bf14      	ite	ne
  40289c:	2706      	movne	r7, #6
  40289e:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  4028a0:	2300      	movs	r3, #0
  4028a2:	2210      	movs	r2, #16
  4028a4:	a903      	add	r1, sp, #12
  4028a6:	4620      	mov	r0, r4
  4028a8:	4e93      	ldr	r6, [pc, #588]	; (402af8 <m2m_ip_cb+0x2a0>)
  4028aa:	47b0      	blx	r6
  4028ac:	2800      	cmp	r0, #0
  4028ae:	f040 80b0 	bne.w	402a12 <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4028b2:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4028b6:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4028ba:	4a90      	ldr	r2, [pc, #576]	; (402afc <m2m_ip_cb+0x2a4>)
  4028bc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4028c0:	2300      	movs	r3, #0
  4028c2:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4028c4:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4028c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4028cc:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4028d0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4028d4:	9e04      	ldr	r6, [sp, #16]
  4028d6:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4028d8:	88d2      	ldrh	r2, [r2, #6]
  4028da:	b292      	uxth	r2, r2
  4028dc:	4291      	cmp	r1, r2
  4028de:	f000 80ac 	beq.w	402a3a <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4028e2:	2d10      	cmp	r5, #16
  4028e4:	f240 8095 	bls.w	402a12 <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4028e8:	2301      	movs	r3, #1
  4028ea:	2200      	movs	r2, #0
  4028ec:	4611      	mov	r1, r2
  4028ee:	4610      	mov	r0, r2
  4028f0:	4c81      	ldr	r4, [pc, #516]	; (402af8 <m2m_ip_cb+0x2a0>)
  4028f2:	47a0      	blx	r4
	{
  4028f4:	e08d      	b.n	402a12 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4028f6:	2300      	movs	r3, #0
  4028f8:	2204      	movs	r2, #4
  4028fa:	a907      	add	r1, sp, #28
  4028fc:	4620      	mov	r0, r4
  4028fe:	4c7e      	ldr	r4, [pc, #504]	; (402af8 <m2m_ip_cb+0x2a0>)
  402900:	47a0      	blx	r4
  402902:	2800      	cmp	r0, #0
  402904:	f040 8085 	bne.w	402a12 <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  402908:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40290c:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402910:	4b7b      	ldr	r3, [pc, #492]	; (402b00 <m2m_ip_cb+0x2a8>)
  402912:	681b      	ldr	r3, [r3, #0]
  402914:	2b00      	cmp	r3, #0
  402916:	d07c      	beq.n	402a12 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  402918:	4b79      	ldr	r3, [pc, #484]	; (402b00 <m2m_ip_cb+0x2a8>)
  40291a:	681b      	ldr	r3, [r3, #0]
  40291c:	aa03      	add	r2, sp, #12
  40291e:	2101      	movs	r1, #1
  402920:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402924:	4798      	blx	r3
  402926:	e074      	b.n	402a12 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  402928:	2300      	movs	r3, #0
  40292a:	2204      	movs	r2, #4
  40292c:	a907      	add	r1, sp, #28
  40292e:	4620      	mov	r0, r4
  402930:	4c71      	ldr	r4, [pc, #452]	; (402af8 <m2m_ip_cb+0x2a0>)
  402932:	47a0      	blx	r4
  402934:	2800      	cmp	r0, #0
  402936:	d16c      	bne.n	402a12 <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  402938:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40293c:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  402940:	4b6f      	ldr	r3, [pc, #444]	; (402b00 <m2m_ip_cb+0x2a8>)
  402942:	681b      	ldr	r3, [r3, #0]
  402944:	2b00      	cmp	r3, #0
  402946:	d064      	beq.n	402a12 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  402948:	4b6d      	ldr	r3, [pc, #436]	; (402b00 <m2m_ip_cb+0x2a8>)
  40294a:	681b      	ldr	r3, [r3, #0]
  40294c:	aa03      	add	r2, sp, #12
  40294e:	2102      	movs	r1, #2
  402950:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  402954:	4798      	blx	r3
  402956:	e05c      	b.n	402a12 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  402958:	2300      	movs	r3, #0
  40295a:	220c      	movs	r2, #12
  40295c:	eb0d 0102 	add.w	r1, sp, r2
  402960:	4620      	mov	r0, r4
  402962:	4c65      	ldr	r4, [pc, #404]	; (402af8 <m2m_ip_cb+0x2a0>)
  402964:	47a0      	blx	r4
  402966:	2800      	cmp	r0, #0
  402968:	d153      	bne.n	402a12 <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  40296a:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40296e:	2b00      	cmp	r3, #0
  402970:	db19      	blt.n	4029a6 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  402972:	4a62      	ldr	r2, [pc, #392]	; (402afc <m2m_ip_cb+0x2a4>)
  402974:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  402978:	2100      	movs	r1, #0
  40297a:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  40297c:	2101      	movs	r1, #1
  40297e:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  402980:	4960      	ldr	r1, [pc, #384]	; (402b04 <m2m_ip_cb+0x2ac>)
  402982:	880a      	ldrh	r2, [r1, #0]
  402984:	3201      	adds	r2, #1
  402986:	b292      	uxth	r2, r2
  402988:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  40298a:	880a      	ldrh	r2, [r1, #0]
  40298c:	b292      	uxth	r2, r2
  40298e:	b91a      	cbnz	r2, 402998 <m2m_ip_cb+0x140>
					++gu16SessionID;
  402990:	880a      	ldrh	r2, [r1, #0]
  402992:	3201      	adds	r2, #1
  402994:	b292      	uxth	r2, r2
  402996:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  402998:	4a5a      	ldr	r2, [pc, #360]	; (402b04 <m2m_ip_cb+0x2ac>)
  40299a:	8811      	ldrh	r1, [r2, #0]
  40299c:	b289      	uxth	r1, r1
  40299e:	4a57      	ldr	r2, [pc, #348]	; (402afc <m2m_ip_cb+0x2a4>)
  4029a0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4029a4:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  4029a6:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4029aa:	2302      	movs	r3, #2
  4029ac:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4029b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4029b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4029b8:	9b04      	ldr	r3, [sp, #16]
  4029ba:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4029bc:	4b50      	ldr	r3, [pc, #320]	; (402b00 <m2m_ip_cb+0x2a8>)
  4029be:	681b      	ldr	r3, [r3, #0]
  4029c0:	b33b      	cbz	r3, 402a12 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  4029c2:	4b4f      	ldr	r3, [pc, #316]	; (402b00 <m2m_ip_cb+0x2a8>)
  4029c4:	681b      	ldr	r3, [r3, #0]
  4029c6:	aa07      	add	r2, sp, #28
  4029c8:	2104      	movs	r1, #4
  4029ca:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4029ce:	4798      	blx	r3
  4029d0:	e01f      	b.n	402a12 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4029d2:	2300      	movs	r3, #0
  4029d4:	2204      	movs	r2, #4
  4029d6:	a907      	add	r1, sp, #28
  4029d8:	4620      	mov	r0, r4
  4029da:	4c47      	ldr	r4, [pc, #284]	; (402af8 <m2m_ip_cb+0x2a0>)
  4029dc:	47a0      	blx	r4
  4029de:	b9c0      	cbnz	r0, 402a12 <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4029e0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4029e4:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4029e8:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4029ec:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4029f0:	b93b      	cbnz	r3, 402a02 <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4029f2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4029f6:	3b08      	subs	r3, #8
  4029f8:	b29b      	uxth	r3, r3
  4029fa:	4a40      	ldr	r2, [pc, #256]	; (402afc <m2m_ip_cb+0x2a4>)
  4029fc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402a00:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  402a02:	4b3f      	ldr	r3, [pc, #252]	; (402b00 <m2m_ip_cb+0x2a8>)
  402a04:	681b      	ldr	r3, [r3, #0]
  402a06:	b123      	cbz	r3, 402a12 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  402a08:	4b3d      	ldr	r3, [pc, #244]	; (402b00 <m2m_ip_cb+0x2a8>)
  402a0a:	681b      	ldr	r3, [r3, #0]
  402a0c:	aa03      	add	r2, sp, #12
  402a0e:	2105      	movs	r1, #5
  402a10:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  402a12:	b019      	add	sp, #100	; 0x64
  402a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  402a16:	2300      	movs	r3, #0
  402a18:	2244      	movs	r2, #68	; 0x44
  402a1a:	a907      	add	r1, sp, #28
  402a1c:	4620      	mov	r0, r4
  402a1e:	4c36      	ldr	r4, [pc, #216]	; (402af8 <m2m_ip_cb+0x2a0>)
  402a20:	47a0      	blx	r4
  402a22:	2800      	cmp	r0, #0
  402a24:	d1f5      	bne.n	402a12 <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  402a26:	4b38      	ldr	r3, [pc, #224]	; (402b08 <m2m_ip_cb+0x2b0>)
  402a28:	681b      	ldr	r3, [r3, #0]
  402a2a:	2b00      	cmp	r3, #0
  402a2c:	d0f1      	beq.n	402a12 <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  402a2e:	4b36      	ldr	r3, [pc, #216]	; (402b08 <m2m_ip_cb+0x2b0>)
  402a30:	681b      	ldr	r3, [r3, #0]
  402a32:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402a34:	a807      	add	r0, sp, #28
  402a36:	4798      	blx	r3
  402a38:	e7eb      	b.n	402a12 <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  402a3a:	f1be 0f00 	cmp.w	lr, #0
  402a3e:	dd01      	ble.n	402a44 <m2m_ip_cb+0x1ec>
  402a40:	45ae      	cmp	lr, r5
  402a42:	db0d      	blt.n	402a60 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  402a44:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  402a48:	2300      	movs	r3, #0
  402a4a:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  402a4c:	4b2c      	ldr	r3, [pc, #176]	; (402b00 <m2m_ip_cb+0x2a8>)
  402a4e:	681b      	ldr	r3, [r3, #0]
  402a50:	2b00      	cmp	r3, #0
  402a52:	d0de      	beq.n	402a12 <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  402a54:	4b2a      	ldr	r3, [pc, #168]	; (402b00 <m2m_ip_cb+0x2a8>)
  402a56:	681b      	ldr	r3, [r3, #0]
  402a58:	aa07      	add	r2, sp, #28
  402a5a:	4639      	mov	r1, r7
  402a5c:	4798      	blx	r3
  402a5e:	e7d8      	b.n	402a12 <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  402a60:	fa1f f28e 	uxth.w	r2, lr
  402a64:	9200      	str	r2, [sp, #0]
  402a66:	4423      	add	r3, r4
  402a68:	463a      	mov	r2, r7
  402a6a:	a907      	add	r1, sp, #28
  402a6c:	4c27      	ldr	r4, [pc, #156]	; (402b0c <m2m_ip_cb+0x2b4>)
  402a6e:	47a0      	blx	r4
  402a70:	e7cf      	b.n	402a12 <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  402a72:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  402a76:	2b45      	cmp	r3, #69	; 0x45
  402a78:	d019      	beq.n	402aae <m2m_ip_cb+0x256>
  402a7a:	284c      	cmp	r0, #76	; 0x4c
  402a7c:	d017      	beq.n	402aae <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  402a7e:	2852      	cmp	r0, #82	; 0x52
  402a80:	d1c7      	bne.n	402a12 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  402a82:	2301      	movs	r3, #1
  402a84:	2214      	movs	r2, #20
  402a86:	a907      	add	r1, sp, #28
  402a88:	4620      	mov	r0, r4
  402a8a:	4c1b      	ldr	r4, [pc, #108]	; (402af8 <m2m_ip_cb+0x2a0>)
  402a8c:	47a0      	blx	r4
  402a8e:	2800      	cmp	r0, #0
  402a90:	d1bf      	bne.n	402a12 <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  402a92:	4b1f      	ldr	r3, [pc, #124]	; (402b10 <m2m_ip_cb+0x2b8>)
  402a94:	9a08      	ldr	r2, [sp, #32]
  402a96:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  402a98:	681b      	ldr	r3, [r3, #0]
  402a9a:	2b00      	cmp	r3, #0
  402a9c:	d0b9      	beq.n	402a12 <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  402a9e:	4b1c      	ldr	r3, [pc, #112]	; (402b10 <m2m_ip_cb+0x2b8>)
  402aa0:	681b      	ldr	r3, [r3, #0]
  402aa2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  402aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
  402aa8:	9807      	ldr	r0, [sp, #28]
  402aaa:	4798      	blx	r3
}
  402aac:	e7b1      	b.n	402a12 <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  402aae:	2847      	cmp	r0, #71	; 0x47
  402ab0:	bf14      	ite	ne
  402ab2:	2507      	movne	r5, #7
  402ab4:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  402ab6:	2300      	movs	r3, #0
  402ab8:	2208      	movs	r2, #8
  402aba:	a907      	add	r1, sp, #28
  402abc:	4620      	mov	r0, r4
  402abe:	4c0e      	ldr	r4, [pc, #56]	; (402af8 <m2m_ip_cb+0x2a0>)
  402ac0:	47a0      	blx	r4
  402ac2:	2800      	cmp	r0, #0
  402ac4:	d1a5      	bne.n	402a12 <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  402ac6:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  402aca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  402ace:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  402ad2:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  402ad6:	4b09      	ldr	r3, [pc, #36]	; (402afc <m2m_ip_cb+0x2a4>)
  402ad8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402adc:	88db      	ldrh	r3, [r3, #6]
  402ade:	b29b      	uxth	r3, r3
  402ae0:	429a      	cmp	r2, r3
  402ae2:	d196      	bne.n	402a12 <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  402ae4:	4b06      	ldr	r3, [pc, #24]	; (402b00 <m2m_ip_cb+0x2a8>)
  402ae6:	681b      	ldr	r3, [r3, #0]
  402ae8:	2b00      	cmp	r3, #0
  402aea:	d092      	beq.n	402a12 <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  402aec:	4b04      	ldr	r3, [pc, #16]	; (402b00 <m2m_ip_cb+0x2a8>)
  402aee:	681b      	ldr	r3, [r3, #0]
  402af0:	aa03      	add	r2, sp, #12
  402af2:	4629      	mov	r1, r5
  402af4:	4798      	blx	r3
	{
  402af6:	e78c      	b.n	402a12 <m2m_ip_cb+0x1ba>
  402af8:	00400ed5 	.word	0x00400ed5
  402afc:	20401670 	.word	0x20401670
  402b00:	20401720 	.word	0x20401720
  402b04:	20400a16 	.word	0x20400a16
  402b08:	20401728 	.word	0x20401728
  402b0c:	0040279d 	.word	0x0040279d
  402b10:	20401724 	.word	0x20401724

00402b14 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  402b14:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  402b16:	4b0a      	ldr	r3, [pc, #40]	; (402b40 <socketInit+0x2c>)
  402b18:	781b      	ldrb	r3, [r3, #0]
  402b1a:	b103      	cbz	r3, 402b1e <socketInit+0xa>
  402b1c:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  402b1e:	22b0      	movs	r2, #176	; 0xb0
  402b20:	2100      	movs	r1, #0
  402b22:	4808      	ldr	r0, [pc, #32]	; (402b44 <socketInit+0x30>)
  402b24:	4b08      	ldr	r3, [pc, #32]	; (402b48 <socketInit+0x34>)
  402b26:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  402b28:	4908      	ldr	r1, [pc, #32]	; (402b4c <socketInit+0x38>)
  402b2a:	2002      	movs	r0, #2
  402b2c:	4b08      	ldr	r3, [pc, #32]	; (402b50 <socketInit+0x3c>)
  402b2e:	4798      	blx	r3
		gbSocketInit=1;
  402b30:	2201      	movs	r2, #1
  402b32:	4b03      	ldr	r3, [pc, #12]	; (402b40 <socketInit+0x2c>)
  402b34:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  402b36:	2200      	movs	r2, #0
  402b38:	4b06      	ldr	r3, [pc, #24]	; (402b54 <socketInit+0x40>)
  402b3a:	801a      	strh	r2, [r3, #0]
	}
}
  402b3c:	e7ee      	b.n	402b1c <socketInit+0x8>
  402b3e:	bf00      	nop
  402b40:	20400a15 	.word	0x20400a15
  402b44:	20401670 	.word	0x20401670
  402b48:	00400881 	.word	0x00400881
  402b4c:	00402859 	.word	0x00402859
  402b50:	00400fe9 	.word	0x00400fe9
  402b54:	20400a16 	.word	0x20400a16

00402b58 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  402b58:	4b02      	ldr	r3, [pc, #8]	; (402b64 <registerSocketCallback+0xc>)
  402b5a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  402b5c:	4b02      	ldr	r3, [pc, #8]	; (402b68 <registerSocketCallback+0x10>)
  402b5e:	6019      	str	r1, [r3, #0]
  402b60:	4770      	bx	lr
  402b62:	bf00      	nop
  402b64:	20401720 	.word	0x20401720
  402b68:	20401728 	.word	0x20401728

00402b6c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  402b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b6e:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  402b70:	2802      	cmp	r0, #2
  402b72:	d158      	bne.n	402c26 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  402b74:	2901      	cmp	r1, #1
  402b76:	d059      	beq.n	402c2c <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  402b78:	2902      	cmp	r1, #2
  402b7a:	d116      	bne.n	402baa <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  402b7c:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  402b7e:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  402b80:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  402b82:	4b2e      	ldr	r3, [pc, #184]	; (402c3c <socket+0xd0>)
  402b84:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402b88:	7a9b      	ldrb	r3, [r3, #10]
  402b8a:	2b00      	cmp	r3, #0
  402b8c:	d051      	beq.n	402c32 <socket+0xc6>
  402b8e:	1c63      	adds	r3, r4, #1
  402b90:	b2db      	uxtb	r3, r3
  402b92:	4f2a      	ldr	r7, [pc, #168]	; (402c3c <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  402b94:	b2dc      	uxtb	r4, r3
  402b96:	42b4      	cmp	r4, r6
  402b98:	d240      	bcs.n	402c1c <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  402b9a:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  402b9c:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  402ba0:	7a89      	ldrb	r1, [r1, #10]
  402ba2:	1c58      	adds	r0, r3, #1
  402ba4:	b121      	cbz	r1, 402bb0 <socket+0x44>
  402ba6:	4603      	mov	r3, r0
  402ba8:	e7f4      	b.n	402b94 <socket+0x28>
			return sock;
  402baa:	f04f 34ff 	mov.w	r4, #4294967295
  402bae:	e037      	b.n	402c20 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  402bb0:	4822      	ldr	r0, [pc, #136]	; (402c3c <socket+0xd0>)
  402bb2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402bb6:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  402bb8:	2210      	movs	r2, #16
  402bba:	2100      	movs	r1, #0
  402bbc:	4b20      	ldr	r3, [pc, #128]	; (402c40 <socket+0xd4>)
  402bbe:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  402bc0:	4b1e      	ldr	r3, [pc, #120]	; (402c3c <socket+0xd0>)
  402bc2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402bc6:	2201      	movs	r2, #1
  402bc8:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  402bca:	4a1e      	ldr	r2, [pc, #120]	; (402c44 <socket+0xd8>)
  402bcc:	8813      	ldrh	r3, [r2, #0]
  402bce:	3301      	adds	r3, #1
  402bd0:	b29b      	uxth	r3, r3
  402bd2:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  402bd4:	8813      	ldrh	r3, [r2, #0]
  402bd6:	b29b      	uxth	r3, r3
  402bd8:	b91b      	cbnz	r3, 402be2 <socket+0x76>
					++gu16SessionID;
  402bda:	8813      	ldrh	r3, [r2, #0]
  402bdc:	3301      	adds	r3, #1
  402bde:	b29b      	uxth	r3, r3
  402be0:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  402be2:	4b18      	ldr	r3, [pc, #96]	; (402c44 <socket+0xd8>)
  402be4:	881a      	ldrh	r2, [r3, #0]
  402be6:	b292      	uxth	r2, r2
  402be8:	4b14      	ldr	r3, [pc, #80]	; (402c3c <socket+0xd0>)
  402bea:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  402bee:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  402bf0:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  402bf2:	f016 0f01 	tst.w	r6, #1
  402bf6:	d013      	beq.n	402c20 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  402bf8:	aa06      	add	r2, sp, #24
  402bfa:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  402bfe:	4b0f      	ldr	r3, [pc, #60]	; (402c3c <socket+0xd0>)
  402c00:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  402c04:	2321      	movs	r3, #33	; 0x21
  402c06:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  402c08:	2300      	movs	r3, #0
  402c0a:	9302      	str	r3, [sp, #8]
  402c0c:	9301      	str	r3, [sp, #4]
  402c0e:	9300      	str	r3, [sp, #0]
  402c10:	2304      	movs	r3, #4
  402c12:	2150      	movs	r1, #80	; 0x50
  402c14:	2002      	movs	r0, #2
  402c16:	4d0c      	ldr	r5, [pc, #48]	; (402c48 <socket+0xdc>)
  402c18:	47a8      	blx	r5
  402c1a:	e001      	b.n	402c20 <socket+0xb4>
	SOCKET		sock = -1;
  402c1c:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  402c20:	4620      	mov	r0, r4
  402c22:	b007      	add	sp, #28
  402c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  402c26:	f04f 34ff 	mov.w	r4, #4294967295
  402c2a:	e7f9      	b.n	402c20 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  402c2c:	2607      	movs	r6, #7
			u8Count = 0;
  402c2e:	2400      	movs	r4, #0
  402c30:	e7a6      	b.n	402b80 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  402c32:	4802      	ldr	r0, [pc, #8]	; (402c3c <socket+0xd0>)
  402c34:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402c38:	e7bd      	b.n	402bb6 <socket+0x4a>
  402c3a:	bf00      	nop
  402c3c:	20401670 	.word	0x20401670
  402c40:	00400881 	.word	0x00400881
  402c44:	20400a16 	.word	0x20400a16
  402c48:	004009e5 	.word	0x004009e5

00402c4c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  402c4c:	b530      	push	{r4, r5, lr}
  402c4e:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  402c50:	1e04      	subs	r4, r0, #0
  402c52:	db36      	blt.n	402cc2 <connect+0x76>
  402c54:	2900      	cmp	r1, #0
  402c56:	d034      	beq.n	402cc2 <connect+0x76>
  402c58:	4b1d      	ldr	r3, [pc, #116]	; (402cd0 <connect+0x84>)
  402c5a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402c5e:	7a9b      	ldrb	r3, [r3, #10]
  402c60:	b2db      	uxtb	r3, r3
  402c62:	2a00      	cmp	r2, #0
  402c64:	d030      	beq.n	402cc8 <connect+0x7c>
  402c66:	2b01      	cmp	r3, #1
  402c68:	d12e      	bne.n	402cc8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  402c6a:	4b19      	ldr	r3, [pc, #100]	; (402cd0 <connect+0x84>)
  402c6c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402c70:	7adb      	ldrb	r3, [r3, #11]
  402c72:	f013 0f01 	tst.w	r3, #1
  402c76:	d022      	beq.n	402cbe <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  402c78:	4b15      	ldr	r3, [pc, #84]	; (402cd0 <connect+0x84>)
  402c7a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402c7e:	7adb      	ldrb	r3, [r3, #11]
  402c80:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  402c84:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  402c86:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  402c8a:	2208      	movs	r2, #8
  402c8c:	a805      	add	r0, sp, #20
  402c8e:	4b11      	ldr	r3, [pc, #68]	; (402cd4 <connect+0x88>)
  402c90:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  402c92:	480f      	ldr	r0, [pc, #60]	; (402cd0 <connect+0x84>)
  402c94:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402c98:	88c3      	ldrh	r3, [r0, #6]
  402c9a:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  402c9e:	2300      	movs	r3, #0
  402ca0:	9302      	str	r3, [sp, #8]
  402ca2:	9301      	str	r3, [sp, #4]
  402ca4:	9300      	str	r3, [sp, #0]
  402ca6:	230c      	movs	r3, #12
  402ca8:	aa05      	add	r2, sp, #20
  402caa:	4629      	mov	r1, r5
  402cac:	2002      	movs	r0, #2
  402cae:	4c0a      	ldr	r4, [pc, #40]	; (402cd8 <connect+0x8c>)
  402cb0:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402cb2:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402cb4:	bf18      	it	ne
  402cb6:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  402cba:	b009      	add	sp, #36	; 0x24
  402cbc:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  402cbe:	2544      	movs	r5, #68	; 0x44
  402cc0:	e7e1      	b.n	402c86 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402cc2:	f06f 0005 	mvn.w	r0, #5
  402cc6:	e7f8      	b.n	402cba <connect+0x6e>
  402cc8:	f06f 0005 	mvn.w	r0, #5
  402ccc:	e7f5      	b.n	402cba <connect+0x6e>
  402cce:	bf00      	nop
  402cd0:	20401670 	.word	0x20401670
  402cd4:	0040086d 	.word	0x0040086d
  402cd8:	004009e5 	.word	0x004009e5

00402cdc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  402cdc:	b530      	push	{r4, r5, lr}
  402cde:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  402ce0:	460c      	mov	r4, r1
  402ce2:	3100      	adds	r1, #0
  402ce4:	bf18      	it	ne
  402ce6:	2101      	movne	r1, #1
  402ce8:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  402cec:	bf88      	it	hi
  402cee:	2100      	movhi	r1, #0
  402cf0:	2900      	cmp	r1, #0
  402cf2:	d037      	beq.n	402d64 <send+0x88>
  402cf4:	2800      	cmp	r0, #0
  402cf6:	db35      	blt.n	402d64 <send+0x88>
  402cf8:	4b1d      	ldr	r3, [pc, #116]	; (402d70 <send+0x94>)
  402cfa:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402cfe:	7a9b      	ldrb	r3, [r3, #10]
  402d00:	b2db      	uxtb	r3, r3
  402d02:	2b01      	cmp	r3, #1
  402d04:	d131      	bne.n	402d6a <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  402d06:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  402d0a:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  402d0e:	4b18      	ldr	r3, [pc, #96]	; (402d70 <send+0x94>)
  402d10:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402d14:	88db      	ldrh	r3, [r3, #6]
  402d16:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  402d1a:	2807      	cmp	r0, #7
  402d1c:	bfb4      	ite	lt
  402d1e:	2550      	movlt	r5, #80	; 0x50
  402d20:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402d22:	4b13      	ldr	r3, [pc, #76]	; (402d70 <send+0x94>)
  402d24:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  402d28:	7adb      	ldrb	r3, [r3, #11]
  402d2a:	f013 0f01 	tst.w	r3, #1
  402d2e:	d017      	beq.n	402d60 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  402d30:	4b0f      	ldr	r3, [pc, #60]	; (402d70 <send+0x94>)
  402d32:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402d36:	8905      	ldrh	r5, [r0, #8]
  402d38:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  402d3a:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  402d3c:	9502      	str	r5, [sp, #8]
  402d3e:	9201      	str	r2, [sp, #4]
  402d40:	9400      	str	r4, [sp, #0]
  402d42:	2310      	movs	r3, #16
  402d44:	eb0d 0203 	add.w	r2, sp, r3
  402d48:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402d4c:	2002      	movs	r0, #2
  402d4e:	4c09      	ldr	r4, [pc, #36]	; (402d74 <send+0x98>)
  402d50:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  402d52:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  402d54:	bf0c      	ite	eq
  402d56:	2000      	moveq	r0, #0
  402d58:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  402d5c:	b009      	add	sp, #36	; 0x24
  402d5e:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  402d60:	2145      	movs	r1, #69	; 0x45
  402d62:	e7eb      	b.n	402d3c <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402d64:	f06f 0005 	mvn.w	r0, #5
  402d68:	e7f8      	b.n	402d5c <send+0x80>
  402d6a:	f06f 0005 	mvn.w	r0, #5
  402d6e:	e7f5      	b.n	402d5c <send+0x80>
  402d70:	20401670 	.word	0x20401670
  402d74:	004009e5 	.word	0x004009e5

00402d78 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402d78:	2900      	cmp	r1, #0
  402d7a:	bf18      	it	ne
  402d7c:	2a00      	cmpne	r2, #0
  402d7e:	d044      	beq.n	402e0a <recv+0x92>
{
  402d80:	b570      	push	{r4, r5, r6, lr}
  402d82:	b086      	sub	sp, #24
  402d84:	460e      	mov	r6, r1
  402d86:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  402d88:	2800      	cmp	r0, #0
  402d8a:	db36      	blt.n	402dfa <recv+0x82>
  402d8c:	4a20      	ldr	r2, [pc, #128]	; (402e10 <recv+0x98>)
  402d8e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  402d92:	7a92      	ldrb	r2, [r2, #10]
  402d94:	b2d2      	uxtb	r2, r2
  402d96:	2a01      	cmp	r2, #1
  402d98:	d132      	bne.n	402e00 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  402d9a:	4c1d      	ldr	r4, [pc, #116]	; (402e10 <recv+0x98>)
  402d9c:	0101      	lsls	r1, r0, #4
  402d9e:	1862      	adds	r2, r4, r1
  402da0:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  402da2:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  402da4:	7b12      	ldrb	r2, [r2, #12]
  402da6:	2a00      	cmp	r2, #0
  402da8:	d12d      	bne.n	402e06 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  402daa:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  402dae:	2101      	movs	r1, #1
  402db0:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402db2:	7ad2      	ldrb	r2, [r2, #11]
  402db4:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  402db6:	2a00      	cmp	r2, #0
  402db8:	bf0c      	ite	eq
  402dba:	2146      	moveq	r1, #70	; 0x46
  402dbc:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  402dbe:	b9d3      	cbnz	r3, 402df6 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  402dc0:	f04f 33ff 	mov.w	r3, #4294967295
  402dc4:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  402dc6:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  402dca:	4b11      	ldr	r3, [pc, #68]	; (402e10 <recv+0x98>)
  402dcc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  402dd0:	88c3      	ldrh	r3, [r0, #6]
  402dd2:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  402dd6:	2300      	movs	r3, #0
  402dd8:	9302      	str	r3, [sp, #8]
  402dda:	9301      	str	r3, [sp, #4]
  402ddc:	9300      	str	r3, [sp, #0]
  402dde:	2308      	movs	r3, #8
  402de0:	aa04      	add	r2, sp, #16
  402de2:	2002      	movs	r0, #2
  402de4:	4c0b      	ldr	r4, [pc, #44]	; (402e14 <recv+0x9c>)
  402de6:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  402de8:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  402dea:	bf0c      	ite	eq
  402dec:	2000      	moveq	r0, #0
  402dee:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  402df2:	b006      	add	sp, #24
  402df4:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  402df6:	9304      	str	r3, [sp, #16]
  402df8:	e7e5      	b.n	402dc6 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402dfa:	f06f 0005 	mvn.w	r0, #5
  402dfe:	e7f8      	b.n	402df2 <recv+0x7a>
  402e00:	f06f 0005 	mvn.w	r0, #5
  402e04:	e7f5      	b.n	402df2 <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  402e06:	2000      	movs	r0, #0
  402e08:	e7f3      	b.n	402df2 <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  402e0a:	f06f 0005 	mvn.w	r0, #5
}
  402e0e:	4770      	bx	lr
  402e10:	20401670 	.word	0x20401670
  402e14:	004009e5 	.word	0x004009e5

00402e18 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  402e18:	b530      	push	{r4, r5, lr}
  402e1a:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  402e1c:	1e04      	subs	r4, r0, #0
  402e1e:	db2f      	blt.n	402e80 <close+0x68>
  402e20:	4b1a      	ldr	r3, [pc, #104]	; (402e8c <close+0x74>)
  402e22:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402e26:	7a9b      	ldrb	r3, [r3, #10]
  402e28:	b2db      	uxtb	r3, r3
  402e2a:	2b01      	cmp	r3, #1
  402e2c:	d12b      	bne.n	402e86 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  402e2e:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  402e32:	4b16      	ldr	r3, [pc, #88]	; (402e8c <close+0x74>)
  402e34:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  402e38:	88da      	ldrh	r2, [r3, #6]
  402e3a:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  402e3e:	2200      	movs	r2, #0
  402e40:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  402e42:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  402e44:	7adb      	ldrb	r3, [r3, #11]
  402e46:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  402e4a:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  402e4c:	9202      	str	r2, [sp, #8]
  402e4e:	9201      	str	r2, [sp, #4]
  402e50:	9200      	str	r2, [sp, #0]
  402e52:	f04f 0304 	mov.w	r3, #4
  402e56:	aa05      	add	r2, sp, #20
  402e58:	bf0c      	ite	eq
  402e5a:	2149      	moveq	r1, #73	; 0x49
  402e5c:	214e      	movne	r1, #78	; 0x4e
  402e5e:	2002      	movs	r0, #2
  402e60:	4d0b      	ldr	r5, [pc, #44]	; (402e90 <close+0x78>)
  402e62:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  402e64:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  402e66:	bf18      	it	ne
  402e68:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  402e6c:	2210      	movs	r2, #16
  402e6e:	2100      	movs	r1, #0
  402e70:	4806      	ldr	r0, [pc, #24]	; (402e8c <close+0x74>)
  402e72:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402e76:	4b07      	ldr	r3, [pc, #28]	; (402e94 <close+0x7c>)
  402e78:	4798      	blx	r3
	}
	return s8Ret;
}
  402e7a:	4628      	mov	r0, r5
  402e7c:	b007      	add	sp, #28
  402e7e:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  402e80:	f06f 0505 	mvn.w	r5, #5
  402e84:	e7f9      	b.n	402e7a <close+0x62>
  402e86:	f06f 0505 	mvn.w	r5, #5
  402e8a:	e7f6      	b.n	402e7a <close+0x62>
  402e8c:	20401670 	.word	0x20401670
  402e90:	004009e5 	.word	0x004009e5
  402e94:	00400881 	.word	0x00400881

00402e98 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  402e98:	b570      	push	{r4, r5, r6, lr}
  402e9a:	b082      	sub	sp, #8
  402e9c:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  402e9e:	4b2b      	ldr	r3, [pc, #172]	; (402f4c <spi_flash_enable+0xb4>)
  402ea0:	4798      	blx	r3
  402ea2:	f3c0 000b 	ubfx	r0, r0, #0, #12
  402ea6:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  402eaa:	d203      	bcs.n	402eb4 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  402eac:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  402eae:	4620      	mov	r0, r4
  402eb0:	b002      	add	sp, #8
  402eb2:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  402eb4:	a901      	add	r1, sp, #4
  402eb6:	f241 4010 	movw	r0, #5136	; 0x1410
  402eba:	4b25      	ldr	r3, [pc, #148]	; (402f50 <spi_flash_enable+0xb8>)
  402ebc:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  402ebe:	4604      	mov	r4, r0
  402ec0:	2800      	cmp	r0, #0
  402ec2:	d1f4      	bne.n	402eae <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  402ec4:	4b23      	ldr	r3, [pc, #140]	; (402f54 <spi_flash_enable+0xbc>)
  402ec6:	9a01      	ldr	r2, [sp, #4]
  402ec8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  402eca:	4923      	ldr	r1, [pc, #140]	; (402f58 <spi_flash_enable+0xc0>)
  402ecc:	4319      	orrs	r1, r3
  402ece:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402ed0:	f241 4010 	movw	r0, #5136	; 0x1410
  402ed4:	4b21      	ldr	r3, [pc, #132]	; (402f5c <spi_flash_enable+0xc4>)
  402ed6:	4798      	blx	r3
		if(enable) {
  402ed8:	b305      	cbz	r5, 402f1c <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402eda:	2100      	movs	r1, #0
  402edc:	4820      	ldr	r0, [pc, #128]	; (402f60 <spi_flash_enable+0xc8>)
  402ede:	4d1f      	ldr	r5, [pc, #124]	; (402f5c <spi_flash_enable+0xc4>)
  402ee0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402ee2:	21ab      	movs	r1, #171	; 0xab
  402ee4:	481f      	ldr	r0, [pc, #124]	; (402f64 <spi_flash_enable+0xcc>)
  402ee6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402ee8:	2101      	movs	r1, #1
  402eea:	481f      	ldr	r0, [pc, #124]	; (402f68 <spi_flash_enable+0xd0>)
  402eec:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402eee:	2100      	movs	r1, #0
  402ef0:	481e      	ldr	r0, [pc, #120]	; (402f6c <spi_flash_enable+0xd4>)
  402ef2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  402ef4:	2181      	movs	r1, #129	; 0x81
  402ef6:	481e      	ldr	r0, [pc, #120]	; (402f70 <spi_flash_enable+0xd8>)
  402ef8:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402efa:	4e1e      	ldr	r6, [pc, #120]	; (402f74 <spi_flash_enable+0xdc>)
  402efc:	4d1e      	ldr	r5, [pc, #120]	; (402f78 <spi_flash_enable+0xe0>)
  402efe:	4630      	mov	r0, r6
  402f00:	47a8      	blx	r5
  402f02:	2801      	cmp	r0, #1
  402f04:	d1fb      	bne.n	402efe <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  402f06:	4913      	ldr	r1, [pc, #76]	; (402f54 <spi_flash_enable+0xbc>)
  402f08:	9b01      	ldr	r3, [sp, #4]
  402f0a:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  402f0c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402f10:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402f12:	f241 4010 	movw	r0, #5136	; 0x1410
  402f16:	4b11      	ldr	r3, [pc, #68]	; (402f5c <spi_flash_enable+0xc4>)
  402f18:	4798      	blx	r3
  402f1a:	e7c8      	b.n	402eae <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  402f1c:	2100      	movs	r1, #0
  402f1e:	4810      	ldr	r0, [pc, #64]	; (402f60 <spi_flash_enable+0xc8>)
  402f20:	4d0e      	ldr	r5, [pc, #56]	; (402f5c <spi_flash_enable+0xc4>)
  402f22:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402f24:	21b9      	movs	r1, #185	; 0xb9
  402f26:	480f      	ldr	r0, [pc, #60]	; (402f64 <spi_flash_enable+0xcc>)
  402f28:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  402f2a:	2101      	movs	r1, #1
  402f2c:	480e      	ldr	r0, [pc, #56]	; (402f68 <spi_flash_enable+0xd0>)
  402f2e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402f30:	2100      	movs	r1, #0
  402f32:	480e      	ldr	r0, [pc, #56]	; (402f6c <spi_flash_enable+0xd4>)
  402f34:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  402f36:	2181      	movs	r1, #129	; 0x81
  402f38:	480d      	ldr	r0, [pc, #52]	; (402f70 <spi_flash_enable+0xd8>)
  402f3a:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  402f3c:	4e0d      	ldr	r6, [pc, #52]	; (402f74 <spi_flash_enable+0xdc>)
  402f3e:	4d0e      	ldr	r5, [pc, #56]	; (402f78 <spi_flash_enable+0xe0>)
  402f40:	4630      	mov	r0, r6
  402f42:	47a8      	blx	r5
  402f44:	2801      	cmp	r0, #1
  402f46:	d1fb      	bne.n	402f40 <spi_flash_enable+0xa8>
  402f48:	e7dd      	b.n	402f06 <spi_flash_enable+0x6e>
  402f4a:	bf00      	nop
  402f4c:	004018ad 	.word	0x004018ad
  402f50:	00401ba9 	.word	0x00401ba9
  402f54:	f8888fff 	.word	0xf8888fff
  402f58:	01111000 	.word	0x01111000
  402f5c:	00401bb5 	.word	0x00401bb5
  402f60:	00010208 	.word	0x00010208
  402f64:	0001020c 	.word	0x0001020c
  402f68:	00010214 	.word	0x00010214
  402f6c:	0001021c 	.word	0x0001021c
  402f70:	00010204 	.word	0x00010204
  402f74:	00010218 	.word	0x00010218
  402f78:	00401b9d 	.word	0x00401b9d

00402f7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402f7c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402f7e:	4810      	ldr	r0, [pc, #64]	; (402fc0 <sysclk_init+0x44>)
  402f80:	4b10      	ldr	r3, [pc, #64]	; (402fc4 <sysclk_init+0x48>)
  402f82:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402f84:	213e      	movs	r1, #62	; 0x3e
  402f86:	2000      	movs	r0, #0
  402f88:	4b0f      	ldr	r3, [pc, #60]	; (402fc8 <sysclk_init+0x4c>)
  402f8a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402f8c:	4c0f      	ldr	r4, [pc, #60]	; (402fcc <sysclk_init+0x50>)
  402f8e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402f90:	2800      	cmp	r0, #0
  402f92:	d0fc      	beq.n	402f8e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402f94:	4b0e      	ldr	r3, [pc, #56]	; (402fd0 <sysclk_init+0x54>)
  402f96:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402f98:	4a0e      	ldr	r2, [pc, #56]	; (402fd4 <sysclk_init+0x58>)
  402f9a:	4b0f      	ldr	r3, [pc, #60]	; (402fd8 <sysclk_init+0x5c>)
  402f9c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402f9e:	4c0f      	ldr	r4, [pc, #60]	; (402fdc <sysclk_init+0x60>)
  402fa0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402fa2:	2800      	cmp	r0, #0
  402fa4:	d0fc      	beq.n	402fa0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402fa6:	2002      	movs	r0, #2
  402fa8:	4b0d      	ldr	r3, [pc, #52]	; (402fe0 <sysclk_init+0x64>)
  402faa:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402fac:	2000      	movs	r0, #0
  402fae:	4b0d      	ldr	r3, [pc, #52]	; (402fe4 <sysclk_init+0x68>)
  402fb0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402fb2:	4b0d      	ldr	r3, [pc, #52]	; (402fe8 <sysclk_init+0x6c>)
  402fb4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402fb6:	4802      	ldr	r0, [pc, #8]	; (402fc0 <sysclk_init+0x44>)
  402fb8:	4b02      	ldr	r3, [pc, #8]	; (402fc4 <sysclk_init+0x48>)
  402fba:	4798      	blx	r3
  402fbc:	bd10      	pop	{r4, pc}
  402fbe:	bf00      	nop
  402fc0:	11e1a300 	.word	0x11e1a300
  402fc4:	00403ca9 	.word	0x00403ca9
  402fc8:	004036c9 	.word	0x004036c9
  402fcc:	0040371d 	.word	0x0040371d
  402fd0:	0040372d 	.word	0x0040372d
  402fd4:	20183f01 	.word	0x20183f01
  402fd8:	400e0600 	.word	0x400e0600
  402fdc:	0040373d 	.word	0x0040373d
  402fe0:	0040362d 	.word	0x0040362d
  402fe4:	00403665 	.word	0x00403665
  402fe8:	00403b9d 	.word	0x00403b9d

00402fec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  402fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  402ff0:	b980      	cbnz	r0, 403014 <_read+0x28>
  402ff2:	460c      	mov	r4, r1
  402ff4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  402ff6:	2a00      	cmp	r2, #0
  402ff8:	dd0f      	ble.n	40301a <_read+0x2e>
  402ffa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  402ffc:	4e08      	ldr	r6, [pc, #32]	; (403020 <_read+0x34>)
  402ffe:	4d09      	ldr	r5, [pc, #36]	; (403024 <_read+0x38>)
  403000:	6830      	ldr	r0, [r6, #0]
  403002:	4621      	mov	r1, r4
  403004:	682b      	ldr	r3, [r5, #0]
  403006:	4798      	blx	r3
		ptr++;
  403008:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40300a:	42bc      	cmp	r4, r7
  40300c:	d1f8      	bne.n	403000 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40300e:	4640      	mov	r0, r8
  403010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  403014:	f04f 38ff 	mov.w	r8, #4294967295
  403018:	e7f9      	b.n	40300e <_read+0x22>
	for (; len > 0; --len) {
  40301a:	4680      	mov	r8, r0
  40301c:	e7f7      	b.n	40300e <_read+0x22>
  40301e:	bf00      	nop
  403020:	20401734 	.word	0x20401734
  403024:	2040172c 	.word	0x2040172c

00403028 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  403028:	3801      	subs	r0, #1
  40302a:	2802      	cmp	r0, #2
  40302c:	d815      	bhi.n	40305a <_write+0x32>
{
  40302e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403032:	460e      	mov	r6, r1
  403034:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  403036:	b19a      	cbz	r2, 403060 <_write+0x38>
  403038:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40303a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403074 <_write+0x4c>
  40303e:	4f0c      	ldr	r7, [pc, #48]	; (403070 <_write+0x48>)
  403040:	f8d8 0000 	ldr.w	r0, [r8]
  403044:	f815 1b01 	ldrb.w	r1, [r5], #1
  403048:	683b      	ldr	r3, [r7, #0]
  40304a:	4798      	blx	r3
  40304c:	2800      	cmp	r0, #0
  40304e:	db0a      	blt.n	403066 <_write+0x3e>
  403050:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  403052:	3c01      	subs	r4, #1
  403054:	d1f4      	bne.n	403040 <_write+0x18>
  403056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40305a:	f04f 30ff 	mov.w	r0, #4294967295
  40305e:	4770      	bx	lr
	for (; len != 0; --len) {
  403060:	4610      	mov	r0, r2
  403062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  403066:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40306a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40306e:	bf00      	nop
  403070:	20401730 	.word	0x20401730
  403074:	20401734 	.word	0x20401734

00403078 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  403078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40307a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40307e:	4b5c      	ldr	r3, [pc, #368]	; (4031f0 <board_init+0x178>)
  403080:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  403082:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403086:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40308a:	4b5a      	ldr	r3, [pc, #360]	; (4031f4 <board_init+0x17c>)
  40308c:	2200      	movs	r2, #0
  40308e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403092:	695a      	ldr	r2, [r3, #20]
  403094:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  403098:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40309a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40309e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4030a2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4030a6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4030aa:	f007 0007 	and.w	r0, r7, #7
  4030ae:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4030b0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4030b4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4030b8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4030bc:	f3bf 8f4f 	dsb	sy
  4030c0:	f04f 34ff 	mov.w	r4, #4294967295
  4030c4:	fa04 fc00 	lsl.w	ip, r4, r0
  4030c8:	fa06 f000 	lsl.w	r0, r6, r0
  4030cc:	fa04 f40e 	lsl.w	r4, r4, lr
  4030d0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4030d4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4030d6:	463a      	mov	r2, r7
  4030d8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4030da:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4030de:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4030e2:	3a01      	subs	r2, #1
  4030e4:	4423      	add	r3, r4
  4030e6:	f1b2 3fff 	cmp.w	r2, #4294967295
  4030ea:	d1f6      	bne.n	4030da <board_init+0x62>
        } while(sets--);
  4030ec:	3e01      	subs	r6, #1
  4030ee:	4460      	add	r0, ip
  4030f0:	f1b6 3fff 	cmp.w	r6, #4294967295
  4030f4:	d1ef      	bne.n	4030d6 <board_init+0x5e>
  4030f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4030fa:	4b3e      	ldr	r3, [pc, #248]	; (4031f4 <board_init+0x17c>)
  4030fc:	695a      	ldr	r2, [r3, #20]
  4030fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  403102:	615a      	str	r2, [r3, #20]
  403104:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403108:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40310c:	4a3a      	ldr	r2, [pc, #232]	; (4031f8 <board_init+0x180>)
  40310e:	493b      	ldr	r1, [pc, #236]	; (4031fc <board_init+0x184>)
  403110:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403112:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  403116:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  403118:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40311c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  403120:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  403124:	f022 0201 	bic.w	r2, r2, #1
  403128:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40312c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  403130:	f022 0201 	bic.w	r2, r2, #1
  403134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  403138:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40313c:	f3bf 8f6f 	isb	sy
  403140:	200a      	movs	r0, #10
  403142:	4c2f      	ldr	r4, [pc, #188]	; (403200 <board_init+0x188>)
  403144:	47a0      	blx	r4
  403146:	200b      	movs	r0, #11
  403148:	47a0      	blx	r4
  40314a:	200c      	movs	r0, #12
  40314c:	47a0      	blx	r4
  40314e:	2010      	movs	r0, #16
  403150:	47a0      	blx	r4
  403152:	2011      	movs	r0, #17
  403154:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403156:	4b2b      	ldr	r3, [pc, #172]	; (403204 <board_init+0x18c>)
  403158:	f44f 7280 	mov.w	r2, #256	; 0x100
  40315c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40315e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403162:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403164:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  403168:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40316c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40316e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  403172:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  403174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403178:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40317a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40317c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  403180:	6f19      	ldr	r1, [r3, #112]	; 0x70
  403182:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  403186:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  403188:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40318a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40318e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  403190:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403194:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  403198:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40319c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4031a0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4031a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4031a6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4031a8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4031aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4031ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4031b0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4031b4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4031b6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4031b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4031bc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4031be:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4031c0:	4a11      	ldr	r2, [pc, #68]	; (403208 <board_init+0x190>)
  4031c2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4031c6:	f043 0310 	orr.w	r3, r3, #16
  4031ca:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4031ce:	4b0f      	ldr	r3, [pc, #60]	; (40320c <board_init+0x194>)
  4031d0:	2210      	movs	r2, #16
  4031d2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4031d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4031d8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4031da:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4031dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4031e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4031e2:	4311      	orrs	r1, r2
  4031e4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4031e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4031e8:	4311      	orrs	r1, r2
  4031ea:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4031ec:	605a      	str	r2, [r3, #4]
  4031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4031f0:	400e1850 	.word	0x400e1850
  4031f4:	e000ed00 	.word	0xe000ed00
  4031f8:	400e0c00 	.word	0x400e0c00
  4031fc:	5a00080c 	.word	0x5a00080c
  403200:	0040374d 	.word	0x0040374d
  403204:	400e1200 	.word	0x400e1200
  403208:	40088000 	.word	0x40088000
  40320c:	400e1000 	.word	0x400e1000

00403210 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403210:	b90a      	cbnz	r2, 403216 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403212:	6601      	str	r1, [r0, #96]	; 0x60
  403214:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  403216:	6641      	str	r1, [r0, #100]	; 0x64
  403218:	4770      	bx	lr

0040321a <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40321a:	6301      	str	r1, [r0, #48]	; 0x30
  40321c:	4770      	bx	lr

0040321e <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40321e:	6341      	str	r1, [r0, #52]	; 0x34
  403220:	4770      	bx	lr

00403222 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403222:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403224:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403228:	d03a      	beq.n	4032a0 <pio_set_peripheral+0x7e>
  40322a:	d813      	bhi.n	403254 <pio_set_peripheral+0x32>
  40322c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403230:	d025      	beq.n	40327e <pio_set_peripheral+0x5c>
  403232:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403236:	d10a      	bne.n	40324e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403238:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40323a:	4313      	orrs	r3, r2
  40323c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40323e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403240:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403242:	400b      	ands	r3, r1
  403244:	ea23 0302 	bic.w	r3, r3, r2
  403248:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40324a:	6042      	str	r2, [r0, #4]
  40324c:	4770      	bx	lr
	switch (ul_type) {
  40324e:	2900      	cmp	r1, #0
  403250:	d1fb      	bne.n	40324a <pio_set_peripheral+0x28>
  403252:	4770      	bx	lr
  403254:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403258:	d021      	beq.n	40329e <pio_set_peripheral+0x7c>
  40325a:	d809      	bhi.n	403270 <pio_set_peripheral+0x4e>
  40325c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  403260:	d1f3      	bne.n	40324a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  403262:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403264:	4313      	orrs	r3, r2
  403266:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403268:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40326a:	4313      	orrs	r3, r2
  40326c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40326e:	e7ec      	b.n	40324a <pio_set_peripheral+0x28>
	switch (ul_type) {
  403270:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403274:	d013      	beq.n	40329e <pio_set_peripheral+0x7c>
  403276:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40327a:	d010      	beq.n	40329e <pio_set_peripheral+0x7c>
  40327c:	e7e5      	b.n	40324a <pio_set_peripheral+0x28>
{
  40327e:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  403280:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403282:	6f04      	ldr	r4, [r0, #112]	; 0x70
  403284:	43d3      	mvns	r3, r2
  403286:	4021      	ands	r1, r4
  403288:	461c      	mov	r4, r3
  40328a:	4019      	ands	r1, r3
  40328c:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40328e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403290:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403292:	400b      	ands	r3, r1
  403294:	4023      	ands	r3, r4
  403296:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  403298:	6042      	str	r2, [r0, #4]
}
  40329a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40329e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4032a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4032a2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4032a4:	400b      	ands	r3, r1
  4032a6:	ea23 0302 	bic.w	r3, r3, r2
  4032aa:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4032ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4032ae:	4313      	orrs	r3, r2
  4032b0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4032b2:	e7ca      	b.n	40324a <pio_set_peripheral+0x28>

004032b4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4032b4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4032b6:	f012 0f01 	tst.w	r2, #1
  4032ba:	d10d      	bne.n	4032d8 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4032bc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4032be:	f012 0f0a 	tst.w	r2, #10
  4032c2:	d00b      	beq.n	4032dc <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4032c4:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4032c6:	f012 0f02 	tst.w	r2, #2
  4032ca:	d109      	bne.n	4032e0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4032cc:	f012 0f08 	tst.w	r2, #8
  4032d0:	d008      	beq.n	4032e4 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4032d2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4032d6:	e005      	b.n	4032e4 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4032d8:	6641      	str	r1, [r0, #100]	; 0x64
  4032da:	e7f0      	b.n	4032be <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4032dc:	6241      	str	r1, [r0, #36]	; 0x24
  4032de:	e7f2      	b.n	4032c6 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4032e0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4032e4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4032e6:	6001      	str	r1, [r0, #0]
  4032e8:	4770      	bx	lr

004032ea <pio_set_output>:
{
  4032ea:	b410      	push	{r4}
  4032ec:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4032ee:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4032f0:	b94c      	cbnz	r4, 403306 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4032f2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4032f4:	b14b      	cbz	r3, 40330a <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4032f6:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4032f8:	b94a      	cbnz	r2, 40330e <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4032fa:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4032fc:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4032fe:	6001      	str	r1, [r0, #0]
}
  403300:	f85d 4b04 	ldr.w	r4, [sp], #4
  403304:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  403306:	6641      	str	r1, [r0, #100]	; 0x64
  403308:	e7f4      	b.n	4032f4 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40330a:	6541      	str	r1, [r0, #84]	; 0x54
  40330c:	e7f4      	b.n	4032f8 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40330e:	6301      	str	r1, [r0, #48]	; 0x30
  403310:	e7f4      	b.n	4032fc <pio_set_output+0x12>

00403312 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  403312:	f012 0f10 	tst.w	r2, #16
  403316:	d012      	beq.n	40333e <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  403318:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40331c:	f012 0f20 	tst.w	r2, #32
  403320:	d007      	beq.n	403332 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  403322:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  403326:	f012 0f40 	tst.w	r2, #64	; 0x40
  40332a:	d005      	beq.n	403338 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  40332c:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  403330:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  403332:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  403336:	e7f6      	b.n	403326 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  403338:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40333c:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40333e:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  403342:	4770      	bx	lr

00403344 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  403344:	6401      	str	r1, [r0, #64]	; 0x40
  403346:	4770      	bx	lr

00403348 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  403348:	6441      	str	r1, [r0, #68]	; 0x44
  40334a:	4770      	bx	lr

0040334c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40334c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40334e:	4770      	bx	lr

00403350 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403350:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403352:	4770      	bx	lr

00403354 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  403354:	b570      	push	{r4, r5, r6, lr}
  403356:	b082      	sub	sp, #8
  403358:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40335a:	4c46      	ldr	r4, [pc, #280]	; (403474 <pio_configure_pin+0x120>)
  40335c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  403360:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  403362:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  403366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40336a:	d059      	beq.n	403420 <pio_configure_pin+0xcc>
  40336c:	d80a      	bhi.n	403384 <pio_configure_pin+0x30>
  40336e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403372:	d02f      	beq.n	4033d4 <pio_configure_pin+0x80>
  403374:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403378:	d03f      	beq.n	4033fa <pio_configure_pin+0xa6>
  40337a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40337e:	d016      	beq.n	4033ae <pio_configure_pin+0x5a>
		return 0;
  403380:	2000      	movs	r0, #0
  403382:	e012      	b.n	4033aa <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  403384:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403388:	d05d      	beq.n	403446 <pio_configure_pin+0xf2>
  40338a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40338e:	d05a      	beq.n	403446 <pio_configure_pin+0xf2>
  403390:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403394:	d1f4      	bne.n	403380 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  403396:	f000 011f 	and.w	r1, r0, #31
  40339a:	2601      	movs	r6, #1
  40339c:	462a      	mov	r2, r5
  40339e:	fa06 f101 	lsl.w	r1, r6, r1
  4033a2:	4620      	mov	r0, r4
  4033a4:	4b34      	ldr	r3, [pc, #208]	; (403478 <pio_configure_pin+0x124>)
  4033a6:	4798      	blx	r3
	return 1;
  4033a8:	4630      	mov	r0, r6
}
  4033aa:	b002      	add	sp, #8
  4033ac:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4033ae:	f000 001f 	and.w	r0, r0, #31
  4033b2:	2601      	movs	r6, #1
  4033b4:	4086      	lsls	r6, r0
  4033b6:	4632      	mov	r2, r6
  4033b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4033bc:	4620      	mov	r0, r4
  4033be:	4b2f      	ldr	r3, [pc, #188]	; (40347c <pio_configure_pin+0x128>)
  4033c0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4033c2:	f015 0f01 	tst.w	r5, #1
  4033c6:	d102      	bne.n	4033ce <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4033c8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4033ca:	2001      	movs	r0, #1
  4033cc:	e7ed      	b.n	4033aa <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4033ce:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4033d0:	2001      	movs	r0, #1
  4033d2:	e7ea      	b.n	4033aa <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4033d4:	f000 001f 	and.w	r0, r0, #31
  4033d8:	2601      	movs	r6, #1
  4033da:	4086      	lsls	r6, r0
  4033dc:	4632      	mov	r2, r6
  4033de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4033e2:	4620      	mov	r0, r4
  4033e4:	4b25      	ldr	r3, [pc, #148]	; (40347c <pio_configure_pin+0x128>)
  4033e6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4033e8:	f015 0f01 	tst.w	r5, #1
  4033ec:	d102      	bne.n	4033f4 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4033ee:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4033f0:	2001      	movs	r0, #1
  4033f2:	e7da      	b.n	4033aa <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4033f4:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4033f6:	2001      	movs	r0, #1
  4033f8:	e7d7      	b.n	4033aa <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4033fa:	f000 001f 	and.w	r0, r0, #31
  4033fe:	2601      	movs	r6, #1
  403400:	4086      	lsls	r6, r0
  403402:	4632      	mov	r2, r6
  403404:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403408:	4620      	mov	r0, r4
  40340a:	4b1c      	ldr	r3, [pc, #112]	; (40347c <pio_configure_pin+0x128>)
  40340c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40340e:	f015 0f01 	tst.w	r5, #1
  403412:	d102      	bne.n	40341a <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  403414:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  403416:	2001      	movs	r0, #1
  403418:	e7c7      	b.n	4033aa <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40341a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40341c:	2001      	movs	r0, #1
  40341e:	e7c4      	b.n	4033aa <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  403420:	f000 001f 	and.w	r0, r0, #31
  403424:	2601      	movs	r6, #1
  403426:	4086      	lsls	r6, r0
  403428:	4632      	mov	r2, r6
  40342a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40342e:	4620      	mov	r0, r4
  403430:	4b12      	ldr	r3, [pc, #72]	; (40347c <pio_configure_pin+0x128>)
  403432:	4798      	blx	r3
	if (ul_pull_up_enable) {
  403434:	f015 0f01 	tst.w	r5, #1
  403438:	d102      	bne.n	403440 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40343a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40343c:	2001      	movs	r0, #1
  40343e:	e7b4      	b.n	4033aa <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  403440:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  403442:	2001      	movs	r0, #1
  403444:	e7b1      	b.n	4033aa <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  403446:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40344a:	f000 011f 	and.w	r1, r0, #31
  40344e:	2601      	movs	r6, #1
  403450:	ea05 0306 	and.w	r3, r5, r6
  403454:	9300      	str	r3, [sp, #0]
  403456:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40345a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40345e:	bf14      	ite	ne
  403460:	2200      	movne	r2, #0
  403462:	2201      	moveq	r2, #1
  403464:	fa06 f101 	lsl.w	r1, r6, r1
  403468:	4620      	mov	r0, r4
  40346a:	4c05      	ldr	r4, [pc, #20]	; (403480 <pio_configure_pin+0x12c>)
  40346c:	47a0      	blx	r4
	return 1;
  40346e:	4630      	mov	r0, r6
		break;
  403470:	e79b      	b.n	4033aa <pio_configure_pin+0x56>
  403472:	bf00      	nop
  403474:	00200707 	.word	0x00200707
  403478:	004032b5 	.word	0x004032b5
  40347c:	00403223 	.word	0x00403223
  403480:	004032eb 	.word	0x004032eb

00403484 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403488:	4604      	mov	r4, r0
  40348a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40348c:	4b0e      	ldr	r3, [pc, #56]	; (4034c8 <pio_handler_process+0x44>)
  40348e:	4798      	blx	r3
  403490:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  403492:	4620      	mov	r0, r4
  403494:	4b0d      	ldr	r3, [pc, #52]	; (4034cc <pio_handler_process+0x48>)
  403496:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403498:	4005      	ands	r5, r0
  40349a:	d013      	beq.n	4034c4 <pio_handler_process+0x40>
  40349c:	4c0c      	ldr	r4, [pc, #48]	; (4034d0 <pio_handler_process+0x4c>)
  40349e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4034a2:	e003      	b.n	4034ac <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4034a4:	42b4      	cmp	r4, r6
  4034a6:	d00d      	beq.n	4034c4 <pio_handler_process+0x40>
  4034a8:	3410      	adds	r4, #16
		while (status != 0) {
  4034aa:	b15d      	cbz	r5, 4034c4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4034ac:	6820      	ldr	r0, [r4, #0]
  4034ae:	4540      	cmp	r0, r8
  4034b0:	d1f8      	bne.n	4034a4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4034b2:	6861      	ldr	r1, [r4, #4]
  4034b4:	4229      	tst	r1, r5
  4034b6:	d0f5      	beq.n	4034a4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4034b8:	68e3      	ldr	r3, [r4, #12]
  4034ba:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4034bc:	6863      	ldr	r3, [r4, #4]
  4034be:	ea25 0503 	bic.w	r5, r5, r3
  4034c2:	e7ef      	b.n	4034a4 <pio_handler_process+0x20>
  4034c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4034c8:	0040334d 	.word	0x0040334d
  4034cc:	00403351 	.word	0x00403351
  4034d0:	20400a18 	.word	0x20400a18

004034d4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4034d6:	4c18      	ldr	r4, [pc, #96]	; (403538 <pio_handler_set+0x64>)
  4034d8:	6826      	ldr	r6, [r4, #0]
  4034da:	2e06      	cmp	r6, #6
  4034dc:	d82a      	bhi.n	403534 <pio_handler_set+0x60>
  4034de:	f04f 0c00 	mov.w	ip, #0
  4034e2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4034e4:	4f15      	ldr	r7, [pc, #84]	; (40353c <pio_handler_set+0x68>)
  4034e6:	e004      	b.n	4034f2 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4034e8:	3401      	adds	r4, #1
  4034ea:	b2e4      	uxtb	r4, r4
  4034ec:	46a4      	mov	ip, r4
  4034ee:	42a6      	cmp	r6, r4
  4034f0:	d309      	bcc.n	403506 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4034f2:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4034f4:	0125      	lsls	r5, r4, #4
  4034f6:	597d      	ldr	r5, [r7, r5]
  4034f8:	428d      	cmp	r5, r1
  4034fa:	d1f5      	bne.n	4034e8 <pio_handler_set+0x14>
  4034fc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  403500:	686d      	ldr	r5, [r5, #4]
  403502:	4295      	cmp	r5, r2
  403504:	d1f0      	bne.n	4034e8 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  403506:	4d0d      	ldr	r5, [pc, #52]	; (40353c <pio_handler_set+0x68>)
  403508:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40350c:	eb05 040e 	add.w	r4, r5, lr
  403510:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  403514:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  403516:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  403518:	9906      	ldr	r1, [sp, #24]
  40351a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  40351c:	3601      	adds	r6, #1
  40351e:	4566      	cmp	r6, ip
  403520:	d005      	beq.n	40352e <pio_handler_set+0x5a>
  403522:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  403524:	461a      	mov	r2, r3
  403526:	4b06      	ldr	r3, [pc, #24]	; (403540 <pio_handler_set+0x6c>)
  403528:	4798      	blx	r3

	return 0;
  40352a:	2000      	movs	r0, #0
  40352c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40352e:	4902      	ldr	r1, [pc, #8]	; (403538 <pio_handler_set+0x64>)
  403530:	600e      	str	r6, [r1, #0]
  403532:	e7f6      	b.n	403522 <pio_handler_set+0x4e>
		return 1;
  403534:	2001      	movs	r0, #1
}
  403536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403538:	20400a88 	.word	0x20400a88
  40353c:	20400a18 	.word	0x20400a18
  403540:	00403313 	.word	0x00403313

00403544 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403544:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  403546:	210a      	movs	r1, #10
  403548:	4801      	ldr	r0, [pc, #4]	; (403550 <PIOA_Handler+0xc>)
  40354a:	4b02      	ldr	r3, [pc, #8]	; (403554 <PIOA_Handler+0x10>)
  40354c:	4798      	blx	r3
  40354e:	bd08      	pop	{r3, pc}
  403550:	400e0e00 	.word	0x400e0e00
  403554:	00403485 	.word	0x00403485

00403558 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403558:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40355a:	210b      	movs	r1, #11
  40355c:	4801      	ldr	r0, [pc, #4]	; (403564 <PIOB_Handler+0xc>)
  40355e:	4b02      	ldr	r3, [pc, #8]	; (403568 <PIOB_Handler+0x10>)
  403560:	4798      	blx	r3
  403562:	bd08      	pop	{r3, pc}
  403564:	400e1000 	.word	0x400e1000
  403568:	00403485 	.word	0x00403485

0040356c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40356c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40356e:	210c      	movs	r1, #12
  403570:	4801      	ldr	r0, [pc, #4]	; (403578 <PIOC_Handler+0xc>)
  403572:	4b02      	ldr	r3, [pc, #8]	; (40357c <PIOC_Handler+0x10>)
  403574:	4798      	blx	r3
  403576:	bd08      	pop	{r3, pc}
  403578:	400e1200 	.word	0x400e1200
  40357c:	00403485 	.word	0x00403485

00403580 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403580:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  403582:	2110      	movs	r1, #16
  403584:	4801      	ldr	r0, [pc, #4]	; (40358c <PIOD_Handler+0xc>)
  403586:	4b02      	ldr	r3, [pc, #8]	; (403590 <PIOD_Handler+0x10>)
  403588:	4798      	blx	r3
  40358a:	bd08      	pop	{r3, pc}
  40358c:	400e1400 	.word	0x400e1400
  403590:	00403485 	.word	0x00403485

00403594 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  403594:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  403596:	2111      	movs	r1, #17
  403598:	4801      	ldr	r0, [pc, #4]	; (4035a0 <PIOE_Handler+0xc>)
  40359a:	4b02      	ldr	r3, [pc, #8]	; (4035a4 <PIOE_Handler+0x10>)
  40359c:	4798      	blx	r3
  40359e:	bd08      	pop	{r3, pc}
  4035a0:	400e1600 	.word	0x400e1600
  4035a4:	00403485 	.word	0x00403485

004035a8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035aa:	4606      	mov	r6, r0
  4035ac:	460d      	mov	r5, r1
  4035ae:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4035b0:	4b17      	ldr	r3, [pc, #92]	; (403610 <pio_handler_set_priority+0x68>)
  4035b2:	4798      	blx	r3
  4035b4:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4035b6:	f04f 31ff 	mov.w	r1, #4294967295
  4035ba:	4630      	mov	r0, r6
  4035bc:	4b15      	ldr	r3, [pc, #84]	; (403614 <pio_handler_set_priority+0x6c>)
  4035be:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4035c0:	4630      	mov	r0, r6
  4035c2:	4b15      	ldr	r3, [pc, #84]	; (403618 <pio_handler_set_priority+0x70>)
  4035c4:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4035c6:	fa5f fe85 	uxtb.w	lr, r5
  4035ca:	f00e 031f 	and.w	r3, lr, #31
  4035ce:	2201      	movs	r2, #1
  4035d0:	fa02 f303 	lsl.w	r3, r2, r3
  4035d4:	0968      	lsrs	r0, r5, #5
  4035d6:	4911      	ldr	r1, [pc, #68]	; (40361c <pio_handler_set_priority+0x74>)
  4035d8:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4035dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4035e0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  4035e4:	2d00      	cmp	r5, #0
  4035e6:	db0a      	blt.n	4035fe <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4035e8:	0164      	lsls	r4, r4, #5
  4035ea:	b2e4      	uxtb	r4, r4
  4035ec:	4a0c      	ldr	r2, [pc, #48]	; (403620 <pio_handler_set_priority+0x78>)
  4035ee:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4035f0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4035f4:	4639      	mov	r1, r7
  4035f6:	4630      	mov	r0, r6
  4035f8:	4b0a      	ldr	r3, [pc, #40]	; (403624 <pio_handler_set_priority+0x7c>)
  4035fa:	4798      	blx	r3
  4035fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4035fe:	f00e 0e0f 	and.w	lr, lr, #15
  403602:	0164      	lsls	r4, r4, #5
  403604:	b2e4      	uxtb	r4, r4
  403606:	4a08      	ldr	r2, [pc, #32]	; (403628 <pio_handler_set_priority+0x80>)
  403608:	f802 400e 	strb.w	r4, [r2, lr]
  40360c:	e7f0      	b.n	4035f0 <pio_handler_set_priority+0x48>
  40360e:	bf00      	nop
  403610:	00403351 	.word	0x00403351
  403614:	00403349 	.word	0x00403349
  403618:	0040334d 	.word	0x0040334d
  40361c:	e000e100 	.word	0xe000e100
  403620:	e000e400 	.word	0xe000e400
  403624:	00403345 	.word	0x00403345
  403628:	e000ed14 	.word	0xe000ed14

0040362c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40362c:	2803      	cmp	r0, #3
  40362e:	d011      	beq.n	403654 <pmc_mck_set_division+0x28>
  403630:	2804      	cmp	r0, #4
  403632:	d012      	beq.n	40365a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  403634:	2802      	cmp	r0, #2
  403636:	bf0c      	ite	eq
  403638:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40363c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40363e:	4a08      	ldr	r2, [pc, #32]	; (403660 <pmc_mck_set_division+0x34>)
  403640:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  403646:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  403648:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40364a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40364c:	f013 0f08 	tst.w	r3, #8
  403650:	d0fb      	beq.n	40364a <pmc_mck_set_division+0x1e>
}
  403652:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  403654:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  403658:	e7f1      	b.n	40363e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40365a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40365e:	e7ee      	b.n	40363e <pmc_mck_set_division+0x12>
  403660:	400e0600 	.word	0x400e0600

00403664 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403664:	4a17      	ldr	r2, [pc, #92]	; (4036c4 <pmc_switch_mck_to_pllack+0x60>)
  403666:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40366c:	4318      	orrs	r0, r3
  40366e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403670:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403672:	f013 0f08 	tst.w	r3, #8
  403676:	d10a      	bne.n	40368e <pmc_switch_mck_to_pllack+0x2a>
  403678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40367c:	4911      	ldr	r1, [pc, #68]	; (4036c4 <pmc_switch_mck_to_pllack+0x60>)
  40367e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403680:	f012 0f08 	tst.w	r2, #8
  403684:	d103      	bne.n	40368e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403686:	3b01      	subs	r3, #1
  403688:	d1f9      	bne.n	40367e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40368a:	2001      	movs	r0, #1
  40368c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40368e:	4a0d      	ldr	r2, [pc, #52]	; (4036c4 <pmc_switch_mck_to_pllack+0x60>)
  403690:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403692:	f023 0303 	bic.w	r3, r3, #3
  403696:	f043 0302 	orr.w	r3, r3, #2
  40369a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40369c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40369e:	f013 0f08 	tst.w	r3, #8
  4036a2:	d10a      	bne.n	4036ba <pmc_switch_mck_to_pllack+0x56>
  4036a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4036a8:	4906      	ldr	r1, [pc, #24]	; (4036c4 <pmc_switch_mck_to_pllack+0x60>)
  4036aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4036ac:	f012 0f08 	tst.w	r2, #8
  4036b0:	d105      	bne.n	4036be <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4036b2:	3b01      	subs	r3, #1
  4036b4:	d1f9      	bne.n	4036aa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4036b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4036b8:	4770      	bx	lr
	return 0;
  4036ba:	2000      	movs	r0, #0
  4036bc:	4770      	bx	lr
  4036be:	2000      	movs	r0, #0
  4036c0:	4770      	bx	lr
  4036c2:	bf00      	nop
  4036c4:	400e0600 	.word	0x400e0600

004036c8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4036c8:	b9a0      	cbnz	r0, 4036f4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4036ca:	480e      	ldr	r0, [pc, #56]	; (403704 <pmc_switch_mainck_to_xtal+0x3c>)
  4036cc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4036ce:	0209      	lsls	r1, r1, #8
  4036d0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4036d2:	4a0d      	ldr	r2, [pc, #52]	; (403708 <pmc_switch_mainck_to_xtal+0x40>)
  4036d4:	401a      	ands	r2, r3
  4036d6:	4b0d      	ldr	r3, [pc, #52]	; (40370c <pmc_switch_mainck_to_xtal+0x44>)
  4036d8:	4313      	orrs	r3, r2
  4036da:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4036dc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4036de:	4602      	mov	r2, r0
  4036e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4036e2:	f013 0f01 	tst.w	r3, #1
  4036e6:	d0fb      	beq.n	4036e0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4036e8:	4a06      	ldr	r2, [pc, #24]	; (403704 <pmc_switch_mainck_to_xtal+0x3c>)
  4036ea:	6a11      	ldr	r1, [r2, #32]
  4036ec:	4b08      	ldr	r3, [pc, #32]	; (403710 <pmc_switch_mainck_to_xtal+0x48>)
  4036ee:	430b      	orrs	r3, r1
  4036f0:	6213      	str	r3, [r2, #32]
  4036f2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4036f4:	4903      	ldr	r1, [pc, #12]	; (403704 <pmc_switch_mainck_to_xtal+0x3c>)
  4036f6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4036f8:	4a06      	ldr	r2, [pc, #24]	; (403714 <pmc_switch_mainck_to_xtal+0x4c>)
  4036fa:	401a      	ands	r2, r3
  4036fc:	4b06      	ldr	r3, [pc, #24]	; (403718 <pmc_switch_mainck_to_xtal+0x50>)
  4036fe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403700:	620b      	str	r3, [r1, #32]
  403702:	4770      	bx	lr
  403704:	400e0600 	.word	0x400e0600
  403708:	ffc8fffc 	.word	0xffc8fffc
  40370c:	00370001 	.word	0x00370001
  403710:	01370000 	.word	0x01370000
  403714:	fec8fffc 	.word	0xfec8fffc
  403718:	01370002 	.word	0x01370002

0040371c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40371c:	4b02      	ldr	r3, [pc, #8]	; (403728 <pmc_osc_is_ready_mainck+0xc>)
  40371e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403720:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403724:	4770      	bx	lr
  403726:	bf00      	nop
  403728:	400e0600 	.word	0x400e0600

0040372c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40372c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403730:	4b01      	ldr	r3, [pc, #4]	; (403738 <pmc_disable_pllack+0xc>)
  403732:	629a      	str	r2, [r3, #40]	; 0x28
  403734:	4770      	bx	lr
  403736:	bf00      	nop
  403738:	400e0600 	.word	0x400e0600

0040373c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40373c:	4b02      	ldr	r3, [pc, #8]	; (403748 <pmc_is_locked_pllack+0xc>)
  40373e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403740:	f000 0002 	and.w	r0, r0, #2
  403744:	4770      	bx	lr
  403746:	bf00      	nop
  403748:	400e0600 	.word	0x400e0600

0040374c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40374c:	283f      	cmp	r0, #63	; 0x3f
  40374e:	d81e      	bhi.n	40378e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403750:	281f      	cmp	r0, #31
  403752:	d80c      	bhi.n	40376e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403754:	4b11      	ldr	r3, [pc, #68]	; (40379c <pmc_enable_periph_clk+0x50>)
  403756:	699a      	ldr	r2, [r3, #24]
  403758:	2301      	movs	r3, #1
  40375a:	4083      	lsls	r3, r0
  40375c:	4393      	bics	r3, r2
  40375e:	d018      	beq.n	403792 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403760:	2301      	movs	r3, #1
  403762:	fa03 f000 	lsl.w	r0, r3, r0
  403766:	4b0d      	ldr	r3, [pc, #52]	; (40379c <pmc_enable_periph_clk+0x50>)
  403768:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40376a:	2000      	movs	r0, #0
  40376c:	4770      	bx	lr
		ul_id -= 32;
  40376e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403770:	4b0a      	ldr	r3, [pc, #40]	; (40379c <pmc_enable_periph_clk+0x50>)
  403772:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403776:	2301      	movs	r3, #1
  403778:	4083      	lsls	r3, r0
  40377a:	4393      	bics	r3, r2
  40377c:	d00b      	beq.n	403796 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40377e:	2301      	movs	r3, #1
  403780:	fa03 f000 	lsl.w	r0, r3, r0
  403784:	4b05      	ldr	r3, [pc, #20]	; (40379c <pmc_enable_periph_clk+0x50>)
  403786:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40378a:	2000      	movs	r0, #0
  40378c:	4770      	bx	lr
		return 1;
  40378e:	2001      	movs	r0, #1
  403790:	4770      	bx	lr
	return 0;
  403792:	2000      	movs	r0, #0
  403794:	4770      	bx	lr
  403796:	2000      	movs	r0, #0
}
  403798:	4770      	bx	lr
  40379a:	bf00      	nop
  40379c:	400e0600 	.word	0x400e0600

004037a0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4037a0:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4037a2:	4b07      	ldr	r3, [pc, #28]	; (4037c0 <spi_enable_clock+0x20>)
  4037a4:	4298      	cmp	r0, r3
  4037a6:	d003      	beq.n	4037b0 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4037a8:	4b06      	ldr	r3, [pc, #24]	; (4037c4 <spi_enable_clock+0x24>)
  4037aa:	4298      	cmp	r0, r3
  4037ac:	d004      	beq.n	4037b8 <spi_enable_clock+0x18>
  4037ae:	bd08      	pop	{r3, pc}
  4037b0:	2015      	movs	r0, #21
  4037b2:	4b05      	ldr	r3, [pc, #20]	; (4037c8 <spi_enable_clock+0x28>)
  4037b4:	4798      	blx	r3
  4037b6:	bd08      	pop	{r3, pc}
  4037b8:	202a      	movs	r0, #42	; 0x2a
  4037ba:	4b03      	ldr	r3, [pc, #12]	; (4037c8 <spi_enable_clock+0x28>)
  4037bc:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4037be:	e7f6      	b.n	4037ae <spi_enable_clock+0xe>
  4037c0:	40008000 	.word	0x40008000
  4037c4:	40058000 	.word	0x40058000
  4037c8:	0040374d 	.word	0x0040374d

004037cc <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4037cc:	6843      	ldr	r3, [r0, #4]
  4037ce:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4037d2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4037d4:	6843      	ldr	r3, [r0, #4]
  4037d6:	0409      	lsls	r1, r1, #16
  4037d8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4037dc:	4319      	orrs	r1, r3
  4037de:	6041      	str	r1, [r0, #4]
  4037e0:	4770      	bx	lr

004037e2 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4037e2:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4037e4:	f643 2399 	movw	r3, #15001	; 0x3a99
  4037e8:	6904      	ldr	r4, [r0, #16]
  4037ea:	f014 0f01 	tst.w	r4, #1
  4037ee:	d103      	bne.n	4037f8 <spi_read+0x16>
		if (!timeout--) {
  4037f0:	3b01      	subs	r3, #1
  4037f2:	d1f9      	bne.n	4037e8 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4037f4:	2001      	movs	r0, #1
  4037f6:	e009      	b.n	40380c <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4037f8:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4037fa:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4037fc:	f010 0f02 	tst.w	r0, #2
  403800:	d002      	beq.n	403808 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  403802:	f3c3 4003 	ubfx	r0, r3, #16, #4
  403806:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  403808:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  40380a:	2000      	movs	r0, #0
}
  40380c:	f85d 4b04 	ldr.w	r4, [sp], #4
  403810:	4770      	bx	lr

00403812 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  403812:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  403814:	f643 2499 	movw	r4, #15001	; 0x3a99
  403818:	6905      	ldr	r5, [r0, #16]
  40381a:	f015 0f02 	tst.w	r5, #2
  40381e:	d103      	bne.n	403828 <spi_write+0x16>
		if (!timeout--) {
  403820:	3c01      	subs	r4, #1
  403822:	d1f9      	bne.n	403818 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  403824:	2001      	movs	r0, #1
  403826:	e00c      	b.n	403842 <spi_write+0x30>
  403828:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40382a:	f014 0f02 	tst.w	r4, #2
  40382e:	d006      	beq.n	40383e <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  403830:	0412      	lsls	r2, r2, #16
  403832:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  403836:	4311      	orrs	r1, r2
		if (uc_last) {
  403838:	b10b      	cbz	r3, 40383e <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40383a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40383e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  403840:	2000      	movs	r0, #0
}
  403842:	bc30      	pop	{r4, r5}
  403844:	4770      	bx	lr

00403846 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  403846:	b932      	cbnz	r2, 403856 <spi_set_clock_polarity+0x10>
  403848:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40384c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40384e:	f023 0301 	bic.w	r3, r3, #1
  403852:	6303      	str	r3, [r0, #48]	; 0x30
  403854:	4770      	bx	lr
  403856:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40385a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40385c:	f043 0301 	orr.w	r3, r3, #1
  403860:	6303      	str	r3, [r0, #48]	; 0x30
  403862:	4770      	bx	lr

00403864 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  403864:	b932      	cbnz	r2, 403874 <spi_set_clock_phase+0x10>
  403866:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40386a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40386c:	f023 0302 	bic.w	r3, r3, #2
  403870:	6303      	str	r3, [r0, #48]	; 0x30
  403872:	4770      	bx	lr
  403874:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  403878:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40387a:	f043 0302 	orr.w	r3, r3, #2
  40387e:	6303      	str	r3, [r0, #48]	; 0x30
  403880:	4770      	bx	lr

00403882 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  403882:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  403886:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40388c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40388e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403890:	431a      	orrs	r2, r3
  403892:	630a      	str	r2, [r1, #48]	; 0x30
  403894:	4770      	bx	lr

00403896 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  403896:	1e43      	subs	r3, r0, #1
  403898:	4419      	add	r1, r3
  40389a:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40389e:	1e43      	subs	r3, r0, #1
  4038a0:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4038a2:	bf94      	ite	ls
  4038a4:	b200      	sxthls	r0, r0
		return -1;
  4038a6:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4038aa:	4770      	bx	lr

004038ac <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4038ac:	b17a      	cbz	r2, 4038ce <spi_set_baudrate_div+0x22>
{
  4038ae:	b410      	push	{r4}
  4038b0:	4614      	mov	r4, r2
  4038b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4038b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4038b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4038bc:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4038be:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4038c0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4038c4:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4038c6:	2000      	movs	r0, #0
}
  4038c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4038cc:	4770      	bx	lr
        return -1;
  4038ce:	f04f 30ff 	mov.w	r0, #4294967295
  4038d2:	4770      	bx	lr

004038d4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4038d4:	b410      	push	{r4}
  4038d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4038da:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4038dc:	b280      	uxth	r0, r0
  4038de:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4038e0:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4038e2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4038e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4038ea:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4038ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4038f0:	4770      	bx	lr

004038f2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4038f2:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4038f4:	0189      	lsls	r1, r1, #6
  4038f6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4038f8:	2402      	movs	r4, #2
  4038fa:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4038fc:	f04f 31ff 	mov.w	r1, #4294967295
  403900:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  403902:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  403904:	605a      	str	r2, [r3, #4]
}
  403906:	f85d 4b04 	ldr.w	r4, [sp], #4
  40390a:	4770      	bx	lr

0040390c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40390c:	0189      	lsls	r1, r1, #6
  40390e:	2305      	movs	r3, #5
  403910:	5043      	str	r3, [r0, r1]
  403912:	4770      	bx	lr

00403914 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  403914:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  403918:	61ca      	str	r2, [r1, #28]
  40391a:	4770      	bx	lr

0040391c <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40391c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  403920:	624a      	str	r2, [r1, #36]	; 0x24
  403922:	4770      	bx	lr

00403924 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  403924:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  403928:	6a08      	ldr	r0, [r1, #32]
}
  40392a:	4770      	bx	lr

0040392c <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40392c:	b4f0      	push	{r4, r5, r6, r7}
  40392e:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  403930:	2402      	movs	r4, #2
  403932:	9401      	str	r4, [sp, #4]
  403934:	2408      	movs	r4, #8
  403936:	9402      	str	r4, [sp, #8]
  403938:	2420      	movs	r4, #32
  40393a:	9403      	str	r4, [sp, #12]
  40393c:	2480      	movs	r4, #128	; 0x80
  40393e:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  403940:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403942:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  403944:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  403946:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40394a:	d814      	bhi.n	403976 <tc_find_mck_divisor+0x4a>
  40394c:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40394e:	42a0      	cmp	r0, r4
  403950:	d217      	bcs.n	403982 <tc_find_mck_divisor+0x56>
  403952:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  403954:	af01      	add	r7, sp, #4
  403956:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40395a:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40395e:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  403960:	4284      	cmp	r4, r0
  403962:	d30a      	bcc.n	40397a <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  403964:	4286      	cmp	r6, r0
  403966:	d90d      	bls.n	403984 <tc_find_mck_divisor+0x58>
			ul_index++) {
  403968:	3501      	adds	r5, #1
	for (ul_index = 0;
  40396a:	2d05      	cmp	r5, #5
  40396c:	d1f3      	bne.n	403956 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40396e:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  403970:	b006      	add	sp, #24
  403972:	bcf0      	pop	{r4, r5, r6, r7}
  403974:	4770      	bx	lr
			return 0;
  403976:	2000      	movs	r0, #0
  403978:	e7fa      	b.n	403970 <tc_find_mck_divisor+0x44>
  40397a:	2000      	movs	r0, #0
  40397c:	e7f8      	b.n	403970 <tc_find_mck_divisor+0x44>
	return 1;
  40397e:	2001      	movs	r0, #1
  403980:	e7f6      	b.n	403970 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  403982:	2500      	movs	r5, #0
	if (p_uldiv) {
  403984:	b12a      	cbz	r2, 403992 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  403986:	a906      	add	r1, sp, #24
  403988:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40398c:	f851 1c14 	ldr.w	r1, [r1, #-20]
  403990:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  403992:	2b00      	cmp	r3, #0
  403994:	d0f3      	beq.n	40397e <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  403996:	601d      	str	r5, [r3, #0]
	return 1;
  403998:	2001      	movs	r0, #1
  40399a:	e7e9      	b.n	403970 <tc_find_mck_divisor+0x44>

0040399c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40399c:	6943      	ldr	r3, [r0, #20]
  40399e:	f013 0f02 	tst.w	r3, #2
  4039a2:	d002      	beq.n	4039aa <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4039a4:	61c1      	str	r1, [r0, #28]
	return 0;
  4039a6:	2000      	movs	r0, #0
  4039a8:	4770      	bx	lr
		return 1;
  4039aa:	2001      	movs	r0, #1
}
  4039ac:	4770      	bx	lr

004039ae <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4039ae:	6943      	ldr	r3, [r0, #20]
  4039b0:	f013 0f01 	tst.w	r3, #1
  4039b4:	d003      	beq.n	4039be <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4039b6:	6983      	ldr	r3, [r0, #24]
  4039b8:	700b      	strb	r3, [r1, #0]
	return 0;
  4039ba:	2000      	movs	r0, #0
  4039bc:	4770      	bx	lr
		return 1;
  4039be:	2001      	movs	r0, #1
}
  4039c0:	4770      	bx	lr

004039c2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4039c2:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4039c4:	010b      	lsls	r3, r1, #4
  4039c6:	4293      	cmp	r3, r2
  4039c8:	d914      	bls.n	4039f4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4039ca:	00c9      	lsls	r1, r1, #3
  4039cc:	084b      	lsrs	r3, r1, #1
  4039ce:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4039d2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4039d6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4039d8:	1e5c      	subs	r4, r3, #1
  4039da:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4039de:	428c      	cmp	r4, r1
  4039e0:	d901      	bls.n	4039e6 <usart_set_async_baudrate+0x24>
		return 1;
  4039e2:	2001      	movs	r0, #1
  4039e4:	e017      	b.n	403a16 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4039e6:	6841      	ldr	r1, [r0, #4]
  4039e8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4039ec:	6041      	str	r1, [r0, #4]
  4039ee:	e00c      	b.n	403a0a <usart_set_async_baudrate+0x48>
		return 1;
  4039f0:	2001      	movs	r0, #1
  4039f2:	e010      	b.n	403a16 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4039f4:	0859      	lsrs	r1, r3, #1
  4039f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4039fa:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4039fe:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403a00:	1e5c      	subs	r4, r3, #1
  403a02:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403a06:	428c      	cmp	r4, r1
  403a08:	d8f2      	bhi.n	4039f0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403a0a:	0412      	lsls	r2, r2, #16
  403a0c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  403a10:	431a      	orrs	r2, r3
  403a12:	6202      	str	r2, [r0, #32]

	return 0;
  403a14:	2000      	movs	r0, #0
}
  403a16:	f85d 4b04 	ldr.w	r4, [sp], #4
  403a1a:	4770      	bx	lr

00403a1c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403a1c:	4b08      	ldr	r3, [pc, #32]	; (403a40 <usart_reset+0x24>)
  403a1e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  403a22:	2300      	movs	r3, #0
  403a24:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  403a26:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403a28:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403a2a:	2388      	movs	r3, #136	; 0x88
  403a2c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403a2e:	2324      	movs	r3, #36	; 0x24
  403a30:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  403a32:	f44f 7380 	mov.w	r3, #256	; 0x100
  403a36:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  403a38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403a3c:	6003      	str	r3, [r0, #0]
  403a3e:	4770      	bx	lr
  403a40:	55534100 	.word	0x55534100

00403a44 <usart_init_rs232>:
{
  403a44:	b570      	push	{r4, r5, r6, lr}
  403a46:	4605      	mov	r5, r0
  403a48:	460c      	mov	r4, r1
  403a4a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  403a4c:	4b0f      	ldr	r3, [pc, #60]	; (403a8c <usart_init_rs232+0x48>)
  403a4e:	4798      	blx	r3
	ul_reg_val = 0;
  403a50:	2200      	movs	r2, #0
  403a52:	4b0f      	ldr	r3, [pc, #60]	; (403a90 <usart_init_rs232+0x4c>)
  403a54:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403a56:	b1a4      	cbz	r4, 403a82 <usart_init_rs232+0x3e>
  403a58:	4632      	mov	r2, r6
  403a5a:	6821      	ldr	r1, [r4, #0]
  403a5c:	4628      	mov	r0, r5
  403a5e:	4b0d      	ldr	r3, [pc, #52]	; (403a94 <usart_init_rs232+0x50>)
  403a60:	4798      	blx	r3
  403a62:	4602      	mov	r2, r0
  403a64:	b978      	cbnz	r0, 403a86 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403a66:	6863      	ldr	r3, [r4, #4]
  403a68:	68a1      	ldr	r1, [r4, #8]
  403a6a:	430b      	orrs	r3, r1
  403a6c:	6921      	ldr	r1, [r4, #16]
  403a6e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403a70:	68e1      	ldr	r1, [r4, #12]
  403a72:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403a74:	4906      	ldr	r1, [pc, #24]	; (403a90 <usart_init_rs232+0x4c>)
  403a76:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  403a78:	6869      	ldr	r1, [r5, #4]
  403a7a:	430b      	orrs	r3, r1
  403a7c:	606b      	str	r3, [r5, #4]
}
  403a7e:	4610      	mov	r0, r2
  403a80:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  403a82:	2201      	movs	r2, #1
  403a84:	e7fb      	b.n	403a7e <usart_init_rs232+0x3a>
  403a86:	2201      	movs	r2, #1
  403a88:	e7f9      	b.n	403a7e <usart_init_rs232+0x3a>
  403a8a:	bf00      	nop
  403a8c:	00403a1d 	.word	0x00403a1d
  403a90:	20400a8c 	.word	0x20400a8c
  403a94:	004039c3 	.word	0x004039c3

00403a98 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  403a98:	2340      	movs	r3, #64	; 0x40
  403a9a:	6003      	str	r3, [r0, #0]
  403a9c:	4770      	bx	lr

00403a9e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  403a9e:	2310      	movs	r3, #16
  403aa0:	6003      	str	r3, [r0, #0]
  403aa2:	4770      	bx	lr

00403aa4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403aa4:	6943      	ldr	r3, [r0, #20]
  403aa6:	f013 0f02 	tst.w	r3, #2
  403aaa:	d004      	beq.n	403ab6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  403aac:	f3c1 0108 	ubfx	r1, r1, #0, #9
  403ab0:	61c1      	str	r1, [r0, #28]
	return 0;
  403ab2:	2000      	movs	r0, #0
  403ab4:	4770      	bx	lr
		return 1;
  403ab6:	2001      	movs	r0, #1
}
  403ab8:	4770      	bx	lr

00403aba <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  403aba:	6943      	ldr	r3, [r0, #20]
  403abc:	f013 0f01 	tst.w	r3, #1
  403ac0:	d005      	beq.n	403ace <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403ac2:	6983      	ldr	r3, [r0, #24]
  403ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403ac8:	600b      	str	r3, [r1, #0]
	return 0;
  403aca:	2000      	movs	r0, #0
  403acc:	4770      	bx	lr
		return 1;
  403ace:	2001      	movs	r0, #1
}
  403ad0:	4770      	bx	lr

00403ad2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403ad2:	e7fe      	b.n	403ad2 <Dummy_Handler>

00403ad4 <Reset_Handler>:
{
  403ad4:	b500      	push	{lr}
  403ad6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  403ad8:	4b25      	ldr	r3, [pc, #148]	; (403b70 <Reset_Handler+0x9c>)
  403ada:	4a26      	ldr	r2, [pc, #152]	; (403b74 <Reset_Handler+0xa0>)
  403adc:	429a      	cmp	r2, r3
  403ade:	d010      	beq.n	403b02 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  403ae0:	4b25      	ldr	r3, [pc, #148]	; (403b78 <Reset_Handler+0xa4>)
  403ae2:	4a23      	ldr	r2, [pc, #140]	; (403b70 <Reset_Handler+0x9c>)
  403ae4:	429a      	cmp	r2, r3
  403ae6:	d20c      	bcs.n	403b02 <Reset_Handler+0x2e>
  403ae8:	3b01      	subs	r3, #1
  403aea:	1a9b      	subs	r3, r3, r2
  403aec:	f023 0303 	bic.w	r3, r3, #3
  403af0:	3304      	adds	r3, #4
  403af2:	4413      	add	r3, r2
  403af4:	491f      	ldr	r1, [pc, #124]	; (403b74 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  403af6:	f851 0b04 	ldr.w	r0, [r1], #4
  403afa:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  403afe:	429a      	cmp	r2, r3
  403b00:	d1f9      	bne.n	403af6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  403b02:	4b1e      	ldr	r3, [pc, #120]	; (403b7c <Reset_Handler+0xa8>)
  403b04:	4a1e      	ldr	r2, [pc, #120]	; (403b80 <Reset_Handler+0xac>)
  403b06:	429a      	cmp	r2, r3
  403b08:	d20a      	bcs.n	403b20 <Reset_Handler+0x4c>
  403b0a:	3b01      	subs	r3, #1
  403b0c:	1a9b      	subs	r3, r3, r2
  403b0e:	f023 0303 	bic.w	r3, r3, #3
  403b12:	3304      	adds	r3, #4
  403b14:	4413      	add	r3, r2
                *pDest++ = 0;
  403b16:	2100      	movs	r1, #0
  403b18:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  403b1c:	4293      	cmp	r3, r2
  403b1e:	d1fb      	bne.n	403b18 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403b20:	4a18      	ldr	r2, [pc, #96]	; (403b84 <Reset_Handler+0xb0>)
  403b22:	4b19      	ldr	r3, [pc, #100]	; (403b88 <Reset_Handler+0xb4>)
  403b24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403b28:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403b2a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403b2e:	fab3 f383 	clz	r3, r3
  403b32:	095b      	lsrs	r3, r3, #5
  403b34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  403b36:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403b38:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403b3c:	2200      	movs	r2, #0
  403b3e:	4b13      	ldr	r3, [pc, #76]	; (403b8c <Reset_Handler+0xb8>)
  403b40:	701a      	strb	r2, [r3, #0]
	return flags;
  403b42:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403b44:	4a12      	ldr	r2, [pc, #72]	; (403b90 <Reset_Handler+0xbc>)
  403b46:	6813      	ldr	r3, [r2, #0]
  403b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403b4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  403b4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403b52:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  403b56:	b129      	cbz	r1, 403b64 <Reset_Handler+0x90>
		cpu_irq_enable();
  403b58:	2201      	movs	r2, #1
  403b5a:	4b0c      	ldr	r3, [pc, #48]	; (403b8c <Reset_Handler+0xb8>)
  403b5c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  403b5e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403b62:	b662      	cpsie	i
        __libc_init_array();
  403b64:	4b0b      	ldr	r3, [pc, #44]	; (403b94 <Reset_Handler+0xc0>)
  403b66:	4798      	blx	r3
        main();
  403b68:	4b0b      	ldr	r3, [pc, #44]	; (403b98 <Reset_Handler+0xc4>)
  403b6a:	4798      	blx	r3
  403b6c:	e7fe      	b.n	403b6c <Reset_Handler+0x98>
  403b6e:	bf00      	nop
  403b70:	20400000 	.word	0x20400000
  403b74:	0040c27c 	.word	0x0040c27c
  403b78:	204009cc 	.word	0x204009cc
  403b7c:	20401740 	.word	0x20401740
  403b80:	204009cc 	.word	0x204009cc
  403b84:	e000ed00 	.word	0xe000ed00
  403b88:	00400000 	.word	0x00400000
  403b8c:	20400014 	.word	0x20400014
  403b90:	e000ed88 	.word	0xe000ed88
  403b94:	00404829 	.word	0x00404829
  403b98:	00404371 	.word	0x00404371

00403b9c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403b9c:	4b3b      	ldr	r3, [pc, #236]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403ba0:	f003 0303 	and.w	r3, r3, #3
  403ba4:	2b01      	cmp	r3, #1
  403ba6:	d01d      	beq.n	403be4 <SystemCoreClockUpdate+0x48>
  403ba8:	b183      	cbz	r3, 403bcc <SystemCoreClockUpdate+0x30>
  403baa:	2b02      	cmp	r3, #2
  403bac:	d036      	beq.n	403c1c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403bae:	4b37      	ldr	r3, [pc, #220]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403bb6:	2b70      	cmp	r3, #112	; 0x70
  403bb8:	d05f      	beq.n	403c7a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403bba:	4b34      	ldr	r3, [pc, #208]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403bbe:	4934      	ldr	r1, [pc, #208]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403bc0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403bc4:	680b      	ldr	r3, [r1, #0]
  403bc6:	40d3      	lsrs	r3, r2
  403bc8:	600b      	str	r3, [r1, #0]
  403bca:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403bcc:	4b31      	ldr	r3, [pc, #196]	; (403c94 <SystemCoreClockUpdate+0xf8>)
  403bce:	695b      	ldr	r3, [r3, #20]
  403bd0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403bd4:	bf14      	ite	ne
  403bd6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403bda:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403bde:	4b2c      	ldr	r3, [pc, #176]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403be0:	601a      	str	r2, [r3, #0]
  403be2:	e7e4      	b.n	403bae <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403be4:	4b29      	ldr	r3, [pc, #164]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403be6:	6a1b      	ldr	r3, [r3, #32]
  403be8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403bec:	d003      	beq.n	403bf6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403bee:	4a2a      	ldr	r2, [pc, #168]	; (403c98 <SystemCoreClockUpdate+0xfc>)
  403bf0:	4b27      	ldr	r3, [pc, #156]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403bf2:	601a      	str	r2, [r3, #0]
  403bf4:	e7db      	b.n	403bae <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403bf6:	4a29      	ldr	r2, [pc, #164]	; (403c9c <SystemCoreClockUpdate+0x100>)
  403bf8:	4b25      	ldr	r3, [pc, #148]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403bfa:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403bfc:	4b23      	ldr	r3, [pc, #140]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403bfe:	6a1b      	ldr	r3, [r3, #32]
  403c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403c04:	2b10      	cmp	r3, #16
  403c06:	d005      	beq.n	403c14 <SystemCoreClockUpdate+0x78>
  403c08:	2b20      	cmp	r3, #32
  403c0a:	d1d0      	bne.n	403bae <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  403c0c:	4a22      	ldr	r2, [pc, #136]	; (403c98 <SystemCoreClockUpdate+0xfc>)
  403c0e:	4b20      	ldr	r3, [pc, #128]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403c10:	601a      	str	r2, [r3, #0]
          break;
  403c12:	e7cc      	b.n	403bae <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  403c14:	4a22      	ldr	r2, [pc, #136]	; (403ca0 <SystemCoreClockUpdate+0x104>)
  403c16:	4b1e      	ldr	r3, [pc, #120]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403c18:	601a      	str	r2, [r3, #0]
          break;
  403c1a:	e7c8      	b.n	403bae <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403c1c:	4b1b      	ldr	r3, [pc, #108]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403c1e:	6a1b      	ldr	r3, [r3, #32]
  403c20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403c24:	d016      	beq.n	403c54 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403c26:	4a1c      	ldr	r2, [pc, #112]	; (403c98 <SystemCoreClockUpdate+0xfc>)
  403c28:	4b19      	ldr	r3, [pc, #100]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403c2a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403c2c:	4b17      	ldr	r3, [pc, #92]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403c30:	f003 0303 	and.w	r3, r3, #3
  403c34:	2b02      	cmp	r3, #2
  403c36:	d1ba      	bne.n	403bae <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403c38:	4a14      	ldr	r2, [pc, #80]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403c3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403c3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403c3e:	4814      	ldr	r0, [pc, #80]	; (403c90 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403c40:	f3c1 410a 	ubfx	r1, r1, #16, #11
  403c44:	6803      	ldr	r3, [r0, #0]
  403c46:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403c4a:	b2d2      	uxtb	r2, r2
  403c4c:	fbb3 f3f2 	udiv	r3, r3, r2
  403c50:	6003      	str	r3, [r0, #0]
  403c52:	e7ac      	b.n	403bae <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403c54:	4a11      	ldr	r2, [pc, #68]	; (403c9c <SystemCoreClockUpdate+0x100>)
  403c56:	4b0e      	ldr	r3, [pc, #56]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403c58:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403c5a:	4b0c      	ldr	r3, [pc, #48]	; (403c8c <SystemCoreClockUpdate+0xf0>)
  403c5c:	6a1b      	ldr	r3, [r3, #32]
  403c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403c62:	2b10      	cmp	r3, #16
  403c64:	d005      	beq.n	403c72 <SystemCoreClockUpdate+0xd6>
  403c66:	2b20      	cmp	r3, #32
  403c68:	d1e0      	bne.n	403c2c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  403c6a:	4a0b      	ldr	r2, [pc, #44]	; (403c98 <SystemCoreClockUpdate+0xfc>)
  403c6c:	4b08      	ldr	r3, [pc, #32]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403c6e:	601a      	str	r2, [r3, #0]
          break;
  403c70:	e7dc      	b.n	403c2c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  403c72:	4a0b      	ldr	r2, [pc, #44]	; (403ca0 <SystemCoreClockUpdate+0x104>)
  403c74:	4b06      	ldr	r3, [pc, #24]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403c76:	601a      	str	r2, [r3, #0]
          break;
  403c78:	e7d8      	b.n	403c2c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  403c7a:	4a05      	ldr	r2, [pc, #20]	; (403c90 <SystemCoreClockUpdate+0xf4>)
  403c7c:	6813      	ldr	r3, [r2, #0]
  403c7e:	4909      	ldr	r1, [pc, #36]	; (403ca4 <SystemCoreClockUpdate+0x108>)
  403c80:	fba1 1303 	umull	r1, r3, r1, r3
  403c84:	085b      	lsrs	r3, r3, #1
  403c86:	6013      	str	r3, [r2, #0]
  403c88:	4770      	bx	lr
  403c8a:	bf00      	nop
  403c8c:	400e0600 	.word	0x400e0600
  403c90:	20400018 	.word	0x20400018
  403c94:	400e1810 	.word	0x400e1810
  403c98:	00b71b00 	.word	0x00b71b00
  403c9c:	003d0900 	.word	0x003d0900
  403ca0:	007a1200 	.word	0x007a1200
  403ca4:	aaaaaaab 	.word	0xaaaaaaab

00403ca8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403ca8:	4b12      	ldr	r3, [pc, #72]	; (403cf4 <system_init_flash+0x4c>)
  403caa:	4298      	cmp	r0, r3
  403cac:	d911      	bls.n	403cd2 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403cae:	4b12      	ldr	r3, [pc, #72]	; (403cf8 <system_init_flash+0x50>)
  403cb0:	4298      	cmp	r0, r3
  403cb2:	d913      	bls.n	403cdc <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403cb4:	4b11      	ldr	r3, [pc, #68]	; (403cfc <system_init_flash+0x54>)
  403cb6:	4298      	cmp	r0, r3
  403cb8:	d914      	bls.n	403ce4 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403cba:	4b11      	ldr	r3, [pc, #68]	; (403d00 <system_init_flash+0x58>)
  403cbc:	4298      	cmp	r0, r3
  403cbe:	d915      	bls.n	403cec <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403cc0:	4b10      	ldr	r3, [pc, #64]	; (403d04 <system_init_flash+0x5c>)
  403cc2:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403cc4:	bf94      	ite	ls
  403cc6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403cca:	4a0f      	ldrhi	r2, [pc, #60]	; (403d08 <system_init_flash+0x60>)
  403ccc:	4b0f      	ldr	r3, [pc, #60]	; (403d0c <system_init_flash+0x64>)
  403cce:	601a      	str	r2, [r3, #0]
  403cd0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403cd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403cd6:	4b0d      	ldr	r3, [pc, #52]	; (403d0c <system_init_flash+0x64>)
  403cd8:	601a      	str	r2, [r3, #0]
  403cda:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403cdc:	4a0c      	ldr	r2, [pc, #48]	; (403d10 <system_init_flash+0x68>)
  403cde:	4b0b      	ldr	r3, [pc, #44]	; (403d0c <system_init_flash+0x64>)
  403ce0:	601a      	str	r2, [r3, #0]
  403ce2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403ce4:	4a0b      	ldr	r2, [pc, #44]	; (403d14 <system_init_flash+0x6c>)
  403ce6:	4b09      	ldr	r3, [pc, #36]	; (403d0c <system_init_flash+0x64>)
  403ce8:	601a      	str	r2, [r3, #0]
  403cea:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403cec:	4a0a      	ldr	r2, [pc, #40]	; (403d18 <system_init_flash+0x70>)
  403cee:	4b07      	ldr	r3, [pc, #28]	; (403d0c <system_init_flash+0x64>)
  403cf0:	601a      	str	r2, [r3, #0]
  403cf2:	4770      	bx	lr
  403cf4:	01312cff 	.word	0x01312cff
  403cf8:	026259ff 	.word	0x026259ff
  403cfc:	039386ff 	.word	0x039386ff
  403d00:	04c4b3ff 	.word	0x04c4b3ff
  403d04:	05f5e0ff 	.word	0x05f5e0ff
  403d08:	04000500 	.word	0x04000500
  403d0c:	400e0c00 	.word	0x400e0c00
  403d10:	04000100 	.word	0x04000100
  403d14:	04000200 	.word	0x04000200
  403d18:	04000300 	.word	0x04000300

00403d1c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403d1c:	4b0a      	ldr	r3, [pc, #40]	; (403d48 <_sbrk+0x2c>)
  403d1e:	681b      	ldr	r3, [r3, #0]
  403d20:	b153      	cbz	r3, 403d38 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403d22:	4b09      	ldr	r3, [pc, #36]	; (403d48 <_sbrk+0x2c>)
  403d24:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403d26:	181a      	adds	r2, r3, r0
  403d28:	4908      	ldr	r1, [pc, #32]	; (403d4c <_sbrk+0x30>)
  403d2a:	4291      	cmp	r1, r2
  403d2c:	db08      	blt.n	403d40 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403d2e:	4610      	mov	r0, r2
  403d30:	4a05      	ldr	r2, [pc, #20]	; (403d48 <_sbrk+0x2c>)
  403d32:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403d34:	4618      	mov	r0, r3
  403d36:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403d38:	4a05      	ldr	r2, [pc, #20]	; (403d50 <_sbrk+0x34>)
  403d3a:	4b03      	ldr	r3, [pc, #12]	; (403d48 <_sbrk+0x2c>)
  403d3c:	601a      	str	r2, [r3, #0]
  403d3e:	e7f0      	b.n	403d22 <_sbrk+0x6>
		return (caddr_t) -1;	
  403d40:	f04f 30ff 	mov.w	r0, #4294967295
}
  403d44:	4770      	bx	lr
  403d46:	bf00      	nop
  403d48:	20400a90 	.word	0x20400a90
  403d4c:	2045fffc 	.word	0x2045fffc
  403d50:	20403940 	.word	0x20403940

00403d54 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403d54:	f04f 30ff 	mov.w	r0, #4294967295
  403d58:	4770      	bx	lr

00403d5a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403d5e:	604b      	str	r3, [r1, #4]

	return 0;
}
  403d60:	2000      	movs	r0, #0
  403d62:	4770      	bx	lr

00403d64 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403d64:	2001      	movs	r0, #1
  403d66:	4770      	bx	lr

00403d68 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403d68:	2000      	movs	r0, #0
  403d6a:	4770      	bx	lr

00403d6c <resolve_cb>:
  }

  return 1;
}

static void resolve_cb(uint8_t *hostName, uint32_t hostIp) {
  403d6c:	b510      	push	{r4, lr}
  403d6e:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  403d70:	4b07      	ldr	r3, [pc, #28]	; (403d90 <resolve_cb+0x24>)
  403d72:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  403d74:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  403d76:	9301      	str	r3, [sp, #4]
  403d78:	f3c1 4307 	ubfx	r3, r1, #16, #8
  403d7c:	9300      	str	r3, [sp, #0]
  403d7e:	f3c1 2307 	ubfx	r3, r1, #8, #8
  403d82:	b2ca      	uxtb	r2, r1
  403d84:	4601      	mov	r1, r0
  403d86:	4803      	ldr	r0, [pc, #12]	; (403d94 <resolve_cb+0x28>)
  403d88:	4c03      	ldr	r4, [pc, #12]	; (403d98 <resolve_cb+0x2c>)
  403d8a:	47a0      	blx	r4
}
  403d8c:	b002      	add	sp, #8
  403d8e:	bd10      	pop	{r4, pc}
  403d90:	2040102c 	.word	0x2040102c
  403d94:	0040bed0 	.word	0x0040bed0
  403d98:	00404879 	.word	0x00404879

00403d9c <AFEC_Temp_callback>:
static void AFEC_Temp_callback(void) {
  403d9c:	b508      	push	{r3, lr}
    printf("!\n");
  403d9e:	4806      	ldr	r0, [pc, #24]	; (403db8 <AFEC_Temp_callback+0x1c>)
  403da0:	4b06      	ldr	r3, [pc, #24]	; (403dbc <AFEC_Temp_callback+0x20>)
  403da2:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  403da4:	4b06      	ldr	r3, [pc, #24]	; (403dc0 <AFEC_Temp_callback+0x24>)
  403da6:	2200      	movs	r2, #0
  403da8:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403daa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);
  403dac:	4b05      	ldr	r3, [pc, #20]	; (403dc4 <AFEC_Temp_callback+0x28>)
  403dae:	601a      	str	r2, [r3, #0]
  afec_done = true;
  403db0:	2201      	movs	r2, #1
  403db2:	4b05      	ldr	r3, [pc, #20]	; (403dc8 <AFEC_Temp_callback+0x2c>)
  403db4:	701a      	strb	r2, [r3, #0]
  403db6:	bd08      	pop	{r3, pc}
  403db8:	0040bcec 	.word	0x0040bcec
  403dbc:	00404879 	.word	0x00404879
  403dc0:	4003c000 	.word	0x4003c000
  403dc4:	20400aac 	.word	0x20400aac
  403dc8:	20400a94 	.word	0x20400a94

00403dcc <socket_cb>:

static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg) {
  403dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  403dce:	4b47      	ldr	r3, [pc, #284]	; (403eec <socket_cb+0x120>)
  403dd0:	f993 3000 	ldrsb.w	r3, [r3]
  403dd4:	4283      	cmp	r3, r0
  403dd6:	d000      	beq.n	403dda <socket_cb+0xe>
  403dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403dda:	4614      	mov	r4, r2

		switch (u8Msg) {
  403ddc:	2905      	cmp	r1, #5
  403dde:	d002      	beq.n	403de6 <socket_cb+0x1a>
  403de0:	2906      	cmp	r1, #6
  403de2:	d024      	beq.n	403e2e <socket_cb+0x62>
  403de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  case SOCKET_MSG_CONNECT:
      {
        printf("[SOCKET] Connected\n");
  403de6:	4842      	ldr	r0, [pc, #264]	; (403ef0 <socket_cb+0x124>)
  403de8:	4b42      	ldr	r3, [pc, #264]	; (403ef4 <socket_cb+0x128>)
  403dea:	4798      	blx	r3
			  if (gbTcpConnection) {
  403dec:	4b42      	ldr	r3, [pc, #264]	; (403ef8 <socket_cb+0x12c>)
  403dee:	781b      	ldrb	r3, [r3, #0]
  403df0:	2b00      	cmp	r3, #0
  403df2:	d0f1      	beq.n	403dd8 <socket_cb+0xc>
				  memset(gau8Buffer, 0, sizeof(send_buffer));
  403df4:	f44f 62af 	mov.w	r2, #1400	; 0x578
  403df8:	2100      	movs	r1, #0
  403dfa:	4840      	ldr	r0, [pc, #256]	; (403efc <socket_cb+0x130>)
  403dfc:	4b40      	ldr	r3, [pc, #256]	; (403f00 <socket_cb+0x134>)
  403dfe:	4798      	blx	r3
          tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
				  if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  403e00:	b13c      	cbz	r4, 403e12 <socket_cb+0x46>
  403e02:	f994 3001 	ldrsb.w	r3, [r4, #1]
  403e06:	2b00      	cmp	r3, #0
  403e08:	db03      	blt.n	403e12 <socket_cb+0x46>
            socketConnected = true;
  403e0a:	2201      	movs	r2, #1
  403e0c:	4b3d      	ldr	r3, [pc, #244]	; (403f04 <socket_cb+0x138>)
  403e0e:	701a      	strb	r2, [r3, #0]
  403e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				  }
          else {
					  printf("[SOCKET] Connection Error\n");
  403e12:	483d      	ldr	r0, [pc, #244]	; (403f08 <socket_cb+0x13c>)
  403e14:	4b37      	ldr	r3, [pc, #220]	; (403ef4 <socket_cb+0x128>)
  403e16:	4798      	blx	r3
					  gbTcpConnection = false;
  403e18:	2200      	movs	r2, #0
  403e1a:	4b37      	ldr	r3, [pc, #220]	; (403ef8 <socket_cb+0x12c>)
  403e1c:	701a      	strb	r2, [r3, #0]
					  close(tcp_client_socket);
  403e1e:	4c33      	ldr	r4, [pc, #204]	; (403eec <socket_cb+0x120>)
  403e20:	f994 0000 	ldrsb.w	r0, [r4]
  403e24:	4b39      	ldr	r3, [pc, #228]	; (403f0c <socket_cb+0x140>)
  403e26:	4798      	blx	r3
					  tcp_client_socket = -1;
  403e28:	23ff      	movs	r3, #255	; 0xff
  403e2a:	7023      	strb	r3, [r4, #0]
  403e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			  char * request_ok = NULL;
        char * request_content = NULL;
        char led0_on, led1_on, led2_on;

			  tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			  if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  403e2e:	2a00      	cmp	r2, #0
  403e30:	d04e      	beq.n	403ed0 <socket_cb+0x104>
  403e32:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  403e36:	2b00      	cmp	r3, #0
  403e38:	dd4a      	ble.n	403ed0 <socket_cb+0x104>
          request_ok = strstr(pstrRecv->pu8Buffer, "200 OK");
  403e3a:	4935      	ldr	r1, [pc, #212]	; (403f10 <socket_cb+0x144>)
  403e3c:	6810      	ldr	r0, [r2, #0]
  403e3e:	4b35      	ldr	r3, [pc, #212]	; (403f14 <socket_cb+0x148>)
  403e40:	4798      	blx	r3
  403e42:	4605      	mov	r5, r0

          if((state == POST_WAIT) || (state == POST_LDR)){
  403e44:	4b34      	ldr	r3, [pc, #208]	; (403f18 <socket_cb+0x14c>)
  403e46:	781b      	ldrb	r3, [r3, #0]
  403e48:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  403e4c:	2b01      	cmp	r3, #1
  403e4e:	d02e      	beq.n	403eae <socket_cb+0xe2>
            receive_ok = true;
            printf("TEST");
          }
          if(request_ok && ((state == GET_LEDS) || (state == GET_WAIT)) ) {
  403e50:	b12d      	cbz	r5, 403e5e <socket_cb+0x92>
  403e52:	4b31      	ldr	r3, [pc, #196]	; (403f18 <socket_cb+0x14c>)
  403e54:	781b      	ldrb	r3, [r3, #0]
  403e56:	2b02      	cmp	r3, #2
  403e58:	d030      	beq.n	403ebc <socket_cb+0xf0>
  403e5a:	2b04      	cmp	r3, #4
  403e5c:	d02e      	beq.n	403ebc <socket_cb+0xf0>
            recv(tcp_client_socket, gau8Buffer, MAIN_WIFI_M2M_BUFFER_SIZE, 0);
            //printf(gau8Buffer);
          }

          request_content = strstr(pstrRecv->pu8Buffer, "LEDS#");
  403e5e:	492f      	ldr	r1, [pc, #188]	; (403f1c <socket_cb+0x150>)
  403e60:	6820      	ldr	r0, [r4, #0]
  403e62:	4b2c      	ldr	r3, [pc, #176]	; (403f14 <socket_cb+0x148>)
  403e64:	4798      	blx	r3
          if(request_content != NULL){
  403e66:	2800      	cmp	r0, #0
  403e68:	d0b6      	beq.n	403dd8 <socket_cb+0xc>
            //printf(request_content);
            led0_on = request_content[6];
  403e6a:	7986      	ldrb	r6, [r0, #6]
            led1_on = request_content[7];
  403e6c:	79c5      	ldrb	r5, [r0, #7]
            led2_on = request_content[8];
  403e6e:	7a04      	ldrb	r4, [r0, #8]

            printf("LED_STATES %c %c %c \n", led0_on, led1_on, led2_on);
  403e70:	4623      	mov	r3, r4
  403e72:	462a      	mov	r2, r5
  403e74:	4631      	mov	r1, r6
  403e76:	482a      	ldr	r0, [pc, #168]	; (403f20 <socket_cb+0x154>)
  403e78:	4f1e      	ldr	r7, [pc, #120]	; (403ef4 <socket_cb+0x128>)
  403e7a:	47b8      	blx	r7

            if(led0_on == '1')
  403e7c:	2e31      	cmp	r6, #49	; 0x31
            pio_set(LED0_PIO, LED0_PIN_MASK);
  403e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403e82:	4828      	ldr	r0, [pc, #160]	; (403f24 <socket_cb+0x158>)
  403e84:	bf0c      	ite	eq
  403e86:	4b28      	ldreq	r3, [pc, #160]	; (403f28 <socket_cb+0x15c>)
            else
            pio_clear(LED0_PIO, LED0_PIN_MASK);
  403e88:	4b28      	ldrne	r3, [pc, #160]	; (403f2c <socket_cb+0x160>)
  403e8a:	4798      	blx	r3

            if(led1_on == '1')
  403e8c:	2d31      	cmp	r5, #49	; 0x31
            pio_set(LED1_PIO, LED1_PIN_MASK);
  403e8e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  403e92:	4827      	ldr	r0, [pc, #156]	; (403f30 <socket_cb+0x164>)
  403e94:	bf0c      	ite	eq
  403e96:	4b24      	ldreq	r3, [pc, #144]	; (403f28 <socket_cb+0x15c>)
            else
            pio_clear(LED1_PIO, LED1_PIN_MASK);
  403e98:	4b24      	ldrne	r3, [pc, #144]	; (403f2c <socket_cb+0x160>)
  403e9a:	4798      	blx	r3

            if(led2_on == '1')
  403e9c:	2c31      	cmp	r4, #49	; 0x31
            pio_set(LED2_PIO, LED2_PIN_MASK);
  403e9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403ea2:	4823      	ldr	r0, [pc, #140]	; (403f30 <socket_cb+0x164>)
  403ea4:	bf0c      	ite	eq
  403ea6:	4b20      	ldreq	r3, [pc, #128]	; (403f28 <socket_cb+0x15c>)
            else
            pio_clear(LED2_PIO, LED2_PIN_MASK);
  403ea8:	4b20      	ldrne	r3, [pc, #128]	; (403f2c <socket_cb+0x160>)
  403eaa:	4798      	blx	r3
  403eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            receive_ok = true;
  403eae:	2201      	movs	r2, #1
  403eb0:	4b20      	ldr	r3, [pc, #128]	; (403f34 <socket_cb+0x168>)
  403eb2:	701a      	strb	r2, [r3, #0]
            printf("TEST");
  403eb4:	4820      	ldr	r0, [pc, #128]	; (403f38 <socket_cb+0x16c>)
  403eb6:	4b0f      	ldr	r3, [pc, #60]	; (403ef4 <socket_cb+0x128>)
  403eb8:	4798      	blx	r3
  403eba:	e7c9      	b.n	403e50 <socket_cb+0x84>
            recv(tcp_client_socket, gau8Buffer, MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  403ebc:	2300      	movs	r3, #0
  403ebe:	f44f 62af 	mov.w	r2, #1400	; 0x578
  403ec2:	490e      	ldr	r1, [pc, #56]	; (403efc <socket_cb+0x130>)
  403ec4:	4809      	ldr	r0, [pc, #36]	; (403eec <socket_cb+0x120>)
  403ec6:	f990 0000 	ldrsb.w	r0, [r0]
  403eca:	4d1c      	ldr	r5, [pc, #112]	; (403f3c <socket_cb+0x170>)
  403ecc:	47a8      	blx	r5
  403ece:	e7c6      	b.n	403e5e <socket_cb+0x92>
          }
			  }
        else {
          socketConnected = 0;
  403ed0:	2200      	movs	r2, #0
  403ed2:	4b0c      	ldr	r3, [pc, #48]	; (403f04 <socket_cb+0x138>)
  403ed4:	701a      	strb	r2, [r3, #0]
				  printf("[SOCKET] Receive Error\n");
  403ed6:	481a      	ldr	r0, [pc, #104]	; (403f40 <socket_cb+0x174>)
  403ed8:	4b06      	ldr	r3, [pc, #24]	; (403ef4 <socket_cb+0x128>)
  403eda:	4798      	blx	r3
				  close(tcp_client_socket);
  403edc:	4c03      	ldr	r4, [pc, #12]	; (403eec <socket_cb+0x120>)
  403ede:	f994 0000 	ldrsb.w	r0, [r4]
  403ee2:	4b0a      	ldr	r3, [pc, #40]	; (403f0c <socket_cb+0x140>)
  403ee4:	4798      	blx	r3
				  tcp_client_socket = -1;
  403ee6:	23ff      	movs	r3, #255	; 0xff
  403ee8:	7023      	strb	r3, [r4, #0]

		default:
			break;
		}
	}
}
  403eea:	e775      	b.n	403dd8 <socket_cb+0xc>
  403eec:	2040001c 	.word	0x2040001c
  403ef0:	0040bf00 	.word	0x0040bf00
  403ef4:	00404879 	.word	0x00404879
  403ef8:	20401028 	.word	0x20401028
  403efc:	20400ab0 	.word	0x20400ab0
  403f00:	004048a1 	.word	0x004048a1
  403f04:	204015ad 	.word	0x204015ad
  403f08:	0040bf14 	.word	0x0040bf14
  403f0c:	00402e19 	.word	0x00402e19
  403f10:	0040bf30 	.word	0x0040bf30
  403f14:	00404e8d 	.word	0x00404e8d
  403f18:	20401738 	.word	0x20401738
  403f1c:	0040bf40 	.word	0x0040bf40
  403f20:	0040bf48 	.word	0x0040bf48
  403f24:	400e1200 	.word	0x400e1200
  403f28:	0040321b 	.word	0x0040321b
  403f2c:	0040321f 	.word	0x0040321f
  403f30:	400e0e00 	.word	0x400e0e00
  403f34:	204015ac 	.word	0x204015ac
  403f38:	0040bf38 	.word	0x0040bf38
  403f3c:	00402d79 	.word	0x00402d79
  403f40:	0040bf60 	.word	0x0040bf60

00403f44 <wifi_cb>:
		name[len - 4] = MAIN_HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
		name[len - 5] = MAIN_HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
	}
}

static void wifi_cb(uint8_t u8MsgType, void *pvMsg) {
  403f44:	b508      	push	{r3, lr}
	switch (u8MsgType) {
  403f46:	282c      	cmp	r0, #44	; 0x2c
  403f48:	d002      	beq.n	403f50 <wifi_cb+0xc>
  403f4a:	2832      	cmp	r0, #50	; 0x32
  403f4c:	d011      	beq.n	403f72 <wifi_cb+0x2e>
  403f4e:	bd08      	pop	{r3, pc}
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  403f50:	780b      	ldrb	r3, [r1, #0]
  403f52:	2b01      	cmp	r3, #1
  403f54:	d007      	beq.n	403f66 <wifi_cb+0x22>
			printf("[WI-FI] Connected\n");
			m2m_wifi_request_dhcp_client();
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  403f56:	b97b      	cbnz	r3, 403f78 <wifi_cb+0x34>
			printf("[WI-FI] Disconnected\n");
  403f58:	4808      	ldr	r0, [pc, #32]	; (403f7c <wifi_cb+0x38>)
  403f5a:	4b09      	ldr	r3, [pc, #36]	; (403f80 <wifi_cb+0x3c>)
  403f5c:	4798      	blx	r3
			gbConnectedWifi = false;
 			wifi_connected = 0;
  403f5e:	2200      	movs	r2, #0
  403f60:	4b08      	ldr	r3, [pc, #32]	; (403f84 <wifi_cb+0x40>)
  403f62:	701a      	strb	r2, [r3, #0]
  403f64:	bd08      	pop	{r3, pc}
			printf("[WI-FI] Connected\n");
  403f66:	4808      	ldr	r0, [pc, #32]	; (403f88 <wifi_cb+0x44>)
  403f68:	4b05      	ldr	r3, [pc, #20]	; (403f80 <wifi_cb+0x3c>)
  403f6a:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  403f6c:	4b07      	ldr	r3, [pc, #28]	; (403f8c <wifi_cb+0x48>)
  403f6e:	4798      	blx	r3
  403f70:	bd08      	pop	{r3, pc}
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = M2M_WIFI_CONNECTED;
  403f72:	2201      	movs	r2, #1
  403f74:	4b03      	ldr	r3, [pc, #12]	; (403f84 <wifi_cb+0x40>)
  403f76:	701a      	strb	r2, [r3, #0]
  403f78:	bd08      	pop	{r3, pc}
  403f7a:	bf00      	nop
  403f7c:	0040bf8c 	.word	0x0040bf8c
  403f80:	00404879 	.word	0x00404879
  403f84:	204015ae 	.word	0x204015ae
  403f88:	0040bf78 	.word	0x0040bf78
  403f8c:	004016d9 	.word	0x004016d9

00403f90 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f92:	b083      	sub	sp, #12
  403f94:	4605      	mov	r5, r0
  403f96:	460c      	mov	r4, r1
	uint32_t val = 0;
  403f98:	2300      	movs	r3, #0
  403f9a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403f9c:	4b2a      	ldr	r3, [pc, #168]	; (404048 <usart_serial_getchar+0xb8>)
  403f9e:	4298      	cmp	r0, r3
  403fa0:	d013      	beq.n	403fca <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403fa2:	4b2a      	ldr	r3, [pc, #168]	; (40404c <usart_serial_getchar+0xbc>)
  403fa4:	4298      	cmp	r0, r3
  403fa6:	d018      	beq.n	403fda <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403fa8:	4b29      	ldr	r3, [pc, #164]	; (404050 <usart_serial_getchar+0xc0>)
  403faa:	4298      	cmp	r0, r3
  403fac:	d01d      	beq.n	403fea <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403fae:	4b29      	ldr	r3, [pc, #164]	; (404054 <usart_serial_getchar+0xc4>)
  403fb0:	429d      	cmp	r5, r3
  403fb2:	d022      	beq.n	403ffa <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403fb4:	4b28      	ldr	r3, [pc, #160]	; (404058 <usart_serial_getchar+0xc8>)
  403fb6:	429d      	cmp	r5, r3
  403fb8:	d027      	beq.n	40400a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403fba:	4b28      	ldr	r3, [pc, #160]	; (40405c <usart_serial_getchar+0xcc>)
  403fbc:	429d      	cmp	r5, r3
  403fbe:	d02e      	beq.n	40401e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403fc0:	4b27      	ldr	r3, [pc, #156]	; (404060 <usart_serial_getchar+0xd0>)
  403fc2:	429d      	cmp	r5, r3
  403fc4:	d035      	beq.n	404032 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403fc6:	b003      	add	sp, #12
  403fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403fca:	461f      	mov	r7, r3
  403fcc:	4e25      	ldr	r6, [pc, #148]	; (404064 <usart_serial_getchar+0xd4>)
  403fce:	4621      	mov	r1, r4
  403fd0:	4638      	mov	r0, r7
  403fd2:	47b0      	blx	r6
  403fd4:	2800      	cmp	r0, #0
  403fd6:	d1fa      	bne.n	403fce <usart_serial_getchar+0x3e>
  403fd8:	e7e9      	b.n	403fae <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403fda:	461f      	mov	r7, r3
  403fdc:	4e21      	ldr	r6, [pc, #132]	; (404064 <usart_serial_getchar+0xd4>)
  403fde:	4621      	mov	r1, r4
  403fe0:	4638      	mov	r0, r7
  403fe2:	47b0      	blx	r6
  403fe4:	2800      	cmp	r0, #0
  403fe6:	d1fa      	bne.n	403fde <usart_serial_getchar+0x4e>
  403fe8:	e7e4      	b.n	403fb4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403fea:	461f      	mov	r7, r3
  403fec:	4e1d      	ldr	r6, [pc, #116]	; (404064 <usart_serial_getchar+0xd4>)
  403fee:	4621      	mov	r1, r4
  403ff0:	4638      	mov	r0, r7
  403ff2:	47b0      	blx	r6
  403ff4:	2800      	cmp	r0, #0
  403ff6:	d1fa      	bne.n	403fee <usart_serial_getchar+0x5e>
  403ff8:	e7df      	b.n	403fba <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403ffa:	461f      	mov	r7, r3
  403ffc:	4e19      	ldr	r6, [pc, #100]	; (404064 <usart_serial_getchar+0xd4>)
  403ffe:	4621      	mov	r1, r4
  404000:	4638      	mov	r0, r7
  404002:	47b0      	blx	r6
  404004:	2800      	cmp	r0, #0
  404006:	d1fa      	bne.n	403ffe <usart_serial_getchar+0x6e>
  404008:	e7da      	b.n	403fc0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40400a:	461e      	mov	r6, r3
  40400c:	4d16      	ldr	r5, [pc, #88]	; (404068 <usart_serial_getchar+0xd8>)
  40400e:	a901      	add	r1, sp, #4
  404010:	4630      	mov	r0, r6
  404012:	47a8      	blx	r5
  404014:	2800      	cmp	r0, #0
  404016:	d1fa      	bne.n	40400e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  404018:	9b01      	ldr	r3, [sp, #4]
  40401a:	7023      	strb	r3, [r4, #0]
  40401c:	e7d3      	b.n	403fc6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40401e:	461e      	mov	r6, r3
  404020:	4d11      	ldr	r5, [pc, #68]	; (404068 <usart_serial_getchar+0xd8>)
  404022:	a901      	add	r1, sp, #4
  404024:	4630      	mov	r0, r6
  404026:	47a8      	blx	r5
  404028:	2800      	cmp	r0, #0
  40402a:	d1fa      	bne.n	404022 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40402c:	9b01      	ldr	r3, [sp, #4]
  40402e:	7023      	strb	r3, [r4, #0]
  404030:	e7c9      	b.n	403fc6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404032:	461e      	mov	r6, r3
  404034:	4d0c      	ldr	r5, [pc, #48]	; (404068 <usart_serial_getchar+0xd8>)
  404036:	a901      	add	r1, sp, #4
  404038:	4630      	mov	r0, r6
  40403a:	47a8      	blx	r5
  40403c:	2800      	cmp	r0, #0
  40403e:	d1fa      	bne.n	404036 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  404040:	9b01      	ldr	r3, [sp, #4]
  404042:	7023      	strb	r3, [r4, #0]
}
  404044:	e7bf      	b.n	403fc6 <usart_serial_getchar+0x36>
  404046:	bf00      	nop
  404048:	400e0800 	.word	0x400e0800
  40404c:	400e0a00 	.word	0x400e0a00
  404050:	400e1a00 	.word	0x400e1a00
  404054:	400e1c00 	.word	0x400e1c00
  404058:	40024000 	.word	0x40024000
  40405c:	40028000 	.word	0x40028000
  404060:	4002c000 	.word	0x4002c000
  404064:	004039af 	.word	0x004039af
  404068:	00403abb 	.word	0x00403abb

0040406c <usart_serial_putchar>:
{
  40406c:	b570      	push	{r4, r5, r6, lr}
  40406e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  404070:	4b2a      	ldr	r3, [pc, #168]	; (40411c <usart_serial_putchar+0xb0>)
  404072:	4298      	cmp	r0, r3
  404074:	d013      	beq.n	40409e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  404076:	4b2a      	ldr	r3, [pc, #168]	; (404120 <usart_serial_putchar+0xb4>)
  404078:	4298      	cmp	r0, r3
  40407a:	d019      	beq.n	4040b0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40407c:	4b29      	ldr	r3, [pc, #164]	; (404124 <usart_serial_putchar+0xb8>)
  40407e:	4298      	cmp	r0, r3
  404080:	d01f      	beq.n	4040c2 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  404082:	4b29      	ldr	r3, [pc, #164]	; (404128 <usart_serial_putchar+0xbc>)
  404084:	4298      	cmp	r0, r3
  404086:	d025      	beq.n	4040d4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  404088:	4b28      	ldr	r3, [pc, #160]	; (40412c <usart_serial_putchar+0xc0>)
  40408a:	4298      	cmp	r0, r3
  40408c:	d02b      	beq.n	4040e6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40408e:	4b28      	ldr	r3, [pc, #160]	; (404130 <usart_serial_putchar+0xc4>)
  404090:	4298      	cmp	r0, r3
  404092:	d031      	beq.n	4040f8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  404094:	4b27      	ldr	r3, [pc, #156]	; (404134 <usart_serial_putchar+0xc8>)
  404096:	4298      	cmp	r0, r3
  404098:	d037      	beq.n	40410a <usart_serial_putchar+0x9e>
	return 0;
  40409a:	2000      	movs	r0, #0
}
  40409c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40409e:	461e      	mov	r6, r3
  4040a0:	4d25      	ldr	r5, [pc, #148]	; (404138 <usart_serial_putchar+0xcc>)
  4040a2:	4621      	mov	r1, r4
  4040a4:	4630      	mov	r0, r6
  4040a6:	47a8      	blx	r5
  4040a8:	2800      	cmp	r0, #0
  4040aa:	d1fa      	bne.n	4040a2 <usart_serial_putchar+0x36>
		return 1;
  4040ac:	2001      	movs	r0, #1
  4040ae:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040b0:	461e      	mov	r6, r3
  4040b2:	4d21      	ldr	r5, [pc, #132]	; (404138 <usart_serial_putchar+0xcc>)
  4040b4:	4621      	mov	r1, r4
  4040b6:	4630      	mov	r0, r6
  4040b8:	47a8      	blx	r5
  4040ba:	2800      	cmp	r0, #0
  4040bc:	d1fa      	bne.n	4040b4 <usart_serial_putchar+0x48>
		return 1;
  4040be:	2001      	movs	r0, #1
  4040c0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040c2:	461e      	mov	r6, r3
  4040c4:	4d1c      	ldr	r5, [pc, #112]	; (404138 <usart_serial_putchar+0xcc>)
  4040c6:	4621      	mov	r1, r4
  4040c8:	4630      	mov	r0, r6
  4040ca:	47a8      	blx	r5
  4040cc:	2800      	cmp	r0, #0
  4040ce:	d1fa      	bne.n	4040c6 <usart_serial_putchar+0x5a>
		return 1;
  4040d0:	2001      	movs	r0, #1
  4040d2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040d4:	461e      	mov	r6, r3
  4040d6:	4d18      	ldr	r5, [pc, #96]	; (404138 <usart_serial_putchar+0xcc>)
  4040d8:	4621      	mov	r1, r4
  4040da:	4630      	mov	r0, r6
  4040dc:	47a8      	blx	r5
  4040de:	2800      	cmp	r0, #0
  4040e0:	d1fa      	bne.n	4040d8 <usart_serial_putchar+0x6c>
		return 1;
  4040e2:	2001      	movs	r0, #1
  4040e4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4040e6:	461e      	mov	r6, r3
  4040e8:	4d14      	ldr	r5, [pc, #80]	; (40413c <usart_serial_putchar+0xd0>)
  4040ea:	4621      	mov	r1, r4
  4040ec:	4630      	mov	r0, r6
  4040ee:	47a8      	blx	r5
  4040f0:	2800      	cmp	r0, #0
  4040f2:	d1fa      	bne.n	4040ea <usart_serial_putchar+0x7e>
		return 1;
  4040f4:	2001      	movs	r0, #1
  4040f6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4040f8:	461e      	mov	r6, r3
  4040fa:	4d10      	ldr	r5, [pc, #64]	; (40413c <usart_serial_putchar+0xd0>)
  4040fc:	4621      	mov	r1, r4
  4040fe:	4630      	mov	r0, r6
  404100:	47a8      	blx	r5
  404102:	2800      	cmp	r0, #0
  404104:	d1fa      	bne.n	4040fc <usart_serial_putchar+0x90>
		return 1;
  404106:	2001      	movs	r0, #1
  404108:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40410a:	461e      	mov	r6, r3
  40410c:	4d0b      	ldr	r5, [pc, #44]	; (40413c <usart_serial_putchar+0xd0>)
  40410e:	4621      	mov	r1, r4
  404110:	4630      	mov	r0, r6
  404112:	47a8      	blx	r5
  404114:	2800      	cmp	r0, #0
  404116:	d1fa      	bne.n	40410e <usart_serial_putchar+0xa2>
		return 1;
  404118:	2001      	movs	r0, #1
  40411a:	bd70      	pop	{r4, r5, r6, pc}
  40411c:	400e0800 	.word	0x400e0800
  404120:	400e0a00 	.word	0x400e0a00
  404124:	400e1a00 	.word	0x400e1a00
  404128:	400e1c00 	.word	0x400e1c00
  40412c:	40024000 	.word	0x40024000
  404130:	40028000 	.word	0x40028000
  404134:	4002c000 	.word	0x4002c000
  404138:	0040399d 	.word	0x0040399d
  40413c:	00403aa5 	.word	0x00403aa5

00404140 <build_get>:
void build_get(uint8_t *buff, char *route) {
  404140:	b510      	push	{r4, lr}
  404142:	b082      	sub	sp, #8
  sprintf(
  404144:	4b05      	ldr	r3, [pc, #20]	; (40415c <build_get+0x1c>)
  404146:	9301      	str	r3, [sp, #4]
  404148:	4b05      	ldr	r3, [pc, #20]	; (404160 <build_get+0x20>)
  40414a:	9300      	str	r3, [sp, #0]
  40414c:	460b      	mov	r3, r1
  40414e:	4a05      	ldr	r2, [pc, #20]	; (404164 <build_get+0x24>)
  404150:	4905      	ldr	r1, [pc, #20]	; (404168 <build_get+0x28>)
  404152:	4c06      	ldr	r4, [pc, #24]	; (40416c <build_get+0x2c>)
  404154:	47a0      	blx	r4
}
  404156:	b002      	add	sp, #8
  404158:	bd10      	pop	{r4, pc}
  40415a:	bf00      	nop
  40415c:	0040bd0c 	.word	0x0040bd0c
  404160:	0040bd04 	.word	0x0040bd04
  404164:	0040bcf4 	.word	0x0040bcf4
  404168:	0040bcf8 	.word	0x0040bcf8
  40416c:	00404a99 	.word	0x00404a99

00404170 <build_post>:
void build_post(uint8_t *buff, char *route, char *query) {
  404170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404174:	b086      	sub	sp, #24
  404176:	4607      	mov	r7, r0
  404178:	4688      	mov	r8, r1
  40417a:	4616      	mov	r6, r2
  sprintf(content_length, "%lu", strlen(query));
  40417c:	4610      	mov	r0, r2
  40417e:	4b0b      	ldr	r3, [pc, #44]	; (4041ac <build_post+0x3c>)
  404180:	4798      	blx	r3
  404182:	4d0b      	ldr	r5, [pc, #44]	; (4041b0 <build_post+0x40>)
  404184:	4602      	mov	r2, r0
  404186:	490b      	ldr	r1, [pc, #44]	; (4041b4 <build_post+0x44>)
  404188:	4628      	mov	r0, r5
  40418a:	4c0b      	ldr	r4, [pc, #44]	; (4041b8 <build_post+0x48>)
  40418c:	47a0      	blx	r4
  sprintf(
  40418e:	9604      	str	r6, [sp, #16]
  404190:	4b0a      	ldr	r3, [pc, #40]	; (4041bc <build_post+0x4c>)
  404192:	9303      	str	r3, [sp, #12]
  404194:	9302      	str	r3, [sp, #8]
  404196:	9501      	str	r5, [sp, #4]
  404198:	4b09      	ldr	r3, [pc, #36]	; (4041c0 <build_post+0x50>)
  40419a:	9300      	str	r3, [sp, #0]
  40419c:	4643      	mov	r3, r8
  40419e:	4a09      	ldr	r2, [pc, #36]	; (4041c4 <build_post+0x54>)
  4041a0:	4909      	ldr	r1, [pc, #36]	; (4041c8 <build_post+0x58>)
  4041a2:	4638      	mov	r0, r7
  4041a4:	47a0      	blx	r4
}
  4041a6:	b006      	add	sp, #24
  4041a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4041ac:	00404b01 	.word	0x00404b01
  4041b0:	20400a98 	.word	0x20400a98
  4041b4:	0040be90 	.word	0x0040be90
  4041b8:	00404a99 	.word	0x00404a99
  4041bc:	0040bd0c 	.word	0x0040bd0c
  4041c0:	0040bd2c 	.word	0x0040bd2c
  4041c4:	0040bd10 	.word	0x0040bd10
  4041c8:	0040bd18 	.word	0x0040bd18

004041cc <LED_init>:
void LED_init(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask, uint32_t ul_default_level) {
  4041cc:	b570      	push	{r4, r5, r6, lr}
  4041ce:	b082      	sub	sp, #8
  4041d0:	4604      	mov	r4, r0
  4041d2:	4615      	mov	r5, r2
  4041d4:	461e      	mov	r6, r3
  pmc_enable_periph_clk(ul_id);
  4041d6:	4608      	mov	r0, r1
  4041d8:	4b05      	ldr	r3, [pc, #20]	; (4041f0 <LED_init+0x24>)
  4041da:	4798      	blx	r3
  pio_set_output(p_pio, ul_mask, ul_default_level, 0, 0);
  4041dc:	2300      	movs	r3, #0
  4041de:	9300      	str	r3, [sp, #0]
  4041e0:	4632      	mov	r2, r6
  4041e2:	4629      	mov	r1, r5
  4041e4:	4620      	mov	r0, r4
  4041e6:	4c03      	ldr	r4, [pc, #12]	; (4041f4 <LED_init+0x28>)
  4041e8:	47a0      	blx	r4
}
  4041ea:	b002      	add	sp, #8
  4041ec:	bd70      	pop	{r4, r5, r6, pc}
  4041ee:	bf00      	nop
  4041f0:	0040374d 	.word	0x0040374d
  4041f4:	004032eb 	.word	0x004032eb

004041f8 <TC_init>:
void TC_init(Tc *p_tc, uint32_t ul_id, uint32_t ul_freq) {
  4041f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4041fc:	b084      	sub	sp, #16
  4041fe:	4606      	mov	r6, r0
  404200:	460c      	mov	r4, r1
  404202:	4617      	mov	r7, r2
  pmc_enable_periph_clk(ul_id);
  404204:	4608      	mov	r0, r1
  404206:	4b18      	ldr	r3, [pc, #96]	; (404268 <TC_init+0x70>)
  404208:	4798      	blx	r3
  tc_find_mck_divisor(ul_freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  40420a:	4d18      	ldr	r5, [pc, #96]	; (40426c <TC_init+0x74>)
  40420c:	9500      	str	r5, [sp, #0]
  40420e:	ab02      	add	r3, sp, #8
  404210:	aa03      	add	r2, sp, #12
  404212:	4629      	mov	r1, r5
  404214:	4638      	mov	r0, r7
  404216:	f8df 806c 	ldr.w	r8, [pc, #108]	; 404284 <TC_init+0x8c>
  40421a:	47c0      	blx	r8
  tc_init(p_tc, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  40421c:	9a02      	ldr	r2, [sp, #8]
  40421e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  404222:	2100      	movs	r1, #0
  404224:	4630      	mov	r0, r6
  404226:	4b12      	ldr	r3, [pc, #72]	; (404270 <TC_init+0x78>)
  404228:	4798      	blx	r3
  tc_write_rc(p_tc, TC_CHANNEL, (ul_sysclk / ul_div) / ul_freq);
  40422a:	9a03      	ldr	r2, [sp, #12]
  40422c:	fbb5 f2f2 	udiv	r2, r5, r2
  404230:	fbb2 f2f7 	udiv	r2, r2, r7
  404234:	2100      	movs	r1, #0
  404236:	4630      	mov	r0, r6
  404238:	4b0e      	ldr	r3, [pc, #56]	; (404274 <TC_init+0x7c>)
  40423a:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40423c:	b263      	sxtb	r3, r4
  40423e:	095b      	lsrs	r3, r3, #5
  404240:	f004 041f 	and.w	r4, r4, #31
  404244:	2201      	movs	r2, #1
  404246:	fa02 f404 	lsl.w	r4, r2, r4
  40424a:	4a0b      	ldr	r2, [pc, #44]	; (404278 <TC_init+0x80>)
  40424c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  tc_enable_interrupt(p_tc, TC_CHANNEL, TC_IER_CPCS);
  404250:	2210      	movs	r2, #16
  404252:	2100      	movs	r1, #0
  404254:	4630      	mov	r0, r6
  404256:	4b09      	ldr	r3, [pc, #36]	; (40427c <TC_init+0x84>)
  404258:	4798      	blx	r3
  tc_start(p_tc, TC_CHANNEL);
  40425a:	2100      	movs	r1, #0
  40425c:	4630      	mov	r0, r6
  40425e:	4b08      	ldr	r3, [pc, #32]	; (404280 <TC_init+0x88>)
  404260:	4798      	blx	r3
}
  404262:	b004      	add	sp, #16
  404264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404268:	0040374d 	.word	0x0040374d
  40426c:	11e1a300 	.word	0x11e1a300
  404270:	004038f3 	.word	0x004038f3
  404274:	00403915 	.word	0x00403915
  404278:	e000e100 	.word	0xe000e100
  40427c:	0040391d 	.word	0x0040391d
  404280:	0040390d 	.word	0x0040390d
  404284:	0040392d 	.word	0x0040392d

00404288 <TC0_Handler>:
void TC0_Handler(void) {
  404288:	b500      	push	{lr}
  40428a:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, TC_CHANNEL);
  40428c:	2100      	movs	r1, #0
  40428e:	4807      	ldr	r0, [pc, #28]	; (4042ac <TC0_Handler+0x24>)
  404290:	4b07      	ldr	r3, [pc, #28]	; (4042b0 <TC0_Handler+0x28>)
  404292:	4798      	blx	r3
  404294:	9001      	str	r0, [sp, #4]
  UNUSED(ul_dummy);
  404296:	9b01      	ldr	r3, [sp, #4]
  if(socketConnected)
  404298:	4b06      	ldr	r3, [pc, #24]	; (4042b4 <TC0_Handler+0x2c>)
  40429a:	781b      	ldrb	r3, [r3, #0]
  40429c:	b113      	cbz	r3, 4042a4 <TC0_Handler+0x1c>
    init_state_machine = true;
  40429e:	2201      	movs	r2, #1
  4042a0:	4b05      	ldr	r3, [pc, #20]	; (4042b8 <TC0_Handler+0x30>)
  4042a2:	701a      	strb	r2, [r3, #0]
}
  4042a4:	b003      	add	sp, #12
  4042a6:	f85d fb04 	ldr.w	pc, [sp], #4
  4042aa:	bf00      	nop
  4042ac:	4000c000 	.word	0x4000c000
  4042b0:	00403925 	.word	0x00403925
  4042b4:	204015ad 	.word	0x204015ad
  4042b8:	20401030 	.word	0x20401030

004042bc <TC3_Handler>:
void TC3_Handler(void) {
  4042bc:	b500      	push	{lr}
  4042be:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC1, TC_CHANNEL);
  4042c0:	2100      	movs	r1, #0
  4042c2:	4807      	ldr	r0, [pc, #28]	; (4042e0 <TC3_Handler+0x24>)
  4042c4:	4b07      	ldr	r3, [pc, #28]	; (4042e4 <TC3_Handler+0x28>)
  4042c6:	4798      	blx	r3
  4042c8:	9001      	str	r0, [sp, #4]
  UNUSED(ul_dummy);
  4042ca:	9b01      	ldr	r3, [sp, #4]
      printf("#\n");
  4042cc:	4806      	ldr	r0, [pc, #24]	; (4042e8 <TC3_Handler+0x2c>)
  4042ce:	4b07      	ldr	r3, [pc, #28]	; (4042ec <TC3_Handler+0x30>)
  4042d0:	4798      	blx	r3
	afec->AFEC_CR = AFEC_CR_START;
  4042d2:	2202      	movs	r2, #2
  4042d4:	4b06      	ldr	r3, [pc, #24]	; (4042f0 <TC3_Handler+0x34>)
  4042d6:	601a      	str	r2, [r3, #0]
}
  4042d8:	b003      	add	sp, #12
  4042da:	f85d fb04 	ldr.w	pc, [sp], #4
  4042de:	bf00      	nop
  4042e0:	40010000 	.word	0x40010000
  4042e4:	00403925 	.word	0x00403925
  4042e8:	0040bcf0 	.word	0x0040bcf0
  4042ec:	00404879 	.word	0x00404879
  4042f0:	4003c000 	.word	0x4003c000

004042f4 <inet_aton>:
int inet_aton(const char *cp, in_addr *ap) {
  4042f4:	b4f0      	push	{r4, r5, r6, r7}
  4042f6:	3801      	subs	r0, #1
  register u_long acc = 0, addr = 0;
  4042f8:	2400      	movs	r4, #0
  4042fa:	4622      	mov	r2, r4
  int dots = 0;
  4042fc:	4625      	mov	r5, r4
	        acc = 0;
  4042fe:	4626      	mov	r6, r4
  404300:	e011      	b.n	404326 <inet_aton+0x32>
	  switch (cc) {
  404302:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  404306:	2f09      	cmp	r7, #9
  404308:	d814      	bhi.n	404334 <inet_aton+0x40>
	        acc = acc * 10 + (cc - '0');
  40430a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40430e:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  404312:	e007      	b.n	404324 <inet_aton+0x30>
	        if (++dots > 3) {
  404314:	3501      	adds	r5, #1
  404316:	2d03      	cmp	r5, #3
  404318:	dc24      	bgt.n	404364 <inet_aton+0x70>
	        if (acc > 255) {
  40431a:	2aff      	cmp	r2, #255	; 0xff
  40431c:	d824      	bhi.n	404368 <inet_aton+0x74>
	        addr = addr << 8 | acc;
  40431e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  404322:	4632      	mov	r2, r6
  } while (*cp++) ;
  404324:	b14b      	cbz	r3, 40433a <inet_aton+0x46>
	  register char cc = *cp;
  404326:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	  switch (cc) {
  40432a:	2b2e      	cmp	r3, #46	; 0x2e
  40432c:	d0f2      	beq.n	404314 <inet_aton+0x20>
  40432e:	d8e8      	bhi.n	404302 <inet_aton+0xe>
  404330:	2b00      	cmp	r3, #0
  404332:	d0f2      	beq.n	40431a <inet_aton+0x26>
	        return 0;
  404334:	2000      	movs	r0, #0
}
  404336:	bcf0      	pop	{r4, r5, r6, r7}
  404338:	4770      	bx	lr
  if (dots < 3) {
  40433a:	2d02      	cmp	r5, #2
  40433c:	dc03      	bgt.n	404346 <inet_aton+0x52>
	  addr <<= 8 * (3 - dots) ;
  40433e:	f1c5 0303 	rsb	r3, r5, #3
  404342:	00db      	lsls	r3, r3, #3
  404344:	409c      	lsls	r4, r3
  if (ap) {
  404346:	b189      	cbz	r1, 40436c <inet_aton+0x78>
	  ap->s_addr = _htonl(addr);
  404348:	0e23      	lsrs	r3, r4, #24
  40434a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40434e:	0222      	lsls	r2, r4, #8
  404350:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  404354:	431a      	orrs	r2, r3
  404356:	0a23      	lsrs	r3, r4, #8
  404358:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  40435c:	4313      	orrs	r3, r2
  40435e:	600b      	str	r3, [r1, #0]
  return 1;
  404360:	2001      	movs	r0, #1
  404362:	e7e8      	b.n	404336 <inet_aton+0x42>
		    return 0;
  404364:	2000      	movs	r0, #0
  404366:	e7e6      	b.n	404336 <inet_aton+0x42>
		    return 0;
  404368:	2000      	movs	r0, #0
  40436a:	e7e4      	b.n	404336 <inet_aton+0x42>
  return 1;
  40436c:	2001      	movs	r0, #1
  40436e:	e7e2      	b.n	404336 <inet_aton+0x42>

00404370 <main>:
}

/************************************************************************/
/* MAIN                                                                 */
/************************************************************************/
int main(void) {
  404370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404374:	b096      	sub	sp, #88	; 0x58
	int8_t ret;
	uint8_t mac_addr[6];
	struct sockaddr_in addr_in;

	/* Initialize the board. */
	sysclk_init();
  404376:	4b81      	ldr	r3, [pc, #516]	; (40457c <main+0x20c>)
  404378:	4798      	blx	r3
	board_init();
  40437a:	4b81      	ldr	r3, [pc, #516]	; (404580 <main+0x210>)
  40437c:	4798      	blx	r3
  40437e:	200e      	movs	r0, #14
  404380:	4e80      	ldr	r6, [pc, #512]	; (404584 <main+0x214>)
  404382:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404384:	4d80      	ldr	r5, [pc, #512]	; (404588 <main+0x218>)
  404386:	4b81      	ldr	r3, [pc, #516]	; (40458c <main+0x21c>)
  404388:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40438a:	4a81      	ldr	r2, [pc, #516]	; (404590 <main+0x220>)
  40438c:	4b81      	ldr	r3, [pc, #516]	; (404594 <main+0x224>)
  40438e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404390:	4a81      	ldr	r2, [pc, #516]	; (404598 <main+0x228>)
  404392:	4b82      	ldr	r3, [pc, #520]	; (40459c <main+0x22c>)
  404394:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  404396:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40439a:	9306      	str	r3, [sp, #24]
	usart_settings.char_length = opt->charlength;
  40439c:	23c0      	movs	r3, #192	; 0xc0
  40439e:	9307      	str	r3, [sp, #28]
	usart_settings.parity_type = opt->paritytype;
  4043a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4043a4:	9308      	str	r3, [sp, #32]
	usart_settings.stop_bits= opt->stopbits;
  4043a6:	2400      	movs	r4, #0
  4043a8:	9409      	str	r4, [sp, #36]	; 0x24
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4043aa:	940a      	str	r4, [sp, #40]	; 0x28
  4043ac:	200e      	movs	r0, #14
  4043ae:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4043b0:	4a7b      	ldr	r2, [pc, #492]	; (4045a0 <main+0x230>)
  4043b2:	a906      	add	r1, sp, #24
  4043b4:	4628      	mov	r0, r5
  4043b6:	4b7b      	ldr	r3, [pc, #492]	; (4045a4 <main+0x234>)
  4043b8:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4043ba:	4628      	mov	r0, r5
  4043bc:	4b7a      	ldr	r3, [pc, #488]	; (4045a8 <main+0x238>)
  4043be:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4043c0:	4628      	mov	r0, r5
  4043c2:	4b7a      	ldr	r3, [pc, #488]	; (4045ac <main+0x23c>)
  4043c4:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4043c6:	4e7a      	ldr	r6, [pc, #488]	; (4045b0 <main+0x240>)
  4043c8:	6833      	ldr	r3, [r6, #0]
  4043ca:	4621      	mov	r1, r4
  4043cc:	6898      	ldr	r0, [r3, #8]
  4043ce:	4d79      	ldr	r5, [pc, #484]	; (4045b4 <main+0x244>)
  4043d0:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4043d2:	6833      	ldr	r3, [r6, #0]
  4043d4:	4621      	mov	r1, r4
  4043d6:	6858      	ldr	r0, [r3, #4]
  4043d8:	47a8      	blx	r5

	/* Initialize the UART console. */
	CONSOLE_init();
	printf("Home Controller v1.0\n");
  4043da:	4877      	ldr	r0, [pc, #476]	; (4045b8 <main+0x248>)
  4043dc:	4b77      	ldr	r3, [pc, #476]	; (4045bc <main+0x24c>)
  4043de:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  4043e0:	4b77      	ldr	r3, [pc, #476]	; (4045c0 <main+0x250>)
  4043e2:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  4043e4:	9411      	str	r4, [sp, #68]	; 0x44
  4043e6:	9412      	str	r4, [sp, #72]	; 0x48
  4043e8:	9413      	str	r4, [sp, #76]	; 0x4c
  4043ea:	9414      	str	r4, [sp, #80]	; 0x50
  4043ec:	9415      	str	r4, [sp, #84]	; 0x54

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  4043ee:	4b75      	ldr	r3, [pc, #468]	; (4045c4 <main+0x254>)
  4043f0:	9310      	str	r3, [sp, #64]	; 0x40
	ret = m2m_wifi_init(&param);
  4043f2:	a810      	add	r0, sp, #64	; 0x40
  4043f4:	4b74      	ldr	r3, [pc, #464]	; (4045c8 <main+0x258>)
  4043f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4043f8:	b120      	cbz	r0, 404404 <main+0x94>
  4043fa:	4601      	mov	r1, r0
		printf("m2m_wifi_init call error! (%d)\r\n", ret);
  4043fc:	4873      	ldr	r0, [pc, #460]	; (4045cc <main+0x25c>)
  4043fe:	4b6f      	ldr	r3, [pc, #444]	; (4045bc <main+0x24c>)
  404400:	4798      	blx	r3
  404402:	e7fe      	b.n	404402 <main+0x92>
		while (1) {}
	}

	/* Initialize socket module. */
	socketInit();
  404404:	4b72      	ldr	r3, [pc, #456]	; (4045d0 <main+0x260>)
  404406:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  404408:	4972      	ldr	r1, [pc, #456]	; (4045d4 <main+0x264>)
  40440a:	4873      	ldr	r0, [pc, #460]	; (4045d8 <main+0x268>)
  40440c:	4b73      	ldr	r3, [pc, #460]	; (4045dc <main+0x26c>)
  40440e:	4798      	blx	r3

  /* Connect to router. */
	printf("[WI-FI] Connecting to SSID: %s\n", (char *)MAIN_WLAN_SSID);
  404410:	4c73      	ldr	r4, [pc, #460]	; (4045e0 <main+0x270>)
  404412:	4621      	mov	r1, r4
  404414:	4873      	ldr	r0, [pc, #460]	; (4045e4 <main+0x274>)
  404416:	4b69      	ldr	r3, [pc, #420]	; (4045bc <main+0x24c>)
  404418:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  40441a:	23ff      	movs	r3, #255	; 0xff
  40441c:	9300      	str	r3, [sp, #0]
  40441e:	4b72      	ldr	r3, [pc, #456]	; (4045e8 <main+0x278>)
  404420:	2202      	movs	r2, #2
  404422:	2114      	movs	r1, #20
  404424:	4620      	mov	r0, r4
  404426:	4c71      	ldr	r4, [pc, #452]	; (4045ec <main+0x27c>)
  404428:	47a0      	blx	r4

	addr_in.sin_family = AF_INET;
  40442a:	2602      	movs	r6, #2
  40442c:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  404430:	f648 0313 	movw	r3, #34835	; 0x8813
  404434:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  404438:	a90d      	add	r1, sp, #52	; 0x34
  40443a:	486d      	ldr	r0, [pc, #436]	; (4045f0 <main+0x280>)
  40443c:	4b6d      	ldr	r3, [pc, #436]	; (4045f4 <main+0x284>)
  40443e:	4798      	blx	r3
  //printf("Inet aton : %d", addr_in.sin_addr);

  LED_init(LED0_PIO, LED0_PIO_ID, LED0_PIN_MASK, 1);
  404440:	2301      	movs	r3, #1
  404442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404446:	210c      	movs	r1, #12
  404448:	486b      	ldr	r0, [pc, #428]	; (4045f8 <main+0x288>)
  40444a:	4c6c      	ldr	r4, [pc, #432]	; (4045fc <main+0x28c>)
  40444c:	47a0      	blx	r4
  LED_init(LED1_PIO, LED1_PIO_ID, LED1_PIN_MASK, 1);
  40444e:	4d6c      	ldr	r5, [pc, #432]	; (404600 <main+0x290>)
  404450:	2301      	movs	r3, #1
  404452:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  404456:	210a      	movs	r1, #10
  404458:	4628      	mov	r0, r5
  40445a:	47a0      	blx	r4
  LED_init(LED2_PIO, LED2_PIO_ID, LED2_PIN_MASK, 1);
  40445c:	2301      	movs	r3, #1
  40445e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  404462:	210a      	movs	r1, #10
  404464:	4628      	mov	r0, r5
  404466:	47a0      	blx	r4
  LED_init(LED3_PIO, LED3_PIO_ID, LED3_PIN_MASK, 1);
  404468:	2301      	movs	r3, #1
  40446a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40446e:	210a      	movs	r1, #10
  404470:	4628      	mov	r0, r5
  404472:	47a0      	blx	r4
  TC_init(TC0, ID_TC0, 1); // Every 1   second
  404474:	2201      	movs	r2, #1
  404476:	2117      	movs	r1, #23
  404478:	4862      	ldr	r0, [pc, #392]	; (404604 <main+0x294>)
  40447a:	4c63      	ldr	r4, [pc, #396]	; (404608 <main+0x298>)
  40447c:	47a0      	blx	r4
  TC_init(TC1, ID_TC3, 4); // Every 0.5 second
  40447e:	2204      	movs	r2, #4
  404480:	211a      	movs	r1, #26
  404482:	4862      	ldr	r0, [pc, #392]	; (40460c <main+0x29c>)
  404484:	47a0      	blx	r4
  afec_enable(AFEC0);
  404486:	4c62      	ldr	r4, [pc, #392]	; (404610 <main+0x2a0>)
  404488:	4620      	mov	r0, r4
  40448a:	4b62      	ldr	r3, [pc, #392]	; (404614 <main+0x2a4>)
  40448c:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  40448e:	a806      	add	r0, sp, #24
  404490:	4b61      	ldr	r3, [pc, #388]	; (404618 <main+0x2a8>)
  404492:	4798      	blx	r3
  afec_init(AFEC0, &afec_cfg);
  404494:	a906      	add	r1, sp, #24
  404496:	4620      	mov	r0, r4
  404498:	4b60      	ldr	r3, [pc, #384]	; (40461c <main+0x2ac>)
  40449a:	4798      	blx	r3
	reg = afec->AFEC_MR;
  40449c:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40449e:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  4044a2:	6063      	str	r3, [r4, #4]
  afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Temp_callback, 1);
  4044a4:	2301      	movs	r3, #1
  4044a6:	4a5e      	ldr	r2, [pc, #376]	; (404620 <main+0x2b0>)
  4044a8:	2100      	movs	r1, #0
  4044aa:	4620      	mov	r0, r4
  4044ac:	4d5d      	ldr	r5, [pc, #372]	; (404624 <main+0x2b4>)
  4044ae:	47a8      	blx	r5
  afec_ch_get_config_defaults(&afec_ch_cfg);
  4044b0:	a803      	add	r0, sp, #12
  4044b2:	4b5d      	ldr	r3, [pc, #372]	; (404628 <main+0x2b8>)
  4044b4:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4044b6:	2500      	movs	r5, #0
  4044b8:	f88d 500d 	strb.w	r5, [sp, #13]
  afec_ch_set_config(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, &afec_ch_cfg);
  4044bc:	aa03      	add	r2, sp, #12
  4044be:	4629      	mov	r1, r5
  4044c0:	4620      	mov	r0, r4
  4044c2:	4b5a      	ldr	r3, [pc, #360]	; (40462c <main+0x2bc>)
  4044c4:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4044c6:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4044c8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4044cc:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  4044ce:	a804      	add	r0, sp, #16
  4044d0:	4b57      	ldr	r3, [pc, #348]	; (404630 <main+0x2c0>)
  4044d2:	4798      	blx	r3
  afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  4044d4:	a904      	add	r1, sp, #16
  4044d6:	4620      	mov	r0, r4
  4044d8:	4b56      	ldr	r3, [pc, #344]	; (404634 <main+0x2c4>)
  4044da:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4044dc:	2301      	movs	r3, #1
  4044de:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  4044e0:	6026      	str	r6, [r4, #0]

  AFEC_init();

  while(1) {
 		m2m_wifi_handle_events(NULL);
  4044e2:	4d55      	ldr	r5, [pc, #340]	; (404638 <main+0x2c8>)

   	if (wifi_connected == M2M_WIFI_CONNECTED) {
  4044e4:	4c55      	ldr	r4, [pc, #340]	; (40463c <main+0x2cc>)
      if (g_ul_value < 3500) {
        printf("UL_VALUE");
        pio_clear(LED3_PIO, LED3_PIN_MASK);
      } else {
        printf("UL_VALUE_ELSE");
        pio_set(LED3_PIO, LED3_PIN_MASK);
  4044e6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 404600 <main+0x290>
  4044ea:	e0ef      	b.n	4046cc <main+0x35c>
			if (tcp_client_socket < 0) {
  4044ec:	4b54      	ldr	r3, [pc, #336]	; (404640 <main+0x2d0>)
  4044ee:	f993 3000 	ldrsb.w	r3, [r3]
  4044f2:	2b00      	cmp	r3, #0
  4044f4:	f280 80f0 	bge.w	4046d8 <main+0x368>
        printf("[SOCKET] Initializing\n");
  4044f8:	4852      	ldr	r0, [pc, #328]	; (404644 <main+0x2d4>)
  4044fa:	4b30      	ldr	r3, [pc, #192]	; (4045bc <main+0x24c>)
  4044fc:	4798      	blx	r3
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  4044fe:	2200      	movs	r2, #0
  404500:	2101      	movs	r1, #1
  404502:	2002      	movs	r0, #2
  404504:	4b50      	ldr	r3, [pc, #320]	; (404648 <main+0x2d8>)
  404506:	4798      	blx	r3
  404508:	4b4d      	ldr	r3, [pc, #308]	; (404640 <main+0x2d0>)
  40450a:	7018      	strb	r0, [r3, #0]
  40450c:	2800      	cmp	r0, #0
  40450e:	db0e      	blt.n	40452e <main+0x1be>
        printf("[SOCKET] Connecting\n");
  404510:	484e      	ldr	r0, [pc, #312]	; (40464c <main+0x2dc>)
  404512:	4b2a      	ldr	r3, [pc, #168]	; (4045bc <main+0x24c>)
  404514:	4798      	blx	r3
				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  404516:	2210      	movs	r2, #16
  404518:	a90c      	add	r1, sp, #48	; 0x30
  40451a:	4b49      	ldr	r3, [pc, #292]	; (404640 <main+0x2d0>)
  40451c:	f993 0000 	ldrsb.w	r0, [r3]
  404520:	4b4b      	ldr	r3, [pc, #300]	; (404650 <main+0x2e0>)
  404522:	4798      	blx	r3
  404524:	b938      	cbnz	r0, 404536 <main+0x1c6>
          gbTcpConnection = true;
  404526:	2201      	movs	r2, #1
  404528:	4b4a      	ldr	r3, [pc, #296]	; (404654 <main+0x2e4>)
  40452a:	701a      	strb	r2, [r3, #0]
  40452c:	e0d4      	b.n	4046d8 <main+0x368>
					printf("[SOCKET] ERROR failed to create TCP client socket\n");
  40452e:	484a      	ldr	r0, [pc, #296]	; (404658 <main+0x2e8>)
  404530:	4b22      	ldr	r3, [pc, #136]	; (4045bc <main+0x24c>)
  404532:	4798      	blx	r3
					continue;
  404534:	e0ca      	b.n	4046cc <main+0x35c>
					close(tcp_client_socket);
  404536:	4f42      	ldr	r7, [pc, #264]	; (404640 <main+0x2d0>)
  404538:	f997 0000 	ldrsb.w	r0, [r7]
  40453c:	4b47      	ldr	r3, [pc, #284]	; (40465c <main+0x2ec>)
  40453e:	4798      	blx	r3
					tcp_client_socket = -1;
  404540:	23ff      	movs	r3, #255	; 0xff
  404542:	703b      	strb	r3, [r7, #0]
          printf("ERROR\n");
  404544:	4846      	ldr	r0, [pc, #280]	; (404660 <main+0x2f0>)
  404546:	4b1d      	ldr	r3, [pc, #116]	; (4045bc <main+0x24c>)
  404548:	4798      	blx	r3
  40454a:	e0c5      	b.n	4046d8 <main+0x368>
        printf("UL_VALUE_ELSE");
  40454c:	4845      	ldr	r0, [pc, #276]	; (404664 <main+0x2f4>)
  40454e:	4b1b      	ldr	r3, [pc, #108]	; (4045bc <main+0x24c>)
  404550:	4798      	blx	r3
        pio_set(LED3_PIO, LED3_PIN_MASK);
  404552:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  404556:	4640      	mov	r0, r8
  404558:	4b43      	ldr	r3, [pc, #268]	; (404668 <main+0x2f8>)
  40455a:	4798      	blx	r3
  40455c:	e0d1      	b.n	404702 <main+0x392>

    // STATE MACHINE
    switch (state) {

      case WAIT:
        receive_ok = false;
  40455e:	2200      	movs	r2, #0
  404560:	4b42      	ldr	r3, [pc, #264]	; (40466c <main+0x2fc>)
  404562:	701a      	strb	r2, [r3, #0]
        if (init_state_machine)
  404564:	4b42      	ldr	r3, [pc, #264]	; (404670 <main+0x300>)
  404566:	781b      	ldrb	r3, [r3, #0]
  404568:	b11b      	cbz	r3, 404572 <main+0x202>
          state = GET_LEDS;
  40456a:	2202      	movs	r2, #2
  40456c:	4b41      	ldr	r3, [pc, #260]	; (404674 <main+0x304>)
  40456e:	701a      	strb	r2, [r3, #0]
  404570:	e0ac      	b.n	4046cc <main+0x35c>
        else
          state = WAIT;
  404572:	2200      	movs	r2, #0
  404574:	4b3f      	ldr	r3, [pc, #252]	; (404674 <main+0x304>)
  404576:	701a      	strb	r2, [r3, #0]
  404578:	e0a8      	b.n	4046cc <main+0x35c>
  40457a:	bf00      	nop
  40457c:	00402f7d 	.word	0x00402f7d
  404580:	00403079 	.word	0x00403079
  404584:	0040374d 	.word	0x0040374d
  404588:	40028000 	.word	0x40028000
  40458c:	20401734 	.word	0x20401734
  404590:	0040406d 	.word	0x0040406d
  404594:	20401730 	.word	0x20401730
  404598:	00403f91 	.word	0x00403f91
  40459c:	2040172c 	.word	0x2040172c
  4045a0:	08f0d180 	.word	0x08f0d180
  4045a4:	00403a45 	.word	0x00403a45
  4045a8:	00403a99 	.word	0x00403a99
  4045ac:	00403a9f 	.word	0x00403a9f
  4045b0:	20400020 	.word	0x20400020
  4045b4:	0040493d 	.word	0x0040493d
  4045b8:	0040bd78 	.word	0x0040bd78
  4045bc:	00404879 	.word	0x00404879
  4045c0:	00400525 	.word	0x00400525
  4045c4:	00403f45 	.word	0x00403f45
  4045c8:	00401365 	.word	0x00401365
  4045cc:	0040bd90 	.word	0x0040bd90
  4045d0:	00402b15 	.word	0x00402b15
  4045d4:	00403d6d 	.word	0x00403d6d
  4045d8:	00403dcd 	.word	0x00403dcd
  4045dc:	00402b59 	.word	0x00402b59
  4045e0:	0040bdb4 	.word	0x0040bdb4
  4045e4:	0040bdc8 	.word	0x0040bdc8
  4045e8:	0040bde8 	.word	0x0040bde8
  4045ec:	004016bd 	.word	0x004016bd
  4045f0:	0040bdf4 	.word	0x0040bdf4
  4045f4:	004042f5 	.word	0x004042f5
  4045f8:	400e1200 	.word	0x400e1200
  4045fc:	004041cd 	.word	0x004041cd
  404600:	400e0e00 	.word	0x400e0e00
  404604:	4000c000 	.word	0x4000c000
  404608:	004041f9 	.word	0x004041f9
  40460c:	40010000 	.word	0x40010000
  404610:	4003c000 	.word	0x4003c000
  404614:	00400449 	.word	0x00400449
  404618:	00400279 	.word	0x00400279
  40461c:	004002c9 	.word	0x004002c9
  404620:	00403d9d 	.word	0x00403d9d
  404624:	004003c9 	.word	0x004003c9
  404628:	004002a9 	.word	0x004002a9
  40462c:	00400235 	.word	0x00400235
  404630:	004002b3 	.word	0x004002b3
  404634:	00400265 	.word	0x00400265
  404638:	00401461 	.word	0x00401461
  40463c:	204015ae 	.word	0x204015ae
  404640:	2040001c 	.word	0x2040001c
  404644:	0040be04 	.word	0x0040be04
  404648:	00402b6d 	.word	0x00402b6d
  40464c:	0040be50 	.word	0x0040be50
  404650:	00402c4d 	.word	0x00402c4d
  404654:	20401028 	.word	0x20401028
  404658:	0040be1c 	.word	0x0040be1c
  40465c:	00402e19 	.word	0x00402e19
  404660:	0040be68 	.word	0x0040be68
  404664:	0040be7c 	.word	0x0040be7c
  404668:	0040321b 	.word	0x0040321b
  40466c:	204015ac 	.word	0x204015ac
  404670:	20401030 	.word	0x20401030
  404674:	20401738 	.word	0x20401738

        break;

      case POST_LDR:
        sprintf(ldr_buffer, "ldr=%lu", g_ul_value);
  404678:	4b52      	ldr	r3, [pc, #328]	; (4047c4 <main+0x454>)
  40467a:	681a      	ldr	r2, [r3, #0]
  40467c:	4e52      	ldr	r6, [pc, #328]	; (4047c8 <main+0x458>)
  40467e:	4953      	ldr	r1, [pc, #332]	; (4047cc <main+0x45c>)
  404680:	4630      	mov	r0, r6
  404682:	4b53      	ldr	r3, [pc, #332]	; (4047d0 <main+0x460>)
  404684:	4798      	blx	r3
        build_post(gau8Buffer, "/ldrupdate", ldr_buffer);
  404686:	4f53      	ldr	r7, [pc, #332]	; (4047d4 <main+0x464>)
  404688:	4632      	mov	r2, r6
  40468a:	4953      	ldr	r1, [pc, #332]	; (4047d8 <main+0x468>)
  40468c:	4638      	mov	r0, r7
  40468e:	4b53      	ldr	r3, [pc, #332]	; (4047dc <main+0x46c>)
  404690:	4798      	blx	r3
        send(tcp_client_socket, gau8Buffer, strlen((char *)gau8Buffer), 0);
  404692:	4638      	mov	r0, r7
  404694:	4b52      	ldr	r3, [pc, #328]	; (4047e0 <main+0x470>)
  404696:	4798      	blx	r3
  404698:	4e52      	ldr	r6, [pc, #328]	; (4047e4 <main+0x474>)
  40469a:	2300      	movs	r3, #0
  40469c:	b282      	uxth	r2, r0
  40469e:	4639      	mov	r1, r7
  4046a0:	f996 0000 	ldrsb.w	r0, [r6]
  4046a4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 404824 <main+0x4b4>
  4046a8:	47c8      	blx	r9
        memset(gau8Buffer, 0, sizeof(gau8Buffer));
  4046aa:	f44f 69af 	mov.w	r9, #1400	; 0x578
  4046ae:	464a      	mov	r2, r9
  4046b0:	2100      	movs	r1, #0
  4046b2:	4638      	mov	r0, r7
  4046b4:	4b4c      	ldr	r3, [pc, #304]	; (4047e8 <main+0x478>)
  4046b6:	4798      	blx	r3
        recv(tcp_client_socket, gau8Buffer, MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  4046b8:	2300      	movs	r3, #0
  4046ba:	464a      	mov	r2, r9
  4046bc:	4639      	mov	r1, r7
  4046be:	f996 0000 	ldrsb.w	r0, [r6]
  4046c2:	4f4a      	ldr	r7, [pc, #296]	; (4047ec <main+0x47c>)
  4046c4:	47b8      	blx	r7
        state = POST_WAIT;
  4046c6:	2203      	movs	r2, #3
  4046c8:	4b49      	ldr	r3, [pc, #292]	; (4047f0 <main+0x480>)
  4046ca:	701a      	strb	r2, [r3, #0]
 		m2m_wifi_handle_events(NULL);
  4046cc:	2000      	movs	r0, #0
  4046ce:	47a8      	blx	r5
   	if (wifi_connected == M2M_WIFI_CONNECTED) {
  4046d0:	7823      	ldrb	r3, [r4, #0]
  4046d2:	2b01      	cmp	r3, #1
  4046d4:	f43f af0a 	beq.w	4044ec <main+0x17c>
    if(afec_done == true) {
  4046d8:	4b46      	ldr	r3, [pc, #280]	; (4047f4 <main+0x484>)
  4046da:	781b      	ldrb	r3, [r3, #0]
  4046dc:	b18b      	cbz	r3, 404702 <main+0x392>
      afec_done = false;
  4046de:	2200      	movs	r2, #0
  4046e0:	4b44      	ldr	r3, [pc, #272]	; (4047f4 <main+0x484>)
  4046e2:	701a      	strb	r2, [r3, #0]
      if (g_ul_value < 3500) {
  4046e4:	4b37      	ldr	r3, [pc, #220]	; (4047c4 <main+0x454>)
  4046e6:	681a      	ldr	r2, [r3, #0]
  4046e8:	f640 53ab 	movw	r3, #3499	; 0xdab
  4046ec:	429a      	cmp	r2, r3
  4046ee:	f63f af2d 	bhi.w	40454c <main+0x1dc>
        printf("UL_VALUE");
  4046f2:	4841      	ldr	r0, [pc, #260]	; (4047f8 <main+0x488>)
  4046f4:	4b41      	ldr	r3, [pc, #260]	; (4047fc <main+0x48c>)
  4046f6:	4798      	blx	r3
        pio_clear(LED3_PIO, LED3_PIN_MASK);
  4046f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4046fc:	4640      	mov	r0, r8
  4046fe:	4b40      	ldr	r3, [pc, #256]	; (404800 <main+0x490>)
  404700:	4798      	blx	r3
    switch (state) {
  404702:	4b3b      	ldr	r3, [pc, #236]	; (4047f0 <main+0x480>)
  404704:	781b      	ldrb	r3, [r3, #0]
  404706:	2b04      	cmp	r3, #4
  404708:	d8e0      	bhi.n	4046cc <main+0x35c>
  40470a:	a201      	add	r2, pc, #4	; (adr r2, 404710 <main+0x3a0>)
  40470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404710:	0040455f 	.word	0x0040455f
  404714:	00404679 	.word	0x00404679
  404718:	00404747 	.word	0x00404747
  40471c:	00404725 	.word	0x00404725
  404720:	004047a1 	.word	0x004047a1
        break;

      case POST_WAIT:
      printf("POST WAIT \n");
  404724:	4837      	ldr	r0, [pc, #220]	; (404804 <main+0x494>)
  404726:	4b35      	ldr	r3, [pc, #212]	; (4047fc <main+0x48c>)
  404728:	4798      	blx	r3
        if (receive_ok) {
  40472a:	4b37      	ldr	r3, [pc, #220]	; (404808 <main+0x498>)
  40472c:	781b      	ldrb	r3, [r3, #0]
  40472e:	b133      	cbz	r3, 40473e <main+0x3ce>
          state = GET_LEDS;
  404730:	2202      	movs	r2, #2
  404732:	4b2f      	ldr	r3, [pc, #188]	; (4047f0 <main+0x480>)
  404734:	701a      	strb	r2, [r3, #0]
          receive_ok = false;
  404736:	2200      	movs	r2, #0
  404738:	4b33      	ldr	r3, [pc, #204]	; (404808 <main+0x498>)
  40473a:	701a      	strb	r2, [r3, #0]
  40473c:	e7c6      	b.n	4046cc <main+0x35c>
        }
        else
          state = POST_WAIT;
  40473e:	2203      	movs	r2, #3
  404740:	4b2b      	ldr	r3, [pc, #172]	; (4047f0 <main+0x480>)
  404742:	701a      	strb	r2, [r3, #0]
  404744:	e7c2      	b.n	4046cc <main+0x35c>
        break;

      case GET_LEDS:
        printf("GET_LEDS\n");
  404746:	4831      	ldr	r0, [pc, #196]	; (40480c <main+0x49c>)
  404748:	4e2c      	ldr	r6, [pc, #176]	; (4047fc <main+0x48c>)
  40474a:	47b0      	blx	r6
        build_get(gau8Buffer, "/leds");
  40474c:	4f21      	ldr	r7, [pc, #132]	; (4047d4 <main+0x464>)
  40474e:	4930      	ldr	r1, [pc, #192]	; (404810 <main+0x4a0>)
  404750:	4638      	mov	r0, r7
  404752:	4b30      	ldr	r3, [pc, #192]	; (404814 <main+0x4a4>)
  404754:	4798      	blx	r3
        send(tcp_client_socket, gau8Buffer, strlen((char *)gau8Buffer), 0);
  404756:	4638      	mov	r0, r7
  404758:	4b21      	ldr	r3, [pc, #132]	; (4047e0 <main+0x470>)
  40475a:	4798      	blx	r3
  40475c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4047e4 <main+0x474>
  404760:	2300      	movs	r3, #0
  404762:	b282      	uxth	r2, r0
  404764:	4639      	mov	r1, r7
  404766:	f999 0000 	ldrsb.w	r0, [r9]
  40476a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 404824 <main+0x4b4>
  40476e:	47d0      	blx	sl
        memset(gau8Buffer, 0, sizeof(gau8Buffer));
  404770:	f44f 6aaf 	mov.w	sl, #1400	; 0x578
  404774:	4652      	mov	r2, sl
  404776:	2100      	movs	r1, #0
  404778:	4638      	mov	r0, r7
  40477a:	4b1b      	ldr	r3, [pc, #108]	; (4047e8 <main+0x478>)
  40477c:	4798      	blx	r3
        recv(tcp_client_socket, gau8Buffer, MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  40477e:	2300      	movs	r3, #0
  404780:	4652      	mov	r2, sl
  404782:	4639      	mov	r1, r7
  404784:	f999 0000 	ldrsb.w	r0, [r9]
  404788:	4f18      	ldr	r7, [pc, #96]	; (4047ec <main+0x47c>)
  40478a:	47b8      	blx	r7
        state = WAIT;
  40478c:	2300      	movs	r3, #0
  40478e:	4a18      	ldr	r2, [pc, #96]	; (4047f0 <main+0x480>)
  404790:	7013      	strb	r3, [r2, #0]
        init_state_machine = false;
  404792:	4a21      	ldr	r2, [pc, #132]	; (404818 <main+0x4a8>)
  404794:	7013      	strb	r3, [r2, #0]
        printf("%d", g_ul_value);
  404796:	4b0b      	ldr	r3, [pc, #44]	; (4047c4 <main+0x454>)
  404798:	6819      	ldr	r1, [r3, #0]
  40479a:	4820      	ldr	r0, [pc, #128]	; (40481c <main+0x4ac>)
  40479c:	47b0      	blx	r6

        break;
  40479e:	e795      	b.n	4046cc <main+0x35c>

       case GET_WAIT:
          printf("GET WAIT \n");
  4047a0:	481f      	ldr	r0, [pc, #124]	; (404820 <main+0x4b0>)
  4047a2:	4b16      	ldr	r3, [pc, #88]	; (4047fc <main+0x48c>)
  4047a4:	4798      	blx	r3

          if (receive_ok) {
  4047a6:	4b18      	ldr	r3, [pc, #96]	; (404808 <main+0x498>)
  4047a8:	781b      	ldrb	r3, [r3, #0]
  4047aa:	b133      	cbz	r3, 4047ba <main+0x44a>
            state = GET_LEDS;
  4047ac:	2202      	movs	r2, #2
  4047ae:	4b10      	ldr	r3, [pc, #64]	; (4047f0 <main+0x480>)
  4047b0:	701a      	strb	r2, [r3, #0]
            receive_ok = false;
  4047b2:	2200      	movs	r2, #0
  4047b4:	4b14      	ldr	r3, [pc, #80]	; (404808 <main+0x498>)
  4047b6:	701a      	strb	r2, [r3, #0]
  4047b8:	e788      	b.n	4046cc <main+0x35c>
          }
          else
          state = WAIT;
  4047ba:	2200      	movs	r2, #0
  4047bc:	4b0c      	ldr	r3, [pc, #48]	; (4047f0 <main+0x480>)
  4047be:	701a      	strb	r2, [r3, #0]
  4047c0:	e784      	b.n	4046cc <main+0x35c>
  4047c2:	bf00      	nop
  4047c4:	20400aac 	.word	0x20400aac
  4047c8:	20401034 	.word	0x20401034
  4047cc:	0040be8c 	.word	0x0040be8c
  4047d0:	00404a99 	.word	0x00404a99
  4047d4:	20400ab0 	.word	0x20400ab0
  4047d8:	0040be94 	.word	0x0040be94
  4047dc:	00404171 	.word	0x00404171
  4047e0:	00404b01 	.word	0x00404b01
  4047e4:	2040001c 	.word	0x2040001c
  4047e8:	004048a1 	.word	0x004048a1
  4047ec:	00402d79 	.word	0x00402d79
  4047f0:	20401738 	.word	0x20401738
  4047f4:	20400a94 	.word	0x20400a94
  4047f8:	0040be70 	.word	0x0040be70
  4047fc:	00404879 	.word	0x00404879
  404800:	0040321f 	.word	0x0040321f
  404804:	0040bea0 	.word	0x0040bea0
  404808:	204015ac 	.word	0x204015ac
  40480c:	0040beac 	.word	0x0040beac
  404810:	0040beb8 	.word	0x0040beb8
  404814:	00404141 	.word	0x00404141
  404818:	20401030 	.word	0x20401030
  40481c:	0040bec0 	.word	0x0040bec0
  404820:	0040bec4 	.word	0x0040bec4
  404824:	00402cdd 	.word	0x00402cdd

00404828 <__libc_init_array>:
  404828:	b570      	push	{r4, r5, r6, lr}
  40482a:	4e0f      	ldr	r6, [pc, #60]	; (404868 <__libc_init_array+0x40>)
  40482c:	4d0f      	ldr	r5, [pc, #60]	; (40486c <__libc_init_array+0x44>)
  40482e:	1b76      	subs	r6, r6, r5
  404830:	10b6      	asrs	r6, r6, #2
  404832:	bf18      	it	ne
  404834:	2400      	movne	r4, #0
  404836:	d005      	beq.n	404844 <__libc_init_array+0x1c>
  404838:	3401      	adds	r4, #1
  40483a:	f855 3b04 	ldr.w	r3, [r5], #4
  40483e:	4798      	blx	r3
  404840:	42a6      	cmp	r6, r4
  404842:	d1f9      	bne.n	404838 <__libc_init_array+0x10>
  404844:	4e0a      	ldr	r6, [pc, #40]	; (404870 <__libc_init_array+0x48>)
  404846:	4d0b      	ldr	r5, [pc, #44]	; (404874 <__libc_init_array+0x4c>)
  404848:	1b76      	subs	r6, r6, r5
  40484a:	f007 fd01 	bl	40c250 <_init>
  40484e:	10b6      	asrs	r6, r6, #2
  404850:	bf18      	it	ne
  404852:	2400      	movne	r4, #0
  404854:	d006      	beq.n	404864 <__libc_init_array+0x3c>
  404856:	3401      	adds	r4, #1
  404858:	f855 3b04 	ldr.w	r3, [r5], #4
  40485c:	4798      	blx	r3
  40485e:	42a6      	cmp	r6, r4
  404860:	d1f9      	bne.n	404856 <__libc_init_array+0x2e>
  404862:	bd70      	pop	{r4, r5, r6, pc}
  404864:	bd70      	pop	{r4, r5, r6, pc}
  404866:	bf00      	nop
  404868:	0040c25c 	.word	0x0040c25c
  40486c:	0040c25c 	.word	0x0040c25c
  404870:	0040c264 	.word	0x0040c264
  404874:	0040c25c 	.word	0x0040c25c

00404878 <iprintf>:
  404878:	b40f      	push	{r0, r1, r2, r3}
  40487a:	b500      	push	{lr}
  40487c:	4907      	ldr	r1, [pc, #28]	; (40489c <iprintf+0x24>)
  40487e:	b083      	sub	sp, #12
  404880:	ab04      	add	r3, sp, #16
  404882:	6808      	ldr	r0, [r1, #0]
  404884:	f853 2b04 	ldr.w	r2, [r3], #4
  404888:	6881      	ldr	r1, [r0, #8]
  40488a:	9301      	str	r3, [sp, #4]
  40488c:	f001 fe70 	bl	406570 <_vfiprintf_r>
  404890:	b003      	add	sp, #12
  404892:	f85d eb04 	ldr.w	lr, [sp], #4
  404896:	b004      	add	sp, #16
  404898:	4770      	bx	lr
  40489a:	bf00      	nop
  40489c:	20400020 	.word	0x20400020

004048a0 <memset>:
  4048a0:	b470      	push	{r4, r5, r6}
  4048a2:	0786      	lsls	r6, r0, #30
  4048a4:	d046      	beq.n	404934 <memset+0x94>
  4048a6:	1e54      	subs	r4, r2, #1
  4048a8:	2a00      	cmp	r2, #0
  4048aa:	d041      	beq.n	404930 <memset+0x90>
  4048ac:	b2ca      	uxtb	r2, r1
  4048ae:	4603      	mov	r3, r0
  4048b0:	e002      	b.n	4048b8 <memset+0x18>
  4048b2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4048b6:	d33b      	bcc.n	404930 <memset+0x90>
  4048b8:	f803 2b01 	strb.w	r2, [r3], #1
  4048bc:	079d      	lsls	r5, r3, #30
  4048be:	d1f8      	bne.n	4048b2 <memset+0x12>
  4048c0:	2c03      	cmp	r4, #3
  4048c2:	d92e      	bls.n	404922 <memset+0x82>
  4048c4:	b2cd      	uxtb	r5, r1
  4048c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4048ca:	2c0f      	cmp	r4, #15
  4048cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4048d0:	d919      	bls.n	404906 <memset+0x66>
  4048d2:	f103 0210 	add.w	r2, r3, #16
  4048d6:	4626      	mov	r6, r4
  4048d8:	3e10      	subs	r6, #16
  4048da:	2e0f      	cmp	r6, #15
  4048dc:	f842 5c10 	str.w	r5, [r2, #-16]
  4048e0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4048e4:	f842 5c08 	str.w	r5, [r2, #-8]
  4048e8:	f842 5c04 	str.w	r5, [r2, #-4]
  4048ec:	f102 0210 	add.w	r2, r2, #16
  4048f0:	d8f2      	bhi.n	4048d8 <memset+0x38>
  4048f2:	f1a4 0210 	sub.w	r2, r4, #16
  4048f6:	f022 020f 	bic.w	r2, r2, #15
  4048fa:	f004 040f 	and.w	r4, r4, #15
  4048fe:	3210      	adds	r2, #16
  404900:	2c03      	cmp	r4, #3
  404902:	4413      	add	r3, r2
  404904:	d90d      	bls.n	404922 <memset+0x82>
  404906:	461e      	mov	r6, r3
  404908:	4622      	mov	r2, r4
  40490a:	3a04      	subs	r2, #4
  40490c:	2a03      	cmp	r2, #3
  40490e:	f846 5b04 	str.w	r5, [r6], #4
  404912:	d8fa      	bhi.n	40490a <memset+0x6a>
  404914:	1f22      	subs	r2, r4, #4
  404916:	f022 0203 	bic.w	r2, r2, #3
  40491a:	3204      	adds	r2, #4
  40491c:	4413      	add	r3, r2
  40491e:	f004 0403 	and.w	r4, r4, #3
  404922:	b12c      	cbz	r4, 404930 <memset+0x90>
  404924:	b2c9      	uxtb	r1, r1
  404926:	441c      	add	r4, r3
  404928:	f803 1b01 	strb.w	r1, [r3], #1
  40492c:	429c      	cmp	r4, r3
  40492e:	d1fb      	bne.n	404928 <memset+0x88>
  404930:	bc70      	pop	{r4, r5, r6}
  404932:	4770      	bx	lr
  404934:	4614      	mov	r4, r2
  404936:	4603      	mov	r3, r0
  404938:	e7c2      	b.n	4048c0 <memset+0x20>
  40493a:	bf00      	nop

0040493c <setbuf>:
  40493c:	2900      	cmp	r1, #0
  40493e:	bf0c      	ite	eq
  404940:	2202      	moveq	r2, #2
  404942:	2200      	movne	r2, #0
  404944:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404948:	f000 b800 	b.w	40494c <setvbuf>

0040494c <setvbuf>:
  40494c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404950:	4c50      	ldr	r4, [pc, #320]	; (404a94 <setvbuf+0x148>)
  404952:	6825      	ldr	r5, [r4, #0]
  404954:	b083      	sub	sp, #12
  404956:	4604      	mov	r4, r0
  404958:	460f      	mov	r7, r1
  40495a:	4690      	mov	r8, r2
  40495c:	461e      	mov	r6, r3
  40495e:	b115      	cbz	r5, 404966 <setvbuf+0x1a>
  404960:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404962:	2b00      	cmp	r3, #0
  404964:	d077      	beq.n	404a56 <setvbuf+0x10a>
  404966:	f1b8 0f02 	cmp.w	r8, #2
  40496a:	d004      	beq.n	404976 <setvbuf+0x2a>
  40496c:	f1b8 0f01 	cmp.w	r8, #1
  404970:	d87d      	bhi.n	404a6e <setvbuf+0x122>
  404972:	2e00      	cmp	r6, #0
  404974:	db7b      	blt.n	404a6e <setvbuf+0x122>
  404976:	4621      	mov	r1, r4
  404978:	4628      	mov	r0, r5
  40497a:	f003 fd03 	bl	408384 <_fflush_r>
  40497e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404980:	b141      	cbz	r1, 404994 <setvbuf+0x48>
  404982:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404986:	4299      	cmp	r1, r3
  404988:	d002      	beq.n	404990 <setvbuf+0x44>
  40498a:	4628      	mov	r0, r5
  40498c:	f003 fe64 	bl	408658 <_free_r>
  404990:	2300      	movs	r3, #0
  404992:	6323      	str	r3, [r4, #48]	; 0x30
  404994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404998:	2200      	movs	r2, #0
  40499a:	61a2      	str	r2, [r4, #24]
  40499c:	6062      	str	r2, [r4, #4]
  40499e:	061a      	lsls	r2, r3, #24
  4049a0:	d452      	bmi.n	404a48 <setvbuf+0xfc>
  4049a2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4049a6:	f023 0303 	bic.w	r3, r3, #3
  4049aa:	f1b8 0f02 	cmp.w	r8, #2
  4049ae:	81a3      	strh	r3, [r4, #12]
  4049b0:	d037      	beq.n	404a22 <setvbuf+0xd6>
  4049b2:	ab01      	add	r3, sp, #4
  4049b4:	466a      	mov	r2, sp
  4049b6:	4621      	mov	r1, r4
  4049b8:	4628      	mov	r0, r5
  4049ba:	f004 f8f1 	bl	408ba0 <__swhatbuf_r>
  4049be:	89a3      	ldrh	r3, [r4, #12]
  4049c0:	4318      	orrs	r0, r3
  4049c2:	81a0      	strh	r0, [r4, #12]
  4049c4:	b316      	cbz	r6, 404a0c <setvbuf+0xc0>
  4049c6:	b317      	cbz	r7, 404a0e <setvbuf+0xc2>
  4049c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4049ca:	2b00      	cmp	r3, #0
  4049cc:	d04b      	beq.n	404a66 <setvbuf+0x11a>
  4049ce:	9b00      	ldr	r3, [sp, #0]
  4049d0:	6027      	str	r7, [r4, #0]
  4049d2:	429e      	cmp	r6, r3
  4049d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049d8:	6127      	str	r7, [r4, #16]
  4049da:	bf1c      	itt	ne
  4049dc:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  4049e0:	81a3      	strhne	r3, [r4, #12]
  4049e2:	f1b8 0f01 	cmp.w	r8, #1
  4049e6:	bf04      	itt	eq
  4049e8:	f043 0301 	orreq.w	r3, r3, #1
  4049ec:	81a3      	strheq	r3, [r4, #12]
  4049ee:	b29b      	uxth	r3, r3
  4049f0:	f013 0008 	ands.w	r0, r3, #8
  4049f4:	6166      	str	r6, [r4, #20]
  4049f6:	d023      	beq.n	404a40 <setvbuf+0xf4>
  4049f8:	f013 0001 	ands.w	r0, r3, #1
  4049fc:	d02f      	beq.n	404a5e <setvbuf+0x112>
  4049fe:	2000      	movs	r0, #0
  404a00:	4276      	negs	r6, r6
  404a02:	61a6      	str	r6, [r4, #24]
  404a04:	60a0      	str	r0, [r4, #8]
  404a06:	b003      	add	sp, #12
  404a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a0c:	9e00      	ldr	r6, [sp, #0]
  404a0e:	4630      	mov	r0, r6
  404a10:	f004 f938 	bl	408c84 <malloc>
  404a14:	4607      	mov	r7, r0
  404a16:	b368      	cbz	r0, 404a74 <setvbuf+0x128>
  404a18:	89a3      	ldrh	r3, [r4, #12]
  404a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404a1e:	81a3      	strh	r3, [r4, #12]
  404a20:	e7d2      	b.n	4049c8 <setvbuf+0x7c>
  404a22:	2000      	movs	r0, #0
  404a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404a28:	f043 0302 	orr.w	r3, r3, #2
  404a2c:	2500      	movs	r5, #0
  404a2e:	2101      	movs	r1, #1
  404a30:	81a3      	strh	r3, [r4, #12]
  404a32:	60a5      	str	r5, [r4, #8]
  404a34:	6022      	str	r2, [r4, #0]
  404a36:	6122      	str	r2, [r4, #16]
  404a38:	6161      	str	r1, [r4, #20]
  404a3a:	b003      	add	sp, #12
  404a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a40:	60a0      	str	r0, [r4, #8]
  404a42:	b003      	add	sp, #12
  404a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a48:	6921      	ldr	r1, [r4, #16]
  404a4a:	4628      	mov	r0, r5
  404a4c:	f003 fe04 	bl	408658 <_free_r>
  404a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a54:	e7a5      	b.n	4049a2 <setvbuf+0x56>
  404a56:	4628      	mov	r0, r5
  404a58:	f003 fd28 	bl	4084ac <__sinit>
  404a5c:	e783      	b.n	404966 <setvbuf+0x1a>
  404a5e:	60a6      	str	r6, [r4, #8]
  404a60:	b003      	add	sp, #12
  404a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a66:	4628      	mov	r0, r5
  404a68:	f003 fd20 	bl	4084ac <__sinit>
  404a6c:	e7af      	b.n	4049ce <setvbuf+0x82>
  404a6e:	f04f 30ff 	mov.w	r0, #4294967295
  404a72:	e7e2      	b.n	404a3a <setvbuf+0xee>
  404a74:	f8dd 9000 	ldr.w	r9, [sp]
  404a78:	45b1      	cmp	r9, r6
  404a7a:	d006      	beq.n	404a8a <setvbuf+0x13e>
  404a7c:	4648      	mov	r0, r9
  404a7e:	f004 f901 	bl	408c84 <malloc>
  404a82:	4607      	mov	r7, r0
  404a84:	b108      	cbz	r0, 404a8a <setvbuf+0x13e>
  404a86:	464e      	mov	r6, r9
  404a88:	e7c6      	b.n	404a18 <setvbuf+0xcc>
  404a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a8e:	f04f 30ff 	mov.w	r0, #4294967295
  404a92:	e7c7      	b.n	404a24 <setvbuf+0xd8>
  404a94:	20400020 	.word	0x20400020

00404a98 <sprintf>:
  404a98:	b40e      	push	{r1, r2, r3}
  404a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a9c:	b09c      	sub	sp, #112	; 0x70
  404a9e:	ab21      	add	r3, sp, #132	; 0x84
  404aa0:	490f      	ldr	r1, [pc, #60]	; (404ae0 <sprintf+0x48>)
  404aa2:	f853 2b04 	ldr.w	r2, [r3], #4
  404aa6:	9301      	str	r3, [sp, #4]
  404aa8:	4605      	mov	r5, r0
  404aaa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404aae:	6808      	ldr	r0, [r1, #0]
  404ab0:	9502      	str	r5, [sp, #8]
  404ab2:	f44f 7702 	mov.w	r7, #520	; 0x208
  404ab6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404aba:	a902      	add	r1, sp, #8
  404abc:	9506      	str	r5, [sp, #24]
  404abe:	f8ad 7014 	strh.w	r7, [sp, #20]
  404ac2:	9404      	str	r4, [sp, #16]
  404ac4:	9407      	str	r4, [sp, #28]
  404ac6:	f8ad 6016 	strh.w	r6, [sp, #22]
  404aca:	f000 faeb 	bl	4050a4 <_svfprintf_r>
  404ace:	9b02      	ldr	r3, [sp, #8]
  404ad0:	2200      	movs	r2, #0
  404ad2:	701a      	strb	r2, [r3, #0]
  404ad4:	b01c      	add	sp, #112	; 0x70
  404ad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404ada:	b003      	add	sp, #12
  404adc:	4770      	bx	lr
  404ade:	bf00      	nop
  404ae0:	20400020 	.word	0x20400020
	...

00404b00 <strlen>:
  404b00:	f890 f000 	pld	[r0]
  404b04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404b08:	f020 0107 	bic.w	r1, r0, #7
  404b0c:	f06f 0c00 	mvn.w	ip, #0
  404b10:	f010 0407 	ands.w	r4, r0, #7
  404b14:	f891 f020 	pld	[r1, #32]
  404b18:	f040 8049 	bne.w	404bae <strlen+0xae>
  404b1c:	f04f 0400 	mov.w	r4, #0
  404b20:	f06f 0007 	mvn.w	r0, #7
  404b24:	e9d1 2300 	ldrd	r2, r3, [r1]
  404b28:	f891 f040 	pld	[r1, #64]	; 0x40
  404b2c:	f100 0008 	add.w	r0, r0, #8
  404b30:	fa82 f24c 	uadd8	r2, r2, ip
  404b34:	faa4 f28c 	sel	r2, r4, ip
  404b38:	fa83 f34c 	uadd8	r3, r3, ip
  404b3c:	faa2 f38c 	sel	r3, r2, ip
  404b40:	bb4b      	cbnz	r3, 404b96 <strlen+0x96>
  404b42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404b46:	fa82 f24c 	uadd8	r2, r2, ip
  404b4a:	f100 0008 	add.w	r0, r0, #8
  404b4e:	faa4 f28c 	sel	r2, r4, ip
  404b52:	fa83 f34c 	uadd8	r3, r3, ip
  404b56:	faa2 f38c 	sel	r3, r2, ip
  404b5a:	b9e3      	cbnz	r3, 404b96 <strlen+0x96>
  404b5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404b60:	fa82 f24c 	uadd8	r2, r2, ip
  404b64:	f100 0008 	add.w	r0, r0, #8
  404b68:	faa4 f28c 	sel	r2, r4, ip
  404b6c:	fa83 f34c 	uadd8	r3, r3, ip
  404b70:	faa2 f38c 	sel	r3, r2, ip
  404b74:	b97b      	cbnz	r3, 404b96 <strlen+0x96>
  404b76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404b7a:	f101 0120 	add.w	r1, r1, #32
  404b7e:	fa82 f24c 	uadd8	r2, r2, ip
  404b82:	f100 0008 	add.w	r0, r0, #8
  404b86:	faa4 f28c 	sel	r2, r4, ip
  404b8a:	fa83 f34c 	uadd8	r3, r3, ip
  404b8e:	faa2 f38c 	sel	r3, r2, ip
  404b92:	2b00      	cmp	r3, #0
  404b94:	d0c6      	beq.n	404b24 <strlen+0x24>
  404b96:	2a00      	cmp	r2, #0
  404b98:	bf04      	itt	eq
  404b9a:	3004      	addeq	r0, #4
  404b9c:	461a      	moveq	r2, r3
  404b9e:	ba12      	rev	r2, r2
  404ba0:	fab2 f282 	clz	r2, r2
  404ba4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404ba8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404bac:	4770      	bx	lr
  404bae:	e9d1 2300 	ldrd	r2, r3, [r1]
  404bb2:	f004 0503 	and.w	r5, r4, #3
  404bb6:	f1c4 0000 	rsb	r0, r4, #0
  404bba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404bbe:	f014 0f04 	tst.w	r4, #4
  404bc2:	f891 f040 	pld	[r1, #64]	; 0x40
  404bc6:	fa0c f505 	lsl.w	r5, ip, r5
  404bca:	ea62 0205 	orn	r2, r2, r5
  404bce:	bf1c      	itt	ne
  404bd0:	ea63 0305 	ornne	r3, r3, r5
  404bd4:	4662      	movne	r2, ip
  404bd6:	f04f 0400 	mov.w	r4, #0
  404bda:	e7a9      	b.n	404b30 <strlen+0x30>

00404bdc <critical_factorization>:
  404bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404be0:	f04f 0e01 	mov.w	lr, #1
  404be4:	4674      	mov	r4, lr
  404be6:	2500      	movs	r5, #0
  404be8:	f04f 36ff 	mov.w	r6, #4294967295
  404bec:	192b      	adds	r3, r5, r4
  404bee:	428b      	cmp	r3, r1
  404bf0:	eb00 0706 	add.w	r7, r0, r6
  404bf4:	d20d      	bcs.n	404c12 <critical_factorization+0x36>
  404bf6:	5d3f      	ldrb	r7, [r7, r4]
  404bf8:	f810 c003 	ldrb.w	ip, [r0, r3]
  404bfc:	45bc      	cmp	ip, r7
  404bfe:	d22d      	bcs.n	404c5c <critical_factorization+0x80>
  404c00:	461d      	mov	r5, r3
  404c02:	2401      	movs	r4, #1
  404c04:	eba3 0e06 	sub.w	lr, r3, r6
  404c08:	192b      	adds	r3, r5, r4
  404c0a:	428b      	cmp	r3, r1
  404c0c:	eb00 0706 	add.w	r7, r0, r6
  404c10:	d3f1      	bcc.n	404bf6 <critical_factorization+0x1a>
  404c12:	f04f 0801 	mov.w	r8, #1
  404c16:	f8c2 e000 	str.w	lr, [r2]
  404c1a:	4644      	mov	r4, r8
  404c1c:	2500      	movs	r5, #0
  404c1e:	f04f 37ff 	mov.w	r7, #4294967295
  404c22:	192b      	adds	r3, r5, r4
  404c24:	4299      	cmp	r1, r3
  404c26:	eb00 0e07 	add.w	lr, r0, r7
  404c2a:	d90e      	bls.n	404c4a <critical_factorization+0x6e>
  404c2c:	f81e e004 	ldrb.w	lr, [lr, r4]
  404c30:	f810 c003 	ldrb.w	ip, [r0, r3]
  404c34:	45f4      	cmp	ip, lr
  404c36:	d918      	bls.n	404c6a <critical_factorization+0x8e>
  404c38:	461d      	mov	r5, r3
  404c3a:	2401      	movs	r4, #1
  404c3c:	eba3 0807 	sub.w	r8, r3, r7
  404c40:	192b      	adds	r3, r5, r4
  404c42:	4299      	cmp	r1, r3
  404c44:	eb00 0e07 	add.w	lr, r0, r7
  404c48:	d8f0      	bhi.n	404c2c <critical_factorization+0x50>
  404c4a:	3701      	adds	r7, #1
  404c4c:	1c70      	adds	r0, r6, #1
  404c4e:	4287      	cmp	r7, r0
  404c50:	bf24      	itt	cs
  404c52:	f8c2 8000 	strcs.w	r8, [r2]
  404c56:	4638      	movcs	r0, r7
  404c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c5c:	d00c      	beq.n	404c78 <critical_factorization+0x9c>
  404c5e:	f04f 0e01 	mov.w	lr, #1
  404c62:	462e      	mov	r6, r5
  404c64:	4674      	mov	r4, lr
  404c66:	4475      	add	r5, lr
  404c68:	e7c0      	b.n	404bec <critical_factorization+0x10>
  404c6a:	d00b      	beq.n	404c84 <critical_factorization+0xa8>
  404c6c:	f04f 0801 	mov.w	r8, #1
  404c70:	462f      	mov	r7, r5
  404c72:	4644      	mov	r4, r8
  404c74:	4445      	add	r5, r8
  404c76:	e7d4      	b.n	404c22 <critical_factorization+0x46>
  404c78:	4574      	cmp	r4, lr
  404c7a:	bf12      	itee	ne
  404c7c:	3401      	addne	r4, #1
  404c7e:	461d      	moveq	r5, r3
  404c80:	2401      	moveq	r4, #1
  404c82:	e7b3      	b.n	404bec <critical_factorization+0x10>
  404c84:	4544      	cmp	r4, r8
  404c86:	bf12      	itee	ne
  404c88:	3401      	addne	r4, #1
  404c8a:	461d      	moveq	r5, r3
  404c8c:	2401      	moveq	r4, #1
  404c8e:	e7c8      	b.n	404c22 <critical_factorization+0x46>

00404c90 <two_way_long_needle>:
  404c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c94:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  404c98:	4616      	mov	r6, r2
  404c9a:	4605      	mov	r5, r0
  404c9c:	468b      	mov	fp, r1
  404c9e:	4610      	mov	r0, r2
  404ca0:	4619      	mov	r1, r3
  404ca2:	aa03      	add	r2, sp, #12
  404ca4:	461c      	mov	r4, r3
  404ca6:	f7ff ff99 	bl	404bdc <critical_factorization>
  404caa:	ab03      	add	r3, sp, #12
  404cac:	4681      	mov	r9, r0
  404cae:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  404cb2:	f843 4f04 	str.w	r4, [r3, #4]!
  404cb6:	4293      	cmp	r3, r2
  404cb8:	d1fb      	bne.n	404cb2 <two_way_long_needle+0x22>
  404cba:	b14c      	cbz	r4, 404cd0 <two_way_long_needle+0x40>
  404cbc:	1e63      	subs	r3, r4, #1
  404cbe:	1e72      	subs	r2, r6, #1
  404cc0:	a804      	add	r0, sp, #16
  404cc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  404cc6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  404cca:	f113 33ff 	adds.w	r3, r3, #4294967295
  404cce:	d2f8      	bcs.n	404cc2 <two_way_long_needle+0x32>
  404cd0:	9903      	ldr	r1, [sp, #12]
  404cd2:	464a      	mov	r2, r9
  404cd4:	4431      	add	r1, r6
  404cd6:	4630      	mov	r0, r6
  404cd8:	f004 faf2 	bl	4092c0 <memcmp>
  404cdc:	2800      	cmp	r0, #0
  404cde:	d16f      	bne.n	404dc0 <two_way_long_needle+0x130>
  404ce0:	f109 33ff 	add.w	r3, r9, #4294967295
  404ce4:	9300      	str	r3, [sp, #0]
  404ce6:	18f3      	adds	r3, r6, r3
  404ce8:	4682      	mov	sl, r0
  404cea:	9301      	str	r3, [sp, #4]
  404cec:	4623      	mov	r3, r4
  404cee:	4680      	mov	r8, r0
  404cf0:	4654      	mov	r4, sl
  404cf2:	4658      	mov	r0, fp
  404cf4:	469a      	mov	sl, r3
  404cf6:	eb08 070a 	add.w	r7, r8, sl
  404cfa:	1a3a      	subs	r2, r7, r0
  404cfc:	2100      	movs	r1, #0
  404cfe:	4428      	add	r0, r5
  404d00:	f004 fa8e 	bl	409220 <memchr>
  404d04:	2800      	cmp	r0, #0
  404d06:	d156      	bne.n	404db6 <two_way_long_needle+0x126>
  404d08:	2f00      	cmp	r7, #0
  404d0a:	d054      	beq.n	404db6 <two_way_long_needle+0x126>
  404d0c:	19eb      	adds	r3, r5, r7
  404d0e:	aa04      	add	r2, sp, #16
  404d10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404d18:	b14b      	cbz	r3, 404d2e <two_way_long_needle+0x9e>
  404d1a:	b124      	cbz	r4, 404d26 <two_way_long_needle+0x96>
  404d1c:	9a03      	ldr	r2, [sp, #12]
  404d1e:	4293      	cmp	r3, r2
  404d20:	d201      	bcs.n	404d26 <two_way_long_needle+0x96>
  404d22:	ebaa 0302 	sub.w	r3, sl, r2
  404d26:	4498      	add	r8, r3
  404d28:	2400      	movs	r4, #0
  404d2a:	4638      	mov	r0, r7
  404d2c:	e7e3      	b.n	404cf6 <two_way_long_needle+0x66>
  404d2e:	454c      	cmp	r4, r9
  404d30:	4623      	mov	r3, r4
  404d32:	f10a 3eff 	add.w	lr, sl, #4294967295
  404d36:	bf38      	it	cc
  404d38:	464b      	movcc	r3, r9
  404d3a:	4573      	cmp	r3, lr
  404d3c:	d213      	bcs.n	404d66 <two_way_long_needle+0xd6>
  404d3e:	eb08 0203 	add.w	r2, r8, r3
  404d42:	f816 c003 	ldrb.w	ip, [r6, r3]
  404d46:	5ca8      	ldrb	r0, [r5, r2]
  404d48:	4584      	cmp	ip, r0
  404d4a:	442a      	add	r2, r5
  404d4c:	eb06 0103 	add.w	r1, r6, r3
  404d50:	d006      	beq.n	404d60 <two_way_long_needle+0xd0>
  404d52:	e02c      	b.n	404dae <two_way_long_needle+0x11e>
  404d54:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  404d58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  404d5c:	4584      	cmp	ip, r0
  404d5e:	d126      	bne.n	404dae <two_way_long_needle+0x11e>
  404d60:	3301      	adds	r3, #1
  404d62:	4573      	cmp	r3, lr
  404d64:	d3f6      	bcc.n	404d54 <two_way_long_needle+0xc4>
  404d66:	454c      	cmp	r4, r9
  404d68:	9900      	ldr	r1, [sp, #0]
  404d6a:	f080 8089 	bcs.w	404e80 <two_way_long_needle+0x1f0>
  404d6e:	9b00      	ldr	r3, [sp, #0]
  404d70:	eb08 0203 	add.w	r2, r8, r3
  404d74:	9b01      	ldr	r3, [sp, #4]
  404d76:	5ca8      	ldrb	r0, [r5, r2]
  404d78:	781b      	ldrb	r3, [r3, #0]
  404d7a:	4298      	cmp	r0, r3
  404d7c:	442a      	add	r2, r5
  404d7e:	d17f      	bne.n	404e80 <two_way_long_needle+0x1f0>
  404d80:	9801      	ldr	r0, [sp, #4]
  404d82:	f104 3bff 	add.w	fp, r4, #4294967295
  404d86:	e006      	b.n	404d96 <two_way_long_needle+0x106>
  404d88:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  404d8c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  404d90:	45f4      	cmp	ip, lr
  404d92:	d103      	bne.n	404d9c <two_way_long_needle+0x10c>
  404d94:	4619      	mov	r1, r3
  404d96:	1e4b      	subs	r3, r1, #1
  404d98:	459b      	cmp	fp, r3
  404d9a:	d1f5      	bne.n	404d88 <two_way_long_needle+0xf8>
  404d9c:	3401      	adds	r4, #1
  404d9e:	428c      	cmp	r4, r1
  404da0:	d870      	bhi.n	404e84 <two_way_long_needle+0x1f4>
  404da2:	9c03      	ldr	r4, [sp, #12]
  404da4:	4638      	mov	r0, r7
  404da6:	44a0      	add	r8, r4
  404da8:	ebaa 0404 	sub.w	r4, sl, r4
  404dac:	e7a3      	b.n	404cf6 <two_way_long_needle+0x66>
  404dae:	f1c9 0201 	rsb	r2, r9, #1
  404db2:	4490      	add	r8, r2
  404db4:	e7b7      	b.n	404d26 <two_way_long_needle+0x96>
  404db6:	2000      	movs	r0, #0
  404db8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  404dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dc0:	eba4 0309 	sub.w	r3, r4, r9
  404dc4:	454b      	cmp	r3, r9
  404dc6:	bf38      	it	cc
  404dc8:	464b      	movcc	r3, r9
  404dca:	3301      	adds	r3, #1
  404dcc:	f109 38ff 	add.w	r8, r9, #4294967295
  404dd0:	9303      	str	r3, [sp, #12]
  404dd2:	eb06 0308 	add.w	r3, r6, r8
  404dd6:	4658      	mov	r0, fp
  404dd8:	f04f 0a00 	mov.w	sl, #0
  404ddc:	46cb      	mov	fp, r9
  404dde:	4699      	mov	r9, r3
  404de0:	eb0a 0704 	add.w	r7, sl, r4
  404de4:	1a3a      	subs	r2, r7, r0
  404de6:	2100      	movs	r1, #0
  404de8:	4428      	add	r0, r5
  404dea:	f004 fa19 	bl	409220 <memchr>
  404dee:	2800      	cmp	r0, #0
  404df0:	d1e1      	bne.n	404db6 <two_way_long_needle+0x126>
  404df2:	2f00      	cmp	r7, #0
  404df4:	d0df      	beq.n	404db6 <two_way_long_needle+0x126>
  404df6:	19eb      	adds	r3, r5, r7
  404df8:	aa04      	add	r2, sp, #16
  404dfa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404e02:	bba3      	cbnz	r3, 404e6e <two_way_long_needle+0x1de>
  404e04:	1e61      	subs	r1, r4, #1
  404e06:	458b      	cmp	fp, r1
  404e08:	d215      	bcs.n	404e36 <two_way_long_needle+0x1a6>
  404e0a:	eb0a 020b 	add.w	r2, sl, fp
  404e0e:	f816 300b 	ldrb.w	r3, [r6, fp]
  404e12:	f815 e002 	ldrb.w	lr, [r5, r2]
  404e16:	459e      	cmp	lr, r3
  404e18:	442a      	add	r2, r5
  404e1a:	eb06 000b 	add.w	r0, r6, fp
  404e1e:	465b      	mov	r3, fp
  404e20:	d006      	beq.n	404e30 <two_way_long_needle+0x1a0>
  404e22:	e027      	b.n	404e74 <two_way_long_needle+0x1e4>
  404e24:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  404e28:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  404e2c:	45f4      	cmp	ip, lr
  404e2e:	d121      	bne.n	404e74 <two_way_long_needle+0x1e4>
  404e30:	3301      	adds	r3, #1
  404e32:	428b      	cmp	r3, r1
  404e34:	d3f6      	bcc.n	404e24 <two_way_long_needle+0x194>
  404e36:	f1b8 3fff 	cmp.w	r8, #4294967295
  404e3a:	d011      	beq.n	404e60 <two_way_long_needle+0x1d0>
  404e3c:	eb0a 0208 	add.w	r2, sl, r8
  404e40:	f899 1000 	ldrb.w	r1, [r9]
  404e44:	5cab      	ldrb	r3, [r5, r2]
  404e46:	4299      	cmp	r1, r3
  404e48:	442a      	add	r2, r5
  404e4a:	d10f      	bne.n	404e6c <two_way_long_needle+0x1dc>
  404e4c:	464b      	mov	r3, r9
  404e4e:	e005      	b.n	404e5c <two_way_long_needle+0x1cc>
  404e50:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  404e54:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  404e58:	4288      	cmp	r0, r1
  404e5a:	d107      	bne.n	404e6c <two_way_long_needle+0x1dc>
  404e5c:	42b3      	cmp	r3, r6
  404e5e:	d1f7      	bne.n	404e50 <two_way_long_needle+0x1c0>
  404e60:	eb05 000a 	add.w	r0, r5, sl
  404e64:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  404e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e6c:	9b03      	ldr	r3, [sp, #12]
  404e6e:	449a      	add	sl, r3
  404e70:	4638      	mov	r0, r7
  404e72:	e7b5      	b.n	404de0 <two_way_long_needle+0x150>
  404e74:	f1cb 0201 	rsb	r2, fp, #1
  404e78:	4492      	add	sl, r2
  404e7a:	449a      	add	sl, r3
  404e7c:	4638      	mov	r0, r7
  404e7e:	e7af      	b.n	404de0 <two_way_long_needle+0x150>
  404e80:	4649      	mov	r1, r9
  404e82:	e78b      	b.n	404d9c <two_way_long_needle+0x10c>
  404e84:	eb05 0008 	add.w	r0, r5, r8
  404e88:	e796      	b.n	404db8 <two_way_long_needle+0x128>
  404e8a:	bf00      	nop

00404e8c <strstr>:
  404e8c:	7802      	ldrb	r2, [r0, #0]
  404e8e:	2a00      	cmp	r2, #0
  404e90:	f000 8101 	beq.w	405096 <strstr+0x20a>
  404e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e98:	f891 8000 	ldrb.w	r8, [r1]
  404e9c:	b085      	sub	sp, #20
  404e9e:	4644      	mov	r4, r8
  404ea0:	f1b8 0f00 	cmp.w	r8, #0
  404ea4:	d016      	beq.n	404ed4 <strstr+0x48>
  404ea6:	4686      	mov	lr, r0
  404ea8:	f101 0c01 	add.w	ip, r1, #1
  404eac:	2701      	movs	r7, #1
  404eae:	e003      	b.n	404eb8 <strstr+0x2c>
  404eb0:	f813 4b01 	ldrb.w	r4, [r3], #1
  404eb4:	b16c      	cbz	r4, 404ed2 <strstr+0x46>
  404eb6:	469c      	mov	ip, r3
  404eb8:	42a2      	cmp	r2, r4
  404eba:	bf14      	ite	ne
  404ebc:	2700      	movne	r7, #0
  404ebe:	f007 0701 	andeq.w	r7, r7, #1
  404ec2:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  404ec6:	4663      	mov	r3, ip
  404ec8:	2a00      	cmp	r2, #0
  404eca:	d1f1      	bne.n	404eb0 <strstr+0x24>
  404ecc:	f89c 3000 	ldrb.w	r3, [ip]
  404ed0:	b9fb      	cbnz	r3, 404f12 <strstr+0x86>
  404ed2:	b117      	cbz	r7, 404eda <strstr+0x4e>
  404ed4:	b005      	add	sp, #20
  404ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404eda:	460e      	mov	r6, r1
  404edc:	4605      	mov	r5, r0
  404ede:	4641      	mov	r1, r8
  404ee0:	3001      	adds	r0, #1
  404ee2:	ebac 0406 	sub.w	r4, ip, r6
  404ee6:	f005 f813 	bl	409f10 <strchr>
  404eea:	4607      	mov	r7, r0
  404eec:	b188      	cbz	r0, 404f12 <strstr+0x86>
  404eee:	2c01      	cmp	r4, #1
  404ef0:	d0f0      	beq.n	404ed4 <strstr+0x48>
  404ef2:	1928      	adds	r0, r5, r4
  404ef4:	4287      	cmp	r7, r0
  404ef6:	bf94      	ite	ls
  404ef8:	1bc1      	subls	r1, r0, r7
  404efa:	2101      	movhi	r1, #1
  404efc:	2c1f      	cmp	r4, #31
  404efe:	468b      	mov	fp, r1
  404f00:	d90b      	bls.n	404f1a <strstr+0x8e>
  404f02:	4623      	mov	r3, r4
  404f04:	4632      	mov	r2, r6
  404f06:	4638      	mov	r0, r7
  404f08:	f7ff fec2 	bl	404c90 <two_way_long_needle>
  404f0c:	b005      	add	sp, #20
  404f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f12:	2000      	movs	r0, #0
  404f14:	b005      	add	sp, #20
  404f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f1a:	aa03      	add	r2, sp, #12
  404f1c:	4621      	mov	r1, r4
  404f1e:	4630      	mov	r0, r6
  404f20:	f7ff fe5c 	bl	404bdc <critical_factorization>
  404f24:	9903      	ldr	r1, [sp, #12]
  404f26:	4680      	mov	r8, r0
  404f28:	4602      	mov	r2, r0
  404f2a:	4431      	add	r1, r6
  404f2c:	4630      	mov	r0, r6
  404f2e:	f004 f9c7 	bl	4092c0 <memcmp>
  404f32:	2800      	cmp	r0, #0
  404f34:	d157      	bne.n	404fe6 <strstr+0x15a>
  404f36:	f108 33ff 	add.w	r3, r8, #4294967295
  404f3a:	9300      	str	r3, [sp, #0]
  404f3c:	18f3      	adds	r3, r6, r3
  404f3e:	4681      	mov	r9, r0
  404f40:	4605      	mov	r5, r0
  404f42:	9301      	str	r3, [sp, #4]
  404f44:	4658      	mov	r0, fp
  404f46:	46b2      	mov	sl, r6
  404f48:	1966      	adds	r6, r4, r5
  404f4a:	1a32      	subs	r2, r6, r0
  404f4c:	2100      	movs	r1, #0
  404f4e:	4438      	add	r0, r7
  404f50:	f004 f966 	bl	409220 <memchr>
  404f54:	2800      	cmp	r0, #0
  404f56:	d1dc      	bne.n	404f12 <strstr+0x86>
  404f58:	2e00      	cmp	r6, #0
  404f5a:	d0da      	beq.n	404f12 <strstr+0x86>
  404f5c:	45c8      	cmp	r8, r9
  404f5e:	4643      	mov	r3, r8
  404f60:	bf38      	it	cc
  404f62:	464b      	movcc	r3, r9
  404f64:	429c      	cmp	r4, r3
  404f66:	d912      	bls.n	404f8e <strstr+0x102>
  404f68:	195a      	adds	r2, r3, r5
  404f6a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  404f6e:	5cb8      	ldrb	r0, [r7, r2]
  404f70:	4281      	cmp	r1, r0
  404f72:	443a      	add	r2, r7
  404f74:	eb0a 0e03 	add.w	lr, sl, r3
  404f78:	d006      	beq.n	404f88 <strstr+0xfc>
  404f7a:	e02c      	b.n	404fd6 <strstr+0x14a>
  404f7c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  404f80:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  404f84:	4288      	cmp	r0, r1
  404f86:	d126      	bne.n	404fd6 <strstr+0x14a>
  404f88:	3301      	adds	r3, #1
  404f8a:	429c      	cmp	r4, r3
  404f8c:	d1f6      	bne.n	404f7c <strstr+0xf0>
  404f8e:	45c8      	cmp	r8, r9
  404f90:	9900      	ldr	r1, [sp, #0]
  404f92:	f240 8083 	bls.w	40509c <strstr+0x210>
  404f96:	9b00      	ldr	r3, [sp, #0]
  404f98:	18ea      	adds	r2, r5, r3
  404f9a:	9b01      	ldr	r3, [sp, #4]
  404f9c:	5cb8      	ldrb	r0, [r7, r2]
  404f9e:	781b      	ldrb	r3, [r3, #0]
  404fa0:	4298      	cmp	r0, r3
  404fa2:	443a      	add	r2, r7
  404fa4:	d17a      	bne.n	40509c <strstr+0x210>
  404fa6:	9801      	ldr	r0, [sp, #4]
  404fa8:	f109 3bff 	add.w	fp, r9, #4294967295
  404fac:	e006      	b.n	404fbc <strstr+0x130>
  404fae:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  404fb2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  404fb6:	45f4      	cmp	ip, lr
  404fb8:	d103      	bne.n	404fc2 <strstr+0x136>
  404fba:	4619      	mov	r1, r3
  404fbc:	1e4b      	subs	r3, r1, #1
  404fbe:	455b      	cmp	r3, fp
  404fc0:	d1f5      	bne.n	404fae <strstr+0x122>
  404fc2:	f109 0901 	add.w	r9, r9, #1
  404fc6:	4589      	cmp	r9, r1
  404fc8:	d857      	bhi.n	40507a <strstr+0x1ee>
  404fca:	9b03      	ldr	r3, [sp, #12]
  404fcc:	4630      	mov	r0, r6
  404fce:	441d      	add	r5, r3
  404fd0:	eba4 0903 	sub.w	r9, r4, r3
  404fd4:	e7b8      	b.n	404f48 <strstr+0xbc>
  404fd6:	f1c8 0201 	rsb	r2, r8, #1
  404fda:	4415      	add	r5, r2
  404fdc:	441d      	add	r5, r3
  404fde:	f04f 0900 	mov.w	r9, #0
  404fe2:	4630      	mov	r0, r6
  404fe4:	e7b0      	b.n	404f48 <strstr+0xbc>
  404fe6:	eba4 0308 	sub.w	r3, r4, r8
  404fea:	4543      	cmp	r3, r8
  404fec:	bf38      	it	cc
  404fee:	4643      	movcc	r3, r8
  404ff0:	3301      	adds	r3, #1
  404ff2:	f108 39ff 	add.w	r9, r8, #4294967295
  404ff6:	9303      	str	r3, [sp, #12]
  404ff8:	eb06 0309 	add.w	r3, r6, r9
  404ffc:	4658      	mov	r0, fp
  404ffe:	2500      	movs	r5, #0
  405000:	46bb      	mov	fp, r7
  405002:	469a      	mov	sl, r3
  405004:	1967      	adds	r7, r4, r5
  405006:	1a3a      	subs	r2, r7, r0
  405008:	2100      	movs	r1, #0
  40500a:	4458      	add	r0, fp
  40500c:	f004 f908 	bl	409220 <memchr>
  405010:	2800      	cmp	r0, #0
  405012:	f47f af7e 	bne.w	404f12 <strstr+0x86>
  405016:	2f00      	cmp	r7, #0
  405018:	f43f af7b 	beq.w	404f12 <strstr+0x86>
  40501c:	4544      	cmp	r4, r8
  40501e:	d915      	bls.n	40504c <strstr+0x1c0>
  405020:	eb08 0205 	add.w	r2, r8, r5
  405024:	f816 3008 	ldrb.w	r3, [r6, r8]
  405028:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40502c:	4298      	cmp	r0, r3
  40502e:	445a      	add	r2, fp
  405030:	eb06 0108 	add.w	r1, r6, r8
  405034:	4643      	mov	r3, r8
  405036:	d006      	beq.n	405046 <strstr+0x1ba>
  405038:	e023      	b.n	405082 <strstr+0x1f6>
  40503a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40503e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  405042:	4586      	cmp	lr, r0
  405044:	d11d      	bne.n	405082 <strstr+0x1f6>
  405046:	3301      	adds	r3, #1
  405048:	429c      	cmp	r4, r3
  40504a:	d1f6      	bne.n	40503a <strstr+0x1ae>
  40504c:	f1b9 3fff 	cmp.w	r9, #4294967295
  405050:	d012      	beq.n	405078 <strstr+0x1ec>
  405052:	eb05 0209 	add.w	r2, r5, r9
  405056:	f89a 3000 	ldrb.w	r3, [sl]
  40505a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40505e:	4299      	cmp	r1, r3
  405060:	445a      	add	r2, fp
  405062:	d114      	bne.n	40508e <strstr+0x202>
  405064:	4653      	mov	r3, sl
  405066:	e005      	b.n	405074 <strstr+0x1e8>
  405068:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40506c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  405070:	4288      	cmp	r0, r1
  405072:	d10c      	bne.n	40508e <strstr+0x202>
  405074:	42b3      	cmp	r3, r6
  405076:	d1f7      	bne.n	405068 <strstr+0x1dc>
  405078:	465f      	mov	r7, fp
  40507a:	1978      	adds	r0, r7, r5
  40507c:	b005      	add	sp, #20
  40507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405082:	f1c8 0201 	rsb	r2, r8, #1
  405086:	4415      	add	r5, r2
  405088:	441d      	add	r5, r3
  40508a:	4638      	mov	r0, r7
  40508c:	e7ba      	b.n	405004 <strstr+0x178>
  40508e:	9b03      	ldr	r3, [sp, #12]
  405090:	4638      	mov	r0, r7
  405092:	441d      	add	r5, r3
  405094:	e7b6      	b.n	405004 <strstr+0x178>
  405096:	780b      	ldrb	r3, [r1, #0]
  405098:	b913      	cbnz	r3, 4050a0 <strstr+0x214>
  40509a:	4770      	bx	lr
  40509c:	4641      	mov	r1, r8
  40509e:	e790      	b.n	404fc2 <strstr+0x136>
  4050a0:	2000      	movs	r0, #0
  4050a2:	4770      	bx	lr

004050a4 <_svfprintf_r>:
  4050a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050a8:	b0c3      	sub	sp, #268	; 0x10c
  4050aa:	460c      	mov	r4, r1
  4050ac:	910b      	str	r1, [sp, #44]	; 0x2c
  4050ae:	4692      	mov	sl, r2
  4050b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4050b2:	900c      	str	r0, [sp, #48]	; 0x30
  4050b4:	f003 fd66 	bl	408b84 <_localeconv_r>
  4050b8:	6803      	ldr	r3, [r0, #0]
  4050ba:	931a      	str	r3, [sp, #104]	; 0x68
  4050bc:	4618      	mov	r0, r3
  4050be:	f7ff fd1f 	bl	404b00 <strlen>
  4050c2:	89a3      	ldrh	r3, [r4, #12]
  4050c4:	9019      	str	r0, [sp, #100]	; 0x64
  4050c6:	0619      	lsls	r1, r3, #24
  4050c8:	d503      	bpl.n	4050d2 <_svfprintf_r+0x2e>
  4050ca:	6923      	ldr	r3, [r4, #16]
  4050cc:	2b00      	cmp	r3, #0
  4050ce:	f001 8001 	beq.w	4060d4 <_svfprintf_r+0x1030>
  4050d2:	2300      	movs	r3, #0
  4050d4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4050d8:	9313      	str	r3, [sp, #76]	; 0x4c
  4050da:	9314      	str	r3, [sp, #80]	; 0x50
  4050dc:	9315      	str	r3, [sp, #84]	; 0x54
  4050de:	9327      	str	r3, [sp, #156]	; 0x9c
  4050e0:	9326      	str	r3, [sp, #152]	; 0x98
  4050e2:	9318      	str	r3, [sp, #96]	; 0x60
  4050e4:	931b      	str	r3, [sp, #108]	; 0x6c
  4050e6:	9309      	str	r3, [sp, #36]	; 0x24
  4050e8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4050ec:	46c8      	mov	r8, r9
  4050ee:	9316      	str	r3, [sp, #88]	; 0x58
  4050f0:	9317      	str	r3, [sp, #92]	; 0x5c
  4050f2:	f89a 3000 	ldrb.w	r3, [sl]
  4050f6:	4654      	mov	r4, sl
  4050f8:	b1e3      	cbz	r3, 405134 <_svfprintf_r+0x90>
  4050fa:	2b25      	cmp	r3, #37	; 0x25
  4050fc:	d102      	bne.n	405104 <_svfprintf_r+0x60>
  4050fe:	e019      	b.n	405134 <_svfprintf_r+0x90>
  405100:	2b25      	cmp	r3, #37	; 0x25
  405102:	d003      	beq.n	40510c <_svfprintf_r+0x68>
  405104:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405108:	2b00      	cmp	r3, #0
  40510a:	d1f9      	bne.n	405100 <_svfprintf_r+0x5c>
  40510c:	eba4 050a 	sub.w	r5, r4, sl
  405110:	b185      	cbz	r5, 405134 <_svfprintf_r+0x90>
  405112:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405114:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405116:	f8c8 a000 	str.w	sl, [r8]
  40511a:	3301      	adds	r3, #1
  40511c:	442a      	add	r2, r5
  40511e:	2b07      	cmp	r3, #7
  405120:	f8c8 5004 	str.w	r5, [r8, #4]
  405124:	9227      	str	r2, [sp, #156]	; 0x9c
  405126:	9326      	str	r3, [sp, #152]	; 0x98
  405128:	dc7f      	bgt.n	40522a <_svfprintf_r+0x186>
  40512a:	f108 0808 	add.w	r8, r8, #8
  40512e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405130:	442b      	add	r3, r5
  405132:	9309      	str	r3, [sp, #36]	; 0x24
  405134:	7823      	ldrb	r3, [r4, #0]
  405136:	2b00      	cmp	r3, #0
  405138:	d07f      	beq.n	40523a <_svfprintf_r+0x196>
  40513a:	2300      	movs	r3, #0
  40513c:	461a      	mov	r2, r3
  40513e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405142:	4619      	mov	r1, r3
  405144:	930d      	str	r3, [sp, #52]	; 0x34
  405146:	469b      	mov	fp, r3
  405148:	f04f 30ff 	mov.w	r0, #4294967295
  40514c:	7863      	ldrb	r3, [r4, #1]
  40514e:	900a      	str	r0, [sp, #40]	; 0x28
  405150:	f104 0a01 	add.w	sl, r4, #1
  405154:	f10a 0a01 	add.w	sl, sl, #1
  405158:	f1a3 0020 	sub.w	r0, r3, #32
  40515c:	2858      	cmp	r0, #88	; 0x58
  40515e:	f200 83c0 	bhi.w	4058e2 <_svfprintf_r+0x83e>
  405162:	e8df f010 	tbh	[pc, r0, lsl #1]
  405166:	0238      	.short	0x0238
  405168:	03be03be 	.word	0x03be03be
  40516c:	03be0240 	.word	0x03be0240
  405170:	03be03be 	.word	0x03be03be
  405174:	03be03be 	.word	0x03be03be
  405178:	024503be 	.word	0x024503be
  40517c:	03be0203 	.word	0x03be0203
  405180:	026b005d 	.word	0x026b005d
  405184:	028603be 	.word	0x028603be
  405188:	039c039c 	.word	0x039c039c
  40518c:	039c039c 	.word	0x039c039c
  405190:	039c039c 	.word	0x039c039c
  405194:	039c039c 	.word	0x039c039c
  405198:	03be039c 	.word	0x03be039c
  40519c:	03be03be 	.word	0x03be03be
  4051a0:	03be03be 	.word	0x03be03be
  4051a4:	03be03be 	.word	0x03be03be
  4051a8:	03be03be 	.word	0x03be03be
  4051ac:	033703be 	.word	0x033703be
  4051b0:	03be0357 	.word	0x03be0357
  4051b4:	03be0357 	.word	0x03be0357
  4051b8:	03be03be 	.word	0x03be03be
  4051bc:	039703be 	.word	0x039703be
  4051c0:	03be03be 	.word	0x03be03be
  4051c4:	03be03ac 	.word	0x03be03ac
  4051c8:	03be03be 	.word	0x03be03be
  4051cc:	03be03be 	.word	0x03be03be
  4051d0:	03be0259 	.word	0x03be0259
  4051d4:	031e03be 	.word	0x031e03be
  4051d8:	03be03be 	.word	0x03be03be
  4051dc:	03be03be 	.word	0x03be03be
  4051e0:	03be03be 	.word	0x03be03be
  4051e4:	03be03be 	.word	0x03be03be
  4051e8:	03be03be 	.word	0x03be03be
  4051ec:	02db02c6 	.word	0x02db02c6
  4051f0:	03570357 	.word	0x03570357
  4051f4:	028b0357 	.word	0x028b0357
  4051f8:	03be02db 	.word	0x03be02db
  4051fc:	029003be 	.word	0x029003be
  405200:	029d03be 	.word	0x029d03be
  405204:	02b401cc 	.word	0x02b401cc
  405208:	03be0208 	.word	0x03be0208
  40520c:	03be01e1 	.word	0x03be01e1
  405210:	03be007e 	.word	0x03be007e
  405214:	020d03be 	.word	0x020d03be
  405218:	980d      	ldr	r0, [sp, #52]	; 0x34
  40521a:	930f      	str	r3, [sp, #60]	; 0x3c
  40521c:	4240      	negs	r0, r0
  40521e:	900d      	str	r0, [sp, #52]	; 0x34
  405220:	f04b 0b04 	orr.w	fp, fp, #4
  405224:	f89a 3000 	ldrb.w	r3, [sl]
  405228:	e794      	b.n	405154 <_svfprintf_r+0xb0>
  40522a:	aa25      	add	r2, sp, #148	; 0x94
  40522c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40522e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405230:	f004 fee2 	bl	409ff8 <__ssprint_r>
  405234:	b940      	cbnz	r0, 405248 <_svfprintf_r+0x1a4>
  405236:	46c8      	mov	r8, r9
  405238:	e779      	b.n	40512e <_svfprintf_r+0x8a>
  40523a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40523c:	b123      	cbz	r3, 405248 <_svfprintf_r+0x1a4>
  40523e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405240:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405242:	aa25      	add	r2, sp, #148	; 0x94
  405244:	f004 fed8 	bl	409ff8 <__ssprint_r>
  405248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40524a:	899b      	ldrh	r3, [r3, #12]
  40524c:	f013 0f40 	tst.w	r3, #64	; 0x40
  405250:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405252:	bf18      	it	ne
  405254:	f04f 33ff 	movne.w	r3, #4294967295
  405258:	9309      	str	r3, [sp, #36]	; 0x24
  40525a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40525c:	b043      	add	sp, #268	; 0x10c
  40525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405262:	f01b 0f20 	tst.w	fp, #32
  405266:	9311      	str	r3, [sp, #68]	; 0x44
  405268:	f040 81dd 	bne.w	405626 <_svfprintf_r+0x582>
  40526c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40526e:	f01b 0f10 	tst.w	fp, #16
  405272:	4613      	mov	r3, r2
  405274:	f040 856c 	bne.w	405d50 <_svfprintf_r+0xcac>
  405278:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40527c:	f000 8568 	beq.w	405d50 <_svfprintf_r+0xcac>
  405280:	8814      	ldrh	r4, [r2, #0]
  405282:	3204      	adds	r2, #4
  405284:	2500      	movs	r5, #0
  405286:	2301      	movs	r3, #1
  405288:	920f      	str	r2, [sp, #60]	; 0x3c
  40528a:	2700      	movs	r7, #0
  40528c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405290:	990a      	ldr	r1, [sp, #40]	; 0x28
  405292:	1c4a      	adds	r2, r1, #1
  405294:	f000 8265 	beq.w	405762 <_svfprintf_r+0x6be>
  405298:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40529c:	9207      	str	r2, [sp, #28]
  40529e:	ea54 0205 	orrs.w	r2, r4, r5
  4052a2:	f040 8264 	bne.w	40576e <_svfprintf_r+0x6ca>
  4052a6:	2900      	cmp	r1, #0
  4052a8:	f040 8439 	bne.w	405b1e <_svfprintf_r+0xa7a>
  4052ac:	2b00      	cmp	r3, #0
  4052ae:	f040 84d4 	bne.w	405c5a <_svfprintf_r+0xbb6>
  4052b2:	f01b 0301 	ands.w	r3, fp, #1
  4052b6:	930e      	str	r3, [sp, #56]	; 0x38
  4052b8:	f000 8602 	beq.w	405ec0 <_svfprintf_r+0xe1c>
  4052bc:	ae42      	add	r6, sp, #264	; 0x108
  4052be:	2330      	movs	r3, #48	; 0x30
  4052c0:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4052c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4052c8:	4293      	cmp	r3, r2
  4052ca:	bfb8      	it	lt
  4052cc:	4613      	movlt	r3, r2
  4052ce:	9308      	str	r3, [sp, #32]
  4052d0:	2300      	movs	r3, #0
  4052d2:	9312      	str	r3, [sp, #72]	; 0x48
  4052d4:	b117      	cbz	r7, 4052dc <_svfprintf_r+0x238>
  4052d6:	9b08      	ldr	r3, [sp, #32]
  4052d8:	3301      	adds	r3, #1
  4052da:	9308      	str	r3, [sp, #32]
  4052dc:	9b07      	ldr	r3, [sp, #28]
  4052de:	f013 0302 	ands.w	r3, r3, #2
  4052e2:	9310      	str	r3, [sp, #64]	; 0x40
  4052e4:	d002      	beq.n	4052ec <_svfprintf_r+0x248>
  4052e6:	9b08      	ldr	r3, [sp, #32]
  4052e8:	3302      	adds	r3, #2
  4052ea:	9308      	str	r3, [sp, #32]
  4052ec:	9b07      	ldr	r3, [sp, #28]
  4052ee:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4052f2:	f040 830d 	bne.w	405910 <_svfprintf_r+0x86c>
  4052f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4052f8:	9a08      	ldr	r2, [sp, #32]
  4052fa:	eba3 0b02 	sub.w	fp, r3, r2
  4052fe:	f1bb 0f00 	cmp.w	fp, #0
  405302:	f340 8305 	ble.w	405910 <_svfprintf_r+0x86c>
  405306:	f1bb 0f10 	cmp.w	fp, #16
  40530a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40530c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40530e:	dd29      	ble.n	405364 <_svfprintf_r+0x2c0>
  405310:	4643      	mov	r3, r8
  405312:	4621      	mov	r1, r4
  405314:	46a8      	mov	r8, r5
  405316:	2710      	movs	r7, #16
  405318:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40531a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40531c:	e006      	b.n	40532c <_svfprintf_r+0x288>
  40531e:	f1ab 0b10 	sub.w	fp, fp, #16
  405322:	f1bb 0f10 	cmp.w	fp, #16
  405326:	f103 0308 	add.w	r3, r3, #8
  40532a:	dd18      	ble.n	40535e <_svfprintf_r+0x2ba>
  40532c:	3201      	adds	r2, #1
  40532e:	48b7      	ldr	r0, [pc, #732]	; (40560c <_svfprintf_r+0x568>)
  405330:	9226      	str	r2, [sp, #152]	; 0x98
  405332:	3110      	adds	r1, #16
  405334:	2a07      	cmp	r2, #7
  405336:	9127      	str	r1, [sp, #156]	; 0x9c
  405338:	e883 0081 	stmia.w	r3, {r0, r7}
  40533c:	ddef      	ble.n	40531e <_svfprintf_r+0x27a>
  40533e:	aa25      	add	r2, sp, #148	; 0x94
  405340:	4629      	mov	r1, r5
  405342:	4620      	mov	r0, r4
  405344:	f004 fe58 	bl	409ff8 <__ssprint_r>
  405348:	2800      	cmp	r0, #0
  40534a:	f47f af7d 	bne.w	405248 <_svfprintf_r+0x1a4>
  40534e:	f1ab 0b10 	sub.w	fp, fp, #16
  405352:	f1bb 0f10 	cmp.w	fp, #16
  405356:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405358:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40535a:	464b      	mov	r3, r9
  40535c:	dce6      	bgt.n	40532c <_svfprintf_r+0x288>
  40535e:	4645      	mov	r5, r8
  405360:	460c      	mov	r4, r1
  405362:	4698      	mov	r8, r3
  405364:	3201      	adds	r2, #1
  405366:	4ba9      	ldr	r3, [pc, #676]	; (40560c <_svfprintf_r+0x568>)
  405368:	9226      	str	r2, [sp, #152]	; 0x98
  40536a:	445c      	add	r4, fp
  40536c:	2a07      	cmp	r2, #7
  40536e:	9427      	str	r4, [sp, #156]	; 0x9c
  405370:	e888 0808 	stmia.w	r8, {r3, fp}
  405374:	f300 8495 	bgt.w	405ca2 <_svfprintf_r+0xbfe>
  405378:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40537c:	f108 0808 	add.w	r8, r8, #8
  405380:	b177      	cbz	r7, 4053a0 <_svfprintf_r+0x2fc>
  405382:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405384:	3301      	adds	r3, #1
  405386:	3401      	adds	r4, #1
  405388:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40538c:	2201      	movs	r2, #1
  40538e:	2b07      	cmp	r3, #7
  405390:	9427      	str	r4, [sp, #156]	; 0x9c
  405392:	9326      	str	r3, [sp, #152]	; 0x98
  405394:	e888 0006 	stmia.w	r8, {r1, r2}
  405398:	f300 83d8 	bgt.w	405b4c <_svfprintf_r+0xaa8>
  40539c:	f108 0808 	add.w	r8, r8, #8
  4053a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4053a2:	b16b      	cbz	r3, 4053c0 <_svfprintf_r+0x31c>
  4053a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4053a6:	3301      	adds	r3, #1
  4053a8:	3402      	adds	r4, #2
  4053aa:	a91e      	add	r1, sp, #120	; 0x78
  4053ac:	2202      	movs	r2, #2
  4053ae:	2b07      	cmp	r3, #7
  4053b0:	9427      	str	r4, [sp, #156]	; 0x9c
  4053b2:	9326      	str	r3, [sp, #152]	; 0x98
  4053b4:	e888 0006 	stmia.w	r8, {r1, r2}
  4053b8:	f300 83d3 	bgt.w	405b62 <_svfprintf_r+0xabe>
  4053bc:	f108 0808 	add.w	r8, r8, #8
  4053c0:	2d80      	cmp	r5, #128	; 0x80
  4053c2:	f000 8313 	beq.w	4059ec <_svfprintf_r+0x948>
  4053c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4053ca:	1a9f      	subs	r7, r3, r2
  4053cc:	2f00      	cmp	r7, #0
  4053ce:	dd36      	ble.n	40543e <_svfprintf_r+0x39a>
  4053d0:	2f10      	cmp	r7, #16
  4053d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4053d4:	4d8e      	ldr	r5, [pc, #568]	; (405610 <_svfprintf_r+0x56c>)
  4053d6:	dd27      	ble.n	405428 <_svfprintf_r+0x384>
  4053d8:	4642      	mov	r2, r8
  4053da:	4621      	mov	r1, r4
  4053dc:	46b0      	mov	r8, r6
  4053de:	f04f 0b10 	mov.w	fp, #16
  4053e2:	462e      	mov	r6, r5
  4053e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4053e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4053e8:	e004      	b.n	4053f4 <_svfprintf_r+0x350>
  4053ea:	3f10      	subs	r7, #16
  4053ec:	2f10      	cmp	r7, #16
  4053ee:	f102 0208 	add.w	r2, r2, #8
  4053f2:	dd15      	ble.n	405420 <_svfprintf_r+0x37c>
  4053f4:	3301      	adds	r3, #1
  4053f6:	3110      	adds	r1, #16
  4053f8:	2b07      	cmp	r3, #7
  4053fa:	9127      	str	r1, [sp, #156]	; 0x9c
  4053fc:	9326      	str	r3, [sp, #152]	; 0x98
  4053fe:	e882 0840 	stmia.w	r2, {r6, fp}
  405402:	ddf2      	ble.n	4053ea <_svfprintf_r+0x346>
  405404:	aa25      	add	r2, sp, #148	; 0x94
  405406:	4629      	mov	r1, r5
  405408:	4620      	mov	r0, r4
  40540a:	f004 fdf5 	bl	409ff8 <__ssprint_r>
  40540e:	2800      	cmp	r0, #0
  405410:	f47f af1a 	bne.w	405248 <_svfprintf_r+0x1a4>
  405414:	3f10      	subs	r7, #16
  405416:	2f10      	cmp	r7, #16
  405418:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40541a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40541c:	464a      	mov	r2, r9
  40541e:	dce9      	bgt.n	4053f4 <_svfprintf_r+0x350>
  405420:	4635      	mov	r5, r6
  405422:	460c      	mov	r4, r1
  405424:	4646      	mov	r6, r8
  405426:	4690      	mov	r8, r2
  405428:	3301      	adds	r3, #1
  40542a:	443c      	add	r4, r7
  40542c:	2b07      	cmp	r3, #7
  40542e:	9427      	str	r4, [sp, #156]	; 0x9c
  405430:	9326      	str	r3, [sp, #152]	; 0x98
  405432:	e888 00a0 	stmia.w	r8, {r5, r7}
  405436:	f300 837e 	bgt.w	405b36 <_svfprintf_r+0xa92>
  40543a:	f108 0808 	add.w	r8, r8, #8
  40543e:	9b07      	ldr	r3, [sp, #28]
  405440:	05df      	lsls	r7, r3, #23
  405442:	f100 8267 	bmi.w	405914 <_svfprintf_r+0x870>
  405446:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405448:	990e      	ldr	r1, [sp, #56]	; 0x38
  40544a:	f8c8 6000 	str.w	r6, [r8]
  40544e:	3301      	adds	r3, #1
  405450:	440c      	add	r4, r1
  405452:	2b07      	cmp	r3, #7
  405454:	9427      	str	r4, [sp, #156]	; 0x9c
  405456:	f8c8 1004 	str.w	r1, [r8, #4]
  40545a:	9326      	str	r3, [sp, #152]	; 0x98
  40545c:	f300 834a 	bgt.w	405af4 <_svfprintf_r+0xa50>
  405460:	f108 0808 	add.w	r8, r8, #8
  405464:	9b07      	ldr	r3, [sp, #28]
  405466:	075b      	lsls	r3, r3, #29
  405468:	d53a      	bpl.n	4054e0 <_svfprintf_r+0x43c>
  40546a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40546c:	9a08      	ldr	r2, [sp, #32]
  40546e:	1a9d      	subs	r5, r3, r2
  405470:	2d00      	cmp	r5, #0
  405472:	dd35      	ble.n	4054e0 <_svfprintf_r+0x43c>
  405474:	2d10      	cmp	r5, #16
  405476:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405478:	dd20      	ble.n	4054bc <_svfprintf_r+0x418>
  40547a:	2610      	movs	r6, #16
  40547c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40547e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  405482:	e004      	b.n	40548e <_svfprintf_r+0x3ea>
  405484:	3d10      	subs	r5, #16
  405486:	2d10      	cmp	r5, #16
  405488:	f108 0808 	add.w	r8, r8, #8
  40548c:	dd16      	ble.n	4054bc <_svfprintf_r+0x418>
  40548e:	3301      	adds	r3, #1
  405490:	4a5e      	ldr	r2, [pc, #376]	; (40560c <_svfprintf_r+0x568>)
  405492:	9326      	str	r3, [sp, #152]	; 0x98
  405494:	3410      	adds	r4, #16
  405496:	2b07      	cmp	r3, #7
  405498:	9427      	str	r4, [sp, #156]	; 0x9c
  40549a:	e888 0044 	stmia.w	r8, {r2, r6}
  40549e:	ddf1      	ble.n	405484 <_svfprintf_r+0x3e0>
  4054a0:	aa25      	add	r2, sp, #148	; 0x94
  4054a2:	4659      	mov	r1, fp
  4054a4:	4638      	mov	r0, r7
  4054a6:	f004 fda7 	bl	409ff8 <__ssprint_r>
  4054aa:	2800      	cmp	r0, #0
  4054ac:	f47f aecc 	bne.w	405248 <_svfprintf_r+0x1a4>
  4054b0:	3d10      	subs	r5, #16
  4054b2:	2d10      	cmp	r5, #16
  4054b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054b8:	46c8      	mov	r8, r9
  4054ba:	dce8      	bgt.n	40548e <_svfprintf_r+0x3ea>
  4054bc:	3301      	adds	r3, #1
  4054be:	4a53      	ldr	r2, [pc, #332]	; (40560c <_svfprintf_r+0x568>)
  4054c0:	9326      	str	r3, [sp, #152]	; 0x98
  4054c2:	442c      	add	r4, r5
  4054c4:	2b07      	cmp	r3, #7
  4054c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4054c8:	e888 0024 	stmia.w	r8, {r2, r5}
  4054cc:	dd08      	ble.n	4054e0 <_svfprintf_r+0x43c>
  4054ce:	aa25      	add	r2, sp, #148	; 0x94
  4054d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054d4:	f004 fd90 	bl	409ff8 <__ssprint_r>
  4054d8:	2800      	cmp	r0, #0
  4054da:	f47f aeb5 	bne.w	405248 <_svfprintf_r+0x1a4>
  4054de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4054e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4054e4:	9908      	ldr	r1, [sp, #32]
  4054e6:	428a      	cmp	r2, r1
  4054e8:	bfac      	ite	ge
  4054ea:	189b      	addge	r3, r3, r2
  4054ec:	185b      	addlt	r3, r3, r1
  4054ee:	9309      	str	r3, [sp, #36]	; 0x24
  4054f0:	2c00      	cmp	r4, #0
  4054f2:	f040 830a 	bne.w	405b0a <_svfprintf_r+0xa66>
  4054f6:	2300      	movs	r3, #0
  4054f8:	9326      	str	r3, [sp, #152]	; 0x98
  4054fa:	46c8      	mov	r8, r9
  4054fc:	e5f9      	b.n	4050f2 <_svfprintf_r+0x4e>
  4054fe:	9311      	str	r3, [sp, #68]	; 0x44
  405500:	f01b 0320 	ands.w	r3, fp, #32
  405504:	f040 81e2 	bne.w	4058cc <_svfprintf_r+0x828>
  405508:	f01b 0210 	ands.w	r2, fp, #16
  40550c:	f040 842c 	bne.w	405d68 <_svfprintf_r+0xcc4>
  405510:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  405514:	f000 8428 	beq.w	405d68 <_svfprintf_r+0xcc4>
  405518:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40551a:	4613      	mov	r3, r2
  40551c:	460a      	mov	r2, r1
  40551e:	3204      	adds	r2, #4
  405520:	880c      	ldrh	r4, [r1, #0]
  405522:	920f      	str	r2, [sp, #60]	; 0x3c
  405524:	2500      	movs	r5, #0
  405526:	e6b0      	b.n	40528a <_svfprintf_r+0x1e6>
  405528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40552a:	9311      	str	r3, [sp, #68]	; 0x44
  40552c:	6816      	ldr	r6, [r2, #0]
  40552e:	2400      	movs	r4, #0
  405530:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  405534:	1d15      	adds	r5, r2, #4
  405536:	2e00      	cmp	r6, #0
  405538:	f000 86a5 	beq.w	406286 <_svfprintf_r+0x11e2>
  40553c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40553e:	1c53      	adds	r3, r2, #1
  405540:	f000 8607 	beq.w	406152 <_svfprintf_r+0x10ae>
  405544:	4621      	mov	r1, r4
  405546:	4630      	mov	r0, r6
  405548:	f003 fe6a 	bl	409220 <memchr>
  40554c:	2800      	cmp	r0, #0
  40554e:	f000 86df 	beq.w	406310 <_svfprintf_r+0x126c>
  405552:	1b83      	subs	r3, r0, r6
  405554:	930e      	str	r3, [sp, #56]	; 0x38
  405556:	940a      	str	r4, [sp, #40]	; 0x28
  405558:	950f      	str	r5, [sp, #60]	; 0x3c
  40555a:	f8cd b01c 	str.w	fp, [sp, #28]
  40555e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405562:	9308      	str	r3, [sp, #32]
  405564:	9412      	str	r4, [sp, #72]	; 0x48
  405566:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40556a:	e6b3      	b.n	4052d4 <_svfprintf_r+0x230>
  40556c:	f89a 3000 	ldrb.w	r3, [sl]
  405570:	2201      	movs	r2, #1
  405572:	212b      	movs	r1, #43	; 0x2b
  405574:	e5ee      	b.n	405154 <_svfprintf_r+0xb0>
  405576:	f04b 0b20 	orr.w	fp, fp, #32
  40557a:	f89a 3000 	ldrb.w	r3, [sl]
  40557e:	e5e9      	b.n	405154 <_svfprintf_r+0xb0>
  405580:	9311      	str	r3, [sp, #68]	; 0x44
  405582:	2a00      	cmp	r2, #0
  405584:	f040 878d 	bne.w	4064a2 <_svfprintf_r+0x13fe>
  405588:	4b22      	ldr	r3, [pc, #136]	; (405614 <_svfprintf_r+0x570>)
  40558a:	9318      	str	r3, [sp, #96]	; 0x60
  40558c:	f01b 0f20 	tst.w	fp, #32
  405590:	f040 8111 	bne.w	4057b6 <_svfprintf_r+0x712>
  405594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405596:	f01b 0f10 	tst.w	fp, #16
  40559a:	4613      	mov	r3, r2
  40559c:	f040 83df 	bne.w	405d5e <_svfprintf_r+0xcba>
  4055a0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4055a4:	f000 83db 	beq.w	405d5e <_svfprintf_r+0xcba>
  4055a8:	3304      	adds	r3, #4
  4055aa:	8814      	ldrh	r4, [r2, #0]
  4055ac:	930f      	str	r3, [sp, #60]	; 0x3c
  4055ae:	2500      	movs	r5, #0
  4055b0:	f01b 0f01 	tst.w	fp, #1
  4055b4:	f000 810c 	beq.w	4057d0 <_svfprintf_r+0x72c>
  4055b8:	ea54 0305 	orrs.w	r3, r4, r5
  4055bc:	f000 8108 	beq.w	4057d0 <_svfprintf_r+0x72c>
  4055c0:	2330      	movs	r3, #48	; 0x30
  4055c2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4055c6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4055ca:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4055ce:	f04b 0b02 	orr.w	fp, fp, #2
  4055d2:	2302      	movs	r3, #2
  4055d4:	e659      	b.n	40528a <_svfprintf_r+0x1e6>
  4055d6:	f89a 3000 	ldrb.w	r3, [sl]
  4055da:	2900      	cmp	r1, #0
  4055dc:	f47f adba 	bne.w	405154 <_svfprintf_r+0xb0>
  4055e0:	2201      	movs	r2, #1
  4055e2:	2120      	movs	r1, #32
  4055e4:	e5b6      	b.n	405154 <_svfprintf_r+0xb0>
  4055e6:	f04b 0b01 	orr.w	fp, fp, #1
  4055ea:	f89a 3000 	ldrb.w	r3, [sl]
  4055ee:	e5b1      	b.n	405154 <_svfprintf_r+0xb0>
  4055f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4055f2:	6823      	ldr	r3, [r4, #0]
  4055f4:	930d      	str	r3, [sp, #52]	; 0x34
  4055f6:	4618      	mov	r0, r3
  4055f8:	2800      	cmp	r0, #0
  4055fa:	4623      	mov	r3, r4
  4055fc:	f103 0304 	add.w	r3, r3, #4
  405600:	f6ff ae0a 	blt.w	405218 <_svfprintf_r+0x174>
  405604:	930f      	str	r3, [sp, #60]	; 0x3c
  405606:	f89a 3000 	ldrb.w	r3, [sl]
  40560a:	e5a3      	b.n	405154 <_svfprintf_r+0xb0>
  40560c:	0040bfec 	.word	0x0040bfec
  405610:	0040bffc 	.word	0x0040bffc
  405614:	0040bfcc 	.word	0x0040bfcc
  405618:	f04b 0b10 	orr.w	fp, fp, #16
  40561c:	f01b 0f20 	tst.w	fp, #32
  405620:	9311      	str	r3, [sp, #68]	; 0x44
  405622:	f43f ae23 	beq.w	40526c <_svfprintf_r+0x1c8>
  405626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405628:	3507      	adds	r5, #7
  40562a:	f025 0307 	bic.w	r3, r5, #7
  40562e:	f103 0208 	add.w	r2, r3, #8
  405632:	e9d3 4500 	ldrd	r4, r5, [r3]
  405636:	920f      	str	r2, [sp, #60]	; 0x3c
  405638:	2301      	movs	r3, #1
  40563a:	e626      	b.n	40528a <_svfprintf_r+0x1e6>
  40563c:	f89a 3000 	ldrb.w	r3, [sl]
  405640:	2b2a      	cmp	r3, #42	; 0x2a
  405642:	f10a 0401 	add.w	r4, sl, #1
  405646:	f000 871f 	beq.w	406488 <_svfprintf_r+0x13e4>
  40564a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40564e:	2809      	cmp	r0, #9
  405650:	46a2      	mov	sl, r4
  405652:	f200 86ab 	bhi.w	4063ac <_svfprintf_r+0x1308>
  405656:	2300      	movs	r3, #0
  405658:	461c      	mov	r4, r3
  40565a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40565e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405662:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  405666:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40566a:	2809      	cmp	r0, #9
  40566c:	d9f5      	bls.n	40565a <_svfprintf_r+0x5b6>
  40566e:	940a      	str	r4, [sp, #40]	; 0x28
  405670:	e572      	b.n	405158 <_svfprintf_r+0xb4>
  405672:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  405676:	f89a 3000 	ldrb.w	r3, [sl]
  40567a:	e56b      	b.n	405154 <_svfprintf_r+0xb0>
  40567c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  405680:	f89a 3000 	ldrb.w	r3, [sl]
  405684:	e566      	b.n	405154 <_svfprintf_r+0xb0>
  405686:	f89a 3000 	ldrb.w	r3, [sl]
  40568a:	2b6c      	cmp	r3, #108	; 0x6c
  40568c:	bf03      	ittte	eq
  40568e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  405692:	f04b 0b20 	orreq.w	fp, fp, #32
  405696:	f10a 0a01 	addeq.w	sl, sl, #1
  40569a:	f04b 0b10 	orrne.w	fp, fp, #16
  40569e:	e559      	b.n	405154 <_svfprintf_r+0xb0>
  4056a0:	2a00      	cmp	r2, #0
  4056a2:	f040 8709 	bne.w	4064b8 <_svfprintf_r+0x1414>
  4056a6:	f01b 0f20 	tst.w	fp, #32
  4056aa:	f040 84f7 	bne.w	40609c <_svfprintf_r+0xff8>
  4056ae:	f01b 0f10 	tst.w	fp, #16
  4056b2:	f040 84aa 	bne.w	40600a <_svfprintf_r+0xf66>
  4056b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4056ba:	f000 84a6 	beq.w	40600a <_svfprintf_r+0xf66>
  4056be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4056c0:	6813      	ldr	r3, [r2, #0]
  4056c2:	3204      	adds	r2, #4
  4056c4:	920f      	str	r2, [sp, #60]	; 0x3c
  4056c6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4056ca:	801a      	strh	r2, [r3, #0]
  4056cc:	e511      	b.n	4050f2 <_svfprintf_r+0x4e>
  4056ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4056d0:	4bb2      	ldr	r3, [pc, #712]	; (40599c <_svfprintf_r+0x8f8>)
  4056d2:	680c      	ldr	r4, [r1, #0]
  4056d4:	9318      	str	r3, [sp, #96]	; 0x60
  4056d6:	2230      	movs	r2, #48	; 0x30
  4056d8:	2378      	movs	r3, #120	; 0x78
  4056da:	3104      	adds	r1, #4
  4056dc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4056e0:	9311      	str	r3, [sp, #68]	; 0x44
  4056e2:	f04b 0b02 	orr.w	fp, fp, #2
  4056e6:	910f      	str	r1, [sp, #60]	; 0x3c
  4056e8:	2500      	movs	r5, #0
  4056ea:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4056ee:	2302      	movs	r3, #2
  4056f0:	e5cb      	b.n	40528a <_svfprintf_r+0x1e6>
  4056f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4056f4:	9311      	str	r3, [sp, #68]	; 0x44
  4056f6:	680a      	ldr	r2, [r1, #0]
  4056f8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4056fc:	2300      	movs	r3, #0
  4056fe:	460a      	mov	r2, r1
  405700:	461f      	mov	r7, r3
  405702:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405706:	3204      	adds	r2, #4
  405708:	2301      	movs	r3, #1
  40570a:	9308      	str	r3, [sp, #32]
  40570c:	f8cd b01c 	str.w	fp, [sp, #28]
  405710:	970a      	str	r7, [sp, #40]	; 0x28
  405712:	9712      	str	r7, [sp, #72]	; 0x48
  405714:	920f      	str	r2, [sp, #60]	; 0x3c
  405716:	930e      	str	r3, [sp, #56]	; 0x38
  405718:	ae28      	add	r6, sp, #160	; 0xa0
  40571a:	e5df      	b.n	4052dc <_svfprintf_r+0x238>
  40571c:	9311      	str	r3, [sp, #68]	; 0x44
  40571e:	2a00      	cmp	r2, #0
  405720:	f040 86e2 	bne.w	4064e8 <_svfprintf_r+0x1444>
  405724:	f01b 0f20 	tst.w	fp, #32
  405728:	d15d      	bne.n	4057e6 <_svfprintf_r+0x742>
  40572a:	f01b 0f10 	tst.w	fp, #16
  40572e:	f040 8306 	bne.w	405d3e <_svfprintf_r+0xc9a>
  405732:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405736:	f000 8302 	beq.w	405d3e <_svfprintf_r+0xc9a>
  40573a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40573c:	f9b1 4000 	ldrsh.w	r4, [r1]
  405740:	3104      	adds	r1, #4
  405742:	17e5      	asrs	r5, r4, #31
  405744:	4622      	mov	r2, r4
  405746:	462b      	mov	r3, r5
  405748:	910f      	str	r1, [sp, #60]	; 0x3c
  40574a:	2a00      	cmp	r2, #0
  40574c:	f173 0300 	sbcs.w	r3, r3, #0
  405750:	db58      	blt.n	405804 <_svfprintf_r+0x760>
  405752:	990a      	ldr	r1, [sp, #40]	; 0x28
  405754:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405758:	1c4a      	adds	r2, r1, #1
  40575a:	f04f 0301 	mov.w	r3, #1
  40575e:	f47f ad9b 	bne.w	405298 <_svfprintf_r+0x1f4>
  405762:	ea54 0205 	orrs.w	r2, r4, r5
  405766:	f000 81dc 	beq.w	405b22 <_svfprintf_r+0xa7e>
  40576a:	f8cd b01c 	str.w	fp, [sp, #28]
  40576e:	2b01      	cmp	r3, #1
  405770:	f000 8278 	beq.w	405c64 <_svfprintf_r+0xbc0>
  405774:	2b02      	cmp	r3, #2
  405776:	f040 8203 	bne.w	405b80 <_svfprintf_r+0xadc>
  40577a:	9818      	ldr	r0, [sp, #96]	; 0x60
  40577c:	464e      	mov	r6, r9
  40577e:	0923      	lsrs	r3, r4, #4
  405780:	f004 010f 	and.w	r1, r4, #15
  405784:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405788:	092a      	lsrs	r2, r5, #4
  40578a:	461c      	mov	r4, r3
  40578c:	4615      	mov	r5, r2
  40578e:	5c43      	ldrb	r3, [r0, r1]
  405790:	f806 3d01 	strb.w	r3, [r6, #-1]!
  405794:	ea54 0305 	orrs.w	r3, r4, r5
  405798:	d1f1      	bne.n	40577e <_svfprintf_r+0x6da>
  40579a:	eba9 0306 	sub.w	r3, r9, r6
  40579e:	930e      	str	r3, [sp, #56]	; 0x38
  4057a0:	e590      	b.n	4052c4 <_svfprintf_r+0x220>
  4057a2:	9311      	str	r3, [sp, #68]	; 0x44
  4057a4:	2a00      	cmp	r2, #0
  4057a6:	f040 869b 	bne.w	4064e0 <_svfprintf_r+0x143c>
  4057aa:	4b7d      	ldr	r3, [pc, #500]	; (4059a0 <_svfprintf_r+0x8fc>)
  4057ac:	9318      	str	r3, [sp, #96]	; 0x60
  4057ae:	f01b 0f20 	tst.w	fp, #32
  4057b2:	f43f aeef 	beq.w	405594 <_svfprintf_r+0x4f0>
  4057b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4057b8:	3507      	adds	r5, #7
  4057ba:	f025 0307 	bic.w	r3, r5, #7
  4057be:	f103 0208 	add.w	r2, r3, #8
  4057c2:	f01b 0f01 	tst.w	fp, #1
  4057c6:	920f      	str	r2, [sp, #60]	; 0x3c
  4057c8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4057cc:	f47f aef4 	bne.w	4055b8 <_svfprintf_r+0x514>
  4057d0:	2302      	movs	r3, #2
  4057d2:	e55a      	b.n	40528a <_svfprintf_r+0x1e6>
  4057d4:	9311      	str	r3, [sp, #68]	; 0x44
  4057d6:	2a00      	cmp	r2, #0
  4057d8:	f040 867e 	bne.w	4064d8 <_svfprintf_r+0x1434>
  4057dc:	f04b 0b10 	orr.w	fp, fp, #16
  4057e0:	f01b 0f20 	tst.w	fp, #32
  4057e4:	d0a1      	beq.n	40572a <_svfprintf_r+0x686>
  4057e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4057e8:	3507      	adds	r5, #7
  4057ea:	f025 0507 	bic.w	r5, r5, #7
  4057ee:	e9d5 2300 	ldrd	r2, r3, [r5]
  4057f2:	2a00      	cmp	r2, #0
  4057f4:	f105 0108 	add.w	r1, r5, #8
  4057f8:	461d      	mov	r5, r3
  4057fa:	f173 0300 	sbcs.w	r3, r3, #0
  4057fe:	910f      	str	r1, [sp, #60]	; 0x3c
  405800:	4614      	mov	r4, r2
  405802:	daa6      	bge.n	405752 <_svfprintf_r+0x6ae>
  405804:	272d      	movs	r7, #45	; 0x2d
  405806:	4264      	negs	r4, r4
  405808:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40580c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405810:	2301      	movs	r3, #1
  405812:	e53d      	b.n	405290 <_svfprintf_r+0x1ec>
  405814:	9311      	str	r3, [sp, #68]	; 0x44
  405816:	2a00      	cmp	r2, #0
  405818:	f040 865a 	bne.w	4064d0 <_svfprintf_r+0x142c>
  40581c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40581e:	3507      	adds	r5, #7
  405820:	f025 0307 	bic.w	r3, r5, #7
  405824:	f103 0208 	add.w	r2, r3, #8
  405828:	920f      	str	r2, [sp, #60]	; 0x3c
  40582a:	681a      	ldr	r2, [r3, #0]
  40582c:	9214      	str	r2, [sp, #80]	; 0x50
  40582e:	685b      	ldr	r3, [r3, #4]
  405830:	9315      	str	r3, [sp, #84]	; 0x54
  405832:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405834:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405836:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40583a:	4628      	mov	r0, r5
  40583c:	4621      	mov	r1, r4
  40583e:	f04f 32ff 	mov.w	r2, #4294967295
  405842:	4b58      	ldr	r3, [pc, #352]	; (4059a4 <_svfprintf_r+0x900>)
  405844:	f005 fa74 	bl	40ad30 <__aeabi_dcmpun>
  405848:	2800      	cmp	r0, #0
  40584a:	f040 8348 	bne.w	405ede <_svfprintf_r+0xe3a>
  40584e:	4628      	mov	r0, r5
  405850:	4621      	mov	r1, r4
  405852:	f04f 32ff 	mov.w	r2, #4294967295
  405856:	4b53      	ldr	r3, [pc, #332]	; (4059a4 <_svfprintf_r+0x900>)
  405858:	f005 fa4c 	bl	40acf4 <__aeabi_dcmple>
  40585c:	2800      	cmp	r0, #0
  40585e:	f040 833e 	bne.w	405ede <_svfprintf_r+0xe3a>
  405862:	a814      	add	r0, sp, #80	; 0x50
  405864:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  405866:	f005 fa3b 	bl	40ace0 <__aeabi_dcmplt>
  40586a:	2800      	cmp	r0, #0
  40586c:	f040 852f 	bne.w	4062ce <_svfprintf_r+0x122a>
  405870:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405874:	4e4c      	ldr	r6, [pc, #304]	; (4059a8 <_svfprintf_r+0x904>)
  405876:	4b4d      	ldr	r3, [pc, #308]	; (4059ac <_svfprintf_r+0x908>)
  405878:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40587c:	9007      	str	r0, [sp, #28]
  40587e:	9811      	ldr	r0, [sp, #68]	; 0x44
  405880:	2203      	movs	r2, #3
  405882:	2100      	movs	r1, #0
  405884:	9208      	str	r2, [sp, #32]
  405886:	910a      	str	r1, [sp, #40]	; 0x28
  405888:	2847      	cmp	r0, #71	; 0x47
  40588a:	bfd8      	it	le
  40588c:	461e      	movle	r6, r3
  40588e:	920e      	str	r2, [sp, #56]	; 0x38
  405890:	9112      	str	r1, [sp, #72]	; 0x48
  405892:	e51f      	b.n	4052d4 <_svfprintf_r+0x230>
  405894:	f04b 0b08 	orr.w	fp, fp, #8
  405898:	f89a 3000 	ldrb.w	r3, [sl]
  40589c:	e45a      	b.n	405154 <_svfprintf_r+0xb0>
  40589e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4058a2:	2300      	movs	r3, #0
  4058a4:	461c      	mov	r4, r3
  4058a6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4058aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4058ae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4058b2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4058b6:	2809      	cmp	r0, #9
  4058b8:	d9f5      	bls.n	4058a6 <_svfprintf_r+0x802>
  4058ba:	940d      	str	r4, [sp, #52]	; 0x34
  4058bc:	e44c      	b.n	405158 <_svfprintf_r+0xb4>
  4058be:	f04b 0b10 	orr.w	fp, fp, #16
  4058c2:	9311      	str	r3, [sp, #68]	; 0x44
  4058c4:	f01b 0320 	ands.w	r3, fp, #32
  4058c8:	f43f ae1e 	beq.w	405508 <_svfprintf_r+0x464>
  4058cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4058ce:	3507      	adds	r5, #7
  4058d0:	f025 0307 	bic.w	r3, r5, #7
  4058d4:	f103 0208 	add.w	r2, r3, #8
  4058d8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4058dc:	920f      	str	r2, [sp, #60]	; 0x3c
  4058de:	2300      	movs	r3, #0
  4058e0:	e4d3      	b.n	40528a <_svfprintf_r+0x1e6>
  4058e2:	9311      	str	r3, [sp, #68]	; 0x44
  4058e4:	2a00      	cmp	r2, #0
  4058e6:	f040 85e0 	bne.w	4064aa <_svfprintf_r+0x1406>
  4058ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4058ec:	2a00      	cmp	r2, #0
  4058ee:	f43f aca4 	beq.w	40523a <_svfprintf_r+0x196>
  4058f2:	2300      	movs	r3, #0
  4058f4:	2101      	movs	r1, #1
  4058f6:	461f      	mov	r7, r3
  4058f8:	9108      	str	r1, [sp, #32]
  4058fa:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4058fe:	f8cd b01c 	str.w	fp, [sp, #28]
  405902:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405906:	930a      	str	r3, [sp, #40]	; 0x28
  405908:	9312      	str	r3, [sp, #72]	; 0x48
  40590a:	910e      	str	r1, [sp, #56]	; 0x38
  40590c:	ae28      	add	r6, sp, #160	; 0xa0
  40590e:	e4e5      	b.n	4052dc <_svfprintf_r+0x238>
  405910:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405912:	e535      	b.n	405380 <_svfprintf_r+0x2dc>
  405914:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405916:	2b65      	cmp	r3, #101	; 0x65
  405918:	f340 80a6 	ble.w	405a68 <_svfprintf_r+0x9c4>
  40591c:	a814      	add	r0, sp, #80	; 0x50
  40591e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  405920:	f005 f9d4 	bl	40accc <__aeabi_dcmpeq>
  405924:	2800      	cmp	r0, #0
  405926:	f000 814f 	beq.w	405bc8 <_svfprintf_r+0xb24>
  40592a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40592c:	4a20      	ldr	r2, [pc, #128]	; (4059b0 <_svfprintf_r+0x90c>)
  40592e:	f8c8 2000 	str.w	r2, [r8]
  405932:	3301      	adds	r3, #1
  405934:	3401      	adds	r4, #1
  405936:	2201      	movs	r2, #1
  405938:	2b07      	cmp	r3, #7
  40593a:	9427      	str	r4, [sp, #156]	; 0x9c
  40593c:	9326      	str	r3, [sp, #152]	; 0x98
  40593e:	f8c8 2004 	str.w	r2, [r8, #4]
  405942:	f300 836a 	bgt.w	40601a <_svfprintf_r+0xf76>
  405946:	f108 0808 	add.w	r8, r8, #8
  40594a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40594c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40594e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405950:	4293      	cmp	r3, r2
  405952:	db03      	blt.n	40595c <_svfprintf_r+0x8b8>
  405954:	9b07      	ldr	r3, [sp, #28]
  405956:	07dd      	lsls	r5, r3, #31
  405958:	f57f ad84 	bpl.w	405464 <_svfprintf_r+0x3c0>
  40595c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40595e:	9919      	ldr	r1, [sp, #100]	; 0x64
  405960:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405962:	f8c8 2000 	str.w	r2, [r8]
  405966:	3301      	adds	r3, #1
  405968:	440c      	add	r4, r1
  40596a:	2b07      	cmp	r3, #7
  40596c:	f8c8 1004 	str.w	r1, [r8, #4]
  405970:	9427      	str	r4, [sp, #156]	; 0x9c
  405972:	9326      	str	r3, [sp, #152]	; 0x98
  405974:	f300 839e 	bgt.w	4060b4 <_svfprintf_r+0x1010>
  405978:	f108 0808 	add.w	r8, r8, #8
  40597c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40597e:	1e5e      	subs	r6, r3, #1
  405980:	2e00      	cmp	r6, #0
  405982:	f77f ad6f 	ble.w	405464 <_svfprintf_r+0x3c0>
  405986:	2e10      	cmp	r6, #16
  405988:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40598a:	4d0a      	ldr	r5, [pc, #40]	; (4059b4 <_svfprintf_r+0x910>)
  40598c:	f340 81f5 	ble.w	405d7a <_svfprintf_r+0xcd6>
  405990:	4622      	mov	r2, r4
  405992:	2710      	movs	r7, #16
  405994:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405998:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40599a:	e013      	b.n	4059c4 <_svfprintf_r+0x920>
  40599c:	0040bfcc 	.word	0x0040bfcc
  4059a0:	0040bfb8 	.word	0x0040bfb8
  4059a4:	7fefffff 	.word	0x7fefffff
  4059a8:	0040bfac 	.word	0x0040bfac
  4059ac:	0040bfa8 	.word	0x0040bfa8
  4059b0:	0040bfe8 	.word	0x0040bfe8
  4059b4:	0040bffc 	.word	0x0040bffc
  4059b8:	f108 0808 	add.w	r8, r8, #8
  4059bc:	3e10      	subs	r6, #16
  4059be:	2e10      	cmp	r6, #16
  4059c0:	f340 81da 	ble.w	405d78 <_svfprintf_r+0xcd4>
  4059c4:	3301      	adds	r3, #1
  4059c6:	3210      	adds	r2, #16
  4059c8:	2b07      	cmp	r3, #7
  4059ca:	9227      	str	r2, [sp, #156]	; 0x9c
  4059cc:	9326      	str	r3, [sp, #152]	; 0x98
  4059ce:	e888 00a0 	stmia.w	r8, {r5, r7}
  4059d2:	ddf1      	ble.n	4059b8 <_svfprintf_r+0x914>
  4059d4:	aa25      	add	r2, sp, #148	; 0x94
  4059d6:	4621      	mov	r1, r4
  4059d8:	4658      	mov	r0, fp
  4059da:	f004 fb0d 	bl	409ff8 <__ssprint_r>
  4059de:	2800      	cmp	r0, #0
  4059e0:	f47f ac32 	bne.w	405248 <_svfprintf_r+0x1a4>
  4059e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4059e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059e8:	46c8      	mov	r8, r9
  4059ea:	e7e7      	b.n	4059bc <_svfprintf_r+0x918>
  4059ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059ee:	9a08      	ldr	r2, [sp, #32]
  4059f0:	1a9f      	subs	r7, r3, r2
  4059f2:	2f00      	cmp	r7, #0
  4059f4:	f77f ace7 	ble.w	4053c6 <_svfprintf_r+0x322>
  4059f8:	2f10      	cmp	r7, #16
  4059fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059fc:	4db6      	ldr	r5, [pc, #728]	; (405cd8 <_svfprintf_r+0xc34>)
  4059fe:	dd27      	ble.n	405a50 <_svfprintf_r+0x9ac>
  405a00:	4642      	mov	r2, r8
  405a02:	4621      	mov	r1, r4
  405a04:	46b0      	mov	r8, r6
  405a06:	f04f 0b10 	mov.w	fp, #16
  405a0a:	462e      	mov	r6, r5
  405a0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405a0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405a10:	e004      	b.n	405a1c <_svfprintf_r+0x978>
  405a12:	3f10      	subs	r7, #16
  405a14:	2f10      	cmp	r7, #16
  405a16:	f102 0208 	add.w	r2, r2, #8
  405a1a:	dd15      	ble.n	405a48 <_svfprintf_r+0x9a4>
  405a1c:	3301      	adds	r3, #1
  405a1e:	3110      	adds	r1, #16
  405a20:	2b07      	cmp	r3, #7
  405a22:	9127      	str	r1, [sp, #156]	; 0x9c
  405a24:	9326      	str	r3, [sp, #152]	; 0x98
  405a26:	e882 0840 	stmia.w	r2, {r6, fp}
  405a2a:	ddf2      	ble.n	405a12 <_svfprintf_r+0x96e>
  405a2c:	aa25      	add	r2, sp, #148	; 0x94
  405a2e:	4629      	mov	r1, r5
  405a30:	4620      	mov	r0, r4
  405a32:	f004 fae1 	bl	409ff8 <__ssprint_r>
  405a36:	2800      	cmp	r0, #0
  405a38:	f47f ac06 	bne.w	405248 <_svfprintf_r+0x1a4>
  405a3c:	3f10      	subs	r7, #16
  405a3e:	2f10      	cmp	r7, #16
  405a40:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a44:	464a      	mov	r2, r9
  405a46:	dce9      	bgt.n	405a1c <_svfprintf_r+0x978>
  405a48:	4635      	mov	r5, r6
  405a4a:	460c      	mov	r4, r1
  405a4c:	4646      	mov	r6, r8
  405a4e:	4690      	mov	r8, r2
  405a50:	3301      	adds	r3, #1
  405a52:	443c      	add	r4, r7
  405a54:	2b07      	cmp	r3, #7
  405a56:	9427      	str	r4, [sp, #156]	; 0x9c
  405a58:	9326      	str	r3, [sp, #152]	; 0x98
  405a5a:	e888 00a0 	stmia.w	r8, {r5, r7}
  405a5e:	f300 8232 	bgt.w	405ec6 <_svfprintf_r+0xe22>
  405a62:	f108 0808 	add.w	r8, r8, #8
  405a66:	e4ae      	b.n	4053c6 <_svfprintf_r+0x322>
  405a68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405a6a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405a6c:	2b01      	cmp	r3, #1
  405a6e:	f340 81fe 	ble.w	405e6e <_svfprintf_r+0xdca>
  405a72:	3701      	adds	r7, #1
  405a74:	3401      	adds	r4, #1
  405a76:	2301      	movs	r3, #1
  405a78:	2f07      	cmp	r7, #7
  405a7a:	9427      	str	r4, [sp, #156]	; 0x9c
  405a7c:	9726      	str	r7, [sp, #152]	; 0x98
  405a7e:	f8c8 6000 	str.w	r6, [r8]
  405a82:	f8c8 3004 	str.w	r3, [r8, #4]
  405a86:	f300 8203 	bgt.w	405e90 <_svfprintf_r+0xdec>
  405a8a:	f108 0808 	add.w	r8, r8, #8
  405a8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405a90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  405a92:	f8c8 3000 	str.w	r3, [r8]
  405a96:	3701      	adds	r7, #1
  405a98:	4414      	add	r4, r2
  405a9a:	2f07      	cmp	r7, #7
  405a9c:	9427      	str	r4, [sp, #156]	; 0x9c
  405a9e:	9726      	str	r7, [sp, #152]	; 0x98
  405aa0:	f8c8 2004 	str.w	r2, [r8, #4]
  405aa4:	f300 8200 	bgt.w	405ea8 <_svfprintf_r+0xe04>
  405aa8:	f108 0808 	add.w	r8, r8, #8
  405aac:	a814      	add	r0, sp, #80	; 0x50
  405aae:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  405ab0:	f005 f90c 	bl	40accc <__aeabi_dcmpeq>
  405ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405ab6:	2800      	cmp	r0, #0
  405ab8:	f040 8101 	bne.w	405cbe <_svfprintf_r+0xc1a>
  405abc:	3b01      	subs	r3, #1
  405abe:	3701      	adds	r7, #1
  405ac0:	3601      	adds	r6, #1
  405ac2:	441c      	add	r4, r3
  405ac4:	2f07      	cmp	r7, #7
  405ac6:	9726      	str	r7, [sp, #152]	; 0x98
  405ac8:	9427      	str	r4, [sp, #156]	; 0x9c
  405aca:	f8c8 6000 	str.w	r6, [r8]
  405ace:	f8c8 3004 	str.w	r3, [r8, #4]
  405ad2:	f300 8128 	bgt.w	405d26 <_svfprintf_r+0xc82>
  405ad6:	f108 0808 	add.w	r8, r8, #8
  405ada:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  405adc:	f8c8 2004 	str.w	r2, [r8, #4]
  405ae0:	3701      	adds	r7, #1
  405ae2:	4414      	add	r4, r2
  405ae4:	ab21      	add	r3, sp, #132	; 0x84
  405ae6:	2f07      	cmp	r7, #7
  405ae8:	9427      	str	r4, [sp, #156]	; 0x9c
  405aea:	9726      	str	r7, [sp, #152]	; 0x98
  405aec:	f8c8 3000 	str.w	r3, [r8]
  405af0:	f77f acb6 	ble.w	405460 <_svfprintf_r+0x3bc>
  405af4:	aa25      	add	r2, sp, #148	; 0x94
  405af6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405af8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405afa:	f004 fa7d 	bl	409ff8 <__ssprint_r>
  405afe:	2800      	cmp	r0, #0
  405b00:	f47f aba2 	bne.w	405248 <_svfprintf_r+0x1a4>
  405b04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405b06:	46c8      	mov	r8, r9
  405b08:	e4ac      	b.n	405464 <_svfprintf_r+0x3c0>
  405b0a:	aa25      	add	r2, sp, #148	; 0x94
  405b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b10:	f004 fa72 	bl	409ff8 <__ssprint_r>
  405b14:	2800      	cmp	r0, #0
  405b16:	f43f acee 	beq.w	4054f6 <_svfprintf_r+0x452>
  405b1a:	f7ff bb95 	b.w	405248 <_svfprintf_r+0x1a4>
  405b1e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405b22:	2b01      	cmp	r3, #1
  405b24:	f000 8135 	beq.w	405d92 <_svfprintf_r+0xcee>
  405b28:	2b02      	cmp	r3, #2
  405b2a:	d125      	bne.n	405b78 <_svfprintf_r+0xad4>
  405b2c:	f8cd b01c 	str.w	fp, [sp, #28]
  405b30:	2400      	movs	r4, #0
  405b32:	2500      	movs	r5, #0
  405b34:	e621      	b.n	40577a <_svfprintf_r+0x6d6>
  405b36:	aa25      	add	r2, sp, #148	; 0x94
  405b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b3a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b3c:	f004 fa5c 	bl	409ff8 <__ssprint_r>
  405b40:	2800      	cmp	r0, #0
  405b42:	f47f ab81 	bne.w	405248 <_svfprintf_r+0x1a4>
  405b46:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405b48:	46c8      	mov	r8, r9
  405b4a:	e478      	b.n	40543e <_svfprintf_r+0x39a>
  405b4c:	aa25      	add	r2, sp, #148	; 0x94
  405b4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b50:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b52:	f004 fa51 	bl	409ff8 <__ssprint_r>
  405b56:	2800      	cmp	r0, #0
  405b58:	f47f ab76 	bne.w	405248 <_svfprintf_r+0x1a4>
  405b5c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405b5e:	46c8      	mov	r8, r9
  405b60:	e41e      	b.n	4053a0 <_svfprintf_r+0x2fc>
  405b62:	aa25      	add	r2, sp, #148	; 0x94
  405b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b66:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b68:	f004 fa46 	bl	409ff8 <__ssprint_r>
  405b6c:	2800      	cmp	r0, #0
  405b6e:	f47f ab6b 	bne.w	405248 <_svfprintf_r+0x1a4>
  405b72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405b74:	46c8      	mov	r8, r9
  405b76:	e423      	b.n	4053c0 <_svfprintf_r+0x31c>
  405b78:	f8cd b01c 	str.w	fp, [sp, #28]
  405b7c:	2400      	movs	r4, #0
  405b7e:	2500      	movs	r5, #0
  405b80:	4649      	mov	r1, r9
  405b82:	e000      	b.n	405b86 <_svfprintf_r+0xae2>
  405b84:	4631      	mov	r1, r6
  405b86:	08e2      	lsrs	r2, r4, #3
  405b88:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405b8c:	08e8      	lsrs	r0, r5, #3
  405b8e:	f004 0307 	and.w	r3, r4, #7
  405b92:	4605      	mov	r5, r0
  405b94:	4614      	mov	r4, r2
  405b96:	3330      	adds	r3, #48	; 0x30
  405b98:	ea54 0205 	orrs.w	r2, r4, r5
  405b9c:	f801 3c01 	strb.w	r3, [r1, #-1]
  405ba0:	f101 36ff 	add.w	r6, r1, #4294967295
  405ba4:	d1ee      	bne.n	405b84 <_svfprintf_r+0xae0>
  405ba6:	9a07      	ldr	r2, [sp, #28]
  405ba8:	07d2      	lsls	r2, r2, #31
  405baa:	f57f adf6 	bpl.w	40579a <_svfprintf_r+0x6f6>
  405bae:	2b30      	cmp	r3, #48	; 0x30
  405bb0:	f43f adf3 	beq.w	40579a <_svfprintf_r+0x6f6>
  405bb4:	3902      	subs	r1, #2
  405bb6:	2330      	movs	r3, #48	; 0x30
  405bb8:	f806 3c01 	strb.w	r3, [r6, #-1]
  405bbc:	eba9 0301 	sub.w	r3, r9, r1
  405bc0:	930e      	str	r3, [sp, #56]	; 0x38
  405bc2:	460e      	mov	r6, r1
  405bc4:	f7ff bb7e 	b.w	4052c4 <_svfprintf_r+0x220>
  405bc8:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405bca:	2900      	cmp	r1, #0
  405bcc:	f340 822f 	ble.w	40602e <_svfprintf_r+0xf8a>
  405bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405bd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405bd4:	4293      	cmp	r3, r2
  405bd6:	bfa8      	it	ge
  405bd8:	4613      	movge	r3, r2
  405bda:	2b00      	cmp	r3, #0
  405bdc:	461f      	mov	r7, r3
  405bde:	dd0d      	ble.n	405bfc <_svfprintf_r+0xb58>
  405be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405be2:	f8c8 6000 	str.w	r6, [r8]
  405be6:	3301      	adds	r3, #1
  405be8:	443c      	add	r4, r7
  405bea:	2b07      	cmp	r3, #7
  405bec:	9427      	str	r4, [sp, #156]	; 0x9c
  405bee:	f8c8 7004 	str.w	r7, [r8, #4]
  405bf2:	9326      	str	r3, [sp, #152]	; 0x98
  405bf4:	f300 8320 	bgt.w	406238 <_svfprintf_r+0x1194>
  405bf8:	f108 0808 	add.w	r8, r8, #8
  405bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405bfe:	2f00      	cmp	r7, #0
  405c00:	bfa8      	it	ge
  405c02:	1bdb      	subge	r3, r3, r7
  405c04:	2b00      	cmp	r3, #0
  405c06:	461f      	mov	r7, r3
  405c08:	f340 80d7 	ble.w	405dba <_svfprintf_r+0xd16>
  405c0c:	2f10      	cmp	r7, #16
  405c0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c10:	4d31      	ldr	r5, [pc, #196]	; (405cd8 <_svfprintf_r+0xc34>)
  405c12:	f340 81ee 	ble.w	405ff2 <_svfprintf_r+0xf4e>
  405c16:	4642      	mov	r2, r8
  405c18:	4621      	mov	r1, r4
  405c1a:	46b0      	mov	r8, r6
  405c1c:	f04f 0b10 	mov.w	fp, #16
  405c20:	462e      	mov	r6, r5
  405c22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405c24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405c26:	e004      	b.n	405c32 <_svfprintf_r+0xb8e>
  405c28:	3208      	adds	r2, #8
  405c2a:	3f10      	subs	r7, #16
  405c2c:	2f10      	cmp	r7, #16
  405c2e:	f340 81dc 	ble.w	405fea <_svfprintf_r+0xf46>
  405c32:	3301      	adds	r3, #1
  405c34:	3110      	adds	r1, #16
  405c36:	2b07      	cmp	r3, #7
  405c38:	9127      	str	r1, [sp, #156]	; 0x9c
  405c3a:	9326      	str	r3, [sp, #152]	; 0x98
  405c3c:	e882 0840 	stmia.w	r2, {r6, fp}
  405c40:	ddf2      	ble.n	405c28 <_svfprintf_r+0xb84>
  405c42:	aa25      	add	r2, sp, #148	; 0x94
  405c44:	4629      	mov	r1, r5
  405c46:	4620      	mov	r0, r4
  405c48:	f004 f9d6 	bl	409ff8 <__ssprint_r>
  405c4c:	2800      	cmp	r0, #0
  405c4e:	f47f aafb 	bne.w	405248 <_svfprintf_r+0x1a4>
  405c52:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405c54:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c56:	464a      	mov	r2, r9
  405c58:	e7e7      	b.n	405c2a <_svfprintf_r+0xb86>
  405c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c5c:	930e      	str	r3, [sp, #56]	; 0x38
  405c5e:	464e      	mov	r6, r9
  405c60:	f7ff bb30 	b.w	4052c4 <_svfprintf_r+0x220>
  405c64:	2d00      	cmp	r5, #0
  405c66:	bf08      	it	eq
  405c68:	2c0a      	cmpeq	r4, #10
  405c6a:	f0c0 8090 	bcc.w	405d8e <_svfprintf_r+0xcea>
  405c6e:	464e      	mov	r6, r9
  405c70:	4620      	mov	r0, r4
  405c72:	4629      	mov	r1, r5
  405c74:	220a      	movs	r2, #10
  405c76:	2300      	movs	r3, #0
  405c78:	f005 f898 	bl	40adac <__aeabi_uldivmod>
  405c7c:	3230      	adds	r2, #48	; 0x30
  405c7e:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405c82:	4620      	mov	r0, r4
  405c84:	4629      	mov	r1, r5
  405c86:	2300      	movs	r3, #0
  405c88:	220a      	movs	r2, #10
  405c8a:	f005 f88f 	bl	40adac <__aeabi_uldivmod>
  405c8e:	4604      	mov	r4, r0
  405c90:	460d      	mov	r5, r1
  405c92:	ea54 0305 	orrs.w	r3, r4, r5
  405c96:	d1eb      	bne.n	405c70 <_svfprintf_r+0xbcc>
  405c98:	eba9 0306 	sub.w	r3, r9, r6
  405c9c:	930e      	str	r3, [sp, #56]	; 0x38
  405c9e:	f7ff bb11 	b.w	4052c4 <_svfprintf_r+0x220>
  405ca2:	aa25      	add	r2, sp, #148	; 0x94
  405ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ca8:	f004 f9a6 	bl	409ff8 <__ssprint_r>
  405cac:	2800      	cmp	r0, #0
  405cae:	f47f aacb 	bne.w	405248 <_svfprintf_r+0x1a4>
  405cb2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405cb6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405cb8:	46c8      	mov	r8, r9
  405cba:	f7ff bb61 	b.w	405380 <_svfprintf_r+0x2dc>
  405cbe:	1e5e      	subs	r6, r3, #1
  405cc0:	2e00      	cmp	r6, #0
  405cc2:	f77f af0a 	ble.w	405ada <_svfprintf_r+0xa36>
  405cc6:	2e10      	cmp	r6, #16
  405cc8:	4d03      	ldr	r5, [pc, #12]	; (405cd8 <_svfprintf_r+0xc34>)
  405cca:	dd23      	ble.n	405d14 <_svfprintf_r+0xc70>
  405ccc:	4622      	mov	r2, r4
  405cce:	f04f 0b10 	mov.w	fp, #16
  405cd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405cd4:	e007      	b.n	405ce6 <_svfprintf_r+0xc42>
  405cd6:	bf00      	nop
  405cd8:	0040bffc 	.word	0x0040bffc
  405cdc:	3e10      	subs	r6, #16
  405cde:	2e10      	cmp	r6, #16
  405ce0:	f108 0808 	add.w	r8, r8, #8
  405ce4:	dd15      	ble.n	405d12 <_svfprintf_r+0xc6e>
  405ce6:	3701      	adds	r7, #1
  405ce8:	3210      	adds	r2, #16
  405cea:	2f07      	cmp	r7, #7
  405cec:	9227      	str	r2, [sp, #156]	; 0x9c
  405cee:	9726      	str	r7, [sp, #152]	; 0x98
  405cf0:	e888 0820 	stmia.w	r8, {r5, fp}
  405cf4:	ddf2      	ble.n	405cdc <_svfprintf_r+0xc38>
  405cf6:	aa25      	add	r2, sp, #148	; 0x94
  405cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405cfa:	4620      	mov	r0, r4
  405cfc:	f004 f97c 	bl	409ff8 <__ssprint_r>
  405d00:	2800      	cmp	r0, #0
  405d02:	f47f aaa1 	bne.w	405248 <_svfprintf_r+0x1a4>
  405d06:	3e10      	subs	r6, #16
  405d08:	2e10      	cmp	r6, #16
  405d0a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405d0c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405d0e:	46c8      	mov	r8, r9
  405d10:	dce9      	bgt.n	405ce6 <_svfprintf_r+0xc42>
  405d12:	4614      	mov	r4, r2
  405d14:	3701      	adds	r7, #1
  405d16:	4434      	add	r4, r6
  405d18:	2f07      	cmp	r7, #7
  405d1a:	9427      	str	r4, [sp, #156]	; 0x9c
  405d1c:	9726      	str	r7, [sp, #152]	; 0x98
  405d1e:	e888 0060 	stmia.w	r8, {r5, r6}
  405d22:	f77f aed8 	ble.w	405ad6 <_svfprintf_r+0xa32>
  405d26:	aa25      	add	r2, sp, #148	; 0x94
  405d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405d2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405d2c:	f004 f964 	bl	409ff8 <__ssprint_r>
  405d30:	2800      	cmp	r0, #0
  405d32:	f47f aa89 	bne.w	405248 <_svfprintf_r+0x1a4>
  405d36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405d38:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405d3a:	46c8      	mov	r8, r9
  405d3c:	e6cd      	b.n	405ada <_svfprintf_r+0xa36>
  405d3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d40:	6814      	ldr	r4, [r2, #0]
  405d42:	4613      	mov	r3, r2
  405d44:	3304      	adds	r3, #4
  405d46:	17e5      	asrs	r5, r4, #31
  405d48:	930f      	str	r3, [sp, #60]	; 0x3c
  405d4a:	4622      	mov	r2, r4
  405d4c:	462b      	mov	r3, r5
  405d4e:	e4fc      	b.n	40574a <_svfprintf_r+0x6a6>
  405d50:	3204      	adds	r2, #4
  405d52:	681c      	ldr	r4, [r3, #0]
  405d54:	920f      	str	r2, [sp, #60]	; 0x3c
  405d56:	2301      	movs	r3, #1
  405d58:	2500      	movs	r5, #0
  405d5a:	f7ff ba96 	b.w	40528a <_svfprintf_r+0x1e6>
  405d5e:	681c      	ldr	r4, [r3, #0]
  405d60:	3304      	adds	r3, #4
  405d62:	930f      	str	r3, [sp, #60]	; 0x3c
  405d64:	2500      	movs	r5, #0
  405d66:	e423      	b.n	4055b0 <_svfprintf_r+0x50c>
  405d68:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405d6a:	460a      	mov	r2, r1
  405d6c:	3204      	adds	r2, #4
  405d6e:	680c      	ldr	r4, [r1, #0]
  405d70:	920f      	str	r2, [sp, #60]	; 0x3c
  405d72:	2500      	movs	r5, #0
  405d74:	f7ff ba89 	b.w	40528a <_svfprintf_r+0x1e6>
  405d78:	4614      	mov	r4, r2
  405d7a:	3301      	adds	r3, #1
  405d7c:	4434      	add	r4, r6
  405d7e:	2b07      	cmp	r3, #7
  405d80:	9427      	str	r4, [sp, #156]	; 0x9c
  405d82:	9326      	str	r3, [sp, #152]	; 0x98
  405d84:	e888 0060 	stmia.w	r8, {r5, r6}
  405d88:	f77f ab6a 	ble.w	405460 <_svfprintf_r+0x3bc>
  405d8c:	e6b2      	b.n	405af4 <_svfprintf_r+0xa50>
  405d8e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405d92:	f8cd b01c 	str.w	fp, [sp, #28]
  405d96:	ae42      	add	r6, sp, #264	; 0x108
  405d98:	3430      	adds	r4, #48	; 0x30
  405d9a:	2301      	movs	r3, #1
  405d9c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405da0:	930e      	str	r3, [sp, #56]	; 0x38
  405da2:	f7ff ba8f 	b.w	4052c4 <_svfprintf_r+0x220>
  405da6:	aa25      	add	r2, sp, #148	; 0x94
  405da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405daa:	980c      	ldr	r0, [sp, #48]	; 0x30
  405dac:	f004 f924 	bl	409ff8 <__ssprint_r>
  405db0:	2800      	cmp	r0, #0
  405db2:	f47f aa49 	bne.w	405248 <_svfprintf_r+0x1a4>
  405db6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405db8:	46c8      	mov	r8, r9
  405dba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405dbe:	429a      	cmp	r2, r3
  405dc0:	db44      	blt.n	405e4c <_svfprintf_r+0xda8>
  405dc2:	9b07      	ldr	r3, [sp, #28]
  405dc4:	07d9      	lsls	r1, r3, #31
  405dc6:	d441      	bmi.n	405e4c <_svfprintf_r+0xda8>
  405dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405dca:	9812      	ldr	r0, [sp, #72]	; 0x48
  405dcc:	1a9a      	subs	r2, r3, r2
  405dce:	1a1d      	subs	r5, r3, r0
  405dd0:	4295      	cmp	r5, r2
  405dd2:	bfa8      	it	ge
  405dd4:	4615      	movge	r5, r2
  405dd6:	2d00      	cmp	r5, #0
  405dd8:	dd0e      	ble.n	405df8 <_svfprintf_r+0xd54>
  405dda:	9926      	ldr	r1, [sp, #152]	; 0x98
  405ddc:	f8c8 5004 	str.w	r5, [r8, #4]
  405de0:	3101      	adds	r1, #1
  405de2:	4406      	add	r6, r0
  405de4:	442c      	add	r4, r5
  405de6:	2907      	cmp	r1, #7
  405de8:	f8c8 6000 	str.w	r6, [r8]
  405dec:	9427      	str	r4, [sp, #156]	; 0x9c
  405dee:	9126      	str	r1, [sp, #152]	; 0x98
  405df0:	f300 823b 	bgt.w	40626a <_svfprintf_r+0x11c6>
  405df4:	f108 0808 	add.w	r8, r8, #8
  405df8:	2d00      	cmp	r5, #0
  405dfa:	bfac      	ite	ge
  405dfc:	1b56      	subge	r6, r2, r5
  405dfe:	4616      	movlt	r6, r2
  405e00:	2e00      	cmp	r6, #0
  405e02:	f77f ab2f 	ble.w	405464 <_svfprintf_r+0x3c0>
  405e06:	2e10      	cmp	r6, #16
  405e08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e0a:	4db0      	ldr	r5, [pc, #704]	; (4060cc <_svfprintf_r+0x1028>)
  405e0c:	ddb5      	ble.n	405d7a <_svfprintf_r+0xcd6>
  405e0e:	4622      	mov	r2, r4
  405e10:	2710      	movs	r7, #16
  405e12:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405e16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405e18:	e004      	b.n	405e24 <_svfprintf_r+0xd80>
  405e1a:	f108 0808 	add.w	r8, r8, #8
  405e1e:	3e10      	subs	r6, #16
  405e20:	2e10      	cmp	r6, #16
  405e22:	dda9      	ble.n	405d78 <_svfprintf_r+0xcd4>
  405e24:	3301      	adds	r3, #1
  405e26:	3210      	adds	r2, #16
  405e28:	2b07      	cmp	r3, #7
  405e2a:	9227      	str	r2, [sp, #156]	; 0x9c
  405e2c:	9326      	str	r3, [sp, #152]	; 0x98
  405e2e:	e888 00a0 	stmia.w	r8, {r5, r7}
  405e32:	ddf2      	ble.n	405e1a <_svfprintf_r+0xd76>
  405e34:	aa25      	add	r2, sp, #148	; 0x94
  405e36:	4621      	mov	r1, r4
  405e38:	4658      	mov	r0, fp
  405e3a:	f004 f8dd 	bl	409ff8 <__ssprint_r>
  405e3e:	2800      	cmp	r0, #0
  405e40:	f47f aa02 	bne.w	405248 <_svfprintf_r+0x1a4>
  405e44:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405e46:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e48:	46c8      	mov	r8, r9
  405e4a:	e7e8      	b.n	405e1e <_svfprintf_r+0xd7a>
  405e4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e4e:	9819      	ldr	r0, [sp, #100]	; 0x64
  405e50:	991a      	ldr	r1, [sp, #104]	; 0x68
  405e52:	f8c8 1000 	str.w	r1, [r8]
  405e56:	3301      	adds	r3, #1
  405e58:	4404      	add	r4, r0
  405e5a:	2b07      	cmp	r3, #7
  405e5c:	9427      	str	r4, [sp, #156]	; 0x9c
  405e5e:	f8c8 0004 	str.w	r0, [r8, #4]
  405e62:	9326      	str	r3, [sp, #152]	; 0x98
  405e64:	f300 81f5 	bgt.w	406252 <_svfprintf_r+0x11ae>
  405e68:	f108 0808 	add.w	r8, r8, #8
  405e6c:	e7ac      	b.n	405dc8 <_svfprintf_r+0xd24>
  405e6e:	9b07      	ldr	r3, [sp, #28]
  405e70:	07da      	lsls	r2, r3, #31
  405e72:	f53f adfe 	bmi.w	405a72 <_svfprintf_r+0x9ce>
  405e76:	3701      	adds	r7, #1
  405e78:	3401      	adds	r4, #1
  405e7a:	2301      	movs	r3, #1
  405e7c:	2f07      	cmp	r7, #7
  405e7e:	9427      	str	r4, [sp, #156]	; 0x9c
  405e80:	9726      	str	r7, [sp, #152]	; 0x98
  405e82:	f8c8 6000 	str.w	r6, [r8]
  405e86:	f8c8 3004 	str.w	r3, [r8, #4]
  405e8a:	f77f ae24 	ble.w	405ad6 <_svfprintf_r+0xa32>
  405e8e:	e74a      	b.n	405d26 <_svfprintf_r+0xc82>
  405e90:	aa25      	add	r2, sp, #148	; 0x94
  405e92:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e94:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e96:	f004 f8af 	bl	409ff8 <__ssprint_r>
  405e9a:	2800      	cmp	r0, #0
  405e9c:	f47f a9d4 	bne.w	405248 <_svfprintf_r+0x1a4>
  405ea0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ea2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405ea4:	46c8      	mov	r8, r9
  405ea6:	e5f2      	b.n	405a8e <_svfprintf_r+0x9ea>
  405ea8:	aa25      	add	r2, sp, #148	; 0x94
  405eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405eac:	980c      	ldr	r0, [sp, #48]	; 0x30
  405eae:	f004 f8a3 	bl	409ff8 <__ssprint_r>
  405eb2:	2800      	cmp	r0, #0
  405eb4:	f47f a9c8 	bne.w	405248 <_svfprintf_r+0x1a4>
  405eb8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405eba:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405ebc:	46c8      	mov	r8, r9
  405ebe:	e5f5      	b.n	405aac <_svfprintf_r+0xa08>
  405ec0:	464e      	mov	r6, r9
  405ec2:	f7ff b9ff 	b.w	4052c4 <_svfprintf_r+0x220>
  405ec6:	aa25      	add	r2, sp, #148	; 0x94
  405ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405eca:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ecc:	f004 f894 	bl	409ff8 <__ssprint_r>
  405ed0:	2800      	cmp	r0, #0
  405ed2:	f47f a9b9 	bne.w	405248 <_svfprintf_r+0x1a4>
  405ed6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405ed8:	46c8      	mov	r8, r9
  405eda:	f7ff ba74 	b.w	4053c6 <_svfprintf_r+0x322>
  405ede:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405ee0:	4622      	mov	r2, r4
  405ee2:	4620      	mov	r0, r4
  405ee4:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405ee6:	4623      	mov	r3, r4
  405ee8:	4621      	mov	r1, r4
  405eea:	f004 ff21 	bl	40ad30 <__aeabi_dcmpun>
  405eee:	2800      	cmp	r0, #0
  405ef0:	f040 8286 	bne.w	406400 <_svfprintf_r+0x135c>
  405ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ef6:	3301      	adds	r3, #1
  405ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405efa:	f023 0320 	bic.w	r3, r3, #32
  405efe:	930e      	str	r3, [sp, #56]	; 0x38
  405f00:	f000 81e2 	beq.w	4062c8 <_svfprintf_r+0x1224>
  405f04:	2b47      	cmp	r3, #71	; 0x47
  405f06:	f000 811e 	beq.w	406146 <_svfprintf_r+0x10a2>
  405f0a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405f0e:	9307      	str	r3, [sp, #28]
  405f10:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405f12:	1e1f      	subs	r7, r3, #0
  405f14:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405f16:	9308      	str	r3, [sp, #32]
  405f18:	bfbb      	ittet	lt
  405f1a:	463b      	movlt	r3, r7
  405f1c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405f20:	2300      	movge	r3, #0
  405f22:	232d      	movlt	r3, #45	; 0x2d
  405f24:	9310      	str	r3, [sp, #64]	; 0x40
  405f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f28:	2b66      	cmp	r3, #102	; 0x66
  405f2a:	f000 81bb 	beq.w	4062a4 <_svfprintf_r+0x1200>
  405f2e:	2b46      	cmp	r3, #70	; 0x46
  405f30:	f000 80df 	beq.w	4060f2 <_svfprintf_r+0x104e>
  405f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405f36:	9a08      	ldr	r2, [sp, #32]
  405f38:	2b45      	cmp	r3, #69	; 0x45
  405f3a:	bf0c      	ite	eq
  405f3c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405f3e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405f40:	a823      	add	r0, sp, #140	; 0x8c
  405f42:	a920      	add	r1, sp, #128	; 0x80
  405f44:	bf08      	it	eq
  405f46:	1c5d      	addeq	r5, r3, #1
  405f48:	9004      	str	r0, [sp, #16]
  405f4a:	9103      	str	r1, [sp, #12]
  405f4c:	a81f      	add	r0, sp, #124	; 0x7c
  405f4e:	2102      	movs	r1, #2
  405f50:	463b      	mov	r3, r7
  405f52:	9002      	str	r0, [sp, #8]
  405f54:	9501      	str	r5, [sp, #4]
  405f56:	9100      	str	r1, [sp, #0]
  405f58:	980c      	ldr	r0, [sp, #48]	; 0x30
  405f5a:	f001 fa49 	bl	4073f0 <_dtoa_r>
  405f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f60:	2b67      	cmp	r3, #103	; 0x67
  405f62:	4606      	mov	r6, r0
  405f64:	f040 81e0 	bne.w	406328 <_svfprintf_r+0x1284>
  405f68:	f01b 0f01 	tst.w	fp, #1
  405f6c:	f000 8246 	beq.w	4063fc <_svfprintf_r+0x1358>
  405f70:	1974      	adds	r4, r6, r5
  405f72:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405f74:	9808      	ldr	r0, [sp, #32]
  405f76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405f78:	4639      	mov	r1, r7
  405f7a:	f004 fea7 	bl	40accc <__aeabi_dcmpeq>
  405f7e:	2800      	cmp	r0, #0
  405f80:	f040 8165 	bne.w	40624e <_svfprintf_r+0x11aa>
  405f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405f86:	42a3      	cmp	r3, r4
  405f88:	d206      	bcs.n	405f98 <_svfprintf_r+0xef4>
  405f8a:	2130      	movs	r1, #48	; 0x30
  405f8c:	1c5a      	adds	r2, r3, #1
  405f8e:	9223      	str	r2, [sp, #140]	; 0x8c
  405f90:	7019      	strb	r1, [r3, #0]
  405f92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405f94:	429c      	cmp	r4, r3
  405f96:	d8f9      	bhi.n	405f8c <_svfprintf_r+0xee8>
  405f98:	1b9b      	subs	r3, r3, r6
  405f9a:	9313      	str	r3, [sp, #76]	; 0x4c
  405f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405f9e:	2b47      	cmp	r3, #71	; 0x47
  405fa0:	f000 80e9 	beq.w	406176 <_svfprintf_r+0x10d2>
  405fa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405fa6:	2b65      	cmp	r3, #101	; 0x65
  405fa8:	f340 81cd 	ble.w	406346 <_svfprintf_r+0x12a2>
  405fac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405fae:	2b66      	cmp	r3, #102	; 0x66
  405fb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405fb2:	9312      	str	r3, [sp, #72]	; 0x48
  405fb4:	f000 819e 	beq.w	4062f4 <_svfprintf_r+0x1250>
  405fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405fba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405fbc:	4619      	mov	r1, r3
  405fbe:	4291      	cmp	r1, r2
  405fc0:	f300 818a 	bgt.w	4062d8 <_svfprintf_r+0x1234>
  405fc4:	f01b 0f01 	tst.w	fp, #1
  405fc8:	f040 8213 	bne.w	4063f2 <_svfprintf_r+0x134e>
  405fcc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405fd0:	9308      	str	r3, [sp, #32]
  405fd2:	2367      	movs	r3, #103	; 0x67
  405fd4:	920e      	str	r2, [sp, #56]	; 0x38
  405fd6:	9311      	str	r3, [sp, #68]	; 0x44
  405fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405fda:	2b00      	cmp	r3, #0
  405fdc:	f040 80c4 	bne.w	406168 <_svfprintf_r+0x10c4>
  405fe0:	930a      	str	r3, [sp, #40]	; 0x28
  405fe2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405fe6:	f7ff b975 	b.w	4052d4 <_svfprintf_r+0x230>
  405fea:	4635      	mov	r5, r6
  405fec:	460c      	mov	r4, r1
  405fee:	4646      	mov	r6, r8
  405ff0:	4690      	mov	r8, r2
  405ff2:	3301      	adds	r3, #1
  405ff4:	443c      	add	r4, r7
  405ff6:	2b07      	cmp	r3, #7
  405ff8:	9427      	str	r4, [sp, #156]	; 0x9c
  405ffa:	9326      	str	r3, [sp, #152]	; 0x98
  405ffc:	e888 00a0 	stmia.w	r8, {r5, r7}
  406000:	f73f aed1 	bgt.w	405da6 <_svfprintf_r+0xd02>
  406004:	f108 0808 	add.w	r8, r8, #8
  406008:	e6d7      	b.n	405dba <_svfprintf_r+0xd16>
  40600a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40600c:	6813      	ldr	r3, [r2, #0]
  40600e:	3204      	adds	r2, #4
  406010:	920f      	str	r2, [sp, #60]	; 0x3c
  406012:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406014:	601a      	str	r2, [r3, #0]
  406016:	f7ff b86c 	b.w	4050f2 <_svfprintf_r+0x4e>
  40601a:	aa25      	add	r2, sp, #148	; 0x94
  40601c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40601e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406020:	f003 ffea 	bl	409ff8 <__ssprint_r>
  406024:	2800      	cmp	r0, #0
  406026:	f47f a90f 	bne.w	405248 <_svfprintf_r+0x1a4>
  40602a:	46c8      	mov	r8, r9
  40602c:	e48d      	b.n	40594a <_svfprintf_r+0x8a6>
  40602e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406030:	4a27      	ldr	r2, [pc, #156]	; (4060d0 <_svfprintf_r+0x102c>)
  406032:	f8c8 2000 	str.w	r2, [r8]
  406036:	3301      	adds	r3, #1
  406038:	3401      	adds	r4, #1
  40603a:	2201      	movs	r2, #1
  40603c:	2b07      	cmp	r3, #7
  40603e:	9427      	str	r4, [sp, #156]	; 0x9c
  406040:	9326      	str	r3, [sp, #152]	; 0x98
  406042:	f8c8 2004 	str.w	r2, [r8, #4]
  406046:	dc72      	bgt.n	40612e <_svfprintf_r+0x108a>
  406048:	f108 0808 	add.w	r8, r8, #8
  40604c:	b929      	cbnz	r1, 40605a <_svfprintf_r+0xfb6>
  40604e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406050:	b91b      	cbnz	r3, 40605a <_svfprintf_r+0xfb6>
  406052:	9b07      	ldr	r3, [sp, #28]
  406054:	07d8      	lsls	r0, r3, #31
  406056:	f57f aa05 	bpl.w	405464 <_svfprintf_r+0x3c0>
  40605a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40605c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40605e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  406060:	f8c8 2000 	str.w	r2, [r8]
  406064:	3301      	adds	r3, #1
  406066:	4602      	mov	r2, r0
  406068:	4422      	add	r2, r4
  40606a:	2b07      	cmp	r3, #7
  40606c:	9227      	str	r2, [sp, #156]	; 0x9c
  40606e:	f8c8 0004 	str.w	r0, [r8, #4]
  406072:	9326      	str	r3, [sp, #152]	; 0x98
  406074:	f300 818d 	bgt.w	406392 <_svfprintf_r+0x12ee>
  406078:	f108 0808 	add.w	r8, r8, #8
  40607c:	2900      	cmp	r1, #0
  40607e:	f2c0 8165 	blt.w	40634c <_svfprintf_r+0x12a8>
  406082:	9913      	ldr	r1, [sp, #76]	; 0x4c
  406084:	f8c8 6000 	str.w	r6, [r8]
  406088:	3301      	adds	r3, #1
  40608a:	188c      	adds	r4, r1, r2
  40608c:	2b07      	cmp	r3, #7
  40608e:	9427      	str	r4, [sp, #156]	; 0x9c
  406090:	9326      	str	r3, [sp, #152]	; 0x98
  406092:	f8c8 1004 	str.w	r1, [r8, #4]
  406096:	f77f a9e3 	ble.w	405460 <_svfprintf_r+0x3bc>
  40609a:	e52b      	b.n	405af4 <_svfprintf_r+0xa50>
  40609c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40609e:	9909      	ldr	r1, [sp, #36]	; 0x24
  4060a0:	6813      	ldr	r3, [r2, #0]
  4060a2:	17cd      	asrs	r5, r1, #31
  4060a4:	4608      	mov	r0, r1
  4060a6:	3204      	adds	r2, #4
  4060a8:	4629      	mov	r1, r5
  4060aa:	920f      	str	r2, [sp, #60]	; 0x3c
  4060ac:	e9c3 0100 	strd	r0, r1, [r3]
  4060b0:	f7ff b81f 	b.w	4050f2 <_svfprintf_r+0x4e>
  4060b4:	aa25      	add	r2, sp, #148	; 0x94
  4060b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4060b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4060ba:	f003 ff9d 	bl	409ff8 <__ssprint_r>
  4060be:	2800      	cmp	r0, #0
  4060c0:	f47f a8c2 	bne.w	405248 <_svfprintf_r+0x1a4>
  4060c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4060c6:	46c8      	mov	r8, r9
  4060c8:	e458      	b.n	40597c <_svfprintf_r+0x8d8>
  4060ca:	bf00      	nop
  4060cc:	0040bffc 	.word	0x0040bffc
  4060d0:	0040bfe8 	.word	0x0040bfe8
  4060d4:	2140      	movs	r1, #64	; 0x40
  4060d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4060d8:	f002 fddc 	bl	408c94 <_malloc_r>
  4060dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4060de:	6010      	str	r0, [r2, #0]
  4060e0:	6110      	str	r0, [r2, #16]
  4060e2:	2800      	cmp	r0, #0
  4060e4:	f000 81ec 	beq.w	4064c0 <_svfprintf_r+0x141c>
  4060e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4060ea:	2340      	movs	r3, #64	; 0x40
  4060ec:	6153      	str	r3, [r2, #20]
  4060ee:	f7fe bff0 	b.w	4050d2 <_svfprintf_r+0x2e>
  4060f2:	a823      	add	r0, sp, #140	; 0x8c
  4060f4:	a920      	add	r1, sp, #128	; 0x80
  4060f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4060f8:	9004      	str	r0, [sp, #16]
  4060fa:	9103      	str	r1, [sp, #12]
  4060fc:	a81f      	add	r0, sp, #124	; 0x7c
  4060fe:	2103      	movs	r1, #3
  406100:	9002      	str	r0, [sp, #8]
  406102:	9a08      	ldr	r2, [sp, #32]
  406104:	9401      	str	r4, [sp, #4]
  406106:	463b      	mov	r3, r7
  406108:	9100      	str	r1, [sp, #0]
  40610a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40610c:	f001 f970 	bl	4073f0 <_dtoa_r>
  406110:	4625      	mov	r5, r4
  406112:	4606      	mov	r6, r0
  406114:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406116:	2b46      	cmp	r3, #70	; 0x46
  406118:	eb06 0405 	add.w	r4, r6, r5
  40611c:	f47f af29 	bne.w	405f72 <_svfprintf_r+0xece>
  406120:	7833      	ldrb	r3, [r6, #0]
  406122:	2b30      	cmp	r3, #48	; 0x30
  406124:	f000 8172 	beq.w	40640c <_svfprintf_r+0x1368>
  406128:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40612a:	442c      	add	r4, r5
  40612c:	e721      	b.n	405f72 <_svfprintf_r+0xece>
  40612e:	aa25      	add	r2, sp, #148	; 0x94
  406130:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406132:	980c      	ldr	r0, [sp, #48]	; 0x30
  406134:	f003 ff60 	bl	409ff8 <__ssprint_r>
  406138:	2800      	cmp	r0, #0
  40613a:	f47f a885 	bne.w	405248 <_svfprintf_r+0x1a4>
  40613e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406140:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406142:	46c8      	mov	r8, r9
  406144:	e782      	b.n	40604c <_svfprintf_r+0xfa8>
  406146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406148:	2b00      	cmp	r3, #0
  40614a:	bf08      	it	eq
  40614c:	2301      	moveq	r3, #1
  40614e:	930a      	str	r3, [sp, #40]	; 0x28
  406150:	e6db      	b.n	405f0a <_svfprintf_r+0xe66>
  406152:	4630      	mov	r0, r6
  406154:	940a      	str	r4, [sp, #40]	; 0x28
  406156:	f7fe fcd3 	bl	404b00 <strlen>
  40615a:	950f      	str	r5, [sp, #60]	; 0x3c
  40615c:	900e      	str	r0, [sp, #56]	; 0x38
  40615e:	f8cd b01c 	str.w	fp, [sp, #28]
  406162:	4603      	mov	r3, r0
  406164:	f7ff b9fb 	b.w	40555e <_svfprintf_r+0x4ba>
  406168:	272d      	movs	r7, #45	; 0x2d
  40616a:	2300      	movs	r3, #0
  40616c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406170:	930a      	str	r3, [sp, #40]	; 0x28
  406172:	f7ff b8b0 	b.w	4052d6 <_svfprintf_r+0x232>
  406176:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406178:	9312      	str	r3, [sp, #72]	; 0x48
  40617a:	461a      	mov	r2, r3
  40617c:	3303      	adds	r3, #3
  40617e:	db04      	blt.n	40618a <_svfprintf_r+0x10e6>
  406180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406182:	4619      	mov	r1, r3
  406184:	4291      	cmp	r1, r2
  406186:	f6bf af17 	bge.w	405fb8 <_svfprintf_r+0xf14>
  40618a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40618c:	3b02      	subs	r3, #2
  40618e:	9311      	str	r3, [sp, #68]	; 0x44
  406190:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  406194:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  406198:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40619a:	3b01      	subs	r3, #1
  40619c:	2b00      	cmp	r3, #0
  40619e:	931f      	str	r3, [sp, #124]	; 0x7c
  4061a0:	bfbd      	ittte	lt
  4061a2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4061a4:	f1c3 0301 	rsblt	r3, r3, #1
  4061a8:	222d      	movlt	r2, #45	; 0x2d
  4061aa:	222b      	movge	r2, #43	; 0x2b
  4061ac:	2b09      	cmp	r3, #9
  4061ae:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4061b2:	f340 8116 	ble.w	4063e2 <_svfprintf_r+0x133e>
  4061b6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4061ba:	4620      	mov	r0, r4
  4061bc:	4dad      	ldr	r5, [pc, #692]	; (406474 <_svfprintf_r+0x13d0>)
  4061be:	e000      	b.n	4061c2 <_svfprintf_r+0x111e>
  4061c0:	4610      	mov	r0, r2
  4061c2:	fb85 1203 	smull	r1, r2, r5, r3
  4061c6:	17d9      	asrs	r1, r3, #31
  4061c8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4061cc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4061d0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4061d4:	3230      	adds	r2, #48	; 0x30
  4061d6:	2909      	cmp	r1, #9
  4061d8:	f800 2c01 	strb.w	r2, [r0, #-1]
  4061dc:	460b      	mov	r3, r1
  4061de:	f100 32ff 	add.w	r2, r0, #4294967295
  4061e2:	dced      	bgt.n	4061c0 <_svfprintf_r+0x111c>
  4061e4:	3330      	adds	r3, #48	; 0x30
  4061e6:	3802      	subs	r0, #2
  4061e8:	b2d9      	uxtb	r1, r3
  4061ea:	4284      	cmp	r4, r0
  4061ec:	f802 1c01 	strb.w	r1, [r2, #-1]
  4061f0:	f240 815f 	bls.w	4064b2 <_svfprintf_r+0x140e>
  4061f4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4061f8:	4613      	mov	r3, r2
  4061fa:	e001      	b.n	406200 <_svfprintf_r+0x115c>
  4061fc:	f813 1b01 	ldrb.w	r1, [r3], #1
  406200:	f800 1b01 	strb.w	r1, [r0], #1
  406204:	42a3      	cmp	r3, r4
  406206:	d1f9      	bne.n	4061fc <_svfprintf_r+0x1158>
  406208:	3301      	adds	r3, #1
  40620a:	1a9b      	subs	r3, r3, r2
  40620c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  406210:	4413      	add	r3, r2
  406212:	aa21      	add	r2, sp, #132	; 0x84
  406214:	1a9b      	subs	r3, r3, r2
  406216:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406218:	931b      	str	r3, [sp, #108]	; 0x6c
  40621a:	2a01      	cmp	r2, #1
  40621c:	4413      	add	r3, r2
  40621e:	930e      	str	r3, [sp, #56]	; 0x38
  406220:	f340 8113 	ble.w	40644a <_svfprintf_r+0x13a6>
  406224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406226:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406228:	4413      	add	r3, r2
  40622a:	930e      	str	r3, [sp, #56]	; 0x38
  40622c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406230:	9308      	str	r3, [sp, #32]
  406232:	2300      	movs	r3, #0
  406234:	9312      	str	r3, [sp, #72]	; 0x48
  406236:	e6cf      	b.n	405fd8 <_svfprintf_r+0xf34>
  406238:	aa25      	add	r2, sp, #148	; 0x94
  40623a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40623c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40623e:	f003 fedb 	bl	409ff8 <__ssprint_r>
  406242:	2800      	cmp	r0, #0
  406244:	f47f a800 	bne.w	405248 <_svfprintf_r+0x1a4>
  406248:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40624a:	46c8      	mov	r8, r9
  40624c:	e4d6      	b.n	405bfc <_svfprintf_r+0xb58>
  40624e:	4623      	mov	r3, r4
  406250:	e6a2      	b.n	405f98 <_svfprintf_r+0xef4>
  406252:	aa25      	add	r2, sp, #148	; 0x94
  406254:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406256:	980c      	ldr	r0, [sp, #48]	; 0x30
  406258:	f003 fece 	bl	409ff8 <__ssprint_r>
  40625c:	2800      	cmp	r0, #0
  40625e:	f47e aff3 	bne.w	405248 <_svfprintf_r+0x1a4>
  406262:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406264:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406266:	46c8      	mov	r8, r9
  406268:	e5ae      	b.n	405dc8 <_svfprintf_r+0xd24>
  40626a:	aa25      	add	r2, sp, #148	; 0x94
  40626c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40626e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406270:	f003 fec2 	bl	409ff8 <__ssprint_r>
  406274:	2800      	cmp	r0, #0
  406276:	f47e afe7 	bne.w	405248 <_svfprintf_r+0x1a4>
  40627a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40627c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40627e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406280:	1a9a      	subs	r2, r3, r2
  406282:	46c8      	mov	r8, r9
  406284:	e5b8      	b.n	405df8 <_svfprintf_r+0xd54>
  406286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406288:	9612      	str	r6, [sp, #72]	; 0x48
  40628a:	2b06      	cmp	r3, #6
  40628c:	bf28      	it	cs
  40628e:	2306      	movcs	r3, #6
  406290:	960a      	str	r6, [sp, #40]	; 0x28
  406292:	4637      	mov	r7, r6
  406294:	9308      	str	r3, [sp, #32]
  406296:	950f      	str	r5, [sp, #60]	; 0x3c
  406298:	f8cd b01c 	str.w	fp, [sp, #28]
  40629c:	930e      	str	r3, [sp, #56]	; 0x38
  40629e:	4e76      	ldr	r6, [pc, #472]	; (406478 <_svfprintf_r+0x13d4>)
  4062a0:	f7ff b818 	b.w	4052d4 <_svfprintf_r+0x230>
  4062a4:	a823      	add	r0, sp, #140	; 0x8c
  4062a6:	a920      	add	r1, sp, #128	; 0x80
  4062a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4062aa:	9004      	str	r0, [sp, #16]
  4062ac:	9103      	str	r1, [sp, #12]
  4062ae:	a81f      	add	r0, sp, #124	; 0x7c
  4062b0:	2103      	movs	r1, #3
  4062b2:	9002      	str	r0, [sp, #8]
  4062b4:	9a08      	ldr	r2, [sp, #32]
  4062b6:	9501      	str	r5, [sp, #4]
  4062b8:	463b      	mov	r3, r7
  4062ba:	9100      	str	r1, [sp, #0]
  4062bc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4062be:	f001 f897 	bl	4073f0 <_dtoa_r>
  4062c2:	4606      	mov	r6, r0
  4062c4:	1944      	adds	r4, r0, r5
  4062c6:	e72b      	b.n	406120 <_svfprintf_r+0x107c>
  4062c8:	2306      	movs	r3, #6
  4062ca:	930a      	str	r3, [sp, #40]	; 0x28
  4062cc:	e61d      	b.n	405f0a <_svfprintf_r+0xe66>
  4062ce:	272d      	movs	r7, #45	; 0x2d
  4062d0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4062d4:	f7ff bace 	b.w	405874 <_svfprintf_r+0x7d0>
  4062d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4062da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4062dc:	4413      	add	r3, r2
  4062de:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4062e0:	930e      	str	r3, [sp, #56]	; 0x38
  4062e2:	2a00      	cmp	r2, #0
  4062e4:	f340 80aa 	ble.w	40643c <_svfprintf_r+0x1398>
  4062e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4062ec:	9308      	str	r3, [sp, #32]
  4062ee:	2367      	movs	r3, #103	; 0x67
  4062f0:	9311      	str	r3, [sp, #68]	; 0x44
  4062f2:	e671      	b.n	405fd8 <_svfprintf_r+0xf34>
  4062f4:	2b00      	cmp	r3, #0
  4062f6:	f340 80b2 	ble.w	40645e <_svfprintf_r+0x13ba>
  4062fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4062fc:	2a00      	cmp	r2, #0
  4062fe:	f040 8093 	bne.w	406428 <_svfprintf_r+0x1384>
  406302:	f01b 0f01 	tst.w	fp, #1
  406306:	f040 808f 	bne.w	406428 <_svfprintf_r+0x1384>
  40630a:	9308      	str	r3, [sp, #32]
  40630c:	930e      	str	r3, [sp, #56]	; 0x38
  40630e:	e663      	b.n	405fd8 <_svfprintf_r+0xf34>
  406310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406312:	9308      	str	r3, [sp, #32]
  406314:	930e      	str	r3, [sp, #56]	; 0x38
  406316:	900a      	str	r0, [sp, #40]	; 0x28
  406318:	950f      	str	r5, [sp, #60]	; 0x3c
  40631a:	f8cd b01c 	str.w	fp, [sp, #28]
  40631e:	9012      	str	r0, [sp, #72]	; 0x48
  406320:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406324:	f7fe bfd6 	b.w	4052d4 <_svfprintf_r+0x230>
  406328:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40632a:	2b47      	cmp	r3, #71	; 0x47
  40632c:	f47f ae20 	bne.w	405f70 <_svfprintf_r+0xecc>
  406330:	f01b 0f01 	tst.w	fp, #1
  406334:	f47f aeee 	bne.w	406114 <_svfprintf_r+0x1070>
  406338:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40633a:	1b9b      	subs	r3, r3, r6
  40633c:	9313      	str	r3, [sp, #76]	; 0x4c
  40633e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406340:	2b47      	cmp	r3, #71	; 0x47
  406342:	f43f af18 	beq.w	406176 <_svfprintf_r+0x10d2>
  406346:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406348:	9312      	str	r3, [sp, #72]	; 0x48
  40634a:	e721      	b.n	406190 <_svfprintf_r+0x10ec>
  40634c:	424f      	negs	r7, r1
  40634e:	3110      	adds	r1, #16
  406350:	4d4a      	ldr	r5, [pc, #296]	; (40647c <_svfprintf_r+0x13d8>)
  406352:	da2f      	bge.n	4063b4 <_svfprintf_r+0x1310>
  406354:	2410      	movs	r4, #16
  406356:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40635a:	e004      	b.n	406366 <_svfprintf_r+0x12c2>
  40635c:	f108 0808 	add.w	r8, r8, #8
  406360:	3f10      	subs	r7, #16
  406362:	2f10      	cmp	r7, #16
  406364:	dd26      	ble.n	4063b4 <_svfprintf_r+0x1310>
  406366:	3301      	adds	r3, #1
  406368:	3210      	adds	r2, #16
  40636a:	2b07      	cmp	r3, #7
  40636c:	9227      	str	r2, [sp, #156]	; 0x9c
  40636e:	9326      	str	r3, [sp, #152]	; 0x98
  406370:	f8c8 5000 	str.w	r5, [r8]
  406374:	f8c8 4004 	str.w	r4, [r8, #4]
  406378:	ddf0      	ble.n	40635c <_svfprintf_r+0x12b8>
  40637a:	aa25      	add	r2, sp, #148	; 0x94
  40637c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40637e:	4658      	mov	r0, fp
  406380:	f003 fe3a 	bl	409ff8 <__ssprint_r>
  406384:	2800      	cmp	r0, #0
  406386:	f47e af5f 	bne.w	405248 <_svfprintf_r+0x1a4>
  40638a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40638c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40638e:	46c8      	mov	r8, r9
  406390:	e7e6      	b.n	406360 <_svfprintf_r+0x12bc>
  406392:	aa25      	add	r2, sp, #148	; 0x94
  406394:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406396:	980c      	ldr	r0, [sp, #48]	; 0x30
  406398:	f003 fe2e 	bl	409ff8 <__ssprint_r>
  40639c:	2800      	cmp	r0, #0
  40639e:	f47e af53 	bne.w	405248 <_svfprintf_r+0x1a4>
  4063a2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4063a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4063a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4063a8:	46c8      	mov	r8, r9
  4063aa:	e667      	b.n	40607c <_svfprintf_r+0xfd8>
  4063ac:	2000      	movs	r0, #0
  4063ae:	900a      	str	r0, [sp, #40]	; 0x28
  4063b0:	f7fe bed2 	b.w	405158 <_svfprintf_r+0xb4>
  4063b4:	3301      	adds	r3, #1
  4063b6:	443a      	add	r2, r7
  4063b8:	2b07      	cmp	r3, #7
  4063ba:	e888 00a0 	stmia.w	r8, {r5, r7}
  4063be:	9227      	str	r2, [sp, #156]	; 0x9c
  4063c0:	9326      	str	r3, [sp, #152]	; 0x98
  4063c2:	f108 0808 	add.w	r8, r8, #8
  4063c6:	f77f ae5c 	ble.w	406082 <_svfprintf_r+0xfde>
  4063ca:	aa25      	add	r2, sp, #148	; 0x94
  4063cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4063ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4063d0:	f003 fe12 	bl	409ff8 <__ssprint_r>
  4063d4:	2800      	cmp	r0, #0
  4063d6:	f47e af37 	bne.w	405248 <_svfprintf_r+0x1a4>
  4063da:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4063dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4063de:	46c8      	mov	r8, r9
  4063e0:	e64f      	b.n	406082 <_svfprintf_r+0xfde>
  4063e2:	3330      	adds	r3, #48	; 0x30
  4063e4:	2230      	movs	r2, #48	; 0x30
  4063e6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4063ea:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4063ee:	ab22      	add	r3, sp, #136	; 0x88
  4063f0:	e70f      	b.n	406212 <_svfprintf_r+0x116e>
  4063f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4063f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4063f6:	4413      	add	r3, r2
  4063f8:	930e      	str	r3, [sp, #56]	; 0x38
  4063fa:	e775      	b.n	4062e8 <_svfprintf_r+0x1244>
  4063fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4063fe:	e5cb      	b.n	405f98 <_svfprintf_r+0xef4>
  406400:	4e1f      	ldr	r6, [pc, #124]	; (406480 <_svfprintf_r+0x13dc>)
  406402:	4b20      	ldr	r3, [pc, #128]	; (406484 <_svfprintf_r+0x13e0>)
  406404:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406408:	f7ff ba36 	b.w	405878 <_svfprintf_r+0x7d4>
  40640c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40640e:	9808      	ldr	r0, [sp, #32]
  406410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406412:	4639      	mov	r1, r7
  406414:	f004 fc5a 	bl	40accc <__aeabi_dcmpeq>
  406418:	2800      	cmp	r0, #0
  40641a:	f47f ae85 	bne.w	406128 <_svfprintf_r+0x1084>
  40641e:	f1c5 0501 	rsb	r5, r5, #1
  406422:	951f      	str	r5, [sp, #124]	; 0x7c
  406424:	442c      	add	r4, r5
  406426:	e5a4      	b.n	405f72 <_svfprintf_r+0xece>
  406428:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40642a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40642c:	4413      	add	r3, r2
  40642e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406430:	441a      	add	r2, r3
  406432:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406436:	920e      	str	r2, [sp, #56]	; 0x38
  406438:	9308      	str	r3, [sp, #32]
  40643a:	e5cd      	b.n	405fd8 <_svfprintf_r+0xf34>
  40643c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40643e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406440:	f1c3 0301 	rsb	r3, r3, #1
  406444:	441a      	add	r2, r3
  406446:	4613      	mov	r3, r2
  406448:	e7d6      	b.n	4063f8 <_svfprintf_r+0x1354>
  40644a:	f01b 0301 	ands.w	r3, fp, #1
  40644e:	9312      	str	r3, [sp, #72]	; 0x48
  406450:	f47f aee8 	bne.w	406224 <_svfprintf_r+0x1180>
  406454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406456:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40645a:	9308      	str	r3, [sp, #32]
  40645c:	e5bc      	b.n	405fd8 <_svfprintf_r+0xf34>
  40645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406460:	b913      	cbnz	r3, 406468 <_svfprintf_r+0x13c4>
  406462:	f01b 0f01 	tst.w	fp, #1
  406466:	d002      	beq.n	40646e <_svfprintf_r+0x13ca>
  406468:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40646a:	3301      	adds	r3, #1
  40646c:	e7df      	b.n	40642e <_svfprintf_r+0x138a>
  40646e:	2301      	movs	r3, #1
  406470:	e74b      	b.n	40630a <_svfprintf_r+0x1266>
  406472:	bf00      	nop
  406474:	66666667 	.word	0x66666667
  406478:	0040bfe0 	.word	0x0040bfe0
  40647c:	0040bffc 	.word	0x0040bffc
  406480:	0040bfb4 	.word	0x0040bfb4
  406484:	0040bfb0 	.word	0x0040bfb0
  406488:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40648a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40648e:	6828      	ldr	r0, [r5, #0]
  406490:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  406494:	900a      	str	r0, [sp, #40]	; 0x28
  406496:	4628      	mov	r0, r5
  406498:	3004      	adds	r0, #4
  40649a:	46a2      	mov	sl, r4
  40649c:	900f      	str	r0, [sp, #60]	; 0x3c
  40649e:	f7fe be59 	b.w	405154 <_svfprintf_r+0xb0>
  4064a2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4064a6:	f7ff b86f 	b.w	405588 <_svfprintf_r+0x4e4>
  4064aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4064ae:	f7ff ba1c 	b.w	4058ea <_svfprintf_r+0x846>
  4064b2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4064b6:	e6ac      	b.n	406212 <_svfprintf_r+0x116e>
  4064b8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4064bc:	f7ff b8f3 	b.w	4056a6 <_svfprintf_r+0x602>
  4064c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4064c2:	230c      	movs	r3, #12
  4064c4:	6013      	str	r3, [r2, #0]
  4064c6:	f04f 33ff 	mov.w	r3, #4294967295
  4064ca:	9309      	str	r3, [sp, #36]	; 0x24
  4064cc:	f7fe bec5 	b.w	40525a <_svfprintf_r+0x1b6>
  4064d0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4064d4:	f7ff b9a2 	b.w	40581c <_svfprintf_r+0x778>
  4064d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4064dc:	f7ff b97e 	b.w	4057dc <_svfprintf_r+0x738>
  4064e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4064e4:	f7ff b961 	b.w	4057aa <_svfprintf_r+0x706>
  4064e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4064ec:	f7ff b91a 	b.w	405724 <_svfprintf_r+0x680>

004064f0 <__sprint_r.part.0>:
  4064f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4064f6:	049c      	lsls	r4, r3, #18
  4064f8:	4693      	mov	fp, r2
  4064fa:	d52f      	bpl.n	40655c <__sprint_r.part.0+0x6c>
  4064fc:	6893      	ldr	r3, [r2, #8]
  4064fe:	6812      	ldr	r2, [r2, #0]
  406500:	b353      	cbz	r3, 406558 <__sprint_r.part.0+0x68>
  406502:	460e      	mov	r6, r1
  406504:	4607      	mov	r7, r0
  406506:	f102 0908 	add.w	r9, r2, #8
  40650a:	e919 0420 	ldmdb	r9, {r5, sl}
  40650e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  406512:	d017      	beq.n	406544 <__sprint_r.part.0+0x54>
  406514:	3d04      	subs	r5, #4
  406516:	2400      	movs	r4, #0
  406518:	e001      	b.n	40651e <__sprint_r.part.0+0x2e>
  40651a:	45a0      	cmp	r8, r4
  40651c:	d010      	beq.n	406540 <__sprint_r.part.0+0x50>
  40651e:	4632      	mov	r2, r6
  406520:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406524:	4638      	mov	r0, r7
  406526:	f002 f835 	bl	408594 <_fputwc_r>
  40652a:	1c43      	adds	r3, r0, #1
  40652c:	f104 0401 	add.w	r4, r4, #1
  406530:	d1f3      	bne.n	40651a <__sprint_r.part.0+0x2a>
  406532:	2300      	movs	r3, #0
  406534:	f8cb 3008 	str.w	r3, [fp, #8]
  406538:	f8cb 3004 	str.w	r3, [fp, #4]
  40653c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406540:	f8db 3008 	ldr.w	r3, [fp, #8]
  406544:	f02a 0a03 	bic.w	sl, sl, #3
  406548:	eba3 030a 	sub.w	r3, r3, sl
  40654c:	f8cb 3008 	str.w	r3, [fp, #8]
  406550:	f109 0908 	add.w	r9, r9, #8
  406554:	2b00      	cmp	r3, #0
  406556:	d1d8      	bne.n	40650a <__sprint_r.part.0+0x1a>
  406558:	2000      	movs	r0, #0
  40655a:	e7ea      	b.n	406532 <__sprint_r.part.0+0x42>
  40655c:	f002 f962 	bl	408824 <__sfvwrite_r>
  406560:	2300      	movs	r3, #0
  406562:	f8cb 3008 	str.w	r3, [fp, #8]
  406566:	f8cb 3004 	str.w	r3, [fp, #4]
  40656a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40656e:	bf00      	nop

00406570 <_vfiprintf_r>:
  406570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406574:	b0ad      	sub	sp, #180	; 0xb4
  406576:	461d      	mov	r5, r3
  406578:	9101      	str	r1, [sp, #4]
  40657a:	4691      	mov	r9, r2
  40657c:	9308      	str	r3, [sp, #32]
  40657e:	9006      	str	r0, [sp, #24]
  406580:	b118      	cbz	r0, 40658a <_vfiprintf_r+0x1a>
  406582:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406584:	2b00      	cmp	r3, #0
  406586:	f000 80e0 	beq.w	40674a <_vfiprintf_r+0x1da>
  40658a:	9c01      	ldr	r4, [sp, #4]
  40658c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  406590:	b281      	uxth	r1, r0
  406592:	048b      	lsls	r3, r1, #18
  406594:	d407      	bmi.n	4065a6 <_vfiprintf_r+0x36>
  406596:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406598:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40659c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4065a0:	81a1      	strh	r1, [r4, #12]
  4065a2:	6663      	str	r3, [r4, #100]	; 0x64
  4065a4:	b289      	uxth	r1, r1
  4065a6:	070f      	lsls	r7, r1, #28
  4065a8:	f140 80b1 	bpl.w	40670e <_vfiprintf_r+0x19e>
  4065ac:	9b01      	ldr	r3, [sp, #4]
  4065ae:	691b      	ldr	r3, [r3, #16]
  4065b0:	2b00      	cmp	r3, #0
  4065b2:	f000 80ac 	beq.w	40670e <_vfiprintf_r+0x19e>
  4065b6:	f001 011a 	and.w	r1, r1, #26
  4065ba:	290a      	cmp	r1, #10
  4065bc:	f000 80b5 	beq.w	40672a <_vfiprintf_r+0x1ba>
  4065c0:	2300      	movs	r3, #0
  4065c2:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  4065c6:	930b      	str	r3, [sp, #44]	; 0x2c
  4065c8:	9311      	str	r3, [sp, #68]	; 0x44
  4065ca:	9310      	str	r3, [sp, #64]	; 0x40
  4065cc:	9304      	str	r3, [sp, #16]
  4065ce:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  4065d2:	46da      	mov	sl, fp
  4065d4:	f899 3000 	ldrb.w	r3, [r9]
  4065d8:	464c      	mov	r4, r9
  4065da:	b1fb      	cbz	r3, 40661c <_vfiprintf_r+0xac>
  4065dc:	2b25      	cmp	r3, #37	; 0x25
  4065de:	d102      	bne.n	4065e6 <_vfiprintf_r+0x76>
  4065e0:	e01c      	b.n	40661c <_vfiprintf_r+0xac>
  4065e2:	2b25      	cmp	r3, #37	; 0x25
  4065e4:	d003      	beq.n	4065ee <_vfiprintf_r+0x7e>
  4065e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4065ea:	2b00      	cmp	r3, #0
  4065ec:	d1f9      	bne.n	4065e2 <_vfiprintf_r+0x72>
  4065ee:	eba4 0509 	sub.w	r5, r4, r9
  4065f2:	b19d      	cbz	r5, 40661c <_vfiprintf_r+0xac>
  4065f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4065f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4065f8:	f8ca 9000 	str.w	r9, [sl]
  4065fc:	3301      	adds	r3, #1
  4065fe:	442a      	add	r2, r5
  406600:	2b07      	cmp	r3, #7
  406602:	f8ca 5004 	str.w	r5, [sl, #4]
  406606:	9211      	str	r2, [sp, #68]	; 0x44
  406608:	9310      	str	r3, [sp, #64]	; 0x40
  40660a:	dd7a      	ble.n	406702 <_vfiprintf_r+0x192>
  40660c:	2a00      	cmp	r2, #0
  40660e:	f040 848f 	bne.w	406f30 <_vfiprintf_r+0x9c0>
  406612:	9b04      	ldr	r3, [sp, #16]
  406614:	9210      	str	r2, [sp, #64]	; 0x40
  406616:	442b      	add	r3, r5
  406618:	46da      	mov	sl, fp
  40661a:	9304      	str	r3, [sp, #16]
  40661c:	7823      	ldrb	r3, [r4, #0]
  40661e:	2b00      	cmp	r3, #0
  406620:	f000 83b1 	beq.w	406d86 <_vfiprintf_r+0x816>
  406624:	2000      	movs	r0, #0
  406626:	f04f 0300 	mov.w	r3, #0
  40662a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40662e:	f104 0901 	add.w	r9, r4, #1
  406632:	7862      	ldrb	r2, [r4, #1]
  406634:	4605      	mov	r5, r0
  406636:	4606      	mov	r6, r0
  406638:	4603      	mov	r3, r0
  40663a:	f04f 34ff 	mov.w	r4, #4294967295
  40663e:	f109 0901 	add.w	r9, r9, #1
  406642:	f1a2 0120 	sub.w	r1, r2, #32
  406646:	2958      	cmp	r1, #88	; 0x58
  406648:	f200 830e 	bhi.w	406c68 <_vfiprintf_r+0x6f8>
  40664c:	e8df f011 	tbh	[pc, r1, lsl #1]
  406650:	030c0237 	.word	0x030c0237
  406654:	02eb030c 	.word	0x02eb030c
  406658:	030c030c 	.word	0x030c030c
  40665c:	030c030c 	.word	0x030c030c
  406660:	030c030c 	.word	0x030c030c
  406664:	02f0029e 	.word	0x02f0029e
  406668:	0082030c 	.word	0x0082030c
  40666c:	030c0277 	.word	0x030c0277
  406670:	01d401cf 	.word	0x01d401cf
  406674:	01d401d4 	.word	0x01d401d4
  406678:	01d401d4 	.word	0x01d401d4
  40667c:	01d401d4 	.word	0x01d401d4
  406680:	01d401d4 	.word	0x01d401d4
  406684:	030c030c 	.word	0x030c030c
  406688:	030c030c 	.word	0x030c030c
  40668c:	030c030c 	.word	0x030c030c
  406690:	030c030c 	.word	0x030c030c
  406694:	030c030c 	.word	0x030c030c
  406698:	030c023f 	.word	0x030c023f
  40669c:	030c030c 	.word	0x030c030c
  4066a0:	030c030c 	.word	0x030c030c
  4066a4:	030c030c 	.word	0x030c030c
  4066a8:	030c030c 	.word	0x030c030c
  4066ac:	0246030c 	.word	0x0246030c
  4066b0:	030c030c 	.word	0x030c030c
  4066b4:	030c030c 	.word	0x030c030c
  4066b8:	024a030c 	.word	0x024a030c
  4066bc:	030c030c 	.word	0x030c030c
  4066c0:	030c0252 	.word	0x030c0252
  4066c4:	030c030c 	.word	0x030c030c
  4066c8:	030c030c 	.word	0x030c030c
  4066cc:	030c030c 	.word	0x030c030c
  4066d0:	030c030c 	.word	0x030c030c
  4066d4:	01e2030c 	.word	0x01e2030c
  4066d8:	030c01f6 	.word	0x030c01f6
  4066dc:	030c030c 	.word	0x030c030c
  4066e0:	01f60307 	.word	0x01f60307
  4066e4:	030c030c 	.word	0x030c030c
  4066e8:	030c0291 	.word	0x030c0291
  4066ec:	008702f5 	.word	0x008702f5
  4066f0:	02c302b1 	.word	0x02c302b1
  4066f4:	02c8030c 	.word	0x02c8030c
  4066f8:	01bd030c 	.word	0x01bd030c
  4066fc:	030c030c 	.word	0x030c030c
  406700:	02aa      	.short	0x02aa
  406702:	f10a 0a08 	add.w	sl, sl, #8
  406706:	9b04      	ldr	r3, [sp, #16]
  406708:	442b      	add	r3, r5
  40670a:	9304      	str	r3, [sp, #16]
  40670c:	e786      	b.n	40661c <_vfiprintf_r+0xac>
  40670e:	9c01      	ldr	r4, [sp, #4]
  406710:	9806      	ldr	r0, [sp, #24]
  406712:	4621      	mov	r1, r4
  406714:	f000 fd62 	bl	4071dc <__swsetup_r>
  406718:	2800      	cmp	r0, #0
  40671a:	f040 8340 	bne.w	406d9e <_vfiprintf_r+0x82e>
  40671e:	89a1      	ldrh	r1, [r4, #12]
  406720:	f001 011a 	and.w	r1, r1, #26
  406724:	290a      	cmp	r1, #10
  406726:	f47f af4b 	bne.w	4065c0 <_vfiprintf_r+0x50>
  40672a:	9901      	ldr	r1, [sp, #4]
  40672c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  406730:	2b00      	cmp	r3, #0
  406732:	f6ff af45 	blt.w	4065c0 <_vfiprintf_r+0x50>
  406736:	462b      	mov	r3, r5
  406738:	464a      	mov	r2, r9
  40673a:	9806      	ldr	r0, [sp, #24]
  40673c:	f000 fd18 	bl	407170 <__sbprintf>
  406740:	9004      	str	r0, [sp, #16]
  406742:	9804      	ldr	r0, [sp, #16]
  406744:	b02d      	add	sp, #180	; 0xb4
  406746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40674a:	f001 feaf 	bl	4084ac <__sinit>
  40674e:	e71c      	b.n	40658a <_vfiprintf_r+0x1a>
  406750:	4276      	negs	r6, r6
  406752:	9208      	str	r2, [sp, #32]
  406754:	f043 0304 	orr.w	r3, r3, #4
  406758:	f899 2000 	ldrb.w	r2, [r9]
  40675c:	e76f      	b.n	40663e <_vfiprintf_r+0xce>
  40675e:	9607      	str	r6, [sp, #28]
  406760:	f013 0220 	ands.w	r2, r3, #32
  406764:	f040 845a 	bne.w	40701c <_vfiprintf_r+0xaac>
  406768:	f013 0110 	ands.w	r1, r3, #16
  40676c:	f040 83f1 	bne.w	406f52 <_vfiprintf_r+0x9e2>
  406770:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406774:	f000 83ed 	beq.w	406f52 <_vfiprintf_r+0x9e2>
  406778:	9808      	ldr	r0, [sp, #32]
  40677a:	460a      	mov	r2, r1
  40677c:	4601      	mov	r1, r0
  40677e:	3104      	adds	r1, #4
  406780:	8806      	ldrh	r6, [r0, #0]
  406782:	9108      	str	r1, [sp, #32]
  406784:	2700      	movs	r7, #0
  406786:	f04f 0100 	mov.w	r1, #0
  40678a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40678e:	2500      	movs	r5, #0
  406790:	1c61      	adds	r1, r4, #1
  406792:	f000 8175 	beq.w	406a80 <_vfiprintf_r+0x510>
  406796:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40679a:	9103      	str	r1, [sp, #12]
  40679c:	ea56 0107 	orrs.w	r1, r6, r7
  4067a0:	f040 8173 	bne.w	406a8a <_vfiprintf_r+0x51a>
  4067a4:	2c00      	cmp	r4, #0
  4067a6:	f040 8356 	bne.w	406e56 <_vfiprintf_r+0x8e6>
  4067aa:	2a00      	cmp	r2, #0
  4067ac:	f040 83b2 	bne.w	406f14 <_vfiprintf_r+0x9a4>
  4067b0:	f013 0301 	ands.w	r3, r3, #1
  4067b4:	9305      	str	r3, [sp, #20]
  4067b6:	f000 8447 	beq.w	407048 <_vfiprintf_r+0xad8>
  4067ba:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  4067be:	2330      	movs	r3, #48	; 0x30
  4067c0:	f808 3d41 	strb.w	r3, [r8, #-65]!
  4067c4:	9b05      	ldr	r3, [sp, #20]
  4067c6:	42a3      	cmp	r3, r4
  4067c8:	bfb8      	it	lt
  4067ca:	4623      	movlt	r3, r4
  4067cc:	9302      	str	r3, [sp, #8]
  4067ce:	b10d      	cbz	r5, 4067d4 <_vfiprintf_r+0x264>
  4067d0:	3301      	adds	r3, #1
  4067d2:	9302      	str	r3, [sp, #8]
  4067d4:	9b03      	ldr	r3, [sp, #12]
  4067d6:	f013 0302 	ands.w	r3, r3, #2
  4067da:	9309      	str	r3, [sp, #36]	; 0x24
  4067dc:	d002      	beq.n	4067e4 <_vfiprintf_r+0x274>
  4067de:	9b02      	ldr	r3, [sp, #8]
  4067e0:	3302      	adds	r3, #2
  4067e2:	9302      	str	r3, [sp, #8]
  4067e4:	9b03      	ldr	r3, [sp, #12]
  4067e6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4067ea:	930a      	str	r3, [sp, #40]	; 0x28
  4067ec:	f040 8263 	bne.w	406cb6 <_vfiprintf_r+0x746>
  4067f0:	9b07      	ldr	r3, [sp, #28]
  4067f2:	9a02      	ldr	r2, [sp, #8]
  4067f4:	1a9d      	subs	r5, r3, r2
  4067f6:	2d00      	cmp	r5, #0
  4067f8:	f340 825d 	ble.w	406cb6 <_vfiprintf_r+0x746>
  4067fc:	2d10      	cmp	r5, #16
  4067fe:	f340 8477 	ble.w	4070f0 <_vfiprintf_r+0xb80>
  406802:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406804:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406806:	4eb9      	ldr	r6, [pc, #740]	; (406aec <_vfiprintf_r+0x57c>)
  406808:	46d6      	mov	lr, sl
  40680a:	2710      	movs	r7, #16
  40680c:	46a2      	mov	sl, r4
  40680e:	4619      	mov	r1, r3
  406810:	9c06      	ldr	r4, [sp, #24]
  406812:	e007      	b.n	406824 <_vfiprintf_r+0x2b4>
  406814:	f101 0c02 	add.w	ip, r1, #2
  406818:	f10e 0e08 	add.w	lr, lr, #8
  40681c:	4601      	mov	r1, r0
  40681e:	3d10      	subs	r5, #16
  406820:	2d10      	cmp	r5, #16
  406822:	dd11      	ble.n	406848 <_vfiprintf_r+0x2d8>
  406824:	1c48      	adds	r0, r1, #1
  406826:	3210      	adds	r2, #16
  406828:	2807      	cmp	r0, #7
  40682a:	9211      	str	r2, [sp, #68]	; 0x44
  40682c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406830:	9010      	str	r0, [sp, #64]	; 0x40
  406832:	ddef      	ble.n	406814 <_vfiprintf_r+0x2a4>
  406834:	2a00      	cmp	r2, #0
  406836:	f040 8231 	bne.w	406c9c <_vfiprintf_r+0x72c>
  40683a:	3d10      	subs	r5, #16
  40683c:	2d10      	cmp	r5, #16
  40683e:	4611      	mov	r1, r2
  406840:	f04f 0c01 	mov.w	ip, #1
  406844:	46de      	mov	lr, fp
  406846:	dced      	bgt.n	406824 <_vfiprintf_r+0x2b4>
  406848:	4654      	mov	r4, sl
  40684a:	4661      	mov	r1, ip
  40684c:	46f2      	mov	sl, lr
  40684e:	442a      	add	r2, r5
  406850:	2907      	cmp	r1, #7
  406852:	9211      	str	r2, [sp, #68]	; 0x44
  406854:	f8ca 6000 	str.w	r6, [sl]
  406858:	f8ca 5004 	str.w	r5, [sl, #4]
  40685c:	9110      	str	r1, [sp, #64]	; 0x40
  40685e:	f300 82e6 	bgt.w	406e2e <_vfiprintf_r+0x8be>
  406862:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406866:	f10a 0a08 	add.w	sl, sl, #8
  40686a:	1c48      	adds	r0, r1, #1
  40686c:	2d00      	cmp	r5, #0
  40686e:	f040 822a 	bne.w	406cc6 <_vfiprintf_r+0x756>
  406872:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406874:	2b00      	cmp	r3, #0
  406876:	f000 8244 	beq.w	406d02 <_vfiprintf_r+0x792>
  40687a:	3202      	adds	r2, #2
  40687c:	a90e      	add	r1, sp, #56	; 0x38
  40687e:	2302      	movs	r3, #2
  406880:	2807      	cmp	r0, #7
  406882:	9211      	str	r2, [sp, #68]	; 0x44
  406884:	9010      	str	r0, [sp, #64]	; 0x40
  406886:	e88a 000a 	stmia.w	sl, {r1, r3}
  40688a:	f340 8236 	ble.w	406cfa <_vfiprintf_r+0x78a>
  40688e:	2a00      	cmp	r2, #0
  406890:	f040 838b 	bne.w	406faa <_vfiprintf_r+0xa3a>
  406894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406896:	2b80      	cmp	r3, #128	; 0x80
  406898:	f04f 0001 	mov.w	r0, #1
  40689c:	4611      	mov	r1, r2
  40689e:	46da      	mov	sl, fp
  4068a0:	f040 8233 	bne.w	406d0a <_vfiprintf_r+0x79a>
  4068a4:	9b07      	ldr	r3, [sp, #28]
  4068a6:	9d02      	ldr	r5, [sp, #8]
  4068a8:	1b5e      	subs	r6, r3, r5
  4068aa:	2e00      	cmp	r6, #0
  4068ac:	f340 822d 	ble.w	406d0a <_vfiprintf_r+0x79a>
  4068b0:	2e10      	cmp	r6, #16
  4068b2:	4d8f      	ldr	r5, [pc, #572]	; (406af0 <_vfiprintf_r+0x580>)
  4068b4:	f340 842f 	ble.w	407116 <_vfiprintf_r+0xba6>
  4068b8:	46d4      	mov	ip, sl
  4068ba:	2710      	movs	r7, #16
  4068bc:	46a2      	mov	sl, r4
  4068be:	9c06      	ldr	r4, [sp, #24]
  4068c0:	e007      	b.n	4068d2 <_vfiprintf_r+0x362>
  4068c2:	f101 0e02 	add.w	lr, r1, #2
  4068c6:	f10c 0c08 	add.w	ip, ip, #8
  4068ca:	4601      	mov	r1, r0
  4068cc:	3e10      	subs	r6, #16
  4068ce:	2e10      	cmp	r6, #16
  4068d0:	dd11      	ble.n	4068f6 <_vfiprintf_r+0x386>
  4068d2:	1c48      	adds	r0, r1, #1
  4068d4:	3210      	adds	r2, #16
  4068d6:	2807      	cmp	r0, #7
  4068d8:	9211      	str	r2, [sp, #68]	; 0x44
  4068da:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4068de:	9010      	str	r0, [sp, #64]	; 0x40
  4068e0:	ddef      	ble.n	4068c2 <_vfiprintf_r+0x352>
  4068e2:	2a00      	cmp	r2, #0
  4068e4:	f040 8296 	bne.w	406e14 <_vfiprintf_r+0x8a4>
  4068e8:	3e10      	subs	r6, #16
  4068ea:	2e10      	cmp	r6, #16
  4068ec:	f04f 0e01 	mov.w	lr, #1
  4068f0:	4611      	mov	r1, r2
  4068f2:	46dc      	mov	ip, fp
  4068f4:	dced      	bgt.n	4068d2 <_vfiprintf_r+0x362>
  4068f6:	4654      	mov	r4, sl
  4068f8:	46e2      	mov	sl, ip
  4068fa:	4432      	add	r2, r6
  4068fc:	f1be 0f07 	cmp.w	lr, #7
  406900:	9211      	str	r2, [sp, #68]	; 0x44
  406902:	e88a 0060 	stmia.w	sl, {r5, r6}
  406906:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40690a:	f300 835b 	bgt.w	406fc4 <_vfiprintf_r+0xa54>
  40690e:	9b05      	ldr	r3, [sp, #20]
  406910:	1ae4      	subs	r4, r4, r3
  406912:	2c00      	cmp	r4, #0
  406914:	f10a 0a08 	add.w	sl, sl, #8
  406918:	f10e 0001 	add.w	r0, lr, #1
  40691c:	4671      	mov	r1, lr
  40691e:	f300 81f9 	bgt.w	406d14 <_vfiprintf_r+0x7a4>
  406922:	9905      	ldr	r1, [sp, #20]
  406924:	f8ca 8000 	str.w	r8, [sl]
  406928:	440a      	add	r2, r1
  40692a:	2807      	cmp	r0, #7
  40692c:	9211      	str	r2, [sp, #68]	; 0x44
  40692e:	f8ca 1004 	str.w	r1, [sl, #4]
  406932:	9010      	str	r0, [sp, #64]	; 0x40
  406934:	f340 8255 	ble.w	406de2 <_vfiprintf_r+0x872>
  406938:	2a00      	cmp	r2, #0
  40693a:	f040 82ee 	bne.w	406f1a <_vfiprintf_r+0x9aa>
  40693e:	9b03      	ldr	r3, [sp, #12]
  406940:	9210      	str	r2, [sp, #64]	; 0x40
  406942:	0758      	lsls	r0, r3, #29
  406944:	d538      	bpl.n	4069b8 <_vfiprintf_r+0x448>
  406946:	9b07      	ldr	r3, [sp, #28]
  406948:	9902      	ldr	r1, [sp, #8]
  40694a:	1a5c      	subs	r4, r3, r1
  40694c:	2c00      	cmp	r4, #0
  40694e:	f340 82ba 	ble.w	406ec6 <_vfiprintf_r+0x956>
  406952:	46da      	mov	sl, fp
  406954:	2c10      	cmp	r4, #16
  406956:	f340 83da 	ble.w	40710e <_vfiprintf_r+0xb9e>
  40695a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40695c:	4e63      	ldr	r6, [pc, #396]	; (406aec <_vfiprintf_r+0x57c>)
  40695e:	9f06      	ldr	r7, [sp, #24]
  406960:	f8dd 8004 	ldr.w	r8, [sp, #4]
  406964:	2510      	movs	r5, #16
  406966:	e006      	b.n	406976 <_vfiprintf_r+0x406>
  406968:	1c88      	adds	r0, r1, #2
  40696a:	f10a 0a08 	add.w	sl, sl, #8
  40696e:	4619      	mov	r1, r3
  406970:	3c10      	subs	r4, #16
  406972:	2c10      	cmp	r4, #16
  406974:	dd13      	ble.n	40699e <_vfiprintf_r+0x42e>
  406976:	1c4b      	adds	r3, r1, #1
  406978:	3210      	adds	r2, #16
  40697a:	2b07      	cmp	r3, #7
  40697c:	9211      	str	r2, [sp, #68]	; 0x44
  40697e:	f8ca 6000 	str.w	r6, [sl]
  406982:	f8ca 5004 	str.w	r5, [sl, #4]
  406986:	9310      	str	r3, [sp, #64]	; 0x40
  406988:	ddee      	ble.n	406968 <_vfiprintf_r+0x3f8>
  40698a:	2a00      	cmp	r2, #0
  40698c:	f040 820b 	bne.w	406da6 <_vfiprintf_r+0x836>
  406990:	3c10      	subs	r4, #16
  406992:	2c10      	cmp	r4, #16
  406994:	f04f 0001 	mov.w	r0, #1
  406998:	4611      	mov	r1, r2
  40699a:	46da      	mov	sl, fp
  40699c:	dceb      	bgt.n	406976 <_vfiprintf_r+0x406>
  40699e:	4422      	add	r2, r4
  4069a0:	2807      	cmp	r0, #7
  4069a2:	9211      	str	r2, [sp, #68]	; 0x44
  4069a4:	f8ca 6000 	str.w	r6, [sl]
  4069a8:	f8ca 4004 	str.w	r4, [sl, #4]
  4069ac:	9010      	str	r0, [sp, #64]	; 0x40
  4069ae:	f340 8223 	ble.w	406df8 <_vfiprintf_r+0x888>
  4069b2:	2a00      	cmp	r2, #0
  4069b4:	f040 8367 	bne.w	407086 <_vfiprintf_r+0xb16>
  4069b8:	9b04      	ldr	r3, [sp, #16]
  4069ba:	9a07      	ldr	r2, [sp, #28]
  4069bc:	9902      	ldr	r1, [sp, #8]
  4069be:	428a      	cmp	r2, r1
  4069c0:	bfac      	ite	ge
  4069c2:	189b      	addge	r3, r3, r2
  4069c4:	185b      	addlt	r3, r3, r1
  4069c6:	9304      	str	r3, [sp, #16]
  4069c8:	e21f      	b.n	406e0a <_vfiprintf_r+0x89a>
  4069ca:	9607      	str	r6, [sp, #28]
  4069cc:	069e      	lsls	r6, r3, #26
  4069ce:	f100 8319 	bmi.w	407004 <_vfiprintf_r+0xa94>
  4069d2:	9908      	ldr	r1, [sp, #32]
  4069d4:	06dd      	lsls	r5, r3, #27
  4069d6:	460a      	mov	r2, r1
  4069d8:	f100 82b5 	bmi.w	406f46 <_vfiprintf_r+0x9d6>
  4069dc:	0658      	lsls	r0, r3, #25
  4069de:	f140 82b2 	bpl.w	406f46 <_vfiprintf_r+0x9d6>
  4069e2:	880e      	ldrh	r6, [r1, #0]
  4069e4:	3104      	adds	r1, #4
  4069e6:	2700      	movs	r7, #0
  4069e8:	2201      	movs	r2, #1
  4069ea:	9108      	str	r1, [sp, #32]
  4069ec:	e6cb      	b.n	406786 <_vfiprintf_r+0x216>
  4069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4069f2:	f899 2000 	ldrb.w	r2, [r9]
  4069f6:	e622      	b.n	40663e <_vfiprintf_r+0xce>
  4069f8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4069fc:	2600      	movs	r6, #0
  4069fe:	f819 2b01 	ldrb.w	r2, [r9], #1
  406a02:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406a06:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406a0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406a0e:	2909      	cmp	r1, #9
  406a10:	d9f5      	bls.n	4069fe <_vfiprintf_r+0x48e>
  406a12:	e616      	b.n	406642 <_vfiprintf_r+0xd2>
  406a14:	9908      	ldr	r1, [sp, #32]
  406a16:	9607      	str	r6, [sp, #28]
  406a18:	680a      	ldr	r2, [r1, #0]
  406a1a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406a1e:	f04f 0000 	mov.w	r0, #0
  406a22:	460a      	mov	r2, r1
  406a24:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406a28:	3204      	adds	r2, #4
  406a2a:	2001      	movs	r0, #1
  406a2c:	9002      	str	r0, [sp, #8]
  406a2e:	9208      	str	r2, [sp, #32]
  406a30:	9005      	str	r0, [sp, #20]
  406a32:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  406a36:	9303      	str	r3, [sp, #12]
  406a38:	2400      	movs	r4, #0
  406a3a:	e6cb      	b.n	4067d4 <_vfiprintf_r+0x264>
  406a3c:	9607      	str	r6, [sp, #28]
  406a3e:	2800      	cmp	r0, #0
  406a40:	f040 8382 	bne.w	407148 <_vfiprintf_r+0xbd8>
  406a44:	069e      	lsls	r6, r3, #26
  406a46:	f100 82d1 	bmi.w	406fec <_vfiprintf_r+0xa7c>
  406a4a:	06dd      	lsls	r5, r3, #27
  406a4c:	f100 828d 	bmi.w	406f6a <_vfiprintf_r+0x9fa>
  406a50:	0658      	lsls	r0, r3, #25
  406a52:	f140 828a 	bpl.w	406f6a <_vfiprintf_r+0x9fa>
  406a56:	9d08      	ldr	r5, [sp, #32]
  406a58:	f9b5 6000 	ldrsh.w	r6, [r5]
  406a5c:	462a      	mov	r2, r5
  406a5e:	17f7      	asrs	r7, r6, #31
  406a60:	3204      	adds	r2, #4
  406a62:	4630      	mov	r0, r6
  406a64:	4639      	mov	r1, r7
  406a66:	9208      	str	r2, [sp, #32]
  406a68:	2800      	cmp	r0, #0
  406a6a:	f171 0200 	sbcs.w	r2, r1, #0
  406a6e:	f2c0 82ee 	blt.w	40704e <_vfiprintf_r+0xade>
  406a72:	1c61      	adds	r1, r4, #1
  406a74:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406a78:	f04f 0201 	mov.w	r2, #1
  406a7c:	f47f ae8b 	bne.w	406796 <_vfiprintf_r+0x226>
  406a80:	ea56 0107 	orrs.w	r1, r6, r7
  406a84:	f000 81e8 	beq.w	406e58 <_vfiprintf_r+0x8e8>
  406a88:	9303      	str	r3, [sp, #12]
  406a8a:	2a01      	cmp	r2, #1
  406a8c:	f000 8225 	beq.w	406eda <_vfiprintf_r+0x96a>
  406a90:	2a02      	cmp	r2, #2
  406a92:	f040 81f5 	bne.w	406e80 <_vfiprintf_r+0x910>
  406a96:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406a98:	46d8      	mov	r8, fp
  406a9a:	0933      	lsrs	r3, r6, #4
  406a9c:	f006 010f 	and.w	r1, r6, #15
  406aa0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406aa4:	093a      	lsrs	r2, r7, #4
  406aa6:	461e      	mov	r6, r3
  406aa8:	4617      	mov	r7, r2
  406aaa:	5c43      	ldrb	r3, [r0, r1]
  406aac:	f808 3d01 	strb.w	r3, [r8, #-1]!
  406ab0:	ea56 0307 	orrs.w	r3, r6, r7
  406ab4:	d1f1      	bne.n	406a9a <_vfiprintf_r+0x52a>
  406ab6:	ebab 0308 	sub.w	r3, fp, r8
  406aba:	9305      	str	r3, [sp, #20]
  406abc:	e682      	b.n	4067c4 <_vfiprintf_r+0x254>
  406abe:	f899 2000 	ldrb.w	r2, [r9]
  406ac2:	2d00      	cmp	r5, #0
  406ac4:	f47f adbb 	bne.w	40663e <_vfiprintf_r+0xce>
  406ac8:	2001      	movs	r0, #1
  406aca:	2520      	movs	r5, #32
  406acc:	e5b7      	b.n	40663e <_vfiprintf_r+0xce>
  406ace:	9607      	str	r6, [sp, #28]
  406ad0:	2800      	cmp	r0, #0
  406ad2:	f040 8336 	bne.w	407142 <_vfiprintf_r+0xbd2>
  406ad6:	f043 0310 	orr.w	r3, r3, #16
  406ada:	e7b3      	b.n	406a44 <_vfiprintf_r+0x4d4>
  406adc:	9607      	str	r6, [sp, #28]
  406ade:	f043 0310 	orr.w	r3, r3, #16
  406ae2:	e63d      	b.n	406760 <_vfiprintf_r+0x1f0>
  406ae4:	9607      	str	r6, [sp, #28]
  406ae6:	f043 0310 	orr.w	r3, r3, #16
  406aea:	e76f      	b.n	4069cc <_vfiprintf_r+0x45c>
  406aec:	0040c00c 	.word	0x0040c00c
  406af0:	0040c01c 	.word	0x0040c01c
  406af4:	9607      	str	r6, [sp, #28]
  406af6:	2800      	cmp	r0, #0
  406af8:	f040 832c 	bne.w	407154 <_vfiprintf_r+0xbe4>
  406afc:	49b0      	ldr	r1, [pc, #704]	; (406dc0 <_vfiprintf_r+0x850>)
  406afe:	910b      	str	r1, [sp, #44]	; 0x2c
  406b00:	069f      	lsls	r7, r3, #26
  406b02:	f100 8297 	bmi.w	407034 <_vfiprintf_r+0xac4>
  406b06:	9808      	ldr	r0, [sp, #32]
  406b08:	06de      	lsls	r6, r3, #27
  406b0a:	4601      	mov	r1, r0
  406b0c:	f100 8228 	bmi.w	406f60 <_vfiprintf_r+0x9f0>
  406b10:	065d      	lsls	r5, r3, #25
  406b12:	f140 8225 	bpl.w	406f60 <_vfiprintf_r+0x9f0>
  406b16:	3104      	adds	r1, #4
  406b18:	8806      	ldrh	r6, [r0, #0]
  406b1a:	9108      	str	r1, [sp, #32]
  406b1c:	2700      	movs	r7, #0
  406b1e:	07d8      	lsls	r0, r3, #31
  406b20:	f140 81d9 	bpl.w	406ed6 <_vfiprintf_r+0x966>
  406b24:	ea56 0107 	orrs.w	r1, r6, r7
  406b28:	f000 81d5 	beq.w	406ed6 <_vfiprintf_r+0x966>
  406b2c:	2130      	movs	r1, #48	; 0x30
  406b2e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406b32:	f043 0302 	orr.w	r3, r3, #2
  406b36:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406b3a:	2202      	movs	r2, #2
  406b3c:	e623      	b.n	406786 <_vfiprintf_r+0x216>
  406b3e:	f899 2000 	ldrb.w	r2, [r9]
  406b42:	2a2a      	cmp	r2, #42	; 0x2a
  406b44:	f109 0701 	add.w	r7, r9, #1
  406b48:	f000 82f0 	beq.w	40712c <_vfiprintf_r+0xbbc>
  406b4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406b50:	2909      	cmp	r1, #9
  406b52:	46b9      	mov	r9, r7
  406b54:	f04f 0400 	mov.w	r4, #0
  406b58:	f63f ad73 	bhi.w	406642 <_vfiprintf_r+0xd2>
  406b5c:	f819 2b01 	ldrb.w	r2, [r9], #1
  406b60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406b64:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406b68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406b6c:	2909      	cmp	r1, #9
  406b6e:	d9f5      	bls.n	406b5c <_vfiprintf_r+0x5ec>
  406b70:	e567      	b.n	406642 <_vfiprintf_r+0xd2>
  406b72:	f899 2000 	ldrb.w	r2, [r9]
  406b76:	2a6c      	cmp	r2, #108	; 0x6c
  406b78:	bf03      	ittte	eq
  406b7a:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  406b7e:	f043 0320 	orreq.w	r3, r3, #32
  406b82:	f109 0901 	addeq.w	r9, r9, #1
  406b86:	f043 0310 	orrne.w	r3, r3, #16
  406b8a:	e558      	b.n	40663e <_vfiprintf_r+0xce>
  406b8c:	9908      	ldr	r1, [sp, #32]
  406b8e:	680e      	ldr	r6, [r1, #0]
  406b90:	460a      	mov	r2, r1
  406b92:	2e00      	cmp	r6, #0
  406b94:	f102 0204 	add.w	r2, r2, #4
  406b98:	f6ff adda 	blt.w	406750 <_vfiprintf_r+0x1e0>
  406b9c:	9208      	str	r2, [sp, #32]
  406b9e:	f899 2000 	ldrb.w	r2, [r9]
  406ba2:	e54c      	b.n	40663e <_vfiprintf_r+0xce>
  406ba4:	9607      	str	r6, [sp, #28]
  406ba6:	2800      	cmp	r0, #0
  406ba8:	f040 82da 	bne.w	407160 <_vfiprintf_r+0xbf0>
  406bac:	4985      	ldr	r1, [pc, #532]	; (406dc4 <_vfiprintf_r+0x854>)
  406bae:	910b      	str	r1, [sp, #44]	; 0x2c
  406bb0:	e7a6      	b.n	406b00 <_vfiprintf_r+0x590>
  406bb2:	9808      	ldr	r0, [sp, #32]
  406bb4:	4a83      	ldr	r2, [pc, #524]	; (406dc4 <_vfiprintf_r+0x854>)
  406bb6:	9607      	str	r6, [sp, #28]
  406bb8:	920b      	str	r2, [sp, #44]	; 0x2c
  406bba:	6806      	ldr	r6, [r0, #0]
  406bbc:	2278      	movs	r2, #120	; 0x78
  406bbe:	2130      	movs	r1, #48	; 0x30
  406bc0:	3004      	adds	r0, #4
  406bc2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406bc6:	f043 0302 	orr.w	r3, r3, #2
  406bca:	9008      	str	r0, [sp, #32]
  406bcc:	2700      	movs	r7, #0
  406bce:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406bd2:	2202      	movs	r2, #2
  406bd4:	e5d7      	b.n	406786 <_vfiprintf_r+0x216>
  406bd6:	f043 0320 	orr.w	r3, r3, #32
  406bda:	f899 2000 	ldrb.w	r2, [r9]
  406bde:	e52e      	b.n	40663e <_vfiprintf_r+0xce>
  406be0:	9908      	ldr	r1, [sp, #32]
  406be2:	9607      	str	r6, [sp, #28]
  406be4:	f8d1 8000 	ldr.w	r8, [r1]
  406be8:	f04f 0200 	mov.w	r2, #0
  406bec:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406bf0:	1d0e      	adds	r6, r1, #4
  406bf2:	f1b8 0f00 	cmp.w	r8, #0
  406bf6:	f000 8281 	beq.w	4070fc <_vfiprintf_r+0xb8c>
  406bfa:	1c67      	adds	r7, r4, #1
  406bfc:	f000 8260 	beq.w	4070c0 <_vfiprintf_r+0xb50>
  406c00:	4622      	mov	r2, r4
  406c02:	2100      	movs	r1, #0
  406c04:	4640      	mov	r0, r8
  406c06:	9302      	str	r3, [sp, #8]
  406c08:	f002 fb0a 	bl	409220 <memchr>
  406c0c:	9b02      	ldr	r3, [sp, #8]
  406c0e:	2800      	cmp	r0, #0
  406c10:	f000 8284 	beq.w	40711c <_vfiprintf_r+0xbac>
  406c14:	eba0 0208 	sub.w	r2, r0, r8
  406c18:	9205      	str	r2, [sp, #20]
  406c1a:	9608      	str	r6, [sp, #32]
  406c1c:	9303      	str	r3, [sp, #12]
  406c1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406c22:	2400      	movs	r4, #0
  406c24:	e5ce      	b.n	4067c4 <_vfiprintf_r+0x254>
  406c26:	f043 0301 	orr.w	r3, r3, #1
  406c2a:	f899 2000 	ldrb.w	r2, [r9]
  406c2e:	e506      	b.n	40663e <_vfiprintf_r+0xce>
  406c30:	f899 2000 	ldrb.w	r2, [r9]
  406c34:	2001      	movs	r0, #1
  406c36:	252b      	movs	r5, #43	; 0x2b
  406c38:	e501      	b.n	40663e <_vfiprintf_r+0xce>
  406c3a:	2800      	cmp	r0, #0
  406c3c:	f040 8287 	bne.w	40714e <_vfiprintf_r+0xbde>
  406c40:	0699      	lsls	r1, r3, #26
  406c42:	f100 8231 	bmi.w	4070a8 <_vfiprintf_r+0xb38>
  406c46:	06da      	lsls	r2, r3, #27
  406c48:	d421      	bmi.n	406c8e <_vfiprintf_r+0x71e>
  406c4a:	065b      	lsls	r3, r3, #25
  406c4c:	d51f      	bpl.n	406c8e <_vfiprintf_r+0x71e>
  406c4e:	9a08      	ldr	r2, [sp, #32]
  406c50:	6813      	ldr	r3, [r2, #0]
  406c52:	3204      	adds	r2, #4
  406c54:	9208      	str	r2, [sp, #32]
  406c56:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  406c5a:	801a      	strh	r2, [r3, #0]
  406c5c:	e4ba      	b.n	4065d4 <_vfiprintf_r+0x64>
  406c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406c62:	f899 2000 	ldrb.w	r2, [r9]
  406c66:	e4ea      	b.n	40663e <_vfiprintf_r+0xce>
  406c68:	9607      	str	r6, [sp, #28]
  406c6a:	2800      	cmp	r0, #0
  406c6c:	f040 8275 	bne.w	40715a <_vfiprintf_r+0xbea>
  406c70:	2a00      	cmp	r2, #0
  406c72:	f000 8088 	beq.w	406d86 <_vfiprintf_r+0x816>
  406c76:	2101      	movs	r1, #1
  406c78:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406c7c:	f04f 0200 	mov.w	r2, #0
  406c80:	9102      	str	r1, [sp, #8]
  406c82:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406c86:	9105      	str	r1, [sp, #20]
  406c88:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  406c8c:	e6d3      	b.n	406a36 <_vfiprintf_r+0x4c6>
  406c8e:	9a08      	ldr	r2, [sp, #32]
  406c90:	6813      	ldr	r3, [r2, #0]
  406c92:	3204      	adds	r2, #4
  406c94:	9208      	str	r2, [sp, #32]
  406c96:	9a04      	ldr	r2, [sp, #16]
  406c98:	601a      	str	r2, [r3, #0]
  406c9a:	e49b      	b.n	4065d4 <_vfiprintf_r+0x64>
  406c9c:	aa0f      	add	r2, sp, #60	; 0x3c
  406c9e:	9901      	ldr	r1, [sp, #4]
  406ca0:	4620      	mov	r0, r4
  406ca2:	f7ff fc25 	bl	4064f0 <__sprint_r.part.0>
  406ca6:	2800      	cmp	r0, #0
  406ca8:	d174      	bne.n	406d94 <_vfiprintf_r+0x824>
  406caa:	9910      	ldr	r1, [sp, #64]	; 0x40
  406cac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406cae:	f101 0c01 	add.w	ip, r1, #1
  406cb2:	46de      	mov	lr, fp
  406cb4:	e5b3      	b.n	40681e <_vfiprintf_r+0x2ae>
  406cb6:	9910      	ldr	r1, [sp, #64]	; 0x40
  406cb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406cba:	1c48      	adds	r0, r1, #1
  406cbc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406cc0:	2d00      	cmp	r5, #0
  406cc2:	f43f add6 	beq.w	406872 <_vfiprintf_r+0x302>
  406cc6:	3201      	adds	r2, #1
  406cc8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406ccc:	2101      	movs	r1, #1
  406cce:	2807      	cmp	r0, #7
  406cd0:	9211      	str	r2, [sp, #68]	; 0x44
  406cd2:	9010      	str	r0, [sp, #64]	; 0x40
  406cd4:	f8ca 5000 	str.w	r5, [sl]
  406cd8:	f8ca 1004 	str.w	r1, [sl, #4]
  406cdc:	f340 80b6 	ble.w	406e4c <_vfiprintf_r+0x8dc>
  406ce0:	2a00      	cmp	r2, #0
  406ce2:	f040 8155 	bne.w	406f90 <_vfiprintf_r+0xa20>
  406ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ce8:	2b00      	cmp	r3, #0
  406cea:	f43f add3 	beq.w	406894 <_vfiprintf_r+0x324>
  406cee:	ab0e      	add	r3, sp, #56	; 0x38
  406cf0:	2202      	movs	r2, #2
  406cf2:	4608      	mov	r0, r1
  406cf4:	931c      	str	r3, [sp, #112]	; 0x70
  406cf6:	921d      	str	r2, [sp, #116]	; 0x74
  406cf8:	46da      	mov	sl, fp
  406cfa:	4601      	mov	r1, r0
  406cfc:	f10a 0a08 	add.w	sl, sl, #8
  406d00:	3001      	adds	r0, #1
  406d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d04:	2b80      	cmp	r3, #128	; 0x80
  406d06:	f43f adcd 	beq.w	4068a4 <_vfiprintf_r+0x334>
  406d0a:	9b05      	ldr	r3, [sp, #20]
  406d0c:	1ae4      	subs	r4, r4, r3
  406d0e:	2c00      	cmp	r4, #0
  406d10:	f77f ae07 	ble.w	406922 <_vfiprintf_r+0x3b2>
  406d14:	2c10      	cmp	r4, #16
  406d16:	4d2c      	ldr	r5, [pc, #176]	; (406dc8 <_vfiprintf_r+0x858>)
  406d18:	dd1d      	ble.n	406d56 <_vfiprintf_r+0x7e6>
  406d1a:	46d6      	mov	lr, sl
  406d1c:	2610      	movs	r6, #16
  406d1e:	9f06      	ldr	r7, [sp, #24]
  406d20:	f8dd a004 	ldr.w	sl, [sp, #4]
  406d24:	e006      	b.n	406d34 <_vfiprintf_r+0x7c4>
  406d26:	1c88      	adds	r0, r1, #2
  406d28:	f10e 0e08 	add.w	lr, lr, #8
  406d2c:	4619      	mov	r1, r3
  406d2e:	3c10      	subs	r4, #16
  406d30:	2c10      	cmp	r4, #16
  406d32:	dd0f      	ble.n	406d54 <_vfiprintf_r+0x7e4>
  406d34:	1c4b      	adds	r3, r1, #1
  406d36:	3210      	adds	r2, #16
  406d38:	2b07      	cmp	r3, #7
  406d3a:	9211      	str	r2, [sp, #68]	; 0x44
  406d3c:	e88e 0060 	stmia.w	lr, {r5, r6}
  406d40:	9310      	str	r3, [sp, #64]	; 0x40
  406d42:	ddf0      	ble.n	406d26 <_vfiprintf_r+0x7b6>
  406d44:	b9a2      	cbnz	r2, 406d70 <_vfiprintf_r+0x800>
  406d46:	3c10      	subs	r4, #16
  406d48:	2c10      	cmp	r4, #16
  406d4a:	f04f 0001 	mov.w	r0, #1
  406d4e:	4611      	mov	r1, r2
  406d50:	46de      	mov	lr, fp
  406d52:	dcef      	bgt.n	406d34 <_vfiprintf_r+0x7c4>
  406d54:	46f2      	mov	sl, lr
  406d56:	4422      	add	r2, r4
  406d58:	2807      	cmp	r0, #7
  406d5a:	9211      	str	r2, [sp, #68]	; 0x44
  406d5c:	f8ca 5000 	str.w	r5, [sl]
  406d60:	f8ca 4004 	str.w	r4, [sl, #4]
  406d64:	9010      	str	r0, [sp, #64]	; 0x40
  406d66:	dc31      	bgt.n	406dcc <_vfiprintf_r+0x85c>
  406d68:	f10a 0a08 	add.w	sl, sl, #8
  406d6c:	3001      	adds	r0, #1
  406d6e:	e5d8      	b.n	406922 <_vfiprintf_r+0x3b2>
  406d70:	aa0f      	add	r2, sp, #60	; 0x3c
  406d72:	4651      	mov	r1, sl
  406d74:	4638      	mov	r0, r7
  406d76:	f7ff fbbb 	bl	4064f0 <__sprint_r.part.0>
  406d7a:	b958      	cbnz	r0, 406d94 <_vfiprintf_r+0x824>
  406d7c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d80:	1c48      	adds	r0, r1, #1
  406d82:	46de      	mov	lr, fp
  406d84:	e7d3      	b.n	406d2e <_vfiprintf_r+0x7be>
  406d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406d88:	b123      	cbz	r3, 406d94 <_vfiprintf_r+0x824>
  406d8a:	9806      	ldr	r0, [sp, #24]
  406d8c:	9901      	ldr	r1, [sp, #4]
  406d8e:	aa0f      	add	r2, sp, #60	; 0x3c
  406d90:	f7ff fbae 	bl	4064f0 <__sprint_r.part.0>
  406d94:	9b01      	ldr	r3, [sp, #4]
  406d96:	899b      	ldrh	r3, [r3, #12]
  406d98:	065b      	lsls	r3, r3, #25
  406d9a:	f57f acd2 	bpl.w	406742 <_vfiprintf_r+0x1d2>
  406d9e:	f04f 33ff 	mov.w	r3, #4294967295
  406da2:	9304      	str	r3, [sp, #16]
  406da4:	e4cd      	b.n	406742 <_vfiprintf_r+0x1d2>
  406da6:	aa0f      	add	r2, sp, #60	; 0x3c
  406da8:	4641      	mov	r1, r8
  406daa:	4638      	mov	r0, r7
  406dac:	f7ff fba0 	bl	4064f0 <__sprint_r.part.0>
  406db0:	2800      	cmp	r0, #0
  406db2:	d1ef      	bne.n	406d94 <_vfiprintf_r+0x824>
  406db4:	9910      	ldr	r1, [sp, #64]	; 0x40
  406db6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406db8:	1c48      	adds	r0, r1, #1
  406dba:	46da      	mov	sl, fp
  406dbc:	e5d8      	b.n	406970 <_vfiprintf_r+0x400>
  406dbe:	bf00      	nop
  406dc0:	0040bfb8 	.word	0x0040bfb8
  406dc4:	0040bfcc 	.word	0x0040bfcc
  406dc8:	0040c01c 	.word	0x0040c01c
  406dcc:	2a00      	cmp	r2, #0
  406dce:	f040 8100 	bne.w	406fd2 <_vfiprintf_r+0xa62>
  406dd2:	9a05      	ldr	r2, [sp, #20]
  406dd4:	921d      	str	r2, [sp, #116]	; 0x74
  406dd6:	2301      	movs	r3, #1
  406dd8:	9211      	str	r2, [sp, #68]	; 0x44
  406dda:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  406dde:	9310      	str	r3, [sp, #64]	; 0x40
  406de0:	46da      	mov	sl, fp
  406de2:	f10a 0a08 	add.w	sl, sl, #8
  406de6:	9b03      	ldr	r3, [sp, #12]
  406de8:	0759      	lsls	r1, r3, #29
  406dea:	d505      	bpl.n	406df8 <_vfiprintf_r+0x888>
  406dec:	9b07      	ldr	r3, [sp, #28]
  406dee:	9902      	ldr	r1, [sp, #8]
  406df0:	1a5c      	subs	r4, r3, r1
  406df2:	2c00      	cmp	r4, #0
  406df4:	f73f adae 	bgt.w	406954 <_vfiprintf_r+0x3e4>
  406df8:	9b04      	ldr	r3, [sp, #16]
  406dfa:	9907      	ldr	r1, [sp, #28]
  406dfc:	9802      	ldr	r0, [sp, #8]
  406dfe:	4281      	cmp	r1, r0
  406e00:	bfac      	ite	ge
  406e02:	185b      	addge	r3, r3, r1
  406e04:	181b      	addlt	r3, r3, r0
  406e06:	9304      	str	r3, [sp, #16]
  406e08:	bb7a      	cbnz	r2, 406e6a <_vfiprintf_r+0x8fa>
  406e0a:	2300      	movs	r3, #0
  406e0c:	9310      	str	r3, [sp, #64]	; 0x40
  406e0e:	46da      	mov	sl, fp
  406e10:	f7ff bbe0 	b.w	4065d4 <_vfiprintf_r+0x64>
  406e14:	aa0f      	add	r2, sp, #60	; 0x3c
  406e16:	9901      	ldr	r1, [sp, #4]
  406e18:	4620      	mov	r0, r4
  406e1a:	f7ff fb69 	bl	4064f0 <__sprint_r.part.0>
  406e1e:	2800      	cmp	r0, #0
  406e20:	d1b8      	bne.n	406d94 <_vfiprintf_r+0x824>
  406e22:	9910      	ldr	r1, [sp, #64]	; 0x40
  406e24:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e26:	f101 0e01 	add.w	lr, r1, #1
  406e2a:	46dc      	mov	ip, fp
  406e2c:	e54e      	b.n	4068cc <_vfiprintf_r+0x35c>
  406e2e:	2a00      	cmp	r2, #0
  406e30:	f040 811c 	bne.w	40706c <_vfiprintf_r+0xafc>
  406e34:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406e38:	2900      	cmp	r1, #0
  406e3a:	f000 8111 	beq.w	407060 <_vfiprintf_r+0xaf0>
  406e3e:	2201      	movs	r2, #1
  406e40:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406e44:	4610      	mov	r0, r2
  406e46:	921d      	str	r2, [sp, #116]	; 0x74
  406e48:	911c      	str	r1, [sp, #112]	; 0x70
  406e4a:	46da      	mov	sl, fp
  406e4c:	4601      	mov	r1, r0
  406e4e:	f10a 0a08 	add.w	sl, sl, #8
  406e52:	3001      	adds	r0, #1
  406e54:	e50d      	b.n	406872 <_vfiprintf_r+0x302>
  406e56:	9b03      	ldr	r3, [sp, #12]
  406e58:	2a01      	cmp	r2, #1
  406e5a:	f000 8090 	beq.w	406f7e <_vfiprintf_r+0xa0e>
  406e5e:	2a02      	cmp	r2, #2
  406e60:	d10b      	bne.n	406e7a <_vfiprintf_r+0x90a>
  406e62:	9303      	str	r3, [sp, #12]
  406e64:	2600      	movs	r6, #0
  406e66:	2700      	movs	r7, #0
  406e68:	e615      	b.n	406a96 <_vfiprintf_r+0x526>
  406e6a:	aa0f      	add	r2, sp, #60	; 0x3c
  406e6c:	9901      	ldr	r1, [sp, #4]
  406e6e:	9806      	ldr	r0, [sp, #24]
  406e70:	f7ff fb3e 	bl	4064f0 <__sprint_r.part.0>
  406e74:	2800      	cmp	r0, #0
  406e76:	d0c8      	beq.n	406e0a <_vfiprintf_r+0x89a>
  406e78:	e78c      	b.n	406d94 <_vfiprintf_r+0x824>
  406e7a:	9303      	str	r3, [sp, #12]
  406e7c:	2600      	movs	r6, #0
  406e7e:	2700      	movs	r7, #0
  406e80:	4659      	mov	r1, fp
  406e82:	e000      	b.n	406e86 <_vfiprintf_r+0x916>
  406e84:	4641      	mov	r1, r8
  406e86:	08f2      	lsrs	r2, r6, #3
  406e88:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406e8c:	08f8      	lsrs	r0, r7, #3
  406e8e:	f006 0307 	and.w	r3, r6, #7
  406e92:	4607      	mov	r7, r0
  406e94:	4616      	mov	r6, r2
  406e96:	3330      	adds	r3, #48	; 0x30
  406e98:	ea56 0207 	orrs.w	r2, r6, r7
  406e9c:	f801 3c01 	strb.w	r3, [r1, #-1]
  406ea0:	f101 38ff 	add.w	r8, r1, #4294967295
  406ea4:	d1ee      	bne.n	406e84 <_vfiprintf_r+0x914>
  406ea6:	9a03      	ldr	r2, [sp, #12]
  406ea8:	07d6      	lsls	r6, r2, #31
  406eaa:	f57f ae04 	bpl.w	406ab6 <_vfiprintf_r+0x546>
  406eae:	2b30      	cmp	r3, #48	; 0x30
  406eb0:	f43f ae01 	beq.w	406ab6 <_vfiprintf_r+0x546>
  406eb4:	3902      	subs	r1, #2
  406eb6:	2330      	movs	r3, #48	; 0x30
  406eb8:	f808 3c01 	strb.w	r3, [r8, #-1]
  406ebc:	ebab 0301 	sub.w	r3, fp, r1
  406ec0:	9305      	str	r3, [sp, #20]
  406ec2:	4688      	mov	r8, r1
  406ec4:	e47e      	b.n	4067c4 <_vfiprintf_r+0x254>
  406ec6:	9b04      	ldr	r3, [sp, #16]
  406ec8:	9a07      	ldr	r2, [sp, #28]
  406eca:	428a      	cmp	r2, r1
  406ecc:	bfac      	ite	ge
  406ece:	189b      	addge	r3, r3, r2
  406ed0:	185b      	addlt	r3, r3, r1
  406ed2:	9304      	str	r3, [sp, #16]
  406ed4:	e799      	b.n	406e0a <_vfiprintf_r+0x89a>
  406ed6:	2202      	movs	r2, #2
  406ed8:	e455      	b.n	406786 <_vfiprintf_r+0x216>
  406eda:	2f00      	cmp	r7, #0
  406edc:	bf08      	it	eq
  406ede:	2e0a      	cmpeq	r6, #10
  406ee0:	d34c      	bcc.n	406f7c <_vfiprintf_r+0xa0c>
  406ee2:	46d8      	mov	r8, fp
  406ee4:	4630      	mov	r0, r6
  406ee6:	4639      	mov	r1, r7
  406ee8:	220a      	movs	r2, #10
  406eea:	2300      	movs	r3, #0
  406eec:	f003 ff5e 	bl	40adac <__aeabi_uldivmod>
  406ef0:	3230      	adds	r2, #48	; 0x30
  406ef2:	f808 2d01 	strb.w	r2, [r8, #-1]!
  406ef6:	4630      	mov	r0, r6
  406ef8:	4639      	mov	r1, r7
  406efa:	2300      	movs	r3, #0
  406efc:	220a      	movs	r2, #10
  406efe:	f003 ff55 	bl	40adac <__aeabi_uldivmod>
  406f02:	4606      	mov	r6, r0
  406f04:	460f      	mov	r7, r1
  406f06:	ea56 0307 	orrs.w	r3, r6, r7
  406f0a:	d1eb      	bne.n	406ee4 <_vfiprintf_r+0x974>
  406f0c:	ebab 0308 	sub.w	r3, fp, r8
  406f10:	9305      	str	r3, [sp, #20]
  406f12:	e457      	b.n	4067c4 <_vfiprintf_r+0x254>
  406f14:	9405      	str	r4, [sp, #20]
  406f16:	46d8      	mov	r8, fp
  406f18:	e454      	b.n	4067c4 <_vfiprintf_r+0x254>
  406f1a:	aa0f      	add	r2, sp, #60	; 0x3c
  406f1c:	9901      	ldr	r1, [sp, #4]
  406f1e:	9806      	ldr	r0, [sp, #24]
  406f20:	f7ff fae6 	bl	4064f0 <__sprint_r.part.0>
  406f24:	2800      	cmp	r0, #0
  406f26:	f47f af35 	bne.w	406d94 <_vfiprintf_r+0x824>
  406f2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f2c:	46da      	mov	sl, fp
  406f2e:	e75a      	b.n	406de6 <_vfiprintf_r+0x876>
  406f30:	aa0f      	add	r2, sp, #60	; 0x3c
  406f32:	9901      	ldr	r1, [sp, #4]
  406f34:	9806      	ldr	r0, [sp, #24]
  406f36:	f7ff fadb 	bl	4064f0 <__sprint_r.part.0>
  406f3a:	2800      	cmp	r0, #0
  406f3c:	f47f af2a 	bne.w	406d94 <_vfiprintf_r+0x824>
  406f40:	46da      	mov	sl, fp
  406f42:	f7ff bbe0 	b.w	406706 <_vfiprintf_r+0x196>
  406f46:	3104      	adds	r1, #4
  406f48:	6816      	ldr	r6, [r2, #0]
  406f4a:	9108      	str	r1, [sp, #32]
  406f4c:	2201      	movs	r2, #1
  406f4e:	2700      	movs	r7, #0
  406f50:	e419      	b.n	406786 <_vfiprintf_r+0x216>
  406f52:	9808      	ldr	r0, [sp, #32]
  406f54:	4601      	mov	r1, r0
  406f56:	3104      	adds	r1, #4
  406f58:	6806      	ldr	r6, [r0, #0]
  406f5a:	9108      	str	r1, [sp, #32]
  406f5c:	2700      	movs	r7, #0
  406f5e:	e412      	b.n	406786 <_vfiprintf_r+0x216>
  406f60:	680e      	ldr	r6, [r1, #0]
  406f62:	3104      	adds	r1, #4
  406f64:	9108      	str	r1, [sp, #32]
  406f66:	2700      	movs	r7, #0
  406f68:	e5d9      	b.n	406b1e <_vfiprintf_r+0x5ae>
  406f6a:	9908      	ldr	r1, [sp, #32]
  406f6c:	680e      	ldr	r6, [r1, #0]
  406f6e:	460a      	mov	r2, r1
  406f70:	17f7      	asrs	r7, r6, #31
  406f72:	3204      	adds	r2, #4
  406f74:	9208      	str	r2, [sp, #32]
  406f76:	4630      	mov	r0, r6
  406f78:	4639      	mov	r1, r7
  406f7a:	e575      	b.n	406a68 <_vfiprintf_r+0x4f8>
  406f7c:	9b03      	ldr	r3, [sp, #12]
  406f7e:	9303      	str	r3, [sp, #12]
  406f80:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  406f84:	3630      	adds	r6, #48	; 0x30
  406f86:	2301      	movs	r3, #1
  406f88:	f808 6d41 	strb.w	r6, [r8, #-65]!
  406f8c:	9305      	str	r3, [sp, #20]
  406f8e:	e419      	b.n	4067c4 <_vfiprintf_r+0x254>
  406f90:	aa0f      	add	r2, sp, #60	; 0x3c
  406f92:	9901      	ldr	r1, [sp, #4]
  406f94:	9806      	ldr	r0, [sp, #24]
  406f96:	f7ff faab 	bl	4064f0 <__sprint_r.part.0>
  406f9a:	2800      	cmp	r0, #0
  406f9c:	f47f aefa 	bne.w	406d94 <_vfiprintf_r+0x824>
  406fa0:	9910      	ldr	r1, [sp, #64]	; 0x40
  406fa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fa4:	1c48      	adds	r0, r1, #1
  406fa6:	46da      	mov	sl, fp
  406fa8:	e463      	b.n	406872 <_vfiprintf_r+0x302>
  406faa:	aa0f      	add	r2, sp, #60	; 0x3c
  406fac:	9901      	ldr	r1, [sp, #4]
  406fae:	9806      	ldr	r0, [sp, #24]
  406fb0:	f7ff fa9e 	bl	4064f0 <__sprint_r.part.0>
  406fb4:	2800      	cmp	r0, #0
  406fb6:	f47f aeed 	bne.w	406d94 <_vfiprintf_r+0x824>
  406fba:	9910      	ldr	r1, [sp, #64]	; 0x40
  406fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fbe:	1c48      	adds	r0, r1, #1
  406fc0:	46da      	mov	sl, fp
  406fc2:	e69e      	b.n	406d02 <_vfiprintf_r+0x792>
  406fc4:	2a00      	cmp	r2, #0
  406fc6:	f040 8086 	bne.w	4070d6 <_vfiprintf_r+0xb66>
  406fca:	2001      	movs	r0, #1
  406fcc:	4611      	mov	r1, r2
  406fce:	46da      	mov	sl, fp
  406fd0:	e69b      	b.n	406d0a <_vfiprintf_r+0x79a>
  406fd2:	aa0f      	add	r2, sp, #60	; 0x3c
  406fd4:	9901      	ldr	r1, [sp, #4]
  406fd6:	9806      	ldr	r0, [sp, #24]
  406fd8:	f7ff fa8a 	bl	4064f0 <__sprint_r.part.0>
  406fdc:	2800      	cmp	r0, #0
  406fde:	f47f aed9 	bne.w	406d94 <_vfiprintf_r+0x824>
  406fe2:	9810      	ldr	r0, [sp, #64]	; 0x40
  406fe4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fe6:	3001      	adds	r0, #1
  406fe8:	46da      	mov	sl, fp
  406fea:	e49a      	b.n	406922 <_vfiprintf_r+0x3b2>
  406fec:	9e08      	ldr	r6, [sp, #32]
  406fee:	3607      	adds	r6, #7
  406ff0:	f026 0607 	bic.w	r6, r6, #7
  406ff4:	e9d6 0100 	ldrd	r0, r1, [r6]
  406ff8:	f106 0208 	add.w	r2, r6, #8
  406ffc:	9208      	str	r2, [sp, #32]
  406ffe:	4606      	mov	r6, r0
  407000:	460f      	mov	r7, r1
  407002:	e531      	b.n	406a68 <_vfiprintf_r+0x4f8>
  407004:	9e08      	ldr	r6, [sp, #32]
  407006:	3607      	adds	r6, #7
  407008:	f026 0207 	bic.w	r2, r6, #7
  40700c:	f102 0108 	add.w	r1, r2, #8
  407010:	e9d2 6700 	ldrd	r6, r7, [r2]
  407014:	9108      	str	r1, [sp, #32]
  407016:	2201      	movs	r2, #1
  407018:	f7ff bbb5 	b.w	406786 <_vfiprintf_r+0x216>
  40701c:	9e08      	ldr	r6, [sp, #32]
  40701e:	3607      	adds	r6, #7
  407020:	f026 0207 	bic.w	r2, r6, #7
  407024:	f102 0108 	add.w	r1, r2, #8
  407028:	e9d2 6700 	ldrd	r6, r7, [r2]
  40702c:	9108      	str	r1, [sp, #32]
  40702e:	2200      	movs	r2, #0
  407030:	f7ff bba9 	b.w	406786 <_vfiprintf_r+0x216>
  407034:	9e08      	ldr	r6, [sp, #32]
  407036:	3607      	adds	r6, #7
  407038:	f026 0107 	bic.w	r1, r6, #7
  40703c:	f101 0008 	add.w	r0, r1, #8
  407040:	9008      	str	r0, [sp, #32]
  407042:	e9d1 6700 	ldrd	r6, r7, [r1]
  407046:	e56a      	b.n	406b1e <_vfiprintf_r+0x5ae>
  407048:	46d8      	mov	r8, fp
  40704a:	f7ff bbbb 	b.w	4067c4 <_vfiprintf_r+0x254>
  40704e:	252d      	movs	r5, #45	; 0x2d
  407050:	4276      	negs	r6, r6
  407052:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  407056:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40705a:	2201      	movs	r2, #1
  40705c:	f7ff bb98 	b.w	406790 <_vfiprintf_r+0x220>
  407060:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407062:	b9d3      	cbnz	r3, 40709a <_vfiprintf_r+0xb2a>
  407064:	4611      	mov	r1, r2
  407066:	2001      	movs	r0, #1
  407068:	46da      	mov	sl, fp
  40706a:	e64e      	b.n	406d0a <_vfiprintf_r+0x79a>
  40706c:	aa0f      	add	r2, sp, #60	; 0x3c
  40706e:	9901      	ldr	r1, [sp, #4]
  407070:	9806      	ldr	r0, [sp, #24]
  407072:	f7ff fa3d 	bl	4064f0 <__sprint_r.part.0>
  407076:	2800      	cmp	r0, #0
  407078:	f47f ae8c 	bne.w	406d94 <_vfiprintf_r+0x824>
  40707c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40707e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407080:	1c48      	adds	r0, r1, #1
  407082:	46da      	mov	sl, fp
  407084:	e61a      	b.n	406cbc <_vfiprintf_r+0x74c>
  407086:	aa0f      	add	r2, sp, #60	; 0x3c
  407088:	9901      	ldr	r1, [sp, #4]
  40708a:	9806      	ldr	r0, [sp, #24]
  40708c:	f7ff fa30 	bl	4064f0 <__sprint_r.part.0>
  407090:	2800      	cmp	r0, #0
  407092:	f47f ae7f 	bne.w	406d94 <_vfiprintf_r+0x824>
  407096:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407098:	e6ae      	b.n	406df8 <_vfiprintf_r+0x888>
  40709a:	ab0e      	add	r3, sp, #56	; 0x38
  40709c:	2202      	movs	r2, #2
  40709e:	931c      	str	r3, [sp, #112]	; 0x70
  4070a0:	921d      	str	r2, [sp, #116]	; 0x74
  4070a2:	2001      	movs	r0, #1
  4070a4:	46da      	mov	sl, fp
  4070a6:	e628      	b.n	406cfa <_vfiprintf_r+0x78a>
  4070a8:	9a08      	ldr	r2, [sp, #32]
  4070aa:	9904      	ldr	r1, [sp, #16]
  4070ac:	6813      	ldr	r3, [r2, #0]
  4070ae:	17cd      	asrs	r5, r1, #31
  4070b0:	4608      	mov	r0, r1
  4070b2:	3204      	adds	r2, #4
  4070b4:	4629      	mov	r1, r5
  4070b6:	9208      	str	r2, [sp, #32]
  4070b8:	e9c3 0100 	strd	r0, r1, [r3]
  4070bc:	f7ff ba8a 	b.w	4065d4 <_vfiprintf_r+0x64>
  4070c0:	4640      	mov	r0, r8
  4070c2:	9608      	str	r6, [sp, #32]
  4070c4:	9303      	str	r3, [sp, #12]
  4070c6:	f7fd fd1b 	bl	404b00 <strlen>
  4070ca:	2400      	movs	r4, #0
  4070cc:	9005      	str	r0, [sp, #20]
  4070ce:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4070d2:	f7ff bb77 	b.w	4067c4 <_vfiprintf_r+0x254>
  4070d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4070d8:	9901      	ldr	r1, [sp, #4]
  4070da:	9806      	ldr	r0, [sp, #24]
  4070dc:	f7ff fa08 	bl	4064f0 <__sprint_r.part.0>
  4070e0:	2800      	cmp	r0, #0
  4070e2:	f47f ae57 	bne.w	406d94 <_vfiprintf_r+0x824>
  4070e6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4070e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4070ea:	1c48      	adds	r0, r1, #1
  4070ec:	46da      	mov	sl, fp
  4070ee:	e60c      	b.n	406d0a <_vfiprintf_r+0x79a>
  4070f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4070f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4070f4:	4e1c      	ldr	r6, [pc, #112]	; (407168 <_vfiprintf_r+0xbf8>)
  4070f6:	3101      	adds	r1, #1
  4070f8:	f7ff bba9 	b.w	40684e <_vfiprintf_r+0x2de>
  4070fc:	2c06      	cmp	r4, #6
  4070fe:	bf28      	it	cs
  407100:	2406      	movcs	r4, #6
  407102:	9405      	str	r4, [sp, #20]
  407104:	9608      	str	r6, [sp, #32]
  407106:	9402      	str	r4, [sp, #8]
  407108:	f8df 8060 	ldr.w	r8, [pc, #96]	; 40716c <_vfiprintf_r+0xbfc>
  40710c:	e493      	b.n	406a36 <_vfiprintf_r+0x4c6>
  40710e:	9810      	ldr	r0, [sp, #64]	; 0x40
  407110:	4e15      	ldr	r6, [pc, #84]	; (407168 <_vfiprintf_r+0xbf8>)
  407112:	3001      	adds	r0, #1
  407114:	e443      	b.n	40699e <_vfiprintf_r+0x42e>
  407116:	4686      	mov	lr, r0
  407118:	f7ff bbef 	b.w	4068fa <_vfiprintf_r+0x38a>
  40711c:	9405      	str	r4, [sp, #20]
  40711e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407122:	9608      	str	r6, [sp, #32]
  407124:	9303      	str	r3, [sp, #12]
  407126:	4604      	mov	r4, r0
  407128:	f7ff bb4c 	b.w	4067c4 <_vfiprintf_r+0x254>
  40712c:	9908      	ldr	r1, [sp, #32]
  40712e:	f899 2001 	ldrb.w	r2, [r9, #1]
  407132:	680c      	ldr	r4, [r1, #0]
  407134:	3104      	adds	r1, #4
  407136:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40713a:	46b9      	mov	r9, r7
  40713c:	9108      	str	r1, [sp, #32]
  40713e:	f7ff ba7e 	b.w	40663e <_vfiprintf_r+0xce>
  407142:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407146:	e4c6      	b.n	406ad6 <_vfiprintf_r+0x566>
  407148:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40714c:	e47a      	b.n	406a44 <_vfiprintf_r+0x4d4>
  40714e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407152:	e575      	b.n	406c40 <_vfiprintf_r+0x6d0>
  407154:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407158:	e4d0      	b.n	406afc <_vfiprintf_r+0x58c>
  40715a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40715e:	e587      	b.n	406c70 <_vfiprintf_r+0x700>
  407160:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407164:	e522      	b.n	406bac <_vfiprintf_r+0x63c>
  407166:	bf00      	nop
  407168:	0040c00c 	.word	0x0040c00c
  40716c:	0040bfe0 	.word	0x0040bfe0

00407170 <__sbprintf>:
  407170:	b5f0      	push	{r4, r5, r6, r7, lr}
  407172:	460c      	mov	r4, r1
  407174:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  407178:	8989      	ldrh	r1, [r1, #12]
  40717a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40717c:	89e5      	ldrh	r5, [r4, #14]
  40717e:	9619      	str	r6, [sp, #100]	; 0x64
  407180:	f021 0102 	bic.w	r1, r1, #2
  407184:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407186:	f8ad 500e 	strh.w	r5, [sp, #14]
  40718a:	2500      	movs	r5, #0
  40718c:	69e7      	ldr	r7, [r4, #28]
  40718e:	f8ad 100c 	strh.w	r1, [sp, #12]
  407192:	9609      	str	r6, [sp, #36]	; 0x24
  407194:	9506      	str	r5, [sp, #24]
  407196:	ae1a      	add	r6, sp, #104	; 0x68
  407198:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40719c:	4669      	mov	r1, sp
  40719e:	9600      	str	r6, [sp, #0]
  4071a0:	9604      	str	r6, [sp, #16]
  4071a2:	9502      	str	r5, [sp, #8]
  4071a4:	9505      	str	r5, [sp, #20]
  4071a6:	9707      	str	r7, [sp, #28]
  4071a8:	4606      	mov	r6, r0
  4071aa:	f7ff f9e1 	bl	406570 <_vfiprintf_r>
  4071ae:	1e05      	subs	r5, r0, #0
  4071b0:	db07      	blt.n	4071c2 <__sbprintf+0x52>
  4071b2:	4630      	mov	r0, r6
  4071b4:	4669      	mov	r1, sp
  4071b6:	f001 f8e5 	bl	408384 <_fflush_r>
  4071ba:	2800      	cmp	r0, #0
  4071bc:	bf18      	it	ne
  4071be:	f04f 35ff 	movne.w	r5, #4294967295
  4071c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4071c6:	065b      	lsls	r3, r3, #25
  4071c8:	d503      	bpl.n	4071d2 <__sbprintf+0x62>
  4071ca:	89a3      	ldrh	r3, [r4, #12]
  4071cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4071d0:	81a3      	strh	r3, [r4, #12]
  4071d2:	4628      	mov	r0, r5
  4071d4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4071d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4071da:	bf00      	nop

004071dc <__swsetup_r>:
  4071dc:	b538      	push	{r3, r4, r5, lr}
  4071de:	4b30      	ldr	r3, [pc, #192]	; (4072a0 <__swsetup_r+0xc4>)
  4071e0:	681b      	ldr	r3, [r3, #0]
  4071e2:	4605      	mov	r5, r0
  4071e4:	460c      	mov	r4, r1
  4071e6:	b113      	cbz	r3, 4071ee <__swsetup_r+0x12>
  4071e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4071ea:	2a00      	cmp	r2, #0
  4071ec:	d038      	beq.n	407260 <__swsetup_r+0x84>
  4071ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4071f2:	b293      	uxth	r3, r2
  4071f4:	0718      	lsls	r0, r3, #28
  4071f6:	d50c      	bpl.n	407212 <__swsetup_r+0x36>
  4071f8:	6920      	ldr	r0, [r4, #16]
  4071fa:	b1a8      	cbz	r0, 407228 <__swsetup_r+0x4c>
  4071fc:	f013 0201 	ands.w	r2, r3, #1
  407200:	d01e      	beq.n	407240 <__swsetup_r+0x64>
  407202:	6963      	ldr	r3, [r4, #20]
  407204:	2200      	movs	r2, #0
  407206:	425b      	negs	r3, r3
  407208:	61a3      	str	r3, [r4, #24]
  40720a:	60a2      	str	r2, [r4, #8]
  40720c:	b1f0      	cbz	r0, 40724c <__swsetup_r+0x70>
  40720e:	2000      	movs	r0, #0
  407210:	bd38      	pop	{r3, r4, r5, pc}
  407212:	06d9      	lsls	r1, r3, #27
  407214:	d53c      	bpl.n	407290 <__swsetup_r+0xb4>
  407216:	0758      	lsls	r0, r3, #29
  407218:	d426      	bmi.n	407268 <__swsetup_r+0x8c>
  40721a:	6920      	ldr	r0, [r4, #16]
  40721c:	f042 0308 	orr.w	r3, r2, #8
  407220:	81a3      	strh	r3, [r4, #12]
  407222:	b29b      	uxth	r3, r3
  407224:	2800      	cmp	r0, #0
  407226:	d1e9      	bne.n	4071fc <__swsetup_r+0x20>
  407228:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40722c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407230:	d0e4      	beq.n	4071fc <__swsetup_r+0x20>
  407232:	4628      	mov	r0, r5
  407234:	4621      	mov	r1, r4
  407236:	f001 fce1 	bl	408bfc <__smakebuf_r>
  40723a:	89a3      	ldrh	r3, [r4, #12]
  40723c:	6920      	ldr	r0, [r4, #16]
  40723e:	e7dd      	b.n	4071fc <__swsetup_r+0x20>
  407240:	0799      	lsls	r1, r3, #30
  407242:	bf58      	it	pl
  407244:	6962      	ldrpl	r2, [r4, #20]
  407246:	60a2      	str	r2, [r4, #8]
  407248:	2800      	cmp	r0, #0
  40724a:	d1e0      	bne.n	40720e <__swsetup_r+0x32>
  40724c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407250:	061a      	lsls	r2, r3, #24
  407252:	d5dd      	bpl.n	407210 <__swsetup_r+0x34>
  407254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407258:	81a3      	strh	r3, [r4, #12]
  40725a:	f04f 30ff 	mov.w	r0, #4294967295
  40725e:	bd38      	pop	{r3, r4, r5, pc}
  407260:	4618      	mov	r0, r3
  407262:	f001 f923 	bl	4084ac <__sinit>
  407266:	e7c2      	b.n	4071ee <__swsetup_r+0x12>
  407268:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40726a:	b151      	cbz	r1, 407282 <__swsetup_r+0xa6>
  40726c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407270:	4299      	cmp	r1, r3
  407272:	d004      	beq.n	40727e <__swsetup_r+0xa2>
  407274:	4628      	mov	r0, r5
  407276:	f001 f9ef 	bl	408658 <_free_r>
  40727a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40727e:	2300      	movs	r3, #0
  407280:	6323      	str	r3, [r4, #48]	; 0x30
  407282:	2300      	movs	r3, #0
  407284:	6920      	ldr	r0, [r4, #16]
  407286:	6063      	str	r3, [r4, #4]
  407288:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40728c:	6020      	str	r0, [r4, #0]
  40728e:	e7c5      	b.n	40721c <__swsetup_r+0x40>
  407290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407294:	2309      	movs	r3, #9
  407296:	602b      	str	r3, [r5, #0]
  407298:	f04f 30ff 	mov.w	r0, #4294967295
  40729c:	81a2      	strh	r2, [r4, #12]
  40729e:	bd38      	pop	{r3, r4, r5, pc}
  4072a0:	20400020 	.word	0x20400020

004072a4 <register_fini>:
  4072a4:	4b02      	ldr	r3, [pc, #8]	; (4072b0 <register_fini+0xc>)
  4072a6:	b113      	cbz	r3, 4072ae <register_fini+0xa>
  4072a8:	4802      	ldr	r0, [pc, #8]	; (4072b4 <register_fini+0x10>)
  4072aa:	f000 b805 	b.w	4072b8 <atexit>
  4072ae:	4770      	bx	lr
  4072b0:	00000000 	.word	0x00000000
  4072b4:	004084c1 	.word	0x004084c1

004072b8 <atexit>:
  4072b8:	2300      	movs	r3, #0
  4072ba:	4601      	mov	r1, r0
  4072bc:	461a      	mov	r2, r3
  4072be:	4618      	mov	r0, r3
  4072c0:	f002 bfbe 	b.w	40a240 <__register_exitproc>

004072c4 <quorem>:
  4072c4:	6902      	ldr	r2, [r0, #16]
  4072c6:	690b      	ldr	r3, [r1, #16]
  4072c8:	4293      	cmp	r3, r2
  4072ca:	f300 808d 	bgt.w	4073e8 <quorem+0x124>
  4072ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072d2:	f103 38ff 	add.w	r8, r3, #4294967295
  4072d6:	f101 0714 	add.w	r7, r1, #20
  4072da:	f100 0b14 	add.w	fp, r0, #20
  4072de:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4072e2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4072e6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4072ea:	b083      	sub	sp, #12
  4072ec:	3201      	adds	r2, #1
  4072ee:	fbb3 f9f2 	udiv	r9, r3, r2
  4072f2:	eb0b 0304 	add.w	r3, fp, r4
  4072f6:	9400      	str	r4, [sp, #0]
  4072f8:	eb07 0a04 	add.w	sl, r7, r4
  4072fc:	9301      	str	r3, [sp, #4]
  4072fe:	f1b9 0f00 	cmp.w	r9, #0
  407302:	d039      	beq.n	407378 <quorem+0xb4>
  407304:	2500      	movs	r5, #0
  407306:	462e      	mov	r6, r5
  407308:	46bc      	mov	ip, r7
  40730a:	46de      	mov	lr, fp
  40730c:	f85c 4b04 	ldr.w	r4, [ip], #4
  407310:	f8de 3000 	ldr.w	r3, [lr]
  407314:	b2a2      	uxth	r2, r4
  407316:	fb09 5502 	mla	r5, r9, r2, r5
  40731a:	0c22      	lsrs	r2, r4, #16
  40731c:	0c2c      	lsrs	r4, r5, #16
  40731e:	fb09 4202 	mla	r2, r9, r2, r4
  407322:	b2ad      	uxth	r5, r5
  407324:	1b75      	subs	r5, r6, r5
  407326:	b296      	uxth	r6, r2
  407328:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40732c:	fa15 f383 	uxtah	r3, r5, r3
  407330:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407334:	b29b      	uxth	r3, r3
  407336:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40733a:	45e2      	cmp	sl, ip
  40733c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  407340:	f84e 3b04 	str.w	r3, [lr], #4
  407344:	ea4f 4626 	mov.w	r6, r6, asr #16
  407348:	d2e0      	bcs.n	40730c <quorem+0x48>
  40734a:	9b00      	ldr	r3, [sp, #0]
  40734c:	f85b 3003 	ldr.w	r3, [fp, r3]
  407350:	b993      	cbnz	r3, 407378 <quorem+0xb4>
  407352:	9c01      	ldr	r4, [sp, #4]
  407354:	1f23      	subs	r3, r4, #4
  407356:	459b      	cmp	fp, r3
  407358:	d20c      	bcs.n	407374 <quorem+0xb0>
  40735a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40735e:	b94b      	cbnz	r3, 407374 <quorem+0xb0>
  407360:	f1a4 0308 	sub.w	r3, r4, #8
  407364:	e002      	b.n	40736c <quorem+0xa8>
  407366:	681a      	ldr	r2, [r3, #0]
  407368:	3b04      	subs	r3, #4
  40736a:	b91a      	cbnz	r2, 407374 <quorem+0xb0>
  40736c:	459b      	cmp	fp, r3
  40736e:	f108 38ff 	add.w	r8, r8, #4294967295
  407372:	d3f8      	bcc.n	407366 <quorem+0xa2>
  407374:	f8c0 8010 	str.w	r8, [r0, #16]
  407378:	4604      	mov	r4, r0
  40737a:	f002 fad1 	bl	409920 <__mcmp>
  40737e:	2800      	cmp	r0, #0
  407380:	db2e      	blt.n	4073e0 <quorem+0x11c>
  407382:	f109 0901 	add.w	r9, r9, #1
  407386:	465d      	mov	r5, fp
  407388:	2300      	movs	r3, #0
  40738a:	f857 1b04 	ldr.w	r1, [r7], #4
  40738e:	6828      	ldr	r0, [r5, #0]
  407390:	b28a      	uxth	r2, r1
  407392:	1a9a      	subs	r2, r3, r2
  407394:	0c0b      	lsrs	r3, r1, #16
  407396:	fa12 f280 	uxtah	r2, r2, r0
  40739a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40739e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4073a2:	b292      	uxth	r2, r2
  4073a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4073a8:	45ba      	cmp	sl, r7
  4073aa:	f845 2b04 	str.w	r2, [r5], #4
  4073ae:	ea4f 4323 	mov.w	r3, r3, asr #16
  4073b2:	d2ea      	bcs.n	40738a <quorem+0xc6>
  4073b4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4073b8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4073bc:	b982      	cbnz	r2, 4073e0 <quorem+0x11c>
  4073be:	1f1a      	subs	r2, r3, #4
  4073c0:	4593      	cmp	fp, r2
  4073c2:	d20b      	bcs.n	4073dc <quorem+0x118>
  4073c4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4073c8:	b942      	cbnz	r2, 4073dc <quorem+0x118>
  4073ca:	3b08      	subs	r3, #8
  4073cc:	e002      	b.n	4073d4 <quorem+0x110>
  4073ce:	681a      	ldr	r2, [r3, #0]
  4073d0:	3b04      	subs	r3, #4
  4073d2:	b91a      	cbnz	r2, 4073dc <quorem+0x118>
  4073d4:	459b      	cmp	fp, r3
  4073d6:	f108 38ff 	add.w	r8, r8, #4294967295
  4073da:	d3f8      	bcc.n	4073ce <quorem+0x10a>
  4073dc:	f8c4 8010 	str.w	r8, [r4, #16]
  4073e0:	4648      	mov	r0, r9
  4073e2:	b003      	add	sp, #12
  4073e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4073e8:	2000      	movs	r0, #0
  4073ea:	4770      	bx	lr
  4073ec:	0000      	movs	r0, r0
	...

004073f0 <_dtoa_r>:
  4073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4073f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4073f6:	b09b      	sub	sp, #108	; 0x6c
  4073f8:	4604      	mov	r4, r0
  4073fa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4073fc:	4692      	mov	sl, r2
  4073fe:	469b      	mov	fp, r3
  407400:	b141      	cbz	r1, 407414 <_dtoa_r+0x24>
  407402:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407404:	604a      	str	r2, [r1, #4]
  407406:	2301      	movs	r3, #1
  407408:	4093      	lsls	r3, r2
  40740a:	608b      	str	r3, [r1, #8]
  40740c:	f002 f8b0 	bl	409570 <_Bfree>
  407410:	2300      	movs	r3, #0
  407412:	6423      	str	r3, [r4, #64]	; 0x40
  407414:	f1bb 0f00 	cmp.w	fp, #0
  407418:	465d      	mov	r5, fp
  40741a:	db35      	blt.n	407488 <_dtoa_r+0x98>
  40741c:	2300      	movs	r3, #0
  40741e:	6033      	str	r3, [r6, #0]
  407420:	4b9d      	ldr	r3, [pc, #628]	; (407698 <_dtoa_r+0x2a8>)
  407422:	43ab      	bics	r3, r5
  407424:	d015      	beq.n	407452 <_dtoa_r+0x62>
  407426:	4650      	mov	r0, sl
  407428:	4659      	mov	r1, fp
  40742a:	2200      	movs	r2, #0
  40742c:	2300      	movs	r3, #0
  40742e:	f003 fc4d 	bl	40accc <__aeabi_dcmpeq>
  407432:	4680      	mov	r8, r0
  407434:	2800      	cmp	r0, #0
  407436:	d02d      	beq.n	407494 <_dtoa_r+0xa4>
  407438:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40743a:	2301      	movs	r3, #1
  40743c:	6013      	str	r3, [r2, #0]
  40743e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407440:	2b00      	cmp	r3, #0
  407442:	f000 80bd 	beq.w	4075c0 <_dtoa_r+0x1d0>
  407446:	4895      	ldr	r0, [pc, #596]	; (40769c <_dtoa_r+0x2ac>)
  407448:	6018      	str	r0, [r3, #0]
  40744a:	3801      	subs	r0, #1
  40744c:	b01b      	add	sp, #108	; 0x6c
  40744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407452:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407454:	f242 730f 	movw	r3, #9999	; 0x270f
  407458:	6013      	str	r3, [r2, #0]
  40745a:	f1ba 0f00 	cmp.w	sl, #0
  40745e:	d10d      	bne.n	40747c <_dtoa_r+0x8c>
  407460:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407464:	b955      	cbnz	r5, 40747c <_dtoa_r+0x8c>
  407466:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407468:	488d      	ldr	r0, [pc, #564]	; (4076a0 <_dtoa_r+0x2b0>)
  40746a:	2b00      	cmp	r3, #0
  40746c:	d0ee      	beq.n	40744c <_dtoa_r+0x5c>
  40746e:	f100 0308 	add.w	r3, r0, #8
  407472:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407474:	6013      	str	r3, [r2, #0]
  407476:	b01b      	add	sp, #108	; 0x6c
  407478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40747c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40747e:	4889      	ldr	r0, [pc, #548]	; (4076a4 <_dtoa_r+0x2b4>)
  407480:	2b00      	cmp	r3, #0
  407482:	d0e3      	beq.n	40744c <_dtoa_r+0x5c>
  407484:	1cc3      	adds	r3, r0, #3
  407486:	e7f4      	b.n	407472 <_dtoa_r+0x82>
  407488:	2301      	movs	r3, #1
  40748a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40748e:	6033      	str	r3, [r6, #0]
  407490:	46ab      	mov	fp, r5
  407492:	e7c5      	b.n	407420 <_dtoa_r+0x30>
  407494:	aa18      	add	r2, sp, #96	; 0x60
  407496:	ab19      	add	r3, sp, #100	; 0x64
  407498:	9201      	str	r2, [sp, #4]
  40749a:	9300      	str	r3, [sp, #0]
  40749c:	4652      	mov	r2, sl
  40749e:	465b      	mov	r3, fp
  4074a0:	4620      	mov	r0, r4
  4074a2:	f002 fadd 	bl	409a60 <__d2b>
  4074a6:	0d2b      	lsrs	r3, r5, #20
  4074a8:	4681      	mov	r9, r0
  4074aa:	d071      	beq.n	407590 <_dtoa_r+0x1a0>
  4074ac:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4074b0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4074b4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4074b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4074ba:	4650      	mov	r0, sl
  4074bc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4074c0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4074c4:	2200      	movs	r2, #0
  4074c6:	4b78      	ldr	r3, [pc, #480]	; (4076a8 <_dtoa_r+0x2b8>)
  4074c8:	f002 ffe4 	bl	40a494 <__aeabi_dsub>
  4074cc:	a36c      	add	r3, pc, #432	; (adr r3, 407680 <_dtoa_r+0x290>)
  4074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4074d2:	f003 f993 	bl	40a7fc <__aeabi_dmul>
  4074d6:	a36c      	add	r3, pc, #432	; (adr r3, 407688 <_dtoa_r+0x298>)
  4074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4074dc:	f002 ffdc 	bl	40a498 <__adddf3>
  4074e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4074e4:	4630      	mov	r0, r6
  4074e6:	f003 f923 	bl	40a730 <__aeabi_i2d>
  4074ea:	a369      	add	r3, pc, #420	; (adr r3, 407690 <_dtoa_r+0x2a0>)
  4074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4074f0:	f003 f984 	bl	40a7fc <__aeabi_dmul>
  4074f4:	4602      	mov	r2, r0
  4074f6:	460b      	mov	r3, r1
  4074f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4074fc:	f002 ffcc 	bl	40a498 <__adddf3>
  407500:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407504:	f003 fc2a 	bl	40ad5c <__aeabi_d2iz>
  407508:	2200      	movs	r2, #0
  40750a:	9002      	str	r0, [sp, #8]
  40750c:	2300      	movs	r3, #0
  40750e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407512:	f003 fbe5 	bl	40ace0 <__aeabi_dcmplt>
  407516:	2800      	cmp	r0, #0
  407518:	f040 8173 	bne.w	407802 <_dtoa_r+0x412>
  40751c:	9d02      	ldr	r5, [sp, #8]
  40751e:	2d16      	cmp	r5, #22
  407520:	f200 815d 	bhi.w	4077de <_dtoa_r+0x3ee>
  407524:	4b61      	ldr	r3, [pc, #388]	; (4076ac <_dtoa_r+0x2bc>)
  407526:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40752a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40752e:	4652      	mov	r2, sl
  407530:	465b      	mov	r3, fp
  407532:	f003 fbf3 	bl	40ad1c <__aeabi_dcmpgt>
  407536:	2800      	cmp	r0, #0
  407538:	f000 81c5 	beq.w	4078c6 <_dtoa_r+0x4d6>
  40753c:	1e6b      	subs	r3, r5, #1
  40753e:	9302      	str	r3, [sp, #8]
  407540:	2300      	movs	r3, #0
  407542:	930e      	str	r3, [sp, #56]	; 0x38
  407544:	1bbf      	subs	r7, r7, r6
  407546:	1e7b      	subs	r3, r7, #1
  407548:	9306      	str	r3, [sp, #24]
  40754a:	f100 8154 	bmi.w	4077f6 <_dtoa_r+0x406>
  40754e:	2300      	movs	r3, #0
  407550:	9308      	str	r3, [sp, #32]
  407552:	9b02      	ldr	r3, [sp, #8]
  407554:	2b00      	cmp	r3, #0
  407556:	f2c0 8145 	blt.w	4077e4 <_dtoa_r+0x3f4>
  40755a:	9a06      	ldr	r2, [sp, #24]
  40755c:	930d      	str	r3, [sp, #52]	; 0x34
  40755e:	4611      	mov	r1, r2
  407560:	4419      	add	r1, r3
  407562:	2300      	movs	r3, #0
  407564:	9106      	str	r1, [sp, #24]
  407566:	930c      	str	r3, [sp, #48]	; 0x30
  407568:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40756a:	2b09      	cmp	r3, #9
  40756c:	d82a      	bhi.n	4075c4 <_dtoa_r+0x1d4>
  40756e:	2b05      	cmp	r3, #5
  407570:	f340 865b 	ble.w	40822a <_dtoa_r+0xe3a>
  407574:	3b04      	subs	r3, #4
  407576:	9324      	str	r3, [sp, #144]	; 0x90
  407578:	2500      	movs	r5, #0
  40757a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40757c:	3b02      	subs	r3, #2
  40757e:	2b03      	cmp	r3, #3
  407580:	f200 8642 	bhi.w	408208 <_dtoa_r+0xe18>
  407584:	e8df f013 	tbh	[pc, r3, lsl #1]
  407588:	02c903d4 	.word	0x02c903d4
  40758c:	046103df 	.word	0x046103df
  407590:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407592:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407594:	443e      	add	r6, r7
  407596:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40759a:	2b20      	cmp	r3, #32
  40759c:	f340 818e 	ble.w	4078bc <_dtoa_r+0x4cc>
  4075a0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4075a4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4075a8:	409d      	lsls	r5, r3
  4075aa:	fa2a f000 	lsr.w	r0, sl, r0
  4075ae:	4328      	orrs	r0, r5
  4075b0:	f003 f8ae 	bl	40a710 <__aeabi_ui2d>
  4075b4:	2301      	movs	r3, #1
  4075b6:	3e01      	subs	r6, #1
  4075b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4075bc:	9314      	str	r3, [sp, #80]	; 0x50
  4075be:	e781      	b.n	4074c4 <_dtoa_r+0xd4>
  4075c0:	483b      	ldr	r0, [pc, #236]	; (4076b0 <_dtoa_r+0x2c0>)
  4075c2:	e743      	b.n	40744c <_dtoa_r+0x5c>
  4075c4:	2100      	movs	r1, #0
  4075c6:	6461      	str	r1, [r4, #68]	; 0x44
  4075c8:	4620      	mov	r0, r4
  4075ca:	9125      	str	r1, [sp, #148]	; 0x94
  4075cc:	f001 ffaa 	bl	409524 <_Balloc>
  4075d0:	f04f 33ff 	mov.w	r3, #4294967295
  4075d4:	930a      	str	r3, [sp, #40]	; 0x28
  4075d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4075d8:	930f      	str	r3, [sp, #60]	; 0x3c
  4075da:	2301      	movs	r3, #1
  4075dc:	9004      	str	r0, [sp, #16]
  4075de:	6420      	str	r0, [r4, #64]	; 0x40
  4075e0:	9224      	str	r2, [sp, #144]	; 0x90
  4075e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4075e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4075e6:	2b00      	cmp	r3, #0
  4075e8:	f2c0 80d9 	blt.w	40779e <_dtoa_r+0x3ae>
  4075ec:	9a02      	ldr	r2, [sp, #8]
  4075ee:	2a0e      	cmp	r2, #14
  4075f0:	f300 80d5 	bgt.w	40779e <_dtoa_r+0x3ae>
  4075f4:	4b2d      	ldr	r3, [pc, #180]	; (4076ac <_dtoa_r+0x2bc>)
  4075f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4075fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
  407602:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407604:	2b00      	cmp	r3, #0
  407606:	f2c0 83ba 	blt.w	407d7e <_dtoa_r+0x98e>
  40760a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40760e:	4650      	mov	r0, sl
  407610:	462a      	mov	r2, r5
  407612:	4633      	mov	r3, r6
  407614:	4659      	mov	r1, fp
  407616:	f003 fa1b 	bl	40aa50 <__aeabi_ddiv>
  40761a:	f003 fb9f 	bl	40ad5c <__aeabi_d2iz>
  40761e:	4680      	mov	r8, r0
  407620:	f003 f886 	bl	40a730 <__aeabi_i2d>
  407624:	462a      	mov	r2, r5
  407626:	4633      	mov	r3, r6
  407628:	f003 f8e8 	bl	40a7fc <__aeabi_dmul>
  40762c:	460b      	mov	r3, r1
  40762e:	4602      	mov	r2, r0
  407630:	4659      	mov	r1, fp
  407632:	4650      	mov	r0, sl
  407634:	f002 ff2e 	bl	40a494 <__aeabi_dsub>
  407638:	9d04      	ldr	r5, [sp, #16]
  40763a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40763e:	702b      	strb	r3, [r5, #0]
  407640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407642:	2b01      	cmp	r3, #1
  407644:	4606      	mov	r6, r0
  407646:	460f      	mov	r7, r1
  407648:	f105 0501 	add.w	r5, r5, #1
  40764c:	d068      	beq.n	407720 <_dtoa_r+0x330>
  40764e:	2200      	movs	r2, #0
  407650:	4b18      	ldr	r3, [pc, #96]	; (4076b4 <_dtoa_r+0x2c4>)
  407652:	f003 f8d3 	bl	40a7fc <__aeabi_dmul>
  407656:	2200      	movs	r2, #0
  407658:	2300      	movs	r3, #0
  40765a:	4606      	mov	r6, r0
  40765c:	460f      	mov	r7, r1
  40765e:	f003 fb35 	bl	40accc <__aeabi_dcmpeq>
  407662:	2800      	cmp	r0, #0
  407664:	f040 8088 	bne.w	407778 <_dtoa_r+0x388>
  407668:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40766c:	f04f 0a00 	mov.w	sl, #0
  407670:	f8df b040 	ldr.w	fp, [pc, #64]	; 4076b4 <_dtoa_r+0x2c4>
  407674:	940c      	str	r4, [sp, #48]	; 0x30
  407676:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40767a:	e028      	b.n	4076ce <_dtoa_r+0x2de>
  40767c:	f3af 8000 	nop.w
  407680:	636f4361 	.word	0x636f4361
  407684:	3fd287a7 	.word	0x3fd287a7
  407688:	8b60c8b3 	.word	0x8b60c8b3
  40768c:	3fc68a28 	.word	0x3fc68a28
  407690:	509f79fb 	.word	0x509f79fb
  407694:	3fd34413 	.word	0x3fd34413
  407698:	7ff00000 	.word	0x7ff00000
  40769c:	0040bfe9 	.word	0x0040bfe9
  4076a0:	0040c02c 	.word	0x0040c02c
  4076a4:	0040c038 	.word	0x0040c038
  4076a8:	3ff80000 	.word	0x3ff80000
  4076ac:	0040c078 	.word	0x0040c078
  4076b0:	0040bfe8 	.word	0x0040bfe8
  4076b4:	40240000 	.word	0x40240000
  4076b8:	f003 f8a0 	bl	40a7fc <__aeabi_dmul>
  4076bc:	2200      	movs	r2, #0
  4076be:	2300      	movs	r3, #0
  4076c0:	4606      	mov	r6, r0
  4076c2:	460f      	mov	r7, r1
  4076c4:	f003 fb02 	bl	40accc <__aeabi_dcmpeq>
  4076c8:	2800      	cmp	r0, #0
  4076ca:	f040 83c1 	bne.w	407e50 <_dtoa_r+0xa60>
  4076ce:	4642      	mov	r2, r8
  4076d0:	464b      	mov	r3, r9
  4076d2:	4630      	mov	r0, r6
  4076d4:	4639      	mov	r1, r7
  4076d6:	f003 f9bb 	bl	40aa50 <__aeabi_ddiv>
  4076da:	f003 fb3f 	bl	40ad5c <__aeabi_d2iz>
  4076de:	4604      	mov	r4, r0
  4076e0:	f003 f826 	bl	40a730 <__aeabi_i2d>
  4076e4:	4642      	mov	r2, r8
  4076e6:	464b      	mov	r3, r9
  4076e8:	f003 f888 	bl	40a7fc <__aeabi_dmul>
  4076ec:	4602      	mov	r2, r0
  4076ee:	460b      	mov	r3, r1
  4076f0:	4630      	mov	r0, r6
  4076f2:	4639      	mov	r1, r7
  4076f4:	f002 fece 	bl	40a494 <__aeabi_dsub>
  4076f8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4076fc:	9e04      	ldr	r6, [sp, #16]
  4076fe:	f805 eb01 	strb.w	lr, [r5], #1
  407702:	eba5 0e06 	sub.w	lr, r5, r6
  407706:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407708:	45b6      	cmp	lr, r6
  40770a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40770e:	4652      	mov	r2, sl
  407710:	465b      	mov	r3, fp
  407712:	d1d1      	bne.n	4076b8 <_dtoa_r+0x2c8>
  407714:	46a0      	mov	r8, r4
  407716:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40771a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40771c:	4606      	mov	r6, r0
  40771e:	460f      	mov	r7, r1
  407720:	4632      	mov	r2, r6
  407722:	463b      	mov	r3, r7
  407724:	4630      	mov	r0, r6
  407726:	4639      	mov	r1, r7
  407728:	f002 feb6 	bl	40a498 <__adddf3>
  40772c:	4606      	mov	r6, r0
  40772e:	460f      	mov	r7, r1
  407730:	4602      	mov	r2, r0
  407732:	460b      	mov	r3, r1
  407734:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407738:	f003 fad2 	bl	40ace0 <__aeabi_dcmplt>
  40773c:	b948      	cbnz	r0, 407752 <_dtoa_r+0x362>
  40773e:	4632      	mov	r2, r6
  407740:	463b      	mov	r3, r7
  407742:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407746:	f003 fac1 	bl	40accc <__aeabi_dcmpeq>
  40774a:	b1a8      	cbz	r0, 407778 <_dtoa_r+0x388>
  40774c:	f018 0f01 	tst.w	r8, #1
  407750:	d012      	beq.n	407778 <_dtoa_r+0x388>
  407752:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407756:	9a04      	ldr	r2, [sp, #16]
  407758:	1e6b      	subs	r3, r5, #1
  40775a:	e004      	b.n	407766 <_dtoa_r+0x376>
  40775c:	429a      	cmp	r2, r3
  40775e:	f000 8401 	beq.w	407f64 <_dtoa_r+0xb74>
  407762:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407766:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40776a:	f103 0501 	add.w	r5, r3, #1
  40776e:	d0f5      	beq.n	40775c <_dtoa_r+0x36c>
  407770:	f108 0801 	add.w	r8, r8, #1
  407774:	f883 8000 	strb.w	r8, [r3]
  407778:	4649      	mov	r1, r9
  40777a:	4620      	mov	r0, r4
  40777c:	f001 fef8 	bl	409570 <_Bfree>
  407780:	2200      	movs	r2, #0
  407782:	9b02      	ldr	r3, [sp, #8]
  407784:	702a      	strb	r2, [r5, #0]
  407786:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407788:	3301      	adds	r3, #1
  40778a:	6013      	str	r3, [r2, #0]
  40778c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40778e:	2b00      	cmp	r3, #0
  407790:	f000 839e 	beq.w	407ed0 <_dtoa_r+0xae0>
  407794:	9804      	ldr	r0, [sp, #16]
  407796:	601d      	str	r5, [r3, #0]
  407798:	b01b      	add	sp, #108	; 0x6c
  40779a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40779e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4077a0:	2a00      	cmp	r2, #0
  4077a2:	d03e      	beq.n	407822 <_dtoa_r+0x432>
  4077a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4077a6:	2a01      	cmp	r2, #1
  4077a8:	f340 8311 	ble.w	407dce <_dtoa_r+0x9de>
  4077ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4077b0:	1e5f      	subs	r7, r3, #1
  4077b2:	42ba      	cmp	r2, r7
  4077b4:	f2c0 838f 	blt.w	407ed6 <_dtoa_r+0xae6>
  4077b8:	1bd7      	subs	r7, r2, r7
  4077ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077bc:	2b00      	cmp	r3, #0
  4077be:	f2c0 848b 	blt.w	4080d8 <_dtoa_r+0xce8>
  4077c2:	9d08      	ldr	r5, [sp, #32]
  4077c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077c6:	9a08      	ldr	r2, [sp, #32]
  4077c8:	441a      	add	r2, r3
  4077ca:	9208      	str	r2, [sp, #32]
  4077cc:	9a06      	ldr	r2, [sp, #24]
  4077ce:	2101      	movs	r1, #1
  4077d0:	441a      	add	r2, r3
  4077d2:	4620      	mov	r0, r4
  4077d4:	9206      	str	r2, [sp, #24]
  4077d6:	f001 ff65 	bl	4096a4 <__i2b>
  4077da:	4606      	mov	r6, r0
  4077dc:	e024      	b.n	407828 <_dtoa_r+0x438>
  4077de:	2301      	movs	r3, #1
  4077e0:	930e      	str	r3, [sp, #56]	; 0x38
  4077e2:	e6af      	b.n	407544 <_dtoa_r+0x154>
  4077e4:	9a08      	ldr	r2, [sp, #32]
  4077e6:	9b02      	ldr	r3, [sp, #8]
  4077e8:	1ad2      	subs	r2, r2, r3
  4077ea:	425b      	negs	r3, r3
  4077ec:	930c      	str	r3, [sp, #48]	; 0x30
  4077ee:	2300      	movs	r3, #0
  4077f0:	9208      	str	r2, [sp, #32]
  4077f2:	930d      	str	r3, [sp, #52]	; 0x34
  4077f4:	e6b8      	b.n	407568 <_dtoa_r+0x178>
  4077f6:	f1c7 0301 	rsb	r3, r7, #1
  4077fa:	9308      	str	r3, [sp, #32]
  4077fc:	2300      	movs	r3, #0
  4077fe:	9306      	str	r3, [sp, #24]
  407800:	e6a7      	b.n	407552 <_dtoa_r+0x162>
  407802:	9d02      	ldr	r5, [sp, #8]
  407804:	4628      	mov	r0, r5
  407806:	f002 ff93 	bl	40a730 <__aeabi_i2d>
  40780a:	4602      	mov	r2, r0
  40780c:	460b      	mov	r3, r1
  40780e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407812:	f003 fa5b 	bl	40accc <__aeabi_dcmpeq>
  407816:	2800      	cmp	r0, #0
  407818:	f47f ae80 	bne.w	40751c <_dtoa_r+0x12c>
  40781c:	1e6b      	subs	r3, r5, #1
  40781e:	9302      	str	r3, [sp, #8]
  407820:	e67c      	b.n	40751c <_dtoa_r+0x12c>
  407822:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407824:	9d08      	ldr	r5, [sp, #32]
  407826:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  407828:	2d00      	cmp	r5, #0
  40782a:	dd0c      	ble.n	407846 <_dtoa_r+0x456>
  40782c:	9906      	ldr	r1, [sp, #24]
  40782e:	2900      	cmp	r1, #0
  407830:	460b      	mov	r3, r1
  407832:	dd08      	ble.n	407846 <_dtoa_r+0x456>
  407834:	42a9      	cmp	r1, r5
  407836:	9a08      	ldr	r2, [sp, #32]
  407838:	bfa8      	it	ge
  40783a:	462b      	movge	r3, r5
  40783c:	1ad2      	subs	r2, r2, r3
  40783e:	1aed      	subs	r5, r5, r3
  407840:	1acb      	subs	r3, r1, r3
  407842:	9208      	str	r2, [sp, #32]
  407844:	9306      	str	r3, [sp, #24]
  407846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407848:	b1d3      	cbz	r3, 407880 <_dtoa_r+0x490>
  40784a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40784c:	2b00      	cmp	r3, #0
  40784e:	f000 82b7 	beq.w	407dc0 <_dtoa_r+0x9d0>
  407852:	2f00      	cmp	r7, #0
  407854:	dd10      	ble.n	407878 <_dtoa_r+0x488>
  407856:	4631      	mov	r1, r6
  407858:	463a      	mov	r2, r7
  40785a:	4620      	mov	r0, r4
  40785c:	f001 ffbe 	bl	4097dc <__pow5mult>
  407860:	464a      	mov	r2, r9
  407862:	4601      	mov	r1, r0
  407864:	4606      	mov	r6, r0
  407866:	4620      	mov	r0, r4
  407868:	f001 ff26 	bl	4096b8 <__multiply>
  40786c:	4649      	mov	r1, r9
  40786e:	4680      	mov	r8, r0
  407870:	4620      	mov	r0, r4
  407872:	f001 fe7d 	bl	409570 <_Bfree>
  407876:	46c1      	mov	r9, r8
  407878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40787a:	1bda      	subs	r2, r3, r7
  40787c:	f040 82a1 	bne.w	407dc2 <_dtoa_r+0x9d2>
  407880:	2101      	movs	r1, #1
  407882:	4620      	mov	r0, r4
  407884:	f001 ff0e 	bl	4096a4 <__i2b>
  407888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40788a:	2b00      	cmp	r3, #0
  40788c:	4680      	mov	r8, r0
  40788e:	dd1c      	ble.n	4078ca <_dtoa_r+0x4da>
  407890:	4601      	mov	r1, r0
  407892:	461a      	mov	r2, r3
  407894:	4620      	mov	r0, r4
  407896:	f001 ffa1 	bl	4097dc <__pow5mult>
  40789a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40789c:	2b01      	cmp	r3, #1
  40789e:	4680      	mov	r8, r0
  4078a0:	f340 8254 	ble.w	407d4c <_dtoa_r+0x95c>
  4078a4:	2300      	movs	r3, #0
  4078a6:	930c      	str	r3, [sp, #48]	; 0x30
  4078a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4078ac:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4078b0:	6918      	ldr	r0, [r3, #16]
  4078b2:	f001 fea7 	bl	409604 <__hi0bits>
  4078b6:	f1c0 0020 	rsb	r0, r0, #32
  4078ba:	e010      	b.n	4078de <_dtoa_r+0x4ee>
  4078bc:	f1c3 0520 	rsb	r5, r3, #32
  4078c0:	fa0a f005 	lsl.w	r0, sl, r5
  4078c4:	e674      	b.n	4075b0 <_dtoa_r+0x1c0>
  4078c6:	900e      	str	r0, [sp, #56]	; 0x38
  4078c8:	e63c      	b.n	407544 <_dtoa_r+0x154>
  4078ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4078cc:	2b01      	cmp	r3, #1
  4078ce:	f340 8287 	ble.w	407de0 <_dtoa_r+0x9f0>
  4078d2:	2300      	movs	r3, #0
  4078d4:	930c      	str	r3, [sp, #48]	; 0x30
  4078d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4078d8:	2001      	movs	r0, #1
  4078da:	2b00      	cmp	r3, #0
  4078dc:	d1e4      	bne.n	4078a8 <_dtoa_r+0x4b8>
  4078de:	9a06      	ldr	r2, [sp, #24]
  4078e0:	4410      	add	r0, r2
  4078e2:	f010 001f 	ands.w	r0, r0, #31
  4078e6:	f000 80a1 	beq.w	407a2c <_dtoa_r+0x63c>
  4078ea:	f1c0 0320 	rsb	r3, r0, #32
  4078ee:	2b04      	cmp	r3, #4
  4078f0:	f340 849e 	ble.w	408230 <_dtoa_r+0xe40>
  4078f4:	9b08      	ldr	r3, [sp, #32]
  4078f6:	f1c0 001c 	rsb	r0, r0, #28
  4078fa:	4403      	add	r3, r0
  4078fc:	9308      	str	r3, [sp, #32]
  4078fe:	4613      	mov	r3, r2
  407900:	4403      	add	r3, r0
  407902:	4405      	add	r5, r0
  407904:	9306      	str	r3, [sp, #24]
  407906:	9b08      	ldr	r3, [sp, #32]
  407908:	2b00      	cmp	r3, #0
  40790a:	dd05      	ble.n	407918 <_dtoa_r+0x528>
  40790c:	4649      	mov	r1, r9
  40790e:	461a      	mov	r2, r3
  407910:	4620      	mov	r0, r4
  407912:	f001 ffb3 	bl	40987c <__lshift>
  407916:	4681      	mov	r9, r0
  407918:	9b06      	ldr	r3, [sp, #24]
  40791a:	2b00      	cmp	r3, #0
  40791c:	dd05      	ble.n	40792a <_dtoa_r+0x53a>
  40791e:	4641      	mov	r1, r8
  407920:	461a      	mov	r2, r3
  407922:	4620      	mov	r0, r4
  407924:	f001 ffaa 	bl	40987c <__lshift>
  407928:	4680      	mov	r8, r0
  40792a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40792c:	2b00      	cmp	r3, #0
  40792e:	f040 8086 	bne.w	407a3e <_dtoa_r+0x64e>
  407932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407934:	2b00      	cmp	r3, #0
  407936:	f340 8266 	ble.w	407e06 <_dtoa_r+0xa16>
  40793a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40793c:	2b00      	cmp	r3, #0
  40793e:	f000 8098 	beq.w	407a72 <_dtoa_r+0x682>
  407942:	2d00      	cmp	r5, #0
  407944:	dd05      	ble.n	407952 <_dtoa_r+0x562>
  407946:	4631      	mov	r1, r6
  407948:	462a      	mov	r2, r5
  40794a:	4620      	mov	r0, r4
  40794c:	f001 ff96 	bl	40987c <__lshift>
  407950:	4606      	mov	r6, r0
  407952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407954:	2b00      	cmp	r3, #0
  407956:	f040 8337 	bne.w	407fc8 <_dtoa_r+0xbd8>
  40795a:	9606      	str	r6, [sp, #24]
  40795c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40795e:	9a04      	ldr	r2, [sp, #16]
  407960:	f8dd b018 	ldr.w	fp, [sp, #24]
  407964:	3b01      	subs	r3, #1
  407966:	18d3      	adds	r3, r2, r3
  407968:	930b      	str	r3, [sp, #44]	; 0x2c
  40796a:	f00a 0301 	and.w	r3, sl, #1
  40796e:	930c      	str	r3, [sp, #48]	; 0x30
  407970:	4617      	mov	r7, r2
  407972:	46c2      	mov	sl, r8
  407974:	4651      	mov	r1, sl
  407976:	4648      	mov	r0, r9
  407978:	f7ff fca4 	bl	4072c4 <quorem>
  40797c:	4631      	mov	r1, r6
  40797e:	4605      	mov	r5, r0
  407980:	4648      	mov	r0, r9
  407982:	f001 ffcd 	bl	409920 <__mcmp>
  407986:	465a      	mov	r2, fp
  407988:	900a      	str	r0, [sp, #40]	; 0x28
  40798a:	4651      	mov	r1, sl
  40798c:	4620      	mov	r0, r4
  40798e:	f001 ffe3 	bl	409958 <__mdiff>
  407992:	68c2      	ldr	r2, [r0, #12]
  407994:	4680      	mov	r8, r0
  407996:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40799a:	2a00      	cmp	r2, #0
  40799c:	f040 822b 	bne.w	407df6 <_dtoa_r+0xa06>
  4079a0:	4601      	mov	r1, r0
  4079a2:	4648      	mov	r0, r9
  4079a4:	9308      	str	r3, [sp, #32]
  4079a6:	f001 ffbb 	bl	409920 <__mcmp>
  4079aa:	4641      	mov	r1, r8
  4079ac:	9006      	str	r0, [sp, #24]
  4079ae:	4620      	mov	r0, r4
  4079b0:	f001 fdde 	bl	409570 <_Bfree>
  4079b4:	9a06      	ldr	r2, [sp, #24]
  4079b6:	9b08      	ldr	r3, [sp, #32]
  4079b8:	b932      	cbnz	r2, 4079c8 <_dtoa_r+0x5d8>
  4079ba:	9924      	ldr	r1, [sp, #144]	; 0x90
  4079bc:	b921      	cbnz	r1, 4079c8 <_dtoa_r+0x5d8>
  4079be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4079c0:	2a00      	cmp	r2, #0
  4079c2:	f000 83ef 	beq.w	4081a4 <_dtoa_r+0xdb4>
  4079c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4079c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4079ca:	2900      	cmp	r1, #0
  4079cc:	f2c0 829f 	blt.w	407f0e <_dtoa_r+0xb1e>
  4079d0:	d105      	bne.n	4079de <_dtoa_r+0x5ee>
  4079d2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4079d4:	b919      	cbnz	r1, 4079de <_dtoa_r+0x5ee>
  4079d6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4079d8:	2900      	cmp	r1, #0
  4079da:	f000 8298 	beq.w	407f0e <_dtoa_r+0xb1e>
  4079de:	2a00      	cmp	r2, #0
  4079e0:	f300 8306 	bgt.w	407ff0 <_dtoa_r+0xc00>
  4079e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4079e6:	703b      	strb	r3, [r7, #0]
  4079e8:	f107 0801 	add.w	r8, r7, #1
  4079ec:	4297      	cmp	r7, r2
  4079ee:	4645      	mov	r5, r8
  4079f0:	f000 830c 	beq.w	40800c <_dtoa_r+0xc1c>
  4079f4:	4649      	mov	r1, r9
  4079f6:	2300      	movs	r3, #0
  4079f8:	220a      	movs	r2, #10
  4079fa:	4620      	mov	r0, r4
  4079fc:	f001 fdc2 	bl	409584 <__multadd>
  407a00:	455e      	cmp	r6, fp
  407a02:	4681      	mov	r9, r0
  407a04:	4631      	mov	r1, r6
  407a06:	f04f 0300 	mov.w	r3, #0
  407a0a:	f04f 020a 	mov.w	r2, #10
  407a0e:	4620      	mov	r0, r4
  407a10:	f000 81eb 	beq.w	407dea <_dtoa_r+0x9fa>
  407a14:	f001 fdb6 	bl	409584 <__multadd>
  407a18:	4659      	mov	r1, fp
  407a1a:	4606      	mov	r6, r0
  407a1c:	2300      	movs	r3, #0
  407a1e:	220a      	movs	r2, #10
  407a20:	4620      	mov	r0, r4
  407a22:	f001 fdaf 	bl	409584 <__multadd>
  407a26:	4647      	mov	r7, r8
  407a28:	4683      	mov	fp, r0
  407a2a:	e7a3      	b.n	407974 <_dtoa_r+0x584>
  407a2c:	201c      	movs	r0, #28
  407a2e:	9b08      	ldr	r3, [sp, #32]
  407a30:	4403      	add	r3, r0
  407a32:	9308      	str	r3, [sp, #32]
  407a34:	9b06      	ldr	r3, [sp, #24]
  407a36:	4403      	add	r3, r0
  407a38:	4405      	add	r5, r0
  407a3a:	9306      	str	r3, [sp, #24]
  407a3c:	e763      	b.n	407906 <_dtoa_r+0x516>
  407a3e:	4641      	mov	r1, r8
  407a40:	4648      	mov	r0, r9
  407a42:	f001 ff6d 	bl	409920 <__mcmp>
  407a46:	2800      	cmp	r0, #0
  407a48:	f6bf af73 	bge.w	407932 <_dtoa_r+0x542>
  407a4c:	9f02      	ldr	r7, [sp, #8]
  407a4e:	4649      	mov	r1, r9
  407a50:	2300      	movs	r3, #0
  407a52:	220a      	movs	r2, #10
  407a54:	4620      	mov	r0, r4
  407a56:	3f01      	subs	r7, #1
  407a58:	9702      	str	r7, [sp, #8]
  407a5a:	f001 fd93 	bl	409584 <__multadd>
  407a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407a60:	4681      	mov	r9, r0
  407a62:	2b00      	cmp	r3, #0
  407a64:	f040 83b6 	bne.w	4081d4 <_dtoa_r+0xde4>
  407a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407a6a:	2b00      	cmp	r3, #0
  407a6c:	f340 83bf 	ble.w	4081ee <_dtoa_r+0xdfe>
  407a70:	930a      	str	r3, [sp, #40]	; 0x28
  407a72:	f8dd b010 	ldr.w	fp, [sp, #16]
  407a76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407a78:	465d      	mov	r5, fp
  407a7a:	e002      	b.n	407a82 <_dtoa_r+0x692>
  407a7c:	f001 fd82 	bl	409584 <__multadd>
  407a80:	4681      	mov	r9, r0
  407a82:	4641      	mov	r1, r8
  407a84:	4648      	mov	r0, r9
  407a86:	f7ff fc1d 	bl	4072c4 <quorem>
  407a8a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  407a8e:	f805 ab01 	strb.w	sl, [r5], #1
  407a92:	eba5 030b 	sub.w	r3, r5, fp
  407a96:	42bb      	cmp	r3, r7
  407a98:	f04f 020a 	mov.w	r2, #10
  407a9c:	f04f 0300 	mov.w	r3, #0
  407aa0:	4649      	mov	r1, r9
  407aa2:	4620      	mov	r0, r4
  407aa4:	dbea      	blt.n	407a7c <_dtoa_r+0x68c>
  407aa6:	9b04      	ldr	r3, [sp, #16]
  407aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407aaa:	2a01      	cmp	r2, #1
  407aac:	bfac      	ite	ge
  407aae:	189b      	addge	r3, r3, r2
  407ab0:	3301      	addlt	r3, #1
  407ab2:	461d      	mov	r5, r3
  407ab4:	f04f 0b00 	mov.w	fp, #0
  407ab8:	4649      	mov	r1, r9
  407aba:	2201      	movs	r2, #1
  407abc:	4620      	mov	r0, r4
  407abe:	f001 fedd 	bl	40987c <__lshift>
  407ac2:	4641      	mov	r1, r8
  407ac4:	4681      	mov	r9, r0
  407ac6:	f001 ff2b 	bl	409920 <__mcmp>
  407aca:	2800      	cmp	r0, #0
  407acc:	f340 823d 	ble.w	407f4a <_dtoa_r+0xb5a>
  407ad0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407ad4:	9904      	ldr	r1, [sp, #16]
  407ad6:	1e6b      	subs	r3, r5, #1
  407ad8:	e004      	b.n	407ae4 <_dtoa_r+0x6f4>
  407ada:	428b      	cmp	r3, r1
  407adc:	f000 81ae 	beq.w	407e3c <_dtoa_r+0xa4c>
  407ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407ae4:	2a39      	cmp	r2, #57	; 0x39
  407ae6:	f103 0501 	add.w	r5, r3, #1
  407aea:	d0f6      	beq.n	407ada <_dtoa_r+0x6ea>
  407aec:	3201      	adds	r2, #1
  407aee:	701a      	strb	r2, [r3, #0]
  407af0:	4641      	mov	r1, r8
  407af2:	4620      	mov	r0, r4
  407af4:	f001 fd3c 	bl	409570 <_Bfree>
  407af8:	2e00      	cmp	r6, #0
  407afa:	f43f ae3d 	beq.w	407778 <_dtoa_r+0x388>
  407afe:	f1bb 0f00 	cmp.w	fp, #0
  407b02:	d005      	beq.n	407b10 <_dtoa_r+0x720>
  407b04:	45b3      	cmp	fp, r6
  407b06:	d003      	beq.n	407b10 <_dtoa_r+0x720>
  407b08:	4659      	mov	r1, fp
  407b0a:	4620      	mov	r0, r4
  407b0c:	f001 fd30 	bl	409570 <_Bfree>
  407b10:	4631      	mov	r1, r6
  407b12:	4620      	mov	r0, r4
  407b14:	f001 fd2c 	bl	409570 <_Bfree>
  407b18:	e62e      	b.n	407778 <_dtoa_r+0x388>
  407b1a:	2300      	movs	r3, #0
  407b1c:	930b      	str	r3, [sp, #44]	; 0x2c
  407b1e:	9b02      	ldr	r3, [sp, #8]
  407b20:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407b22:	4413      	add	r3, r2
  407b24:	930f      	str	r3, [sp, #60]	; 0x3c
  407b26:	3301      	adds	r3, #1
  407b28:	2b01      	cmp	r3, #1
  407b2a:	461f      	mov	r7, r3
  407b2c:	461e      	mov	r6, r3
  407b2e:	930a      	str	r3, [sp, #40]	; 0x28
  407b30:	bfb8      	it	lt
  407b32:	2701      	movlt	r7, #1
  407b34:	2100      	movs	r1, #0
  407b36:	2f17      	cmp	r7, #23
  407b38:	6461      	str	r1, [r4, #68]	; 0x44
  407b3a:	d90a      	bls.n	407b52 <_dtoa_r+0x762>
  407b3c:	2201      	movs	r2, #1
  407b3e:	2304      	movs	r3, #4
  407b40:	005b      	lsls	r3, r3, #1
  407b42:	f103 0014 	add.w	r0, r3, #20
  407b46:	4287      	cmp	r7, r0
  407b48:	4611      	mov	r1, r2
  407b4a:	f102 0201 	add.w	r2, r2, #1
  407b4e:	d2f7      	bcs.n	407b40 <_dtoa_r+0x750>
  407b50:	6461      	str	r1, [r4, #68]	; 0x44
  407b52:	4620      	mov	r0, r4
  407b54:	f001 fce6 	bl	409524 <_Balloc>
  407b58:	2e0e      	cmp	r6, #14
  407b5a:	9004      	str	r0, [sp, #16]
  407b5c:	6420      	str	r0, [r4, #64]	; 0x40
  407b5e:	f63f ad41 	bhi.w	4075e4 <_dtoa_r+0x1f4>
  407b62:	2d00      	cmp	r5, #0
  407b64:	f43f ad3e 	beq.w	4075e4 <_dtoa_r+0x1f4>
  407b68:	9902      	ldr	r1, [sp, #8]
  407b6a:	2900      	cmp	r1, #0
  407b6c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407b70:	f340 8202 	ble.w	407f78 <_dtoa_r+0xb88>
  407b74:	4bb8      	ldr	r3, [pc, #736]	; (407e58 <_dtoa_r+0xa68>)
  407b76:	f001 020f 	and.w	r2, r1, #15
  407b7a:	110d      	asrs	r5, r1, #4
  407b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407b80:	06e9      	lsls	r1, r5, #27
  407b82:	e9d3 6700 	ldrd	r6, r7, [r3]
  407b86:	f140 81ae 	bpl.w	407ee6 <_dtoa_r+0xaf6>
  407b8a:	4bb4      	ldr	r3, [pc, #720]	; (407e5c <_dtoa_r+0xa6c>)
  407b8c:	4650      	mov	r0, sl
  407b8e:	4659      	mov	r1, fp
  407b90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407b94:	f002 ff5c 	bl	40aa50 <__aeabi_ddiv>
  407b98:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  407b9c:	f005 050f 	and.w	r5, r5, #15
  407ba0:	f04f 0a03 	mov.w	sl, #3
  407ba4:	b18d      	cbz	r5, 407bca <_dtoa_r+0x7da>
  407ba6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 407e5c <_dtoa_r+0xa6c>
  407baa:	07ea      	lsls	r2, r5, #31
  407bac:	d509      	bpl.n	407bc2 <_dtoa_r+0x7d2>
  407bae:	4630      	mov	r0, r6
  407bb0:	4639      	mov	r1, r7
  407bb2:	e9d8 2300 	ldrd	r2, r3, [r8]
  407bb6:	f002 fe21 	bl	40a7fc <__aeabi_dmul>
  407bba:	f10a 0a01 	add.w	sl, sl, #1
  407bbe:	4606      	mov	r6, r0
  407bc0:	460f      	mov	r7, r1
  407bc2:	106d      	asrs	r5, r5, #1
  407bc4:	f108 0808 	add.w	r8, r8, #8
  407bc8:	d1ef      	bne.n	407baa <_dtoa_r+0x7ba>
  407bca:	463b      	mov	r3, r7
  407bcc:	4632      	mov	r2, r6
  407bce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407bd2:	f002 ff3d 	bl	40aa50 <__aeabi_ddiv>
  407bd6:	4607      	mov	r7, r0
  407bd8:	4688      	mov	r8, r1
  407bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407bdc:	b143      	cbz	r3, 407bf0 <_dtoa_r+0x800>
  407bde:	2200      	movs	r2, #0
  407be0:	4b9f      	ldr	r3, [pc, #636]	; (407e60 <_dtoa_r+0xa70>)
  407be2:	4638      	mov	r0, r7
  407be4:	4641      	mov	r1, r8
  407be6:	f003 f87b 	bl	40ace0 <__aeabi_dcmplt>
  407bea:	2800      	cmp	r0, #0
  407bec:	f040 8286 	bne.w	4080fc <_dtoa_r+0xd0c>
  407bf0:	4650      	mov	r0, sl
  407bf2:	f002 fd9d 	bl	40a730 <__aeabi_i2d>
  407bf6:	463a      	mov	r2, r7
  407bf8:	4643      	mov	r3, r8
  407bfa:	f002 fdff 	bl	40a7fc <__aeabi_dmul>
  407bfe:	4b99      	ldr	r3, [pc, #612]	; (407e64 <_dtoa_r+0xa74>)
  407c00:	2200      	movs	r2, #0
  407c02:	f002 fc49 	bl	40a498 <__adddf3>
  407c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c08:	4605      	mov	r5, r0
  407c0a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407c0e:	2b00      	cmp	r3, #0
  407c10:	f000 813e 	beq.w	407e90 <_dtoa_r+0xaa0>
  407c14:	9b02      	ldr	r3, [sp, #8]
  407c16:	9315      	str	r3, [sp, #84]	; 0x54
  407c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c1a:	9312      	str	r3, [sp, #72]	; 0x48
  407c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407c1e:	2b00      	cmp	r3, #0
  407c20:	f000 81fa 	beq.w	408018 <_dtoa_r+0xc28>
  407c24:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407c26:	4b8c      	ldr	r3, [pc, #560]	; (407e58 <_dtoa_r+0xa68>)
  407c28:	498f      	ldr	r1, [pc, #572]	; (407e68 <_dtoa_r+0xa78>)
  407c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407c2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407c32:	2000      	movs	r0, #0
  407c34:	f002 ff0c 	bl	40aa50 <__aeabi_ddiv>
  407c38:	462a      	mov	r2, r5
  407c3a:	4633      	mov	r3, r6
  407c3c:	f002 fc2a 	bl	40a494 <__aeabi_dsub>
  407c40:	4682      	mov	sl, r0
  407c42:	468b      	mov	fp, r1
  407c44:	4638      	mov	r0, r7
  407c46:	4641      	mov	r1, r8
  407c48:	f003 f888 	bl	40ad5c <__aeabi_d2iz>
  407c4c:	4605      	mov	r5, r0
  407c4e:	f002 fd6f 	bl	40a730 <__aeabi_i2d>
  407c52:	4602      	mov	r2, r0
  407c54:	460b      	mov	r3, r1
  407c56:	4638      	mov	r0, r7
  407c58:	4641      	mov	r1, r8
  407c5a:	f002 fc1b 	bl	40a494 <__aeabi_dsub>
  407c5e:	3530      	adds	r5, #48	; 0x30
  407c60:	fa5f f885 	uxtb.w	r8, r5
  407c64:	9d04      	ldr	r5, [sp, #16]
  407c66:	4606      	mov	r6, r0
  407c68:	460f      	mov	r7, r1
  407c6a:	f885 8000 	strb.w	r8, [r5]
  407c6e:	4602      	mov	r2, r0
  407c70:	460b      	mov	r3, r1
  407c72:	4650      	mov	r0, sl
  407c74:	4659      	mov	r1, fp
  407c76:	3501      	adds	r5, #1
  407c78:	f003 f850 	bl	40ad1c <__aeabi_dcmpgt>
  407c7c:	2800      	cmp	r0, #0
  407c7e:	d154      	bne.n	407d2a <_dtoa_r+0x93a>
  407c80:	4632      	mov	r2, r6
  407c82:	463b      	mov	r3, r7
  407c84:	2000      	movs	r0, #0
  407c86:	4976      	ldr	r1, [pc, #472]	; (407e60 <_dtoa_r+0xa70>)
  407c88:	f002 fc04 	bl	40a494 <__aeabi_dsub>
  407c8c:	4602      	mov	r2, r0
  407c8e:	460b      	mov	r3, r1
  407c90:	4650      	mov	r0, sl
  407c92:	4659      	mov	r1, fp
  407c94:	f003 f842 	bl	40ad1c <__aeabi_dcmpgt>
  407c98:	2800      	cmp	r0, #0
  407c9a:	f040 8270 	bne.w	40817e <_dtoa_r+0xd8e>
  407c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407ca0:	2a01      	cmp	r2, #1
  407ca2:	f000 8111 	beq.w	407ec8 <_dtoa_r+0xad8>
  407ca6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407ca8:	9a04      	ldr	r2, [sp, #16]
  407caa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407cae:	4413      	add	r3, r2
  407cb0:	4699      	mov	r9, r3
  407cb2:	e00d      	b.n	407cd0 <_dtoa_r+0x8e0>
  407cb4:	2000      	movs	r0, #0
  407cb6:	496a      	ldr	r1, [pc, #424]	; (407e60 <_dtoa_r+0xa70>)
  407cb8:	f002 fbec 	bl	40a494 <__aeabi_dsub>
  407cbc:	4652      	mov	r2, sl
  407cbe:	465b      	mov	r3, fp
  407cc0:	f003 f80e 	bl	40ace0 <__aeabi_dcmplt>
  407cc4:	2800      	cmp	r0, #0
  407cc6:	f040 8258 	bne.w	40817a <_dtoa_r+0xd8a>
  407cca:	454d      	cmp	r5, r9
  407ccc:	f000 80fa 	beq.w	407ec4 <_dtoa_r+0xad4>
  407cd0:	4650      	mov	r0, sl
  407cd2:	4659      	mov	r1, fp
  407cd4:	2200      	movs	r2, #0
  407cd6:	4b65      	ldr	r3, [pc, #404]	; (407e6c <_dtoa_r+0xa7c>)
  407cd8:	f002 fd90 	bl	40a7fc <__aeabi_dmul>
  407cdc:	2200      	movs	r2, #0
  407cde:	4b63      	ldr	r3, [pc, #396]	; (407e6c <_dtoa_r+0xa7c>)
  407ce0:	4682      	mov	sl, r0
  407ce2:	468b      	mov	fp, r1
  407ce4:	4630      	mov	r0, r6
  407ce6:	4639      	mov	r1, r7
  407ce8:	f002 fd88 	bl	40a7fc <__aeabi_dmul>
  407cec:	460f      	mov	r7, r1
  407cee:	4606      	mov	r6, r0
  407cf0:	f003 f834 	bl	40ad5c <__aeabi_d2iz>
  407cf4:	4680      	mov	r8, r0
  407cf6:	f002 fd1b 	bl	40a730 <__aeabi_i2d>
  407cfa:	4602      	mov	r2, r0
  407cfc:	460b      	mov	r3, r1
  407cfe:	4630      	mov	r0, r6
  407d00:	4639      	mov	r1, r7
  407d02:	f002 fbc7 	bl	40a494 <__aeabi_dsub>
  407d06:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407d0a:	fa5f f888 	uxtb.w	r8, r8
  407d0e:	4652      	mov	r2, sl
  407d10:	465b      	mov	r3, fp
  407d12:	f805 8b01 	strb.w	r8, [r5], #1
  407d16:	4606      	mov	r6, r0
  407d18:	460f      	mov	r7, r1
  407d1a:	f002 ffe1 	bl	40ace0 <__aeabi_dcmplt>
  407d1e:	4632      	mov	r2, r6
  407d20:	463b      	mov	r3, r7
  407d22:	2800      	cmp	r0, #0
  407d24:	d0c6      	beq.n	407cb4 <_dtoa_r+0x8c4>
  407d26:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407d2c:	9302      	str	r3, [sp, #8]
  407d2e:	e523      	b.n	407778 <_dtoa_r+0x388>
  407d30:	2300      	movs	r3, #0
  407d32:	930b      	str	r3, [sp, #44]	; 0x2c
  407d34:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407d36:	2b00      	cmp	r3, #0
  407d38:	f340 80dc 	ble.w	407ef4 <_dtoa_r+0xb04>
  407d3c:	461f      	mov	r7, r3
  407d3e:	461e      	mov	r6, r3
  407d40:	930f      	str	r3, [sp, #60]	; 0x3c
  407d42:	930a      	str	r3, [sp, #40]	; 0x28
  407d44:	e6f6      	b.n	407b34 <_dtoa_r+0x744>
  407d46:	2301      	movs	r3, #1
  407d48:	930b      	str	r3, [sp, #44]	; 0x2c
  407d4a:	e7f3      	b.n	407d34 <_dtoa_r+0x944>
  407d4c:	f1ba 0f00 	cmp.w	sl, #0
  407d50:	f47f ada8 	bne.w	4078a4 <_dtoa_r+0x4b4>
  407d54:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407d58:	2b00      	cmp	r3, #0
  407d5a:	f47f adba 	bne.w	4078d2 <_dtoa_r+0x4e2>
  407d5e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407d62:	0d3f      	lsrs	r7, r7, #20
  407d64:	053f      	lsls	r7, r7, #20
  407d66:	2f00      	cmp	r7, #0
  407d68:	f000 820d 	beq.w	408186 <_dtoa_r+0xd96>
  407d6c:	9b08      	ldr	r3, [sp, #32]
  407d6e:	3301      	adds	r3, #1
  407d70:	9308      	str	r3, [sp, #32]
  407d72:	9b06      	ldr	r3, [sp, #24]
  407d74:	3301      	adds	r3, #1
  407d76:	9306      	str	r3, [sp, #24]
  407d78:	2301      	movs	r3, #1
  407d7a:	930c      	str	r3, [sp, #48]	; 0x30
  407d7c:	e5ab      	b.n	4078d6 <_dtoa_r+0x4e6>
  407d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407d80:	2b00      	cmp	r3, #0
  407d82:	f73f ac42 	bgt.w	40760a <_dtoa_r+0x21a>
  407d86:	f040 8221 	bne.w	4081cc <_dtoa_r+0xddc>
  407d8a:	2200      	movs	r2, #0
  407d8c:	4b38      	ldr	r3, [pc, #224]	; (407e70 <_dtoa_r+0xa80>)
  407d8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407d92:	f002 fd33 	bl	40a7fc <__aeabi_dmul>
  407d96:	4652      	mov	r2, sl
  407d98:	465b      	mov	r3, fp
  407d9a:	f002 ffb5 	bl	40ad08 <__aeabi_dcmpge>
  407d9e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407da2:	4646      	mov	r6, r8
  407da4:	2800      	cmp	r0, #0
  407da6:	d041      	beq.n	407e2c <_dtoa_r+0xa3c>
  407da8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407daa:	9d04      	ldr	r5, [sp, #16]
  407dac:	43db      	mvns	r3, r3
  407dae:	9302      	str	r3, [sp, #8]
  407db0:	4641      	mov	r1, r8
  407db2:	4620      	mov	r0, r4
  407db4:	f001 fbdc 	bl	409570 <_Bfree>
  407db8:	2e00      	cmp	r6, #0
  407dba:	f43f acdd 	beq.w	407778 <_dtoa_r+0x388>
  407dbe:	e6a7      	b.n	407b10 <_dtoa_r+0x720>
  407dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407dc2:	4649      	mov	r1, r9
  407dc4:	4620      	mov	r0, r4
  407dc6:	f001 fd09 	bl	4097dc <__pow5mult>
  407dca:	4681      	mov	r9, r0
  407dcc:	e558      	b.n	407880 <_dtoa_r+0x490>
  407dce:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407dd0:	2a00      	cmp	r2, #0
  407dd2:	f000 8187 	beq.w	4080e4 <_dtoa_r+0xcf4>
  407dd6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407dda:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407ddc:	9d08      	ldr	r5, [sp, #32]
  407dde:	e4f2      	b.n	4077c6 <_dtoa_r+0x3d6>
  407de0:	f1ba 0f00 	cmp.w	sl, #0
  407de4:	f47f ad75 	bne.w	4078d2 <_dtoa_r+0x4e2>
  407de8:	e7b4      	b.n	407d54 <_dtoa_r+0x964>
  407dea:	f001 fbcb 	bl	409584 <__multadd>
  407dee:	4647      	mov	r7, r8
  407df0:	4606      	mov	r6, r0
  407df2:	4683      	mov	fp, r0
  407df4:	e5be      	b.n	407974 <_dtoa_r+0x584>
  407df6:	4601      	mov	r1, r0
  407df8:	4620      	mov	r0, r4
  407dfa:	9306      	str	r3, [sp, #24]
  407dfc:	f001 fbb8 	bl	409570 <_Bfree>
  407e00:	2201      	movs	r2, #1
  407e02:	9b06      	ldr	r3, [sp, #24]
  407e04:	e5e0      	b.n	4079c8 <_dtoa_r+0x5d8>
  407e06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407e08:	2b02      	cmp	r3, #2
  407e0a:	f77f ad96 	ble.w	40793a <_dtoa_r+0x54a>
  407e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e10:	2b00      	cmp	r3, #0
  407e12:	d1c9      	bne.n	407da8 <_dtoa_r+0x9b8>
  407e14:	4641      	mov	r1, r8
  407e16:	2205      	movs	r2, #5
  407e18:	4620      	mov	r0, r4
  407e1a:	f001 fbb3 	bl	409584 <__multadd>
  407e1e:	4601      	mov	r1, r0
  407e20:	4680      	mov	r8, r0
  407e22:	4648      	mov	r0, r9
  407e24:	f001 fd7c 	bl	409920 <__mcmp>
  407e28:	2800      	cmp	r0, #0
  407e2a:	ddbd      	ble.n	407da8 <_dtoa_r+0x9b8>
  407e2c:	9a02      	ldr	r2, [sp, #8]
  407e2e:	9904      	ldr	r1, [sp, #16]
  407e30:	2331      	movs	r3, #49	; 0x31
  407e32:	3201      	adds	r2, #1
  407e34:	9202      	str	r2, [sp, #8]
  407e36:	700b      	strb	r3, [r1, #0]
  407e38:	1c4d      	adds	r5, r1, #1
  407e3a:	e7b9      	b.n	407db0 <_dtoa_r+0x9c0>
  407e3c:	9a02      	ldr	r2, [sp, #8]
  407e3e:	3201      	adds	r2, #1
  407e40:	9202      	str	r2, [sp, #8]
  407e42:	9a04      	ldr	r2, [sp, #16]
  407e44:	2331      	movs	r3, #49	; 0x31
  407e46:	7013      	strb	r3, [r2, #0]
  407e48:	e652      	b.n	407af0 <_dtoa_r+0x700>
  407e4a:	2301      	movs	r3, #1
  407e4c:	930b      	str	r3, [sp, #44]	; 0x2c
  407e4e:	e666      	b.n	407b1e <_dtoa_r+0x72e>
  407e50:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407e54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407e56:	e48f      	b.n	407778 <_dtoa_r+0x388>
  407e58:	0040c078 	.word	0x0040c078
  407e5c:	0040c050 	.word	0x0040c050
  407e60:	3ff00000 	.word	0x3ff00000
  407e64:	401c0000 	.word	0x401c0000
  407e68:	3fe00000 	.word	0x3fe00000
  407e6c:	40240000 	.word	0x40240000
  407e70:	40140000 	.word	0x40140000
  407e74:	4650      	mov	r0, sl
  407e76:	f002 fc5b 	bl	40a730 <__aeabi_i2d>
  407e7a:	463a      	mov	r2, r7
  407e7c:	4643      	mov	r3, r8
  407e7e:	f002 fcbd 	bl	40a7fc <__aeabi_dmul>
  407e82:	2200      	movs	r2, #0
  407e84:	4bc1      	ldr	r3, [pc, #772]	; (40818c <_dtoa_r+0xd9c>)
  407e86:	f002 fb07 	bl	40a498 <__adddf3>
  407e8a:	4605      	mov	r5, r0
  407e8c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407e90:	4641      	mov	r1, r8
  407e92:	2200      	movs	r2, #0
  407e94:	4bbe      	ldr	r3, [pc, #760]	; (408190 <_dtoa_r+0xda0>)
  407e96:	4638      	mov	r0, r7
  407e98:	f002 fafc 	bl	40a494 <__aeabi_dsub>
  407e9c:	462a      	mov	r2, r5
  407e9e:	4633      	mov	r3, r6
  407ea0:	4682      	mov	sl, r0
  407ea2:	468b      	mov	fp, r1
  407ea4:	f002 ff3a 	bl	40ad1c <__aeabi_dcmpgt>
  407ea8:	4680      	mov	r8, r0
  407eaa:	2800      	cmp	r0, #0
  407eac:	f040 8110 	bne.w	4080d0 <_dtoa_r+0xce0>
  407eb0:	462a      	mov	r2, r5
  407eb2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  407eb6:	4650      	mov	r0, sl
  407eb8:	4659      	mov	r1, fp
  407eba:	f002 ff11 	bl	40ace0 <__aeabi_dcmplt>
  407ebe:	b118      	cbz	r0, 407ec8 <_dtoa_r+0xad8>
  407ec0:	4646      	mov	r6, r8
  407ec2:	e771      	b.n	407da8 <_dtoa_r+0x9b8>
  407ec4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407ec8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  407ecc:	f7ff bb8a 	b.w	4075e4 <_dtoa_r+0x1f4>
  407ed0:	9804      	ldr	r0, [sp, #16]
  407ed2:	f7ff babb 	b.w	40744c <_dtoa_r+0x5c>
  407ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407eda:	970c      	str	r7, [sp, #48]	; 0x30
  407edc:	1afb      	subs	r3, r7, r3
  407ede:	441a      	add	r2, r3
  407ee0:	920d      	str	r2, [sp, #52]	; 0x34
  407ee2:	2700      	movs	r7, #0
  407ee4:	e469      	b.n	4077ba <_dtoa_r+0x3ca>
  407ee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  407eea:	f04f 0a02 	mov.w	sl, #2
  407eee:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  407ef2:	e657      	b.n	407ba4 <_dtoa_r+0x7b4>
  407ef4:	2100      	movs	r1, #0
  407ef6:	2301      	movs	r3, #1
  407ef8:	6461      	str	r1, [r4, #68]	; 0x44
  407efa:	4620      	mov	r0, r4
  407efc:	9325      	str	r3, [sp, #148]	; 0x94
  407efe:	f001 fb11 	bl	409524 <_Balloc>
  407f02:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407f04:	9004      	str	r0, [sp, #16]
  407f06:	6420      	str	r0, [r4, #64]	; 0x40
  407f08:	930a      	str	r3, [sp, #40]	; 0x28
  407f0a:	930f      	str	r3, [sp, #60]	; 0x3c
  407f0c:	e629      	b.n	407b62 <_dtoa_r+0x772>
  407f0e:	2a00      	cmp	r2, #0
  407f10:	46d0      	mov	r8, sl
  407f12:	f8cd b018 	str.w	fp, [sp, #24]
  407f16:	469a      	mov	sl, r3
  407f18:	dd11      	ble.n	407f3e <_dtoa_r+0xb4e>
  407f1a:	4649      	mov	r1, r9
  407f1c:	2201      	movs	r2, #1
  407f1e:	4620      	mov	r0, r4
  407f20:	f001 fcac 	bl	40987c <__lshift>
  407f24:	4641      	mov	r1, r8
  407f26:	4681      	mov	r9, r0
  407f28:	f001 fcfa 	bl	409920 <__mcmp>
  407f2c:	2800      	cmp	r0, #0
  407f2e:	f340 8146 	ble.w	4081be <_dtoa_r+0xdce>
  407f32:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407f36:	f000 8106 	beq.w	408146 <_dtoa_r+0xd56>
  407f3a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  407f3e:	46b3      	mov	fp, r6
  407f40:	f887 a000 	strb.w	sl, [r7]
  407f44:	1c7d      	adds	r5, r7, #1
  407f46:	9e06      	ldr	r6, [sp, #24]
  407f48:	e5d2      	b.n	407af0 <_dtoa_r+0x700>
  407f4a:	d104      	bne.n	407f56 <_dtoa_r+0xb66>
  407f4c:	f01a 0f01 	tst.w	sl, #1
  407f50:	d001      	beq.n	407f56 <_dtoa_r+0xb66>
  407f52:	e5bd      	b.n	407ad0 <_dtoa_r+0x6e0>
  407f54:	4615      	mov	r5, r2
  407f56:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407f5a:	2b30      	cmp	r3, #48	; 0x30
  407f5c:	f105 32ff 	add.w	r2, r5, #4294967295
  407f60:	d0f8      	beq.n	407f54 <_dtoa_r+0xb64>
  407f62:	e5c5      	b.n	407af0 <_dtoa_r+0x700>
  407f64:	9904      	ldr	r1, [sp, #16]
  407f66:	2230      	movs	r2, #48	; 0x30
  407f68:	700a      	strb	r2, [r1, #0]
  407f6a:	9a02      	ldr	r2, [sp, #8]
  407f6c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407f70:	3201      	adds	r2, #1
  407f72:	9202      	str	r2, [sp, #8]
  407f74:	f7ff bbfc 	b.w	407770 <_dtoa_r+0x380>
  407f78:	f000 80bb 	beq.w	4080f2 <_dtoa_r+0xd02>
  407f7c:	9b02      	ldr	r3, [sp, #8]
  407f7e:	425d      	negs	r5, r3
  407f80:	4b84      	ldr	r3, [pc, #528]	; (408194 <_dtoa_r+0xda4>)
  407f82:	f005 020f 	and.w	r2, r5, #15
  407f86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407f92:	f002 fc33 	bl	40a7fc <__aeabi_dmul>
  407f96:	112d      	asrs	r5, r5, #4
  407f98:	4607      	mov	r7, r0
  407f9a:	4688      	mov	r8, r1
  407f9c:	f000 812c 	beq.w	4081f8 <_dtoa_r+0xe08>
  407fa0:	4e7d      	ldr	r6, [pc, #500]	; (408198 <_dtoa_r+0xda8>)
  407fa2:	f04f 0a02 	mov.w	sl, #2
  407fa6:	07eb      	lsls	r3, r5, #31
  407fa8:	d509      	bpl.n	407fbe <_dtoa_r+0xbce>
  407faa:	4638      	mov	r0, r7
  407fac:	4641      	mov	r1, r8
  407fae:	e9d6 2300 	ldrd	r2, r3, [r6]
  407fb2:	f002 fc23 	bl	40a7fc <__aeabi_dmul>
  407fb6:	f10a 0a01 	add.w	sl, sl, #1
  407fba:	4607      	mov	r7, r0
  407fbc:	4688      	mov	r8, r1
  407fbe:	106d      	asrs	r5, r5, #1
  407fc0:	f106 0608 	add.w	r6, r6, #8
  407fc4:	d1ef      	bne.n	407fa6 <_dtoa_r+0xbb6>
  407fc6:	e608      	b.n	407bda <_dtoa_r+0x7ea>
  407fc8:	6871      	ldr	r1, [r6, #4]
  407fca:	4620      	mov	r0, r4
  407fcc:	f001 faaa 	bl	409524 <_Balloc>
  407fd0:	6933      	ldr	r3, [r6, #16]
  407fd2:	3302      	adds	r3, #2
  407fd4:	009a      	lsls	r2, r3, #2
  407fd6:	4605      	mov	r5, r0
  407fd8:	f106 010c 	add.w	r1, r6, #12
  407fdc:	300c      	adds	r0, #12
  407fde:	f001 f99f 	bl	409320 <memcpy>
  407fe2:	4629      	mov	r1, r5
  407fe4:	2201      	movs	r2, #1
  407fe6:	4620      	mov	r0, r4
  407fe8:	f001 fc48 	bl	40987c <__lshift>
  407fec:	9006      	str	r0, [sp, #24]
  407fee:	e4b5      	b.n	40795c <_dtoa_r+0x56c>
  407ff0:	2b39      	cmp	r3, #57	; 0x39
  407ff2:	f8cd b018 	str.w	fp, [sp, #24]
  407ff6:	46d0      	mov	r8, sl
  407ff8:	f000 80a5 	beq.w	408146 <_dtoa_r+0xd56>
  407ffc:	f103 0a01 	add.w	sl, r3, #1
  408000:	46b3      	mov	fp, r6
  408002:	f887 a000 	strb.w	sl, [r7]
  408006:	1c7d      	adds	r5, r7, #1
  408008:	9e06      	ldr	r6, [sp, #24]
  40800a:	e571      	b.n	407af0 <_dtoa_r+0x700>
  40800c:	465a      	mov	r2, fp
  40800e:	46d0      	mov	r8, sl
  408010:	46b3      	mov	fp, r6
  408012:	469a      	mov	sl, r3
  408014:	4616      	mov	r6, r2
  408016:	e54f      	b.n	407ab8 <_dtoa_r+0x6c8>
  408018:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40801a:	495e      	ldr	r1, [pc, #376]	; (408194 <_dtoa_r+0xda4>)
  40801c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408020:	462a      	mov	r2, r5
  408022:	4633      	mov	r3, r6
  408024:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  408028:	f002 fbe8 	bl	40a7fc <__aeabi_dmul>
  40802c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  408030:	4638      	mov	r0, r7
  408032:	4641      	mov	r1, r8
  408034:	f002 fe92 	bl	40ad5c <__aeabi_d2iz>
  408038:	4605      	mov	r5, r0
  40803a:	f002 fb79 	bl	40a730 <__aeabi_i2d>
  40803e:	460b      	mov	r3, r1
  408040:	4602      	mov	r2, r0
  408042:	4641      	mov	r1, r8
  408044:	4638      	mov	r0, r7
  408046:	f002 fa25 	bl	40a494 <__aeabi_dsub>
  40804a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40804c:	460f      	mov	r7, r1
  40804e:	9904      	ldr	r1, [sp, #16]
  408050:	3530      	adds	r5, #48	; 0x30
  408052:	2b01      	cmp	r3, #1
  408054:	700d      	strb	r5, [r1, #0]
  408056:	4606      	mov	r6, r0
  408058:	f101 0501 	add.w	r5, r1, #1
  40805c:	d026      	beq.n	4080ac <_dtoa_r+0xcbc>
  40805e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408060:	9a04      	ldr	r2, [sp, #16]
  408062:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4081a0 <_dtoa_r+0xdb0>
  408066:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40806a:	4413      	add	r3, r2
  40806c:	f04f 0a00 	mov.w	sl, #0
  408070:	4699      	mov	r9, r3
  408072:	4652      	mov	r2, sl
  408074:	465b      	mov	r3, fp
  408076:	4630      	mov	r0, r6
  408078:	4639      	mov	r1, r7
  40807a:	f002 fbbf 	bl	40a7fc <__aeabi_dmul>
  40807e:	460f      	mov	r7, r1
  408080:	4606      	mov	r6, r0
  408082:	f002 fe6b 	bl	40ad5c <__aeabi_d2iz>
  408086:	4680      	mov	r8, r0
  408088:	f002 fb52 	bl	40a730 <__aeabi_i2d>
  40808c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408090:	4602      	mov	r2, r0
  408092:	460b      	mov	r3, r1
  408094:	4630      	mov	r0, r6
  408096:	4639      	mov	r1, r7
  408098:	f002 f9fc 	bl	40a494 <__aeabi_dsub>
  40809c:	f805 8b01 	strb.w	r8, [r5], #1
  4080a0:	454d      	cmp	r5, r9
  4080a2:	4606      	mov	r6, r0
  4080a4:	460f      	mov	r7, r1
  4080a6:	d1e4      	bne.n	408072 <_dtoa_r+0xc82>
  4080a8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4080ac:	4b3b      	ldr	r3, [pc, #236]	; (40819c <_dtoa_r+0xdac>)
  4080ae:	2200      	movs	r2, #0
  4080b0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4080b4:	f002 f9f0 	bl	40a498 <__adddf3>
  4080b8:	4632      	mov	r2, r6
  4080ba:	463b      	mov	r3, r7
  4080bc:	f002 fe10 	bl	40ace0 <__aeabi_dcmplt>
  4080c0:	2800      	cmp	r0, #0
  4080c2:	d046      	beq.n	408152 <_dtoa_r+0xd62>
  4080c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4080c6:	9302      	str	r3, [sp, #8]
  4080c8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4080cc:	f7ff bb43 	b.w	407756 <_dtoa_r+0x366>
  4080d0:	f04f 0800 	mov.w	r8, #0
  4080d4:	4646      	mov	r6, r8
  4080d6:	e6a9      	b.n	407e2c <_dtoa_r+0xa3c>
  4080d8:	9b08      	ldr	r3, [sp, #32]
  4080da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4080dc:	1a9d      	subs	r5, r3, r2
  4080de:	2300      	movs	r3, #0
  4080e0:	f7ff bb71 	b.w	4077c6 <_dtoa_r+0x3d6>
  4080e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4080e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4080e8:	9d08      	ldr	r5, [sp, #32]
  4080ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4080ee:	f7ff bb6a 	b.w	4077c6 <_dtoa_r+0x3d6>
  4080f2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4080f6:	f04f 0a02 	mov.w	sl, #2
  4080fa:	e56e      	b.n	407bda <_dtoa_r+0x7ea>
  4080fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4080fe:	2b00      	cmp	r3, #0
  408100:	f43f aeb8 	beq.w	407e74 <_dtoa_r+0xa84>
  408104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408106:	2b00      	cmp	r3, #0
  408108:	f77f aede 	ble.w	407ec8 <_dtoa_r+0xad8>
  40810c:	2200      	movs	r2, #0
  40810e:	4b24      	ldr	r3, [pc, #144]	; (4081a0 <_dtoa_r+0xdb0>)
  408110:	4638      	mov	r0, r7
  408112:	4641      	mov	r1, r8
  408114:	f002 fb72 	bl	40a7fc <__aeabi_dmul>
  408118:	4607      	mov	r7, r0
  40811a:	4688      	mov	r8, r1
  40811c:	f10a 0001 	add.w	r0, sl, #1
  408120:	f002 fb06 	bl	40a730 <__aeabi_i2d>
  408124:	463a      	mov	r2, r7
  408126:	4643      	mov	r3, r8
  408128:	f002 fb68 	bl	40a7fc <__aeabi_dmul>
  40812c:	2200      	movs	r2, #0
  40812e:	4b17      	ldr	r3, [pc, #92]	; (40818c <_dtoa_r+0xd9c>)
  408130:	f002 f9b2 	bl	40a498 <__adddf3>
  408134:	9a02      	ldr	r2, [sp, #8]
  408136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408138:	9312      	str	r3, [sp, #72]	; 0x48
  40813a:	3a01      	subs	r2, #1
  40813c:	4605      	mov	r5, r0
  40813e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408142:	9215      	str	r2, [sp, #84]	; 0x54
  408144:	e56a      	b.n	407c1c <_dtoa_r+0x82c>
  408146:	2239      	movs	r2, #57	; 0x39
  408148:	46b3      	mov	fp, r6
  40814a:	703a      	strb	r2, [r7, #0]
  40814c:	9e06      	ldr	r6, [sp, #24]
  40814e:	1c7d      	adds	r5, r7, #1
  408150:	e4c0      	b.n	407ad4 <_dtoa_r+0x6e4>
  408152:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  408156:	2000      	movs	r0, #0
  408158:	4910      	ldr	r1, [pc, #64]	; (40819c <_dtoa_r+0xdac>)
  40815a:	f002 f99b 	bl	40a494 <__aeabi_dsub>
  40815e:	4632      	mov	r2, r6
  408160:	463b      	mov	r3, r7
  408162:	f002 fddb 	bl	40ad1c <__aeabi_dcmpgt>
  408166:	b908      	cbnz	r0, 40816c <_dtoa_r+0xd7c>
  408168:	e6ae      	b.n	407ec8 <_dtoa_r+0xad8>
  40816a:	4615      	mov	r5, r2
  40816c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408170:	2b30      	cmp	r3, #48	; 0x30
  408172:	f105 32ff 	add.w	r2, r5, #4294967295
  408176:	d0f8      	beq.n	40816a <_dtoa_r+0xd7a>
  408178:	e5d7      	b.n	407d2a <_dtoa_r+0x93a>
  40817a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40817e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408180:	9302      	str	r3, [sp, #8]
  408182:	f7ff bae8 	b.w	407756 <_dtoa_r+0x366>
  408186:	970c      	str	r7, [sp, #48]	; 0x30
  408188:	f7ff bba5 	b.w	4078d6 <_dtoa_r+0x4e6>
  40818c:	401c0000 	.word	0x401c0000
  408190:	40140000 	.word	0x40140000
  408194:	0040c078 	.word	0x0040c078
  408198:	0040c050 	.word	0x0040c050
  40819c:	3fe00000 	.word	0x3fe00000
  4081a0:	40240000 	.word	0x40240000
  4081a4:	2b39      	cmp	r3, #57	; 0x39
  4081a6:	f8cd b018 	str.w	fp, [sp, #24]
  4081aa:	46d0      	mov	r8, sl
  4081ac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4081b0:	469a      	mov	sl, r3
  4081b2:	d0c8      	beq.n	408146 <_dtoa_r+0xd56>
  4081b4:	f1bb 0f00 	cmp.w	fp, #0
  4081b8:	f73f aebf 	bgt.w	407f3a <_dtoa_r+0xb4a>
  4081bc:	e6bf      	b.n	407f3e <_dtoa_r+0xb4e>
  4081be:	f47f aebe 	bne.w	407f3e <_dtoa_r+0xb4e>
  4081c2:	f01a 0f01 	tst.w	sl, #1
  4081c6:	f43f aeba 	beq.w	407f3e <_dtoa_r+0xb4e>
  4081ca:	e6b2      	b.n	407f32 <_dtoa_r+0xb42>
  4081cc:	f04f 0800 	mov.w	r8, #0
  4081d0:	4646      	mov	r6, r8
  4081d2:	e5e9      	b.n	407da8 <_dtoa_r+0x9b8>
  4081d4:	4631      	mov	r1, r6
  4081d6:	2300      	movs	r3, #0
  4081d8:	220a      	movs	r2, #10
  4081da:	4620      	mov	r0, r4
  4081dc:	f001 f9d2 	bl	409584 <__multadd>
  4081e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4081e2:	2b00      	cmp	r3, #0
  4081e4:	4606      	mov	r6, r0
  4081e6:	dd0a      	ble.n	4081fe <_dtoa_r+0xe0e>
  4081e8:	930a      	str	r3, [sp, #40]	; 0x28
  4081ea:	f7ff bbaa 	b.w	407942 <_dtoa_r+0x552>
  4081ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4081f0:	2b02      	cmp	r3, #2
  4081f2:	dc23      	bgt.n	40823c <_dtoa_r+0xe4c>
  4081f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4081f6:	e43b      	b.n	407a70 <_dtoa_r+0x680>
  4081f8:	f04f 0a02 	mov.w	sl, #2
  4081fc:	e4ed      	b.n	407bda <_dtoa_r+0x7ea>
  4081fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408200:	2b02      	cmp	r3, #2
  408202:	dc1b      	bgt.n	40823c <_dtoa_r+0xe4c>
  408204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408206:	e7ef      	b.n	4081e8 <_dtoa_r+0xdf8>
  408208:	2500      	movs	r5, #0
  40820a:	6465      	str	r5, [r4, #68]	; 0x44
  40820c:	4629      	mov	r1, r5
  40820e:	4620      	mov	r0, r4
  408210:	f001 f988 	bl	409524 <_Balloc>
  408214:	f04f 33ff 	mov.w	r3, #4294967295
  408218:	930a      	str	r3, [sp, #40]	; 0x28
  40821a:	930f      	str	r3, [sp, #60]	; 0x3c
  40821c:	2301      	movs	r3, #1
  40821e:	9004      	str	r0, [sp, #16]
  408220:	9525      	str	r5, [sp, #148]	; 0x94
  408222:	6420      	str	r0, [r4, #64]	; 0x40
  408224:	930b      	str	r3, [sp, #44]	; 0x2c
  408226:	f7ff b9dd 	b.w	4075e4 <_dtoa_r+0x1f4>
  40822a:	2501      	movs	r5, #1
  40822c:	f7ff b9a5 	b.w	40757a <_dtoa_r+0x18a>
  408230:	f43f ab69 	beq.w	407906 <_dtoa_r+0x516>
  408234:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408238:	f7ff bbf9 	b.w	407a2e <_dtoa_r+0x63e>
  40823c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40823e:	930a      	str	r3, [sp, #40]	; 0x28
  408240:	e5e5      	b.n	407e0e <_dtoa_r+0xa1e>
  408242:	bf00      	nop

00408244 <__sflush_r>:
  408244:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  408248:	b29a      	uxth	r2, r3
  40824a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40824e:	460d      	mov	r5, r1
  408250:	0711      	lsls	r1, r2, #28
  408252:	4680      	mov	r8, r0
  408254:	d43a      	bmi.n	4082cc <__sflush_r+0x88>
  408256:	686a      	ldr	r2, [r5, #4]
  408258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40825c:	2a00      	cmp	r2, #0
  40825e:	81ab      	strh	r3, [r5, #12]
  408260:	dd6f      	ble.n	408342 <__sflush_r+0xfe>
  408262:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408264:	2c00      	cmp	r4, #0
  408266:	d049      	beq.n	4082fc <__sflush_r+0xb8>
  408268:	2200      	movs	r2, #0
  40826a:	b29b      	uxth	r3, r3
  40826c:	f8d8 6000 	ldr.w	r6, [r8]
  408270:	f8c8 2000 	str.w	r2, [r8]
  408274:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  408278:	d067      	beq.n	40834a <__sflush_r+0x106>
  40827a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40827c:	075f      	lsls	r7, r3, #29
  40827e:	d505      	bpl.n	40828c <__sflush_r+0x48>
  408280:	6869      	ldr	r1, [r5, #4]
  408282:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408284:	1a52      	subs	r2, r2, r1
  408286:	b10b      	cbz	r3, 40828c <__sflush_r+0x48>
  408288:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40828a:	1ad2      	subs	r2, r2, r3
  40828c:	2300      	movs	r3, #0
  40828e:	69e9      	ldr	r1, [r5, #28]
  408290:	4640      	mov	r0, r8
  408292:	47a0      	blx	r4
  408294:	1c44      	adds	r4, r0, #1
  408296:	d03c      	beq.n	408312 <__sflush_r+0xce>
  408298:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40829c:	692a      	ldr	r2, [r5, #16]
  40829e:	602a      	str	r2, [r5, #0]
  4082a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4082a4:	2200      	movs	r2, #0
  4082a6:	81ab      	strh	r3, [r5, #12]
  4082a8:	04db      	lsls	r3, r3, #19
  4082aa:	606a      	str	r2, [r5, #4]
  4082ac:	d447      	bmi.n	40833e <__sflush_r+0xfa>
  4082ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4082b0:	f8c8 6000 	str.w	r6, [r8]
  4082b4:	b311      	cbz	r1, 4082fc <__sflush_r+0xb8>
  4082b6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4082ba:	4299      	cmp	r1, r3
  4082bc:	d002      	beq.n	4082c4 <__sflush_r+0x80>
  4082be:	4640      	mov	r0, r8
  4082c0:	f000 f9ca 	bl	408658 <_free_r>
  4082c4:	2000      	movs	r0, #0
  4082c6:	6328      	str	r0, [r5, #48]	; 0x30
  4082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4082cc:	692e      	ldr	r6, [r5, #16]
  4082ce:	b1ae      	cbz	r6, 4082fc <__sflush_r+0xb8>
  4082d0:	682c      	ldr	r4, [r5, #0]
  4082d2:	602e      	str	r6, [r5, #0]
  4082d4:	0791      	lsls	r1, r2, #30
  4082d6:	bf0c      	ite	eq
  4082d8:	696b      	ldreq	r3, [r5, #20]
  4082da:	2300      	movne	r3, #0
  4082dc:	1ba4      	subs	r4, r4, r6
  4082de:	60ab      	str	r3, [r5, #8]
  4082e0:	e00a      	b.n	4082f8 <__sflush_r+0xb4>
  4082e2:	4623      	mov	r3, r4
  4082e4:	4632      	mov	r2, r6
  4082e6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4082e8:	69e9      	ldr	r1, [r5, #28]
  4082ea:	4640      	mov	r0, r8
  4082ec:	47b8      	blx	r7
  4082ee:	2800      	cmp	r0, #0
  4082f0:	eba4 0400 	sub.w	r4, r4, r0
  4082f4:	4406      	add	r6, r0
  4082f6:	dd04      	ble.n	408302 <__sflush_r+0xbe>
  4082f8:	2c00      	cmp	r4, #0
  4082fa:	dcf2      	bgt.n	4082e2 <__sflush_r+0x9e>
  4082fc:	2000      	movs	r0, #0
  4082fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408302:	89ab      	ldrh	r3, [r5, #12]
  408304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408308:	81ab      	strh	r3, [r5, #12]
  40830a:	f04f 30ff 	mov.w	r0, #4294967295
  40830e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408312:	f8d8 4000 	ldr.w	r4, [r8]
  408316:	2c1d      	cmp	r4, #29
  408318:	d8f3      	bhi.n	408302 <__sflush_r+0xbe>
  40831a:	4b19      	ldr	r3, [pc, #100]	; (408380 <__sflush_r+0x13c>)
  40831c:	40e3      	lsrs	r3, r4
  40831e:	43db      	mvns	r3, r3
  408320:	f013 0301 	ands.w	r3, r3, #1
  408324:	d1ed      	bne.n	408302 <__sflush_r+0xbe>
  408326:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40832a:	606b      	str	r3, [r5, #4]
  40832c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  408330:	6929      	ldr	r1, [r5, #16]
  408332:	81ab      	strh	r3, [r5, #12]
  408334:	04da      	lsls	r2, r3, #19
  408336:	6029      	str	r1, [r5, #0]
  408338:	d5b9      	bpl.n	4082ae <__sflush_r+0x6a>
  40833a:	2c00      	cmp	r4, #0
  40833c:	d1b7      	bne.n	4082ae <__sflush_r+0x6a>
  40833e:	6528      	str	r0, [r5, #80]	; 0x50
  408340:	e7b5      	b.n	4082ae <__sflush_r+0x6a>
  408342:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408344:	2a00      	cmp	r2, #0
  408346:	dc8c      	bgt.n	408262 <__sflush_r+0x1e>
  408348:	e7d8      	b.n	4082fc <__sflush_r+0xb8>
  40834a:	2301      	movs	r3, #1
  40834c:	69e9      	ldr	r1, [r5, #28]
  40834e:	4640      	mov	r0, r8
  408350:	47a0      	blx	r4
  408352:	1c43      	adds	r3, r0, #1
  408354:	4602      	mov	r2, r0
  408356:	d002      	beq.n	40835e <__sflush_r+0x11a>
  408358:	89ab      	ldrh	r3, [r5, #12]
  40835a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40835c:	e78e      	b.n	40827c <__sflush_r+0x38>
  40835e:	f8d8 3000 	ldr.w	r3, [r8]
  408362:	2b00      	cmp	r3, #0
  408364:	d0f8      	beq.n	408358 <__sflush_r+0x114>
  408366:	2b1d      	cmp	r3, #29
  408368:	d001      	beq.n	40836e <__sflush_r+0x12a>
  40836a:	2b16      	cmp	r3, #22
  40836c:	d102      	bne.n	408374 <__sflush_r+0x130>
  40836e:	f8c8 6000 	str.w	r6, [r8]
  408372:	e7c3      	b.n	4082fc <__sflush_r+0xb8>
  408374:	89ab      	ldrh	r3, [r5, #12]
  408376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40837a:	81ab      	strh	r3, [r5, #12]
  40837c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408380:	20400001 	.word	0x20400001

00408384 <_fflush_r>:
  408384:	b510      	push	{r4, lr}
  408386:	4604      	mov	r4, r0
  408388:	b082      	sub	sp, #8
  40838a:	b108      	cbz	r0, 408390 <_fflush_r+0xc>
  40838c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40838e:	b153      	cbz	r3, 4083a6 <_fflush_r+0x22>
  408390:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  408394:	b908      	cbnz	r0, 40839a <_fflush_r+0x16>
  408396:	b002      	add	sp, #8
  408398:	bd10      	pop	{r4, pc}
  40839a:	4620      	mov	r0, r4
  40839c:	b002      	add	sp, #8
  40839e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4083a2:	f7ff bf4f 	b.w	408244 <__sflush_r>
  4083a6:	9101      	str	r1, [sp, #4]
  4083a8:	f000 f880 	bl	4084ac <__sinit>
  4083ac:	9901      	ldr	r1, [sp, #4]
  4083ae:	e7ef      	b.n	408390 <_fflush_r+0xc>

004083b0 <_cleanup_r>:
  4083b0:	4901      	ldr	r1, [pc, #4]	; (4083b8 <_cleanup_r+0x8>)
  4083b2:	f000 bbaf 	b.w	408b14 <_fwalk_reent>
  4083b6:	bf00      	nop
  4083b8:	0040a369 	.word	0x0040a369

004083bc <__sinit.part.1>:
  4083bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083c0:	4b35      	ldr	r3, [pc, #212]	; (408498 <__sinit.part.1+0xdc>)
  4083c2:	6845      	ldr	r5, [r0, #4]
  4083c4:	63c3      	str	r3, [r0, #60]	; 0x3c
  4083c6:	2400      	movs	r4, #0
  4083c8:	4607      	mov	r7, r0
  4083ca:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4083ce:	2304      	movs	r3, #4
  4083d0:	2103      	movs	r1, #3
  4083d2:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4083d6:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4083da:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4083de:	b083      	sub	sp, #12
  4083e0:	602c      	str	r4, [r5, #0]
  4083e2:	606c      	str	r4, [r5, #4]
  4083e4:	60ac      	str	r4, [r5, #8]
  4083e6:	666c      	str	r4, [r5, #100]	; 0x64
  4083e8:	81ec      	strh	r4, [r5, #14]
  4083ea:	612c      	str	r4, [r5, #16]
  4083ec:	616c      	str	r4, [r5, #20]
  4083ee:	61ac      	str	r4, [r5, #24]
  4083f0:	81ab      	strh	r3, [r5, #12]
  4083f2:	4621      	mov	r1, r4
  4083f4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4083f8:	2208      	movs	r2, #8
  4083fa:	f7fc fa51 	bl	4048a0 <memset>
  4083fe:	68be      	ldr	r6, [r7, #8]
  408400:	f8df b098 	ldr.w	fp, [pc, #152]	; 40849c <__sinit.part.1+0xe0>
  408404:	f8df a098 	ldr.w	sl, [pc, #152]	; 4084a0 <__sinit.part.1+0xe4>
  408408:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4084a4 <__sinit.part.1+0xe8>
  40840c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4084a8 <__sinit.part.1+0xec>
  408410:	f8c5 b020 	str.w	fp, [r5, #32]
  408414:	2301      	movs	r3, #1
  408416:	2209      	movs	r2, #9
  408418:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40841c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  408420:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  408424:	61ed      	str	r5, [r5, #28]
  408426:	4621      	mov	r1, r4
  408428:	81f3      	strh	r3, [r6, #14]
  40842a:	81b2      	strh	r2, [r6, #12]
  40842c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  408430:	6034      	str	r4, [r6, #0]
  408432:	6074      	str	r4, [r6, #4]
  408434:	60b4      	str	r4, [r6, #8]
  408436:	6674      	str	r4, [r6, #100]	; 0x64
  408438:	6134      	str	r4, [r6, #16]
  40843a:	6174      	str	r4, [r6, #20]
  40843c:	61b4      	str	r4, [r6, #24]
  40843e:	2208      	movs	r2, #8
  408440:	9301      	str	r3, [sp, #4]
  408442:	f7fc fa2d 	bl	4048a0 <memset>
  408446:	68fd      	ldr	r5, [r7, #12]
  408448:	61f6      	str	r6, [r6, #28]
  40844a:	2012      	movs	r0, #18
  40844c:	2202      	movs	r2, #2
  40844e:	f8c6 b020 	str.w	fp, [r6, #32]
  408452:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  408456:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40845a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40845e:	4621      	mov	r1, r4
  408460:	81a8      	strh	r0, [r5, #12]
  408462:	81ea      	strh	r2, [r5, #14]
  408464:	602c      	str	r4, [r5, #0]
  408466:	606c      	str	r4, [r5, #4]
  408468:	60ac      	str	r4, [r5, #8]
  40846a:	666c      	str	r4, [r5, #100]	; 0x64
  40846c:	612c      	str	r4, [r5, #16]
  40846e:	616c      	str	r4, [r5, #20]
  408470:	61ac      	str	r4, [r5, #24]
  408472:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  408476:	2208      	movs	r2, #8
  408478:	f7fc fa12 	bl	4048a0 <memset>
  40847c:	9b01      	ldr	r3, [sp, #4]
  40847e:	61ed      	str	r5, [r5, #28]
  408480:	f8c5 b020 	str.w	fp, [r5, #32]
  408484:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  408488:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40848c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  408490:	63bb      	str	r3, [r7, #56]	; 0x38
  408492:	b003      	add	sp, #12
  408494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408498:	004083b1 	.word	0x004083b1
  40849c:	00409e89 	.word	0x00409e89
  4084a0:	00409ead 	.word	0x00409ead
  4084a4:	00409ee9 	.word	0x00409ee9
  4084a8:	00409f09 	.word	0x00409f09

004084ac <__sinit>:
  4084ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4084ae:	b103      	cbz	r3, 4084b2 <__sinit+0x6>
  4084b0:	4770      	bx	lr
  4084b2:	f7ff bf83 	b.w	4083bc <__sinit.part.1>
  4084b6:	bf00      	nop

004084b8 <__sfp_lock_acquire>:
  4084b8:	4770      	bx	lr
  4084ba:	bf00      	nop

004084bc <__sfp_lock_release>:
  4084bc:	4770      	bx	lr
  4084be:	bf00      	nop

004084c0 <__libc_fini_array>:
  4084c0:	b538      	push	{r3, r4, r5, lr}
  4084c2:	4c0a      	ldr	r4, [pc, #40]	; (4084ec <__libc_fini_array+0x2c>)
  4084c4:	4d0a      	ldr	r5, [pc, #40]	; (4084f0 <__libc_fini_array+0x30>)
  4084c6:	1b64      	subs	r4, r4, r5
  4084c8:	10a4      	asrs	r4, r4, #2
  4084ca:	d00a      	beq.n	4084e2 <__libc_fini_array+0x22>
  4084cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4084d0:	3b01      	subs	r3, #1
  4084d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4084d6:	3c01      	subs	r4, #1
  4084d8:	f855 3904 	ldr.w	r3, [r5], #-4
  4084dc:	4798      	blx	r3
  4084de:	2c00      	cmp	r4, #0
  4084e0:	d1f9      	bne.n	4084d6 <__libc_fini_array+0x16>
  4084e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4084e6:	f003 bebd 	b.w	40c264 <_fini>
  4084ea:	bf00      	nop
  4084ec:	0040c274 	.word	0x0040c274
  4084f0:	0040c270 	.word	0x0040c270

004084f4 <__fputwc>:
  4084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4084f8:	b082      	sub	sp, #8
  4084fa:	4680      	mov	r8, r0
  4084fc:	4689      	mov	r9, r1
  4084fe:	4614      	mov	r4, r2
  408500:	f000 fb32 	bl	408b68 <__locale_mb_cur_max>
  408504:	2801      	cmp	r0, #1
  408506:	d036      	beq.n	408576 <__fputwc+0x82>
  408508:	464a      	mov	r2, r9
  40850a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40850e:	a901      	add	r1, sp, #4
  408510:	4640      	mov	r0, r8
  408512:	f001 fe47 	bl	40a1a4 <_wcrtomb_r>
  408516:	1c42      	adds	r2, r0, #1
  408518:	4606      	mov	r6, r0
  40851a:	d025      	beq.n	408568 <__fputwc+0x74>
  40851c:	b3a8      	cbz	r0, 40858a <__fputwc+0x96>
  40851e:	f89d e004 	ldrb.w	lr, [sp, #4]
  408522:	2500      	movs	r5, #0
  408524:	f10d 0a04 	add.w	sl, sp, #4
  408528:	e009      	b.n	40853e <__fputwc+0x4a>
  40852a:	6823      	ldr	r3, [r4, #0]
  40852c:	1c5a      	adds	r2, r3, #1
  40852e:	6022      	str	r2, [r4, #0]
  408530:	f883 e000 	strb.w	lr, [r3]
  408534:	3501      	adds	r5, #1
  408536:	42b5      	cmp	r5, r6
  408538:	d227      	bcs.n	40858a <__fputwc+0x96>
  40853a:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40853e:	68a3      	ldr	r3, [r4, #8]
  408540:	3b01      	subs	r3, #1
  408542:	2b00      	cmp	r3, #0
  408544:	60a3      	str	r3, [r4, #8]
  408546:	daf0      	bge.n	40852a <__fputwc+0x36>
  408548:	69a7      	ldr	r7, [r4, #24]
  40854a:	42bb      	cmp	r3, r7
  40854c:	4671      	mov	r1, lr
  40854e:	4622      	mov	r2, r4
  408550:	4640      	mov	r0, r8
  408552:	db02      	blt.n	40855a <__fputwc+0x66>
  408554:	f1be 0f0a 	cmp.w	lr, #10
  408558:	d1e7      	bne.n	40852a <__fputwc+0x36>
  40855a:	f001 fdcb 	bl	40a0f4 <__swbuf_r>
  40855e:	1c43      	adds	r3, r0, #1
  408560:	d1e8      	bne.n	408534 <__fputwc+0x40>
  408562:	b002      	add	sp, #8
  408564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408568:	89a3      	ldrh	r3, [r4, #12]
  40856a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40856e:	81a3      	strh	r3, [r4, #12]
  408570:	b002      	add	sp, #8
  408572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408576:	f109 33ff 	add.w	r3, r9, #4294967295
  40857a:	2bfe      	cmp	r3, #254	; 0xfe
  40857c:	d8c4      	bhi.n	408508 <__fputwc+0x14>
  40857e:	fa5f fe89 	uxtb.w	lr, r9
  408582:	4606      	mov	r6, r0
  408584:	f88d e004 	strb.w	lr, [sp, #4]
  408588:	e7cb      	b.n	408522 <__fputwc+0x2e>
  40858a:	4648      	mov	r0, r9
  40858c:	b002      	add	sp, #8
  40858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408592:	bf00      	nop

00408594 <_fputwc_r>:
  408594:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408598:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40859c:	d10a      	bne.n	4085b4 <_fputwc_r+0x20>
  40859e:	b410      	push	{r4}
  4085a0:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4085a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4085a6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4085aa:	6654      	str	r4, [r2, #100]	; 0x64
  4085ac:	8193      	strh	r3, [r2, #12]
  4085ae:	bc10      	pop	{r4}
  4085b0:	f7ff bfa0 	b.w	4084f4 <__fputwc>
  4085b4:	f7ff bf9e 	b.w	4084f4 <__fputwc>

004085b8 <_malloc_trim_r>:
  4085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4085ba:	4f24      	ldr	r7, [pc, #144]	; (40864c <_malloc_trim_r+0x94>)
  4085bc:	460c      	mov	r4, r1
  4085be:	4606      	mov	r6, r0
  4085c0:	f000 ffac 	bl	40951c <__malloc_lock>
  4085c4:	68bb      	ldr	r3, [r7, #8]
  4085c6:	685d      	ldr	r5, [r3, #4]
  4085c8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4085cc:	310f      	adds	r1, #15
  4085ce:	f025 0503 	bic.w	r5, r5, #3
  4085d2:	4429      	add	r1, r5
  4085d4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4085d8:	f021 010f 	bic.w	r1, r1, #15
  4085dc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4085e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4085e4:	db07      	blt.n	4085f6 <_malloc_trim_r+0x3e>
  4085e6:	2100      	movs	r1, #0
  4085e8:	4630      	mov	r0, r6
  4085ea:	f001 fc3b 	bl	409e64 <_sbrk_r>
  4085ee:	68bb      	ldr	r3, [r7, #8]
  4085f0:	442b      	add	r3, r5
  4085f2:	4298      	cmp	r0, r3
  4085f4:	d004      	beq.n	408600 <_malloc_trim_r+0x48>
  4085f6:	4630      	mov	r0, r6
  4085f8:	f000 ff92 	bl	409520 <__malloc_unlock>
  4085fc:	2000      	movs	r0, #0
  4085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408600:	4261      	negs	r1, r4
  408602:	4630      	mov	r0, r6
  408604:	f001 fc2e 	bl	409e64 <_sbrk_r>
  408608:	3001      	adds	r0, #1
  40860a:	d00d      	beq.n	408628 <_malloc_trim_r+0x70>
  40860c:	4b10      	ldr	r3, [pc, #64]	; (408650 <_malloc_trim_r+0x98>)
  40860e:	68ba      	ldr	r2, [r7, #8]
  408610:	6819      	ldr	r1, [r3, #0]
  408612:	1b2d      	subs	r5, r5, r4
  408614:	f045 0501 	orr.w	r5, r5, #1
  408618:	4630      	mov	r0, r6
  40861a:	1b09      	subs	r1, r1, r4
  40861c:	6055      	str	r5, [r2, #4]
  40861e:	6019      	str	r1, [r3, #0]
  408620:	f000 ff7e 	bl	409520 <__malloc_unlock>
  408624:	2001      	movs	r0, #1
  408626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408628:	2100      	movs	r1, #0
  40862a:	4630      	mov	r0, r6
  40862c:	f001 fc1a 	bl	409e64 <_sbrk_r>
  408630:	68ba      	ldr	r2, [r7, #8]
  408632:	1a83      	subs	r3, r0, r2
  408634:	2b0f      	cmp	r3, #15
  408636:	ddde      	ble.n	4085f6 <_malloc_trim_r+0x3e>
  408638:	4c06      	ldr	r4, [pc, #24]	; (408654 <_malloc_trim_r+0x9c>)
  40863a:	4905      	ldr	r1, [pc, #20]	; (408650 <_malloc_trim_r+0x98>)
  40863c:	6824      	ldr	r4, [r4, #0]
  40863e:	f043 0301 	orr.w	r3, r3, #1
  408642:	1b00      	subs	r0, r0, r4
  408644:	6053      	str	r3, [r2, #4]
  408646:	6008      	str	r0, [r1, #0]
  408648:	e7d5      	b.n	4085f6 <_malloc_trim_r+0x3e>
  40864a:	bf00      	nop
  40864c:	204005bc 	.word	0x204005bc
  408650:	204015b0 	.word	0x204015b0
  408654:	204009c4 	.word	0x204009c4

00408658 <_free_r>:
  408658:	2900      	cmp	r1, #0
  40865a:	d044      	beq.n	4086e6 <_free_r+0x8e>
  40865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408660:	460d      	mov	r5, r1
  408662:	4680      	mov	r8, r0
  408664:	f000 ff5a 	bl	40951c <__malloc_lock>
  408668:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40866c:	4969      	ldr	r1, [pc, #420]	; (408814 <_free_r+0x1bc>)
  40866e:	f027 0301 	bic.w	r3, r7, #1
  408672:	f1a5 0408 	sub.w	r4, r5, #8
  408676:	18e2      	adds	r2, r4, r3
  408678:	688e      	ldr	r6, [r1, #8]
  40867a:	6850      	ldr	r0, [r2, #4]
  40867c:	42b2      	cmp	r2, r6
  40867e:	f020 0003 	bic.w	r0, r0, #3
  408682:	d05e      	beq.n	408742 <_free_r+0xea>
  408684:	07fe      	lsls	r6, r7, #31
  408686:	6050      	str	r0, [r2, #4]
  408688:	d40b      	bmi.n	4086a2 <_free_r+0x4a>
  40868a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40868e:	1be4      	subs	r4, r4, r7
  408690:	f101 0e08 	add.w	lr, r1, #8
  408694:	68a5      	ldr	r5, [r4, #8]
  408696:	4575      	cmp	r5, lr
  408698:	443b      	add	r3, r7
  40869a:	d06d      	beq.n	408778 <_free_r+0x120>
  40869c:	68e7      	ldr	r7, [r4, #12]
  40869e:	60ef      	str	r7, [r5, #12]
  4086a0:	60bd      	str	r5, [r7, #8]
  4086a2:	1815      	adds	r5, r2, r0
  4086a4:	686d      	ldr	r5, [r5, #4]
  4086a6:	07ed      	lsls	r5, r5, #31
  4086a8:	d53e      	bpl.n	408728 <_free_r+0xd0>
  4086aa:	f043 0201 	orr.w	r2, r3, #1
  4086ae:	6062      	str	r2, [r4, #4]
  4086b0:	50e3      	str	r3, [r4, r3]
  4086b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4086b6:	d217      	bcs.n	4086e8 <_free_r+0x90>
  4086b8:	08db      	lsrs	r3, r3, #3
  4086ba:	1c58      	adds	r0, r3, #1
  4086bc:	109a      	asrs	r2, r3, #2
  4086be:	684d      	ldr	r5, [r1, #4]
  4086c0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4086c4:	60a7      	str	r7, [r4, #8]
  4086c6:	2301      	movs	r3, #1
  4086c8:	4093      	lsls	r3, r2
  4086ca:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4086ce:	432b      	orrs	r3, r5
  4086d0:	3a08      	subs	r2, #8
  4086d2:	60e2      	str	r2, [r4, #12]
  4086d4:	604b      	str	r3, [r1, #4]
  4086d6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4086da:	60fc      	str	r4, [r7, #12]
  4086dc:	4640      	mov	r0, r8
  4086de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4086e2:	f000 bf1d 	b.w	409520 <__malloc_unlock>
  4086e6:	4770      	bx	lr
  4086e8:	0a5a      	lsrs	r2, r3, #9
  4086ea:	2a04      	cmp	r2, #4
  4086ec:	d852      	bhi.n	408794 <_free_r+0x13c>
  4086ee:	099a      	lsrs	r2, r3, #6
  4086f0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4086f4:	00ff      	lsls	r7, r7, #3
  4086f6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4086fa:	19c8      	adds	r0, r1, r7
  4086fc:	59ca      	ldr	r2, [r1, r7]
  4086fe:	3808      	subs	r0, #8
  408700:	4290      	cmp	r0, r2
  408702:	d04f      	beq.n	4087a4 <_free_r+0x14c>
  408704:	6851      	ldr	r1, [r2, #4]
  408706:	f021 0103 	bic.w	r1, r1, #3
  40870a:	428b      	cmp	r3, r1
  40870c:	d232      	bcs.n	408774 <_free_r+0x11c>
  40870e:	6892      	ldr	r2, [r2, #8]
  408710:	4290      	cmp	r0, r2
  408712:	d1f7      	bne.n	408704 <_free_r+0xac>
  408714:	68c3      	ldr	r3, [r0, #12]
  408716:	60a0      	str	r0, [r4, #8]
  408718:	60e3      	str	r3, [r4, #12]
  40871a:	609c      	str	r4, [r3, #8]
  40871c:	60c4      	str	r4, [r0, #12]
  40871e:	4640      	mov	r0, r8
  408720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408724:	f000 befc 	b.w	409520 <__malloc_unlock>
  408728:	6895      	ldr	r5, [r2, #8]
  40872a:	4f3b      	ldr	r7, [pc, #236]	; (408818 <_free_r+0x1c0>)
  40872c:	42bd      	cmp	r5, r7
  40872e:	4403      	add	r3, r0
  408730:	d040      	beq.n	4087b4 <_free_r+0x15c>
  408732:	68d0      	ldr	r0, [r2, #12]
  408734:	60e8      	str	r0, [r5, #12]
  408736:	f043 0201 	orr.w	r2, r3, #1
  40873a:	6085      	str	r5, [r0, #8]
  40873c:	6062      	str	r2, [r4, #4]
  40873e:	50e3      	str	r3, [r4, r3]
  408740:	e7b7      	b.n	4086b2 <_free_r+0x5a>
  408742:	07ff      	lsls	r7, r7, #31
  408744:	4403      	add	r3, r0
  408746:	d407      	bmi.n	408758 <_free_r+0x100>
  408748:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40874c:	1aa4      	subs	r4, r4, r2
  40874e:	4413      	add	r3, r2
  408750:	68a0      	ldr	r0, [r4, #8]
  408752:	68e2      	ldr	r2, [r4, #12]
  408754:	60c2      	str	r2, [r0, #12]
  408756:	6090      	str	r0, [r2, #8]
  408758:	4a30      	ldr	r2, [pc, #192]	; (40881c <_free_r+0x1c4>)
  40875a:	6812      	ldr	r2, [r2, #0]
  40875c:	f043 0001 	orr.w	r0, r3, #1
  408760:	4293      	cmp	r3, r2
  408762:	6060      	str	r0, [r4, #4]
  408764:	608c      	str	r4, [r1, #8]
  408766:	d3b9      	bcc.n	4086dc <_free_r+0x84>
  408768:	4b2d      	ldr	r3, [pc, #180]	; (408820 <_free_r+0x1c8>)
  40876a:	4640      	mov	r0, r8
  40876c:	6819      	ldr	r1, [r3, #0]
  40876e:	f7ff ff23 	bl	4085b8 <_malloc_trim_r>
  408772:	e7b3      	b.n	4086dc <_free_r+0x84>
  408774:	4610      	mov	r0, r2
  408776:	e7cd      	b.n	408714 <_free_r+0xbc>
  408778:	1811      	adds	r1, r2, r0
  40877a:	6849      	ldr	r1, [r1, #4]
  40877c:	07c9      	lsls	r1, r1, #31
  40877e:	d444      	bmi.n	40880a <_free_r+0x1b2>
  408780:	6891      	ldr	r1, [r2, #8]
  408782:	68d2      	ldr	r2, [r2, #12]
  408784:	60ca      	str	r2, [r1, #12]
  408786:	4403      	add	r3, r0
  408788:	f043 0001 	orr.w	r0, r3, #1
  40878c:	6091      	str	r1, [r2, #8]
  40878e:	6060      	str	r0, [r4, #4]
  408790:	50e3      	str	r3, [r4, r3]
  408792:	e7a3      	b.n	4086dc <_free_r+0x84>
  408794:	2a14      	cmp	r2, #20
  408796:	d816      	bhi.n	4087c6 <_free_r+0x16e>
  408798:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40879c:	00ff      	lsls	r7, r7, #3
  40879e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4087a2:	e7aa      	b.n	4086fa <_free_r+0xa2>
  4087a4:	10aa      	asrs	r2, r5, #2
  4087a6:	2301      	movs	r3, #1
  4087a8:	684d      	ldr	r5, [r1, #4]
  4087aa:	4093      	lsls	r3, r2
  4087ac:	432b      	orrs	r3, r5
  4087ae:	604b      	str	r3, [r1, #4]
  4087b0:	4603      	mov	r3, r0
  4087b2:	e7b0      	b.n	408716 <_free_r+0xbe>
  4087b4:	f043 0201 	orr.w	r2, r3, #1
  4087b8:	614c      	str	r4, [r1, #20]
  4087ba:	610c      	str	r4, [r1, #16]
  4087bc:	60e5      	str	r5, [r4, #12]
  4087be:	60a5      	str	r5, [r4, #8]
  4087c0:	6062      	str	r2, [r4, #4]
  4087c2:	50e3      	str	r3, [r4, r3]
  4087c4:	e78a      	b.n	4086dc <_free_r+0x84>
  4087c6:	2a54      	cmp	r2, #84	; 0x54
  4087c8:	d806      	bhi.n	4087d8 <_free_r+0x180>
  4087ca:	0b1a      	lsrs	r2, r3, #12
  4087cc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4087d0:	00ff      	lsls	r7, r7, #3
  4087d2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4087d6:	e790      	b.n	4086fa <_free_r+0xa2>
  4087d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4087dc:	d806      	bhi.n	4087ec <_free_r+0x194>
  4087de:	0bda      	lsrs	r2, r3, #15
  4087e0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4087e4:	00ff      	lsls	r7, r7, #3
  4087e6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4087ea:	e786      	b.n	4086fa <_free_r+0xa2>
  4087ec:	f240 5054 	movw	r0, #1364	; 0x554
  4087f0:	4282      	cmp	r2, r0
  4087f2:	d806      	bhi.n	408802 <_free_r+0x1aa>
  4087f4:	0c9a      	lsrs	r2, r3, #18
  4087f6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4087fa:	00ff      	lsls	r7, r7, #3
  4087fc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408800:	e77b      	b.n	4086fa <_free_r+0xa2>
  408802:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408806:	257e      	movs	r5, #126	; 0x7e
  408808:	e777      	b.n	4086fa <_free_r+0xa2>
  40880a:	f043 0101 	orr.w	r1, r3, #1
  40880e:	6061      	str	r1, [r4, #4]
  408810:	6013      	str	r3, [r2, #0]
  408812:	e763      	b.n	4086dc <_free_r+0x84>
  408814:	204005bc 	.word	0x204005bc
  408818:	204005c4 	.word	0x204005c4
  40881c:	204009c8 	.word	0x204009c8
  408820:	204015e0 	.word	0x204015e0

00408824 <__sfvwrite_r>:
  408824:	6893      	ldr	r3, [r2, #8]
  408826:	2b00      	cmp	r3, #0
  408828:	d073      	beq.n	408912 <__sfvwrite_r+0xee>
  40882a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40882e:	898b      	ldrh	r3, [r1, #12]
  408830:	b083      	sub	sp, #12
  408832:	460c      	mov	r4, r1
  408834:	0719      	lsls	r1, r3, #28
  408836:	9000      	str	r0, [sp, #0]
  408838:	4616      	mov	r6, r2
  40883a:	d526      	bpl.n	40888a <__sfvwrite_r+0x66>
  40883c:	6922      	ldr	r2, [r4, #16]
  40883e:	b322      	cbz	r2, 40888a <__sfvwrite_r+0x66>
  408840:	f013 0002 	ands.w	r0, r3, #2
  408844:	6835      	ldr	r5, [r6, #0]
  408846:	d02c      	beq.n	4088a2 <__sfvwrite_r+0x7e>
  408848:	f04f 0900 	mov.w	r9, #0
  40884c:	4fb0      	ldr	r7, [pc, #704]	; (408b10 <__sfvwrite_r+0x2ec>)
  40884e:	46c8      	mov	r8, r9
  408850:	46b2      	mov	sl, r6
  408852:	45b8      	cmp	r8, r7
  408854:	4643      	mov	r3, r8
  408856:	464a      	mov	r2, r9
  408858:	bf28      	it	cs
  40885a:	463b      	movcs	r3, r7
  40885c:	9800      	ldr	r0, [sp, #0]
  40885e:	f1b8 0f00 	cmp.w	r8, #0
  408862:	d050      	beq.n	408906 <__sfvwrite_r+0xe2>
  408864:	69e1      	ldr	r1, [r4, #28]
  408866:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408868:	47b0      	blx	r6
  40886a:	2800      	cmp	r0, #0
  40886c:	dd58      	ble.n	408920 <__sfvwrite_r+0xfc>
  40886e:	f8da 3008 	ldr.w	r3, [sl, #8]
  408872:	1a1b      	subs	r3, r3, r0
  408874:	4481      	add	r9, r0
  408876:	eba8 0800 	sub.w	r8, r8, r0
  40887a:	f8ca 3008 	str.w	r3, [sl, #8]
  40887e:	2b00      	cmp	r3, #0
  408880:	d1e7      	bne.n	408852 <__sfvwrite_r+0x2e>
  408882:	2000      	movs	r0, #0
  408884:	b003      	add	sp, #12
  408886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40888a:	4621      	mov	r1, r4
  40888c:	9800      	ldr	r0, [sp, #0]
  40888e:	f7fe fca5 	bl	4071dc <__swsetup_r>
  408892:	2800      	cmp	r0, #0
  408894:	f040 8133 	bne.w	408afe <__sfvwrite_r+0x2da>
  408898:	89a3      	ldrh	r3, [r4, #12]
  40889a:	6835      	ldr	r5, [r6, #0]
  40889c:	f013 0002 	ands.w	r0, r3, #2
  4088a0:	d1d2      	bne.n	408848 <__sfvwrite_r+0x24>
  4088a2:	f013 0901 	ands.w	r9, r3, #1
  4088a6:	d145      	bne.n	408934 <__sfvwrite_r+0x110>
  4088a8:	464f      	mov	r7, r9
  4088aa:	9601      	str	r6, [sp, #4]
  4088ac:	b337      	cbz	r7, 4088fc <__sfvwrite_r+0xd8>
  4088ae:	059a      	lsls	r2, r3, #22
  4088b0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4088b4:	f140 8083 	bpl.w	4089be <__sfvwrite_r+0x19a>
  4088b8:	4547      	cmp	r7, r8
  4088ba:	46c3      	mov	fp, r8
  4088bc:	f0c0 80ab 	bcc.w	408a16 <__sfvwrite_r+0x1f2>
  4088c0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4088c4:	f040 80ac 	bne.w	408a20 <__sfvwrite_r+0x1fc>
  4088c8:	6820      	ldr	r0, [r4, #0]
  4088ca:	46ba      	mov	sl, r7
  4088cc:	465a      	mov	r2, fp
  4088ce:	4649      	mov	r1, r9
  4088d0:	f000 fdc0 	bl	409454 <memmove>
  4088d4:	68a2      	ldr	r2, [r4, #8]
  4088d6:	6823      	ldr	r3, [r4, #0]
  4088d8:	eba2 0208 	sub.w	r2, r2, r8
  4088dc:	445b      	add	r3, fp
  4088de:	60a2      	str	r2, [r4, #8]
  4088e0:	6023      	str	r3, [r4, #0]
  4088e2:	9a01      	ldr	r2, [sp, #4]
  4088e4:	6893      	ldr	r3, [r2, #8]
  4088e6:	eba3 030a 	sub.w	r3, r3, sl
  4088ea:	44d1      	add	r9, sl
  4088ec:	eba7 070a 	sub.w	r7, r7, sl
  4088f0:	6093      	str	r3, [r2, #8]
  4088f2:	2b00      	cmp	r3, #0
  4088f4:	d0c5      	beq.n	408882 <__sfvwrite_r+0x5e>
  4088f6:	89a3      	ldrh	r3, [r4, #12]
  4088f8:	2f00      	cmp	r7, #0
  4088fa:	d1d8      	bne.n	4088ae <__sfvwrite_r+0x8a>
  4088fc:	f8d5 9000 	ldr.w	r9, [r5]
  408900:	686f      	ldr	r7, [r5, #4]
  408902:	3508      	adds	r5, #8
  408904:	e7d2      	b.n	4088ac <__sfvwrite_r+0x88>
  408906:	f8d5 9000 	ldr.w	r9, [r5]
  40890a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40890e:	3508      	adds	r5, #8
  408910:	e79f      	b.n	408852 <__sfvwrite_r+0x2e>
  408912:	2000      	movs	r0, #0
  408914:	4770      	bx	lr
  408916:	4621      	mov	r1, r4
  408918:	9800      	ldr	r0, [sp, #0]
  40891a:	f7ff fd33 	bl	408384 <_fflush_r>
  40891e:	b370      	cbz	r0, 40897e <__sfvwrite_r+0x15a>
  408920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408928:	f04f 30ff 	mov.w	r0, #4294967295
  40892c:	81a3      	strh	r3, [r4, #12]
  40892e:	b003      	add	sp, #12
  408930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408934:	4681      	mov	r9, r0
  408936:	4633      	mov	r3, r6
  408938:	464e      	mov	r6, r9
  40893a:	46a8      	mov	r8, r5
  40893c:	469a      	mov	sl, r3
  40893e:	464d      	mov	r5, r9
  408940:	b34e      	cbz	r6, 408996 <__sfvwrite_r+0x172>
  408942:	b380      	cbz	r0, 4089a6 <__sfvwrite_r+0x182>
  408944:	6820      	ldr	r0, [r4, #0]
  408946:	6923      	ldr	r3, [r4, #16]
  408948:	6962      	ldr	r2, [r4, #20]
  40894a:	45b1      	cmp	r9, r6
  40894c:	46cb      	mov	fp, r9
  40894e:	bf28      	it	cs
  408950:	46b3      	movcs	fp, r6
  408952:	4298      	cmp	r0, r3
  408954:	465f      	mov	r7, fp
  408956:	d904      	bls.n	408962 <__sfvwrite_r+0x13e>
  408958:	68a3      	ldr	r3, [r4, #8]
  40895a:	4413      	add	r3, r2
  40895c:	459b      	cmp	fp, r3
  40895e:	f300 80a6 	bgt.w	408aae <__sfvwrite_r+0x28a>
  408962:	4593      	cmp	fp, r2
  408964:	db4b      	blt.n	4089fe <__sfvwrite_r+0x1da>
  408966:	4613      	mov	r3, r2
  408968:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40896a:	69e1      	ldr	r1, [r4, #28]
  40896c:	9800      	ldr	r0, [sp, #0]
  40896e:	462a      	mov	r2, r5
  408970:	47b8      	blx	r7
  408972:	1e07      	subs	r7, r0, #0
  408974:	ddd4      	ble.n	408920 <__sfvwrite_r+0xfc>
  408976:	ebb9 0907 	subs.w	r9, r9, r7
  40897a:	d0cc      	beq.n	408916 <__sfvwrite_r+0xf2>
  40897c:	2001      	movs	r0, #1
  40897e:	f8da 3008 	ldr.w	r3, [sl, #8]
  408982:	1bdb      	subs	r3, r3, r7
  408984:	443d      	add	r5, r7
  408986:	1bf6      	subs	r6, r6, r7
  408988:	f8ca 3008 	str.w	r3, [sl, #8]
  40898c:	2b00      	cmp	r3, #0
  40898e:	f43f af78 	beq.w	408882 <__sfvwrite_r+0x5e>
  408992:	2e00      	cmp	r6, #0
  408994:	d1d5      	bne.n	408942 <__sfvwrite_r+0x11e>
  408996:	f108 0308 	add.w	r3, r8, #8
  40899a:	e913 0060 	ldmdb	r3, {r5, r6}
  40899e:	4698      	mov	r8, r3
  4089a0:	3308      	adds	r3, #8
  4089a2:	2e00      	cmp	r6, #0
  4089a4:	d0f9      	beq.n	40899a <__sfvwrite_r+0x176>
  4089a6:	4632      	mov	r2, r6
  4089a8:	210a      	movs	r1, #10
  4089aa:	4628      	mov	r0, r5
  4089ac:	f000 fc38 	bl	409220 <memchr>
  4089b0:	2800      	cmp	r0, #0
  4089b2:	f000 80a1 	beq.w	408af8 <__sfvwrite_r+0x2d4>
  4089b6:	3001      	adds	r0, #1
  4089b8:	eba0 0905 	sub.w	r9, r0, r5
  4089bc:	e7c2      	b.n	408944 <__sfvwrite_r+0x120>
  4089be:	6820      	ldr	r0, [r4, #0]
  4089c0:	6923      	ldr	r3, [r4, #16]
  4089c2:	4298      	cmp	r0, r3
  4089c4:	d802      	bhi.n	4089cc <__sfvwrite_r+0x1a8>
  4089c6:	6963      	ldr	r3, [r4, #20]
  4089c8:	429f      	cmp	r7, r3
  4089ca:	d25d      	bcs.n	408a88 <__sfvwrite_r+0x264>
  4089cc:	45b8      	cmp	r8, r7
  4089ce:	bf28      	it	cs
  4089d0:	46b8      	movcs	r8, r7
  4089d2:	4642      	mov	r2, r8
  4089d4:	4649      	mov	r1, r9
  4089d6:	f000 fd3d 	bl	409454 <memmove>
  4089da:	68a3      	ldr	r3, [r4, #8]
  4089dc:	6822      	ldr	r2, [r4, #0]
  4089de:	eba3 0308 	sub.w	r3, r3, r8
  4089e2:	4442      	add	r2, r8
  4089e4:	60a3      	str	r3, [r4, #8]
  4089e6:	6022      	str	r2, [r4, #0]
  4089e8:	b10b      	cbz	r3, 4089ee <__sfvwrite_r+0x1ca>
  4089ea:	46c2      	mov	sl, r8
  4089ec:	e779      	b.n	4088e2 <__sfvwrite_r+0xbe>
  4089ee:	4621      	mov	r1, r4
  4089f0:	9800      	ldr	r0, [sp, #0]
  4089f2:	f7ff fcc7 	bl	408384 <_fflush_r>
  4089f6:	2800      	cmp	r0, #0
  4089f8:	d192      	bne.n	408920 <__sfvwrite_r+0xfc>
  4089fa:	46c2      	mov	sl, r8
  4089fc:	e771      	b.n	4088e2 <__sfvwrite_r+0xbe>
  4089fe:	465a      	mov	r2, fp
  408a00:	4629      	mov	r1, r5
  408a02:	f000 fd27 	bl	409454 <memmove>
  408a06:	68a2      	ldr	r2, [r4, #8]
  408a08:	6823      	ldr	r3, [r4, #0]
  408a0a:	eba2 020b 	sub.w	r2, r2, fp
  408a0e:	445b      	add	r3, fp
  408a10:	60a2      	str	r2, [r4, #8]
  408a12:	6023      	str	r3, [r4, #0]
  408a14:	e7af      	b.n	408976 <__sfvwrite_r+0x152>
  408a16:	6820      	ldr	r0, [r4, #0]
  408a18:	46b8      	mov	r8, r7
  408a1a:	46ba      	mov	sl, r7
  408a1c:	46bb      	mov	fp, r7
  408a1e:	e755      	b.n	4088cc <__sfvwrite_r+0xa8>
  408a20:	6962      	ldr	r2, [r4, #20]
  408a22:	6820      	ldr	r0, [r4, #0]
  408a24:	6921      	ldr	r1, [r4, #16]
  408a26:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408a2a:	eba0 0a01 	sub.w	sl, r0, r1
  408a2e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408a32:	f10a 0001 	add.w	r0, sl, #1
  408a36:	ea4f 0868 	mov.w	r8, r8, asr #1
  408a3a:	4438      	add	r0, r7
  408a3c:	4540      	cmp	r0, r8
  408a3e:	4642      	mov	r2, r8
  408a40:	bf84      	itt	hi
  408a42:	4680      	movhi	r8, r0
  408a44:	4642      	movhi	r2, r8
  408a46:	055b      	lsls	r3, r3, #21
  408a48:	d544      	bpl.n	408ad4 <__sfvwrite_r+0x2b0>
  408a4a:	4611      	mov	r1, r2
  408a4c:	9800      	ldr	r0, [sp, #0]
  408a4e:	f000 f921 	bl	408c94 <_malloc_r>
  408a52:	4683      	mov	fp, r0
  408a54:	2800      	cmp	r0, #0
  408a56:	d055      	beq.n	408b04 <__sfvwrite_r+0x2e0>
  408a58:	4652      	mov	r2, sl
  408a5a:	6921      	ldr	r1, [r4, #16]
  408a5c:	f000 fc60 	bl	409320 <memcpy>
  408a60:	89a3      	ldrh	r3, [r4, #12]
  408a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408a6a:	81a3      	strh	r3, [r4, #12]
  408a6c:	eb0b 000a 	add.w	r0, fp, sl
  408a70:	eba8 030a 	sub.w	r3, r8, sl
  408a74:	f8c4 b010 	str.w	fp, [r4, #16]
  408a78:	f8c4 8014 	str.w	r8, [r4, #20]
  408a7c:	6020      	str	r0, [r4, #0]
  408a7e:	60a3      	str	r3, [r4, #8]
  408a80:	46b8      	mov	r8, r7
  408a82:	46ba      	mov	sl, r7
  408a84:	46bb      	mov	fp, r7
  408a86:	e721      	b.n	4088cc <__sfvwrite_r+0xa8>
  408a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408a8c:	42b9      	cmp	r1, r7
  408a8e:	bf28      	it	cs
  408a90:	4639      	movcs	r1, r7
  408a92:	464a      	mov	r2, r9
  408a94:	fb91 f1f3 	sdiv	r1, r1, r3
  408a98:	9800      	ldr	r0, [sp, #0]
  408a9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408a9c:	fb03 f301 	mul.w	r3, r3, r1
  408aa0:	69e1      	ldr	r1, [r4, #28]
  408aa2:	47b0      	blx	r6
  408aa4:	f1b0 0a00 	subs.w	sl, r0, #0
  408aa8:	f73f af1b 	bgt.w	4088e2 <__sfvwrite_r+0xbe>
  408aac:	e738      	b.n	408920 <__sfvwrite_r+0xfc>
  408aae:	461a      	mov	r2, r3
  408ab0:	4629      	mov	r1, r5
  408ab2:	9301      	str	r3, [sp, #4]
  408ab4:	f000 fcce 	bl	409454 <memmove>
  408ab8:	6822      	ldr	r2, [r4, #0]
  408aba:	9b01      	ldr	r3, [sp, #4]
  408abc:	9800      	ldr	r0, [sp, #0]
  408abe:	441a      	add	r2, r3
  408ac0:	6022      	str	r2, [r4, #0]
  408ac2:	4621      	mov	r1, r4
  408ac4:	f7ff fc5e 	bl	408384 <_fflush_r>
  408ac8:	9b01      	ldr	r3, [sp, #4]
  408aca:	2800      	cmp	r0, #0
  408acc:	f47f af28 	bne.w	408920 <__sfvwrite_r+0xfc>
  408ad0:	461f      	mov	r7, r3
  408ad2:	e750      	b.n	408976 <__sfvwrite_r+0x152>
  408ad4:	9800      	ldr	r0, [sp, #0]
  408ad6:	f001 f81f 	bl	409b18 <_realloc_r>
  408ada:	4683      	mov	fp, r0
  408adc:	2800      	cmp	r0, #0
  408ade:	d1c5      	bne.n	408a6c <__sfvwrite_r+0x248>
  408ae0:	9d00      	ldr	r5, [sp, #0]
  408ae2:	6921      	ldr	r1, [r4, #16]
  408ae4:	4628      	mov	r0, r5
  408ae6:	f7ff fdb7 	bl	408658 <_free_r>
  408aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408aee:	220c      	movs	r2, #12
  408af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408af4:	602a      	str	r2, [r5, #0]
  408af6:	e715      	b.n	408924 <__sfvwrite_r+0x100>
  408af8:	f106 0901 	add.w	r9, r6, #1
  408afc:	e722      	b.n	408944 <__sfvwrite_r+0x120>
  408afe:	f04f 30ff 	mov.w	r0, #4294967295
  408b02:	e6bf      	b.n	408884 <__sfvwrite_r+0x60>
  408b04:	9a00      	ldr	r2, [sp, #0]
  408b06:	230c      	movs	r3, #12
  408b08:	6013      	str	r3, [r2, #0]
  408b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b0e:	e709      	b.n	408924 <__sfvwrite_r+0x100>
  408b10:	7ffffc00 	.word	0x7ffffc00

00408b14 <_fwalk_reent>:
  408b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408b18:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408b1c:	d01f      	beq.n	408b5e <_fwalk_reent+0x4a>
  408b1e:	4688      	mov	r8, r1
  408b20:	4606      	mov	r6, r0
  408b22:	f04f 0900 	mov.w	r9, #0
  408b26:	687d      	ldr	r5, [r7, #4]
  408b28:	68bc      	ldr	r4, [r7, #8]
  408b2a:	3d01      	subs	r5, #1
  408b2c:	d411      	bmi.n	408b52 <_fwalk_reent+0x3e>
  408b2e:	89a3      	ldrh	r3, [r4, #12]
  408b30:	2b01      	cmp	r3, #1
  408b32:	f105 35ff 	add.w	r5, r5, #4294967295
  408b36:	d908      	bls.n	408b4a <_fwalk_reent+0x36>
  408b38:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408b3c:	3301      	adds	r3, #1
  408b3e:	4621      	mov	r1, r4
  408b40:	4630      	mov	r0, r6
  408b42:	d002      	beq.n	408b4a <_fwalk_reent+0x36>
  408b44:	47c0      	blx	r8
  408b46:	ea49 0900 	orr.w	r9, r9, r0
  408b4a:	1c6b      	adds	r3, r5, #1
  408b4c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408b50:	d1ed      	bne.n	408b2e <_fwalk_reent+0x1a>
  408b52:	683f      	ldr	r7, [r7, #0]
  408b54:	2f00      	cmp	r7, #0
  408b56:	d1e6      	bne.n	408b26 <_fwalk_reent+0x12>
  408b58:	4648      	mov	r0, r9
  408b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408b5e:	46b9      	mov	r9, r7
  408b60:	4648      	mov	r0, r9
  408b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408b66:	bf00      	nop

00408b68 <__locale_mb_cur_max>:
  408b68:	4b04      	ldr	r3, [pc, #16]	; (408b7c <__locale_mb_cur_max+0x14>)
  408b6a:	4a05      	ldr	r2, [pc, #20]	; (408b80 <__locale_mb_cur_max+0x18>)
  408b6c:	681b      	ldr	r3, [r3, #0]
  408b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408b70:	2b00      	cmp	r3, #0
  408b72:	bf08      	it	eq
  408b74:	4613      	moveq	r3, r2
  408b76:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408b7a:	4770      	bx	lr
  408b7c:	20400020 	.word	0x20400020
  408b80:	20400450 	.word	0x20400450

00408b84 <_localeconv_r>:
  408b84:	4a04      	ldr	r2, [pc, #16]	; (408b98 <_localeconv_r+0x14>)
  408b86:	4b05      	ldr	r3, [pc, #20]	; (408b9c <_localeconv_r+0x18>)
  408b88:	6812      	ldr	r2, [r2, #0]
  408b8a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408b8c:	2800      	cmp	r0, #0
  408b8e:	bf08      	it	eq
  408b90:	4618      	moveq	r0, r3
  408b92:	30f0      	adds	r0, #240	; 0xf0
  408b94:	4770      	bx	lr
  408b96:	bf00      	nop
  408b98:	20400020 	.word	0x20400020
  408b9c:	20400450 	.word	0x20400450

00408ba0 <__swhatbuf_r>:
  408ba0:	b570      	push	{r4, r5, r6, lr}
  408ba2:	460c      	mov	r4, r1
  408ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408ba8:	2900      	cmp	r1, #0
  408baa:	b090      	sub	sp, #64	; 0x40
  408bac:	4615      	mov	r5, r2
  408bae:	461e      	mov	r6, r3
  408bb0:	db14      	blt.n	408bdc <__swhatbuf_r+0x3c>
  408bb2:	aa01      	add	r2, sp, #4
  408bb4:	f001 fc18 	bl	40a3e8 <_fstat_r>
  408bb8:	2800      	cmp	r0, #0
  408bba:	db0f      	blt.n	408bdc <__swhatbuf_r+0x3c>
  408bbc:	9a02      	ldr	r2, [sp, #8]
  408bbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408bc2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408bc6:	fab2 f282 	clz	r2, r2
  408bca:	0952      	lsrs	r2, r2, #5
  408bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408bd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408bd4:	6032      	str	r2, [r6, #0]
  408bd6:	602b      	str	r3, [r5, #0]
  408bd8:	b010      	add	sp, #64	; 0x40
  408bda:	bd70      	pop	{r4, r5, r6, pc}
  408bdc:	89a2      	ldrh	r2, [r4, #12]
  408bde:	2300      	movs	r3, #0
  408be0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408be4:	6033      	str	r3, [r6, #0]
  408be6:	d004      	beq.n	408bf2 <__swhatbuf_r+0x52>
  408be8:	2240      	movs	r2, #64	; 0x40
  408bea:	4618      	mov	r0, r3
  408bec:	602a      	str	r2, [r5, #0]
  408bee:	b010      	add	sp, #64	; 0x40
  408bf0:	bd70      	pop	{r4, r5, r6, pc}
  408bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408bf6:	602b      	str	r3, [r5, #0]
  408bf8:	b010      	add	sp, #64	; 0x40
  408bfa:	bd70      	pop	{r4, r5, r6, pc}

00408bfc <__smakebuf_r>:
  408bfc:	898a      	ldrh	r2, [r1, #12]
  408bfe:	0792      	lsls	r2, r2, #30
  408c00:	460b      	mov	r3, r1
  408c02:	d506      	bpl.n	408c12 <__smakebuf_r+0x16>
  408c04:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408c08:	2101      	movs	r1, #1
  408c0a:	601a      	str	r2, [r3, #0]
  408c0c:	611a      	str	r2, [r3, #16]
  408c0e:	6159      	str	r1, [r3, #20]
  408c10:	4770      	bx	lr
  408c12:	b5f0      	push	{r4, r5, r6, r7, lr}
  408c14:	b083      	sub	sp, #12
  408c16:	ab01      	add	r3, sp, #4
  408c18:	466a      	mov	r2, sp
  408c1a:	460c      	mov	r4, r1
  408c1c:	4605      	mov	r5, r0
  408c1e:	f7ff ffbf 	bl	408ba0 <__swhatbuf_r>
  408c22:	9900      	ldr	r1, [sp, #0]
  408c24:	4606      	mov	r6, r0
  408c26:	4628      	mov	r0, r5
  408c28:	f000 f834 	bl	408c94 <_malloc_r>
  408c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408c30:	b1d0      	cbz	r0, 408c68 <__smakebuf_r+0x6c>
  408c32:	9a01      	ldr	r2, [sp, #4]
  408c34:	4f12      	ldr	r7, [pc, #72]	; (408c80 <__smakebuf_r+0x84>)
  408c36:	9900      	ldr	r1, [sp, #0]
  408c38:	63ef      	str	r7, [r5, #60]	; 0x3c
  408c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408c3e:	81a3      	strh	r3, [r4, #12]
  408c40:	6020      	str	r0, [r4, #0]
  408c42:	6120      	str	r0, [r4, #16]
  408c44:	6161      	str	r1, [r4, #20]
  408c46:	b91a      	cbnz	r2, 408c50 <__smakebuf_r+0x54>
  408c48:	4333      	orrs	r3, r6
  408c4a:	81a3      	strh	r3, [r4, #12]
  408c4c:	b003      	add	sp, #12
  408c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408c50:	4628      	mov	r0, r5
  408c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408c56:	f001 fbdb 	bl	40a410 <_isatty_r>
  408c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408c5e:	2800      	cmp	r0, #0
  408c60:	d0f2      	beq.n	408c48 <__smakebuf_r+0x4c>
  408c62:	f043 0301 	orr.w	r3, r3, #1
  408c66:	e7ef      	b.n	408c48 <__smakebuf_r+0x4c>
  408c68:	059a      	lsls	r2, r3, #22
  408c6a:	d4ef      	bmi.n	408c4c <__smakebuf_r+0x50>
  408c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408c70:	f043 0302 	orr.w	r3, r3, #2
  408c74:	2101      	movs	r1, #1
  408c76:	81a3      	strh	r3, [r4, #12]
  408c78:	6022      	str	r2, [r4, #0]
  408c7a:	6122      	str	r2, [r4, #16]
  408c7c:	6161      	str	r1, [r4, #20]
  408c7e:	e7e5      	b.n	408c4c <__smakebuf_r+0x50>
  408c80:	004083b1 	.word	0x004083b1

00408c84 <malloc>:
  408c84:	4b02      	ldr	r3, [pc, #8]	; (408c90 <malloc+0xc>)
  408c86:	4601      	mov	r1, r0
  408c88:	6818      	ldr	r0, [r3, #0]
  408c8a:	f000 b803 	b.w	408c94 <_malloc_r>
  408c8e:	bf00      	nop
  408c90:	20400020 	.word	0x20400020

00408c94 <_malloc_r>:
  408c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c98:	f101 060b 	add.w	r6, r1, #11
  408c9c:	2e16      	cmp	r6, #22
  408c9e:	b083      	sub	sp, #12
  408ca0:	4605      	mov	r5, r0
  408ca2:	f240 809e 	bls.w	408de2 <_malloc_r+0x14e>
  408ca6:	f036 0607 	bics.w	r6, r6, #7
  408caa:	f100 80bd 	bmi.w	408e28 <_malloc_r+0x194>
  408cae:	42b1      	cmp	r1, r6
  408cb0:	f200 80ba 	bhi.w	408e28 <_malloc_r+0x194>
  408cb4:	f000 fc32 	bl	40951c <__malloc_lock>
  408cb8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  408cbc:	f0c0 8293 	bcc.w	4091e6 <_malloc_r+0x552>
  408cc0:	0a73      	lsrs	r3, r6, #9
  408cc2:	f000 80b8 	beq.w	408e36 <_malloc_r+0x1a2>
  408cc6:	2b04      	cmp	r3, #4
  408cc8:	f200 8179 	bhi.w	408fbe <_malloc_r+0x32a>
  408ccc:	09b3      	lsrs	r3, r6, #6
  408cce:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408cd2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  408cd6:	00c3      	lsls	r3, r0, #3
  408cd8:	4fbf      	ldr	r7, [pc, #764]	; (408fd8 <_malloc_r+0x344>)
  408cda:	443b      	add	r3, r7
  408cdc:	f1a3 0108 	sub.w	r1, r3, #8
  408ce0:	685c      	ldr	r4, [r3, #4]
  408ce2:	42a1      	cmp	r1, r4
  408ce4:	d106      	bne.n	408cf4 <_malloc_r+0x60>
  408ce6:	e00c      	b.n	408d02 <_malloc_r+0x6e>
  408ce8:	2a00      	cmp	r2, #0
  408cea:	f280 80aa 	bge.w	408e42 <_malloc_r+0x1ae>
  408cee:	68e4      	ldr	r4, [r4, #12]
  408cf0:	42a1      	cmp	r1, r4
  408cf2:	d006      	beq.n	408d02 <_malloc_r+0x6e>
  408cf4:	6863      	ldr	r3, [r4, #4]
  408cf6:	f023 0303 	bic.w	r3, r3, #3
  408cfa:	1b9a      	subs	r2, r3, r6
  408cfc:	2a0f      	cmp	r2, #15
  408cfe:	ddf3      	ble.n	408ce8 <_malloc_r+0x54>
  408d00:	4670      	mov	r0, lr
  408d02:	693c      	ldr	r4, [r7, #16]
  408d04:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 408fec <_malloc_r+0x358>
  408d08:	4574      	cmp	r4, lr
  408d0a:	f000 81ab 	beq.w	409064 <_malloc_r+0x3d0>
  408d0e:	6863      	ldr	r3, [r4, #4]
  408d10:	f023 0303 	bic.w	r3, r3, #3
  408d14:	1b9a      	subs	r2, r3, r6
  408d16:	2a0f      	cmp	r2, #15
  408d18:	f300 8190 	bgt.w	40903c <_malloc_r+0x3a8>
  408d1c:	2a00      	cmp	r2, #0
  408d1e:	f8c7 e014 	str.w	lr, [r7, #20]
  408d22:	f8c7 e010 	str.w	lr, [r7, #16]
  408d26:	f280 809d 	bge.w	408e64 <_malloc_r+0x1d0>
  408d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408d2e:	f080 8161 	bcs.w	408ff4 <_malloc_r+0x360>
  408d32:	08db      	lsrs	r3, r3, #3
  408d34:	f103 0c01 	add.w	ip, r3, #1
  408d38:	1099      	asrs	r1, r3, #2
  408d3a:	687a      	ldr	r2, [r7, #4]
  408d3c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  408d40:	f8c4 8008 	str.w	r8, [r4, #8]
  408d44:	2301      	movs	r3, #1
  408d46:	408b      	lsls	r3, r1
  408d48:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  408d4c:	4313      	orrs	r3, r2
  408d4e:	3908      	subs	r1, #8
  408d50:	60e1      	str	r1, [r4, #12]
  408d52:	607b      	str	r3, [r7, #4]
  408d54:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  408d58:	f8c8 400c 	str.w	r4, [r8, #12]
  408d5c:	1082      	asrs	r2, r0, #2
  408d5e:	2401      	movs	r4, #1
  408d60:	4094      	lsls	r4, r2
  408d62:	429c      	cmp	r4, r3
  408d64:	f200 808b 	bhi.w	408e7e <_malloc_r+0x1ea>
  408d68:	421c      	tst	r4, r3
  408d6a:	d106      	bne.n	408d7a <_malloc_r+0xe6>
  408d6c:	f020 0003 	bic.w	r0, r0, #3
  408d70:	0064      	lsls	r4, r4, #1
  408d72:	421c      	tst	r4, r3
  408d74:	f100 0004 	add.w	r0, r0, #4
  408d78:	d0fa      	beq.n	408d70 <_malloc_r+0xdc>
  408d7a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408d7e:	46cc      	mov	ip, r9
  408d80:	4680      	mov	r8, r0
  408d82:	f8dc 300c 	ldr.w	r3, [ip, #12]
  408d86:	459c      	cmp	ip, r3
  408d88:	d107      	bne.n	408d9a <_malloc_r+0x106>
  408d8a:	e16d      	b.n	409068 <_malloc_r+0x3d4>
  408d8c:	2a00      	cmp	r2, #0
  408d8e:	f280 817b 	bge.w	409088 <_malloc_r+0x3f4>
  408d92:	68db      	ldr	r3, [r3, #12]
  408d94:	459c      	cmp	ip, r3
  408d96:	f000 8167 	beq.w	409068 <_malloc_r+0x3d4>
  408d9a:	6859      	ldr	r1, [r3, #4]
  408d9c:	f021 0103 	bic.w	r1, r1, #3
  408da0:	1b8a      	subs	r2, r1, r6
  408da2:	2a0f      	cmp	r2, #15
  408da4:	ddf2      	ble.n	408d8c <_malloc_r+0xf8>
  408da6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  408daa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  408dae:	9300      	str	r3, [sp, #0]
  408db0:	199c      	adds	r4, r3, r6
  408db2:	4628      	mov	r0, r5
  408db4:	f046 0601 	orr.w	r6, r6, #1
  408db8:	f042 0501 	orr.w	r5, r2, #1
  408dbc:	605e      	str	r6, [r3, #4]
  408dbe:	f8c8 c00c 	str.w	ip, [r8, #12]
  408dc2:	f8cc 8008 	str.w	r8, [ip, #8]
  408dc6:	617c      	str	r4, [r7, #20]
  408dc8:	613c      	str	r4, [r7, #16]
  408dca:	f8c4 e00c 	str.w	lr, [r4, #12]
  408dce:	f8c4 e008 	str.w	lr, [r4, #8]
  408dd2:	6065      	str	r5, [r4, #4]
  408dd4:	505a      	str	r2, [r3, r1]
  408dd6:	f000 fba3 	bl	409520 <__malloc_unlock>
  408dda:	9b00      	ldr	r3, [sp, #0]
  408ddc:	f103 0408 	add.w	r4, r3, #8
  408de0:	e01e      	b.n	408e20 <_malloc_r+0x18c>
  408de2:	2910      	cmp	r1, #16
  408de4:	d820      	bhi.n	408e28 <_malloc_r+0x194>
  408de6:	f000 fb99 	bl	40951c <__malloc_lock>
  408dea:	2610      	movs	r6, #16
  408dec:	2318      	movs	r3, #24
  408dee:	2002      	movs	r0, #2
  408df0:	4f79      	ldr	r7, [pc, #484]	; (408fd8 <_malloc_r+0x344>)
  408df2:	443b      	add	r3, r7
  408df4:	f1a3 0208 	sub.w	r2, r3, #8
  408df8:	685c      	ldr	r4, [r3, #4]
  408dfa:	4294      	cmp	r4, r2
  408dfc:	f000 813d 	beq.w	40907a <_malloc_r+0x3e6>
  408e00:	6863      	ldr	r3, [r4, #4]
  408e02:	68e1      	ldr	r1, [r4, #12]
  408e04:	68a6      	ldr	r6, [r4, #8]
  408e06:	f023 0303 	bic.w	r3, r3, #3
  408e0a:	4423      	add	r3, r4
  408e0c:	4628      	mov	r0, r5
  408e0e:	685a      	ldr	r2, [r3, #4]
  408e10:	60f1      	str	r1, [r6, #12]
  408e12:	f042 0201 	orr.w	r2, r2, #1
  408e16:	608e      	str	r6, [r1, #8]
  408e18:	605a      	str	r2, [r3, #4]
  408e1a:	f000 fb81 	bl	409520 <__malloc_unlock>
  408e1e:	3408      	adds	r4, #8
  408e20:	4620      	mov	r0, r4
  408e22:	b003      	add	sp, #12
  408e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e28:	2400      	movs	r4, #0
  408e2a:	230c      	movs	r3, #12
  408e2c:	4620      	mov	r0, r4
  408e2e:	602b      	str	r3, [r5, #0]
  408e30:	b003      	add	sp, #12
  408e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e36:	2040      	movs	r0, #64	; 0x40
  408e38:	f44f 7300 	mov.w	r3, #512	; 0x200
  408e3c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  408e40:	e74a      	b.n	408cd8 <_malloc_r+0x44>
  408e42:	4423      	add	r3, r4
  408e44:	68e1      	ldr	r1, [r4, #12]
  408e46:	685a      	ldr	r2, [r3, #4]
  408e48:	68a6      	ldr	r6, [r4, #8]
  408e4a:	f042 0201 	orr.w	r2, r2, #1
  408e4e:	60f1      	str	r1, [r6, #12]
  408e50:	4628      	mov	r0, r5
  408e52:	608e      	str	r6, [r1, #8]
  408e54:	605a      	str	r2, [r3, #4]
  408e56:	f000 fb63 	bl	409520 <__malloc_unlock>
  408e5a:	3408      	adds	r4, #8
  408e5c:	4620      	mov	r0, r4
  408e5e:	b003      	add	sp, #12
  408e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e64:	4423      	add	r3, r4
  408e66:	4628      	mov	r0, r5
  408e68:	685a      	ldr	r2, [r3, #4]
  408e6a:	f042 0201 	orr.w	r2, r2, #1
  408e6e:	605a      	str	r2, [r3, #4]
  408e70:	f000 fb56 	bl	409520 <__malloc_unlock>
  408e74:	3408      	adds	r4, #8
  408e76:	4620      	mov	r0, r4
  408e78:	b003      	add	sp, #12
  408e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e7e:	68bc      	ldr	r4, [r7, #8]
  408e80:	6863      	ldr	r3, [r4, #4]
  408e82:	f023 0803 	bic.w	r8, r3, #3
  408e86:	45b0      	cmp	r8, r6
  408e88:	d304      	bcc.n	408e94 <_malloc_r+0x200>
  408e8a:	eba8 0306 	sub.w	r3, r8, r6
  408e8e:	2b0f      	cmp	r3, #15
  408e90:	f300 8085 	bgt.w	408f9e <_malloc_r+0x30a>
  408e94:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408ff0 <_malloc_r+0x35c>
  408e98:	4b50      	ldr	r3, [pc, #320]	; (408fdc <_malloc_r+0x348>)
  408e9a:	f8d9 2000 	ldr.w	r2, [r9]
  408e9e:	681b      	ldr	r3, [r3, #0]
  408ea0:	3201      	adds	r2, #1
  408ea2:	4433      	add	r3, r6
  408ea4:	eb04 0a08 	add.w	sl, r4, r8
  408ea8:	f000 8155 	beq.w	409156 <_malloc_r+0x4c2>
  408eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  408eb0:	330f      	adds	r3, #15
  408eb2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  408eb6:	f02b 0b0f 	bic.w	fp, fp, #15
  408eba:	4659      	mov	r1, fp
  408ebc:	4628      	mov	r0, r5
  408ebe:	f000 ffd1 	bl	409e64 <_sbrk_r>
  408ec2:	1c41      	adds	r1, r0, #1
  408ec4:	4602      	mov	r2, r0
  408ec6:	f000 80fc 	beq.w	4090c2 <_malloc_r+0x42e>
  408eca:	4582      	cmp	sl, r0
  408ecc:	f200 80f7 	bhi.w	4090be <_malloc_r+0x42a>
  408ed0:	4b43      	ldr	r3, [pc, #268]	; (408fe0 <_malloc_r+0x34c>)
  408ed2:	6819      	ldr	r1, [r3, #0]
  408ed4:	4459      	add	r1, fp
  408ed6:	6019      	str	r1, [r3, #0]
  408ed8:	f000 814d 	beq.w	409176 <_malloc_r+0x4e2>
  408edc:	f8d9 0000 	ldr.w	r0, [r9]
  408ee0:	3001      	adds	r0, #1
  408ee2:	bf1b      	ittet	ne
  408ee4:	eba2 0a0a 	subne.w	sl, r2, sl
  408ee8:	4451      	addne	r1, sl
  408eea:	f8c9 2000 	streq.w	r2, [r9]
  408eee:	6019      	strne	r1, [r3, #0]
  408ef0:	f012 0107 	ands.w	r1, r2, #7
  408ef4:	f000 8115 	beq.w	409122 <_malloc_r+0x48e>
  408ef8:	f1c1 0008 	rsb	r0, r1, #8
  408efc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408f00:	4402      	add	r2, r0
  408f02:	3108      	adds	r1, #8
  408f04:	eb02 090b 	add.w	r9, r2, fp
  408f08:	f3c9 090b 	ubfx	r9, r9, #0, #12
  408f0c:	eba1 0909 	sub.w	r9, r1, r9
  408f10:	4649      	mov	r1, r9
  408f12:	4628      	mov	r0, r5
  408f14:	9301      	str	r3, [sp, #4]
  408f16:	9200      	str	r2, [sp, #0]
  408f18:	f000 ffa4 	bl	409e64 <_sbrk_r>
  408f1c:	1c43      	adds	r3, r0, #1
  408f1e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408f22:	f000 8143 	beq.w	4091ac <_malloc_r+0x518>
  408f26:	1a80      	subs	r0, r0, r2
  408f28:	4448      	add	r0, r9
  408f2a:	f040 0001 	orr.w	r0, r0, #1
  408f2e:	6819      	ldr	r1, [r3, #0]
  408f30:	60ba      	str	r2, [r7, #8]
  408f32:	4449      	add	r1, r9
  408f34:	42bc      	cmp	r4, r7
  408f36:	6050      	str	r0, [r2, #4]
  408f38:	6019      	str	r1, [r3, #0]
  408f3a:	d017      	beq.n	408f6c <_malloc_r+0x2d8>
  408f3c:	f1b8 0f0f 	cmp.w	r8, #15
  408f40:	f240 80fb 	bls.w	40913a <_malloc_r+0x4a6>
  408f44:	6860      	ldr	r0, [r4, #4]
  408f46:	f1a8 020c 	sub.w	r2, r8, #12
  408f4a:	f022 0207 	bic.w	r2, r2, #7
  408f4e:	eb04 0e02 	add.w	lr, r4, r2
  408f52:	f000 0001 	and.w	r0, r0, #1
  408f56:	f04f 0c05 	mov.w	ip, #5
  408f5a:	4310      	orrs	r0, r2
  408f5c:	2a0f      	cmp	r2, #15
  408f5e:	6060      	str	r0, [r4, #4]
  408f60:	f8ce c004 	str.w	ip, [lr, #4]
  408f64:	f8ce c008 	str.w	ip, [lr, #8]
  408f68:	f200 8117 	bhi.w	40919a <_malloc_r+0x506>
  408f6c:	4b1d      	ldr	r3, [pc, #116]	; (408fe4 <_malloc_r+0x350>)
  408f6e:	68bc      	ldr	r4, [r7, #8]
  408f70:	681a      	ldr	r2, [r3, #0]
  408f72:	4291      	cmp	r1, r2
  408f74:	bf88      	it	hi
  408f76:	6019      	strhi	r1, [r3, #0]
  408f78:	4b1b      	ldr	r3, [pc, #108]	; (408fe8 <_malloc_r+0x354>)
  408f7a:	681a      	ldr	r2, [r3, #0]
  408f7c:	4291      	cmp	r1, r2
  408f7e:	6862      	ldr	r2, [r4, #4]
  408f80:	bf88      	it	hi
  408f82:	6019      	strhi	r1, [r3, #0]
  408f84:	f022 0203 	bic.w	r2, r2, #3
  408f88:	4296      	cmp	r6, r2
  408f8a:	eba2 0306 	sub.w	r3, r2, r6
  408f8e:	d801      	bhi.n	408f94 <_malloc_r+0x300>
  408f90:	2b0f      	cmp	r3, #15
  408f92:	dc04      	bgt.n	408f9e <_malloc_r+0x30a>
  408f94:	4628      	mov	r0, r5
  408f96:	f000 fac3 	bl	409520 <__malloc_unlock>
  408f9a:	2400      	movs	r4, #0
  408f9c:	e740      	b.n	408e20 <_malloc_r+0x18c>
  408f9e:	19a2      	adds	r2, r4, r6
  408fa0:	f043 0301 	orr.w	r3, r3, #1
  408fa4:	f046 0601 	orr.w	r6, r6, #1
  408fa8:	6066      	str	r6, [r4, #4]
  408faa:	4628      	mov	r0, r5
  408fac:	60ba      	str	r2, [r7, #8]
  408fae:	6053      	str	r3, [r2, #4]
  408fb0:	f000 fab6 	bl	409520 <__malloc_unlock>
  408fb4:	3408      	adds	r4, #8
  408fb6:	4620      	mov	r0, r4
  408fb8:	b003      	add	sp, #12
  408fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fbe:	2b14      	cmp	r3, #20
  408fc0:	d971      	bls.n	4090a6 <_malloc_r+0x412>
  408fc2:	2b54      	cmp	r3, #84	; 0x54
  408fc4:	f200 80a3 	bhi.w	40910e <_malloc_r+0x47a>
  408fc8:	0b33      	lsrs	r3, r6, #12
  408fca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  408fce:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  408fd2:	00c3      	lsls	r3, r0, #3
  408fd4:	e680      	b.n	408cd8 <_malloc_r+0x44>
  408fd6:	bf00      	nop
  408fd8:	204005bc 	.word	0x204005bc
  408fdc:	204015e0 	.word	0x204015e0
  408fe0:	204015b0 	.word	0x204015b0
  408fe4:	204015d8 	.word	0x204015d8
  408fe8:	204015dc 	.word	0x204015dc
  408fec:	204005c4 	.word	0x204005c4
  408ff0:	204009c4 	.word	0x204009c4
  408ff4:	0a5a      	lsrs	r2, r3, #9
  408ff6:	2a04      	cmp	r2, #4
  408ff8:	d95b      	bls.n	4090b2 <_malloc_r+0x41e>
  408ffa:	2a14      	cmp	r2, #20
  408ffc:	f200 80ae 	bhi.w	40915c <_malloc_r+0x4c8>
  409000:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  409004:	00c9      	lsls	r1, r1, #3
  409006:	325b      	adds	r2, #91	; 0x5b
  409008:	eb07 0c01 	add.w	ip, r7, r1
  40900c:	5879      	ldr	r1, [r7, r1]
  40900e:	f1ac 0c08 	sub.w	ip, ip, #8
  409012:	458c      	cmp	ip, r1
  409014:	f000 8088 	beq.w	409128 <_malloc_r+0x494>
  409018:	684a      	ldr	r2, [r1, #4]
  40901a:	f022 0203 	bic.w	r2, r2, #3
  40901e:	4293      	cmp	r3, r2
  409020:	d273      	bcs.n	40910a <_malloc_r+0x476>
  409022:	6889      	ldr	r1, [r1, #8]
  409024:	458c      	cmp	ip, r1
  409026:	d1f7      	bne.n	409018 <_malloc_r+0x384>
  409028:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40902c:	687b      	ldr	r3, [r7, #4]
  40902e:	60e2      	str	r2, [r4, #12]
  409030:	f8c4 c008 	str.w	ip, [r4, #8]
  409034:	6094      	str	r4, [r2, #8]
  409036:	f8cc 400c 	str.w	r4, [ip, #12]
  40903a:	e68f      	b.n	408d5c <_malloc_r+0xc8>
  40903c:	19a1      	adds	r1, r4, r6
  40903e:	f046 0c01 	orr.w	ip, r6, #1
  409042:	f042 0601 	orr.w	r6, r2, #1
  409046:	f8c4 c004 	str.w	ip, [r4, #4]
  40904a:	4628      	mov	r0, r5
  40904c:	6179      	str	r1, [r7, #20]
  40904e:	6139      	str	r1, [r7, #16]
  409050:	f8c1 e00c 	str.w	lr, [r1, #12]
  409054:	f8c1 e008 	str.w	lr, [r1, #8]
  409058:	604e      	str	r6, [r1, #4]
  40905a:	50e2      	str	r2, [r4, r3]
  40905c:	f000 fa60 	bl	409520 <__malloc_unlock>
  409060:	3408      	adds	r4, #8
  409062:	e6dd      	b.n	408e20 <_malloc_r+0x18c>
  409064:	687b      	ldr	r3, [r7, #4]
  409066:	e679      	b.n	408d5c <_malloc_r+0xc8>
  409068:	f108 0801 	add.w	r8, r8, #1
  40906c:	f018 0f03 	tst.w	r8, #3
  409070:	f10c 0c08 	add.w	ip, ip, #8
  409074:	f47f ae85 	bne.w	408d82 <_malloc_r+0xee>
  409078:	e02d      	b.n	4090d6 <_malloc_r+0x442>
  40907a:	68dc      	ldr	r4, [r3, #12]
  40907c:	42a3      	cmp	r3, r4
  40907e:	bf08      	it	eq
  409080:	3002      	addeq	r0, #2
  409082:	f43f ae3e 	beq.w	408d02 <_malloc_r+0x6e>
  409086:	e6bb      	b.n	408e00 <_malloc_r+0x16c>
  409088:	4419      	add	r1, r3
  40908a:	461c      	mov	r4, r3
  40908c:	684a      	ldr	r2, [r1, #4]
  40908e:	68db      	ldr	r3, [r3, #12]
  409090:	f854 6f08 	ldr.w	r6, [r4, #8]!
  409094:	f042 0201 	orr.w	r2, r2, #1
  409098:	604a      	str	r2, [r1, #4]
  40909a:	4628      	mov	r0, r5
  40909c:	60f3      	str	r3, [r6, #12]
  40909e:	609e      	str	r6, [r3, #8]
  4090a0:	f000 fa3e 	bl	409520 <__malloc_unlock>
  4090a4:	e6bc      	b.n	408e20 <_malloc_r+0x18c>
  4090a6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4090aa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4090ae:	00c3      	lsls	r3, r0, #3
  4090b0:	e612      	b.n	408cd8 <_malloc_r+0x44>
  4090b2:	099a      	lsrs	r2, r3, #6
  4090b4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4090b8:	00c9      	lsls	r1, r1, #3
  4090ba:	3238      	adds	r2, #56	; 0x38
  4090bc:	e7a4      	b.n	409008 <_malloc_r+0x374>
  4090be:	42bc      	cmp	r4, r7
  4090c0:	d054      	beq.n	40916c <_malloc_r+0x4d8>
  4090c2:	68bc      	ldr	r4, [r7, #8]
  4090c4:	6862      	ldr	r2, [r4, #4]
  4090c6:	f022 0203 	bic.w	r2, r2, #3
  4090ca:	e75d      	b.n	408f88 <_malloc_r+0x2f4>
  4090cc:	f859 3908 	ldr.w	r3, [r9], #-8
  4090d0:	4599      	cmp	r9, r3
  4090d2:	f040 8086 	bne.w	4091e2 <_malloc_r+0x54e>
  4090d6:	f010 0f03 	tst.w	r0, #3
  4090da:	f100 30ff 	add.w	r0, r0, #4294967295
  4090de:	d1f5      	bne.n	4090cc <_malloc_r+0x438>
  4090e0:	687b      	ldr	r3, [r7, #4]
  4090e2:	ea23 0304 	bic.w	r3, r3, r4
  4090e6:	607b      	str	r3, [r7, #4]
  4090e8:	0064      	lsls	r4, r4, #1
  4090ea:	429c      	cmp	r4, r3
  4090ec:	f63f aec7 	bhi.w	408e7e <_malloc_r+0x1ea>
  4090f0:	2c00      	cmp	r4, #0
  4090f2:	f43f aec4 	beq.w	408e7e <_malloc_r+0x1ea>
  4090f6:	421c      	tst	r4, r3
  4090f8:	4640      	mov	r0, r8
  4090fa:	f47f ae3e 	bne.w	408d7a <_malloc_r+0xe6>
  4090fe:	0064      	lsls	r4, r4, #1
  409100:	421c      	tst	r4, r3
  409102:	f100 0004 	add.w	r0, r0, #4
  409106:	d0fa      	beq.n	4090fe <_malloc_r+0x46a>
  409108:	e637      	b.n	408d7a <_malloc_r+0xe6>
  40910a:	468c      	mov	ip, r1
  40910c:	e78c      	b.n	409028 <_malloc_r+0x394>
  40910e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  409112:	d815      	bhi.n	409140 <_malloc_r+0x4ac>
  409114:	0bf3      	lsrs	r3, r6, #15
  409116:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40911a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40911e:	00c3      	lsls	r3, r0, #3
  409120:	e5da      	b.n	408cd8 <_malloc_r+0x44>
  409122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  409126:	e6ed      	b.n	408f04 <_malloc_r+0x270>
  409128:	687b      	ldr	r3, [r7, #4]
  40912a:	1092      	asrs	r2, r2, #2
  40912c:	2101      	movs	r1, #1
  40912e:	fa01 f202 	lsl.w	r2, r1, r2
  409132:	4313      	orrs	r3, r2
  409134:	607b      	str	r3, [r7, #4]
  409136:	4662      	mov	r2, ip
  409138:	e779      	b.n	40902e <_malloc_r+0x39a>
  40913a:	2301      	movs	r3, #1
  40913c:	6053      	str	r3, [r2, #4]
  40913e:	e729      	b.n	408f94 <_malloc_r+0x300>
  409140:	f240 5254 	movw	r2, #1364	; 0x554
  409144:	4293      	cmp	r3, r2
  409146:	d822      	bhi.n	40918e <_malloc_r+0x4fa>
  409148:	0cb3      	lsrs	r3, r6, #18
  40914a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40914e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  409152:	00c3      	lsls	r3, r0, #3
  409154:	e5c0      	b.n	408cd8 <_malloc_r+0x44>
  409156:	f103 0b10 	add.w	fp, r3, #16
  40915a:	e6ae      	b.n	408eba <_malloc_r+0x226>
  40915c:	2a54      	cmp	r2, #84	; 0x54
  40915e:	d829      	bhi.n	4091b4 <_malloc_r+0x520>
  409160:	0b1a      	lsrs	r2, r3, #12
  409162:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  409166:	00c9      	lsls	r1, r1, #3
  409168:	326e      	adds	r2, #110	; 0x6e
  40916a:	e74d      	b.n	409008 <_malloc_r+0x374>
  40916c:	4b20      	ldr	r3, [pc, #128]	; (4091f0 <_malloc_r+0x55c>)
  40916e:	6819      	ldr	r1, [r3, #0]
  409170:	4459      	add	r1, fp
  409172:	6019      	str	r1, [r3, #0]
  409174:	e6b2      	b.n	408edc <_malloc_r+0x248>
  409176:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40917a:	2800      	cmp	r0, #0
  40917c:	f47f aeae 	bne.w	408edc <_malloc_r+0x248>
  409180:	eb08 030b 	add.w	r3, r8, fp
  409184:	68ba      	ldr	r2, [r7, #8]
  409186:	f043 0301 	orr.w	r3, r3, #1
  40918a:	6053      	str	r3, [r2, #4]
  40918c:	e6ee      	b.n	408f6c <_malloc_r+0x2d8>
  40918e:	207f      	movs	r0, #127	; 0x7f
  409190:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  409194:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  409198:	e59e      	b.n	408cd8 <_malloc_r+0x44>
  40919a:	f104 0108 	add.w	r1, r4, #8
  40919e:	4628      	mov	r0, r5
  4091a0:	9300      	str	r3, [sp, #0]
  4091a2:	f7ff fa59 	bl	408658 <_free_r>
  4091a6:	9b00      	ldr	r3, [sp, #0]
  4091a8:	6819      	ldr	r1, [r3, #0]
  4091aa:	e6df      	b.n	408f6c <_malloc_r+0x2d8>
  4091ac:	2001      	movs	r0, #1
  4091ae:	f04f 0900 	mov.w	r9, #0
  4091b2:	e6bc      	b.n	408f2e <_malloc_r+0x29a>
  4091b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4091b8:	d805      	bhi.n	4091c6 <_malloc_r+0x532>
  4091ba:	0bda      	lsrs	r2, r3, #15
  4091bc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4091c0:	00c9      	lsls	r1, r1, #3
  4091c2:	3277      	adds	r2, #119	; 0x77
  4091c4:	e720      	b.n	409008 <_malloc_r+0x374>
  4091c6:	f240 5154 	movw	r1, #1364	; 0x554
  4091ca:	428a      	cmp	r2, r1
  4091cc:	d805      	bhi.n	4091da <_malloc_r+0x546>
  4091ce:	0c9a      	lsrs	r2, r3, #18
  4091d0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4091d4:	00c9      	lsls	r1, r1, #3
  4091d6:	327c      	adds	r2, #124	; 0x7c
  4091d8:	e716      	b.n	409008 <_malloc_r+0x374>
  4091da:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4091de:	227e      	movs	r2, #126	; 0x7e
  4091e0:	e712      	b.n	409008 <_malloc_r+0x374>
  4091e2:	687b      	ldr	r3, [r7, #4]
  4091e4:	e780      	b.n	4090e8 <_malloc_r+0x454>
  4091e6:	08f0      	lsrs	r0, r6, #3
  4091e8:	f106 0308 	add.w	r3, r6, #8
  4091ec:	e600      	b.n	408df0 <_malloc_r+0x15c>
  4091ee:	bf00      	nop
  4091f0:	204015b0 	.word	0x204015b0

004091f4 <__ascii_mbtowc>:
  4091f4:	b082      	sub	sp, #8
  4091f6:	b149      	cbz	r1, 40920c <__ascii_mbtowc+0x18>
  4091f8:	b15a      	cbz	r2, 409212 <__ascii_mbtowc+0x1e>
  4091fa:	b16b      	cbz	r3, 409218 <__ascii_mbtowc+0x24>
  4091fc:	7813      	ldrb	r3, [r2, #0]
  4091fe:	600b      	str	r3, [r1, #0]
  409200:	7812      	ldrb	r2, [r2, #0]
  409202:	1c10      	adds	r0, r2, #0
  409204:	bf18      	it	ne
  409206:	2001      	movne	r0, #1
  409208:	b002      	add	sp, #8
  40920a:	4770      	bx	lr
  40920c:	a901      	add	r1, sp, #4
  40920e:	2a00      	cmp	r2, #0
  409210:	d1f3      	bne.n	4091fa <__ascii_mbtowc+0x6>
  409212:	4610      	mov	r0, r2
  409214:	b002      	add	sp, #8
  409216:	4770      	bx	lr
  409218:	f06f 0001 	mvn.w	r0, #1
  40921c:	e7f4      	b.n	409208 <__ascii_mbtowc+0x14>
  40921e:	bf00      	nop

00409220 <memchr>:
  409220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409224:	2a10      	cmp	r2, #16
  409226:	db2b      	blt.n	409280 <memchr+0x60>
  409228:	f010 0f07 	tst.w	r0, #7
  40922c:	d008      	beq.n	409240 <memchr+0x20>
  40922e:	f810 3b01 	ldrb.w	r3, [r0], #1
  409232:	3a01      	subs	r2, #1
  409234:	428b      	cmp	r3, r1
  409236:	d02d      	beq.n	409294 <memchr+0x74>
  409238:	f010 0f07 	tst.w	r0, #7
  40923c:	b342      	cbz	r2, 409290 <memchr+0x70>
  40923e:	d1f6      	bne.n	40922e <memchr+0xe>
  409240:	b4f0      	push	{r4, r5, r6, r7}
  409242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40924a:	f022 0407 	bic.w	r4, r2, #7
  40924e:	f07f 0700 	mvns.w	r7, #0
  409252:	2300      	movs	r3, #0
  409254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409258:	3c08      	subs	r4, #8
  40925a:	ea85 0501 	eor.w	r5, r5, r1
  40925e:	ea86 0601 	eor.w	r6, r6, r1
  409262:	fa85 f547 	uadd8	r5, r5, r7
  409266:	faa3 f587 	sel	r5, r3, r7
  40926a:	fa86 f647 	uadd8	r6, r6, r7
  40926e:	faa5 f687 	sel	r6, r5, r7
  409272:	b98e      	cbnz	r6, 409298 <memchr+0x78>
  409274:	d1ee      	bne.n	409254 <memchr+0x34>
  409276:	bcf0      	pop	{r4, r5, r6, r7}
  409278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40927c:	f002 0207 	and.w	r2, r2, #7
  409280:	b132      	cbz	r2, 409290 <memchr+0x70>
  409282:	f810 3b01 	ldrb.w	r3, [r0], #1
  409286:	3a01      	subs	r2, #1
  409288:	ea83 0301 	eor.w	r3, r3, r1
  40928c:	b113      	cbz	r3, 409294 <memchr+0x74>
  40928e:	d1f8      	bne.n	409282 <memchr+0x62>
  409290:	2000      	movs	r0, #0
  409292:	4770      	bx	lr
  409294:	3801      	subs	r0, #1
  409296:	4770      	bx	lr
  409298:	2d00      	cmp	r5, #0
  40929a:	bf06      	itte	eq
  40929c:	4635      	moveq	r5, r6
  40929e:	3803      	subeq	r0, #3
  4092a0:	3807      	subne	r0, #7
  4092a2:	f015 0f01 	tst.w	r5, #1
  4092a6:	d107      	bne.n	4092b8 <memchr+0x98>
  4092a8:	3001      	adds	r0, #1
  4092aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4092ae:	bf02      	ittt	eq
  4092b0:	3001      	addeq	r0, #1
  4092b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4092b6:	3001      	addeq	r0, #1
  4092b8:	bcf0      	pop	{r4, r5, r6, r7}
  4092ba:	3801      	subs	r0, #1
  4092bc:	4770      	bx	lr
  4092be:	bf00      	nop

004092c0 <memcmp>:
  4092c0:	2a03      	cmp	r2, #3
  4092c2:	b470      	push	{r4, r5, r6}
  4092c4:	d922      	bls.n	40930c <memcmp+0x4c>
  4092c6:	ea40 0301 	orr.w	r3, r0, r1
  4092ca:	079b      	lsls	r3, r3, #30
  4092cc:	d011      	beq.n	4092f2 <memcmp+0x32>
  4092ce:	7803      	ldrb	r3, [r0, #0]
  4092d0:	780c      	ldrb	r4, [r1, #0]
  4092d2:	42a3      	cmp	r3, r4
  4092d4:	d11d      	bne.n	409312 <memcmp+0x52>
  4092d6:	440a      	add	r2, r1
  4092d8:	3101      	adds	r1, #1
  4092da:	e005      	b.n	4092e8 <memcmp+0x28>
  4092dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4092e0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4092e4:	42a3      	cmp	r3, r4
  4092e6:	d114      	bne.n	409312 <memcmp+0x52>
  4092e8:	4291      	cmp	r1, r2
  4092ea:	d1f7      	bne.n	4092dc <memcmp+0x1c>
  4092ec:	2000      	movs	r0, #0
  4092ee:	bc70      	pop	{r4, r5, r6}
  4092f0:	4770      	bx	lr
  4092f2:	680d      	ldr	r5, [r1, #0]
  4092f4:	6806      	ldr	r6, [r0, #0]
  4092f6:	42ae      	cmp	r6, r5
  4092f8:	460c      	mov	r4, r1
  4092fa:	4603      	mov	r3, r0
  4092fc:	f101 0104 	add.w	r1, r1, #4
  409300:	f100 0004 	add.w	r0, r0, #4
  409304:	d108      	bne.n	409318 <memcmp+0x58>
  409306:	3a04      	subs	r2, #4
  409308:	2a03      	cmp	r2, #3
  40930a:	d8f2      	bhi.n	4092f2 <memcmp+0x32>
  40930c:	2a00      	cmp	r2, #0
  40930e:	d1de      	bne.n	4092ce <memcmp+0xe>
  409310:	e7ec      	b.n	4092ec <memcmp+0x2c>
  409312:	1b18      	subs	r0, r3, r4
  409314:	bc70      	pop	{r4, r5, r6}
  409316:	4770      	bx	lr
  409318:	4621      	mov	r1, r4
  40931a:	4618      	mov	r0, r3
  40931c:	e7d7      	b.n	4092ce <memcmp+0xe>
  40931e:	bf00      	nop

00409320 <memcpy>:
  409320:	4684      	mov	ip, r0
  409322:	ea41 0300 	orr.w	r3, r1, r0
  409326:	f013 0303 	ands.w	r3, r3, #3
  40932a:	d16d      	bne.n	409408 <memcpy+0xe8>
  40932c:	3a40      	subs	r2, #64	; 0x40
  40932e:	d341      	bcc.n	4093b4 <memcpy+0x94>
  409330:	f851 3b04 	ldr.w	r3, [r1], #4
  409334:	f840 3b04 	str.w	r3, [r0], #4
  409338:	f851 3b04 	ldr.w	r3, [r1], #4
  40933c:	f840 3b04 	str.w	r3, [r0], #4
  409340:	f851 3b04 	ldr.w	r3, [r1], #4
  409344:	f840 3b04 	str.w	r3, [r0], #4
  409348:	f851 3b04 	ldr.w	r3, [r1], #4
  40934c:	f840 3b04 	str.w	r3, [r0], #4
  409350:	f851 3b04 	ldr.w	r3, [r1], #4
  409354:	f840 3b04 	str.w	r3, [r0], #4
  409358:	f851 3b04 	ldr.w	r3, [r1], #4
  40935c:	f840 3b04 	str.w	r3, [r0], #4
  409360:	f851 3b04 	ldr.w	r3, [r1], #4
  409364:	f840 3b04 	str.w	r3, [r0], #4
  409368:	f851 3b04 	ldr.w	r3, [r1], #4
  40936c:	f840 3b04 	str.w	r3, [r0], #4
  409370:	f851 3b04 	ldr.w	r3, [r1], #4
  409374:	f840 3b04 	str.w	r3, [r0], #4
  409378:	f851 3b04 	ldr.w	r3, [r1], #4
  40937c:	f840 3b04 	str.w	r3, [r0], #4
  409380:	f851 3b04 	ldr.w	r3, [r1], #4
  409384:	f840 3b04 	str.w	r3, [r0], #4
  409388:	f851 3b04 	ldr.w	r3, [r1], #4
  40938c:	f840 3b04 	str.w	r3, [r0], #4
  409390:	f851 3b04 	ldr.w	r3, [r1], #4
  409394:	f840 3b04 	str.w	r3, [r0], #4
  409398:	f851 3b04 	ldr.w	r3, [r1], #4
  40939c:	f840 3b04 	str.w	r3, [r0], #4
  4093a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4093a4:	f840 3b04 	str.w	r3, [r0], #4
  4093a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4093ac:	f840 3b04 	str.w	r3, [r0], #4
  4093b0:	3a40      	subs	r2, #64	; 0x40
  4093b2:	d2bd      	bcs.n	409330 <memcpy+0x10>
  4093b4:	3230      	adds	r2, #48	; 0x30
  4093b6:	d311      	bcc.n	4093dc <memcpy+0xbc>
  4093b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4093bc:	f840 3b04 	str.w	r3, [r0], #4
  4093c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4093c4:	f840 3b04 	str.w	r3, [r0], #4
  4093c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4093cc:	f840 3b04 	str.w	r3, [r0], #4
  4093d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4093d4:	f840 3b04 	str.w	r3, [r0], #4
  4093d8:	3a10      	subs	r2, #16
  4093da:	d2ed      	bcs.n	4093b8 <memcpy+0x98>
  4093dc:	320c      	adds	r2, #12
  4093de:	d305      	bcc.n	4093ec <memcpy+0xcc>
  4093e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4093e4:	f840 3b04 	str.w	r3, [r0], #4
  4093e8:	3a04      	subs	r2, #4
  4093ea:	d2f9      	bcs.n	4093e0 <memcpy+0xc0>
  4093ec:	3204      	adds	r2, #4
  4093ee:	d008      	beq.n	409402 <memcpy+0xe2>
  4093f0:	07d2      	lsls	r2, r2, #31
  4093f2:	bf1c      	itt	ne
  4093f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4093f8:	f800 3b01 	strbne.w	r3, [r0], #1
  4093fc:	d301      	bcc.n	409402 <memcpy+0xe2>
  4093fe:	880b      	ldrh	r3, [r1, #0]
  409400:	8003      	strh	r3, [r0, #0]
  409402:	4660      	mov	r0, ip
  409404:	4770      	bx	lr
  409406:	bf00      	nop
  409408:	2a08      	cmp	r2, #8
  40940a:	d313      	bcc.n	409434 <memcpy+0x114>
  40940c:	078b      	lsls	r3, r1, #30
  40940e:	d08d      	beq.n	40932c <memcpy+0xc>
  409410:	f010 0303 	ands.w	r3, r0, #3
  409414:	d08a      	beq.n	40932c <memcpy+0xc>
  409416:	f1c3 0304 	rsb	r3, r3, #4
  40941a:	1ad2      	subs	r2, r2, r3
  40941c:	07db      	lsls	r3, r3, #31
  40941e:	bf1c      	itt	ne
  409420:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409424:	f800 3b01 	strbne.w	r3, [r0], #1
  409428:	d380      	bcc.n	40932c <memcpy+0xc>
  40942a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40942e:	f820 3b02 	strh.w	r3, [r0], #2
  409432:	e77b      	b.n	40932c <memcpy+0xc>
  409434:	3a04      	subs	r2, #4
  409436:	d3d9      	bcc.n	4093ec <memcpy+0xcc>
  409438:	3a01      	subs	r2, #1
  40943a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40943e:	f800 3b01 	strb.w	r3, [r0], #1
  409442:	d2f9      	bcs.n	409438 <memcpy+0x118>
  409444:	780b      	ldrb	r3, [r1, #0]
  409446:	7003      	strb	r3, [r0, #0]
  409448:	784b      	ldrb	r3, [r1, #1]
  40944a:	7043      	strb	r3, [r0, #1]
  40944c:	788b      	ldrb	r3, [r1, #2]
  40944e:	7083      	strb	r3, [r0, #2]
  409450:	4660      	mov	r0, ip
  409452:	4770      	bx	lr

00409454 <memmove>:
  409454:	4288      	cmp	r0, r1
  409456:	b5f0      	push	{r4, r5, r6, r7, lr}
  409458:	d90d      	bls.n	409476 <memmove+0x22>
  40945a:	188b      	adds	r3, r1, r2
  40945c:	4298      	cmp	r0, r3
  40945e:	d20a      	bcs.n	409476 <memmove+0x22>
  409460:	1884      	adds	r4, r0, r2
  409462:	2a00      	cmp	r2, #0
  409464:	d051      	beq.n	40950a <memmove+0xb6>
  409466:	4622      	mov	r2, r4
  409468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40946c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  409470:	4299      	cmp	r1, r3
  409472:	d1f9      	bne.n	409468 <memmove+0x14>
  409474:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409476:	2a0f      	cmp	r2, #15
  409478:	d948      	bls.n	40950c <memmove+0xb8>
  40947a:	ea41 0300 	orr.w	r3, r1, r0
  40947e:	079b      	lsls	r3, r3, #30
  409480:	d146      	bne.n	409510 <memmove+0xbc>
  409482:	f100 0410 	add.w	r4, r0, #16
  409486:	f101 0310 	add.w	r3, r1, #16
  40948a:	4615      	mov	r5, r2
  40948c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409490:	f844 6c10 	str.w	r6, [r4, #-16]
  409494:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409498:	f844 6c0c 	str.w	r6, [r4, #-12]
  40949c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4094a0:	f844 6c08 	str.w	r6, [r4, #-8]
  4094a4:	3d10      	subs	r5, #16
  4094a6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4094aa:	f844 6c04 	str.w	r6, [r4, #-4]
  4094ae:	2d0f      	cmp	r5, #15
  4094b0:	f103 0310 	add.w	r3, r3, #16
  4094b4:	f104 0410 	add.w	r4, r4, #16
  4094b8:	d8e8      	bhi.n	40948c <memmove+0x38>
  4094ba:	f1a2 0310 	sub.w	r3, r2, #16
  4094be:	f023 030f 	bic.w	r3, r3, #15
  4094c2:	f002 0e0f 	and.w	lr, r2, #15
  4094c6:	3310      	adds	r3, #16
  4094c8:	f1be 0f03 	cmp.w	lr, #3
  4094cc:	4419      	add	r1, r3
  4094ce:	4403      	add	r3, r0
  4094d0:	d921      	bls.n	409516 <memmove+0xc2>
  4094d2:	1f1e      	subs	r6, r3, #4
  4094d4:	460d      	mov	r5, r1
  4094d6:	4674      	mov	r4, lr
  4094d8:	3c04      	subs	r4, #4
  4094da:	f855 7b04 	ldr.w	r7, [r5], #4
  4094de:	f846 7f04 	str.w	r7, [r6, #4]!
  4094e2:	2c03      	cmp	r4, #3
  4094e4:	d8f8      	bhi.n	4094d8 <memmove+0x84>
  4094e6:	f1ae 0404 	sub.w	r4, lr, #4
  4094ea:	f024 0403 	bic.w	r4, r4, #3
  4094ee:	3404      	adds	r4, #4
  4094f0:	4421      	add	r1, r4
  4094f2:	4423      	add	r3, r4
  4094f4:	f002 0203 	and.w	r2, r2, #3
  4094f8:	b162      	cbz	r2, 409514 <memmove+0xc0>
  4094fa:	3b01      	subs	r3, #1
  4094fc:	440a      	add	r2, r1
  4094fe:	f811 4b01 	ldrb.w	r4, [r1], #1
  409502:	f803 4f01 	strb.w	r4, [r3, #1]!
  409506:	428a      	cmp	r2, r1
  409508:	d1f9      	bne.n	4094fe <memmove+0xaa>
  40950a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40950c:	4603      	mov	r3, r0
  40950e:	e7f3      	b.n	4094f8 <memmove+0xa4>
  409510:	4603      	mov	r3, r0
  409512:	e7f2      	b.n	4094fa <memmove+0xa6>
  409514:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409516:	4672      	mov	r2, lr
  409518:	e7ee      	b.n	4094f8 <memmove+0xa4>
  40951a:	bf00      	nop

0040951c <__malloc_lock>:
  40951c:	4770      	bx	lr
  40951e:	bf00      	nop

00409520 <__malloc_unlock>:
  409520:	4770      	bx	lr
  409522:	bf00      	nop

00409524 <_Balloc>:
  409524:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409526:	b570      	push	{r4, r5, r6, lr}
  409528:	4605      	mov	r5, r0
  40952a:	460c      	mov	r4, r1
  40952c:	b14b      	cbz	r3, 409542 <_Balloc+0x1e>
  40952e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409532:	b180      	cbz	r0, 409556 <_Balloc+0x32>
  409534:	6802      	ldr	r2, [r0, #0]
  409536:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40953a:	2300      	movs	r3, #0
  40953c:	6103      	str	r3, [r0, #16]
  40953e:	60c3      	str	r3, [r0, #12]
  409540:	bd70      	pop	{r4, r5, r6, pc}
  409542:	2221      	movs	r2, #33	; 0x21
  409544:	2104      	movs	r1, #4
  409546:	f000 fecd 	bl	40a2e4 <_calloc_r>
  40954a:	64e8      	str	r0, [r5, #76]	; 0x4c
  40954c:	4603      	mov	r3, r0
  40954e:	2800      	cmp	r0, #0
  409550:	d1ed      	bne.n	40952e <_Balloc+0xa>
  409552:	2000      	movs	r0, #0
  409554:	bd70      	pop	{r4, r5, r6, pc}
  409556:	2101      	movs	r1, #1
  409558:	fa01 f604 	lsl.w	r6, r1, r4
  40955c:	1d72      	adds	r2, r6, #5
  40955e:	4628      	mov	r0, r5
  409560:	0092      	lsls	r2, r2, #2
  409562:	f000 febf 	bl	40a2e4 <_calloc_r>
  409566:	2800      	cmp	r0, #0
  409568:	d0f3      	beq.n	409552 <_Balloc+0x2e>
  40956a:	6044      	str	r4, [r0, #4]
  40956c:	6086      	str	r6, [r0, #8]
  40956e:	e7e4      	b.n	40953a <_Balloc+0x16>

00409570 <_Bfree>:
  409570:	b131      	cbz	r1, 409580 <_Bfree+0x10>
  409572:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409574:	684a      	ldr	r2, [r1, #4]
  409576:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40957a:	6008      	str	r0, [r1, #0]
  40957c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409580:	4770      	bx	lr
  409582:	bf00      	nop

00409584 <__multadd>:
  409584:	b5f0      	push	{r4, r5, r6, r7, lr}
  409586:	690c      	ldr	r4, [r1, #16]
  409588:	b083      	sub	sp, #12
  40958a:	460d      	mov	r5, r1
  40958c:	4606      	mov	r6, r0
  40958e:	f101 0e14 	add.w	lr, r1, #20
  409592:	2700      	movs	r7, #0
  409594:	f8de 0000 	ldr.w	r0, [lr]
  409598:	b281      	uxth	r1, r0
  40959a:	fb02 3301 	mla	r3, r2, r1, r3
  40959e:	0c01      	lsrs	r1, r0, #16
  4095a0:	0c18      	lsrs	r0, r3, #16
  4095a2:	fb02 0101 	mla	r1, r2, r1, r0
  4095a6:	b29b      	uxth	r3, r3
  4095a8:	3701      	adds	r7, #1
  4095aa:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4095ae:	42bc      	cmp	r4, r7
  4095b0:	f84e 3b04 	str.w	r3, [lr], #4
  4095b4:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4095b8:	dcec      	bgt.n	409594 <__multadd+0x10>
  4095ba:	b13b      	cbz	r3, 4095cc <__multadd+0x48>
  4095bc:	68aa      	ldr	r2, [r5, #8]
  4095be:	4294      	cmp	r4, r2
  4095c0:	da07      	bge.n	4095d2 <__multadd+0x4e>
  4095c2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4095c6:	3401      	adds	r4, #1
  4095c8:	6153      	str	r3, [r2, #20]
  4095ca:	612c      	str	r4, [r5, #16]
  4095cc:	4628      	mov	r0, r5
  4095ce:	b003      	add	sp, #12
  4095d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4095d2:	6869      	ldr	r1, [r5, #4]
  4095d4:	9301      	str	r3, [sp, #4]
  4095d6:	3101      	adds	r1, #1
  4095d8:	4630      	mov	r0, r6
  4095da:	f7ff ffa3 	bl	409524 <_Balloc>
  4095de:	692a      	ldr	r2, [r5, #16]
  4095e0:	3202      	adds	r2, #2
  4095e2:	f105 010c 	add.w	r1, r5, #12
  4095e6:	4607      	mov	r7, r0
  4095e8:	0092      	lsls	r2, r2, #2
  4095ea:	300c      	adds	r0, #12
  4095ec:	f7ff fe98 	bl	409320 <memcpy>
  4095f0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4095f2:	6869      	ldr	r1, [r5, #4]
  4095f4:	9b01      	ldr	r3, [sp, #4]
  4095f6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4095fa:	6028      	str	r0, [r5, #0]
  4095fc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409600:	463d      	mov	r5, r7
  409602:	e7de      	b.n	4095c2 <__multadd+0x3e>

00409604 <__hi0bits>:
  409604:	0c02      	lsrs	r2, r0, #16
  409606:	0412      	lsls	r2, r2, #16
  409608:	4603      	mov	r3, r0
  40960a:	b9b2      	cbnz	r2, 40963a <__hi0bits+0x36>
  40960c:	0403      	lsls	r3, r0, #16
  40960e:	2010      	movs	r0, #16
  409610:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409614:	bf04      	itt	eq
  409616:	021b      	lsleq	r3, r3, #8
  409618:	3008      	addeq	r0, #8
  40961a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40961e:	bf04      	itt	eq
  409620:	011b      	lsleq	r3, r3, #4
  409622:	3004      	addeq	r0, #4
  409624:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  409628:	bf04      	itt	eq
  40962a:	009b      	lsleq	r3, r3, #2
  40962c:	3002      	addeq	r0, #2
  40962e:	2b00      	cmp	r3, #0
  409630:	db02      	blt.n	409638 <__hi0bits+0x34>
  409632:	005b      	lsls	r3, r3, #1
  409634:	d403      	bmi.n	40963e <__hi0bits+0x3a>
  409636:	2020      	movs	r0, #32
  409638:	4770      	bx	lr
  40963a:	2000      	movs	r0, #0
  40963c:	e7e8      	b.n	409610 <__hi0bits+0xc>
  40963e:	3001      	adds	r0, #1
  409640:	4770      	bx	lr
  409642:	bf00      	nop

00409644 <__lo0bits>:
  409644:	6803      	ldr	r3, [r0, #0]
  409646:	f013 0207 	ands.w	r2, r3, #7
  40964a:	4601      	mov	r1, r0
  40964c:	d007      	beq.n	40965e <__lo0bits+0x1a>
  40964e:	07da      	lsls	r2, r3, #31
  409650:	d421      	bmi.n	409696 <__lo0bits+0x52>
  409652:	0798      	lsls	r0, r3, #30
  409654:	d421      	bmi.n	40969a <__lo0bits+0x56>
  409656:	089b      	lsrs	r3, r3, #2
  409658:	600b      	str	r3, [r1, #0]
  40965a:	2002      	movs	r0, #2
  40965c:	4770      	bx	lr
  40965e:	b298      	uxth	r0, r3
  409660:	b198      	cbz	r0, 40968a <__lo0bits+0x46>
  409662:	4610      	mov	r0, r2
  409664:	f013 0fff 	tst.w	r3, #255	; 0xff
  409668:	bf04      	itt	eq
  40966a:	0a1b      	lsreq	r3, r3, #8
  40966c:	3008      	addeq	r0, #8
  40966e:	071a      	lsls	r2, r3, #28
  409670:	bf04      	itt	eq
  409672:	091b      	lsreq	r3, r3, #4
  409674:	3004      	addeq	r0, #4
  409676:	079a      	lsls	r2, r3, #30
  409678:	bf04      	itt	eq
  40967a:	089b      	lsreq	r3, r3, #2
  40967c:	3002      	addeq	r0, #2
  40967e:	07da      	lsls	r2, r3, #31
  409680:	d407      	bmi.n	409692 <__lo0bits+0x4e>
  409682:	085b      	lsrs	r3, r3, #1
  409684:	d104      	bne.n	409690 <__lo0bits+0x4c>
  409686:	2020      	movs	r0, #32
  409688:	4770      	bx	lr
  40968a:	0c1b      	lsrs	r3, r3, #16
  40968c:	2010      	movs	r0, #16
  40968e:	e7e9      	b.n	409664 <__lo0bits+0x20>
  409690:	3001      	adds	r0, #1
  409692:	600b      	str	r3, [r1, #0]
  409694:	4770      	bx	lr
  409696:	2000      	movs	r0, #0
  409698:	4770      	bx	lr
  40969a:	085b      	lsrs	r3, r3, #1
  40969c:	600b      	str	r3, [r1, #0]
  40969e:	2001      	movs	r0, #1
  4096a0:	4770      	bx	lr
  4096a2:	bf00      	nop

004096a4 <__i2b>:
  4096a4:	b510      	push	{r4, lr}
  4096a6:	460c      	mov	r4, r1
  4096a8:	2101      	movs	r1, #1
  4096aa:	f7ff ff3b 	bl	409524 <_Balloc>
  4096ae:	2201      	movs	r2, #1
  4096b0:	6144      	str	r4, [r0, #20]
  4096b2:	6102      	str	r2, [r0, #16]
  4096b4:	bd10      	pop	{r4, pc}
  4096b6:	bf00      	nop

004096b8 <__multiply>:
  4096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4096bc:	690c      	ldr	r4, [r1, #16]
  4096be:	6915      	ldr	r5, [r2, #16]
  4096c0:	42ac      	cmp	r4, r5
  4096c2:	b083      	sub	sp, #12
  4096c4:	468b      	mov	fp, r1
  4096c6:	4616      	mov	r6, r2
  4096c8:	da04      	bge.n	4096d4 <__multiply+0x1c>
  4096ca:	4622      	mov	r2, r4
  4096cc:	46b3      	mov	fp, r6
  4096ce:	462c      	mov	r4, r5
  4096d0:	460e      	mov	r6, r1
  4096d2:	4615      	mov	r5, r2
  4096d4:	f8db 3008 	ldr.w	r3, [fp, #8]
  4096d8:	f8db 1004 	ldr.w	r1, [fp, #4]
  4096dc:	eb04 0805 	add.w	r8, r4, r5
  4096e0:	4598      	cmp	r8, r3
  4096e2:	bfc8      	it	gt
  4096e4:	3101      	addgt	r1, #1
  4096e6:	f7ff ff1d 	bl	409524 <_Balloc>
  4096ea:	f100 0914 	add.w	r9, r0, #20
  4096ee:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4096f2:	45d1      	cmp	r9, sl
  4096f4:	9000      	str	r0, [sp, #0]
  4096f6:	d205      	bcs.n	409704 <__multiply+0x4c>
  4096f8:	464b      	mov	r3, r9
  4096fa:	2100      	movs	r1, #0
  4096fc:	f843 1b04 	str.w	r1, [r3], #4
  409700:	459a      	cmp	sl, r3
  409702:	d8fb      	bhi.n	4096fc <__multiply+0x44>
  409704:	f106 0c14 	add.w	ip, r6, #20
  409708:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40970c:	f10b 0b14 	add.w	fp, fp, #20
  409710:	459c      	cmp	ip, r3
  409712:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  409716:	d24c      	bcs.n	4097b2 <__multiply+0xfa>
  409718:	f8cd a004 	str.w	sl, [sp, #4]
  40971c:	469a      	mov	sl, r3
  40971e:	f8dc 5000 	ldr.w	r5, [ip]
  409722:	b2af      	uxth	r7, r5
  409724:	b1ef      	cbz	r7, 409762 <__multiply+0xaa>
  409726:	2100      	movs	r1, #0
  409728:	464d      	mov	r5, r9
  40972a:	465e      	mov	r6, fp
  40972c:	460c      	mov	r4, r1
  40972e:	f856 2b04 	ldr.w	r2, [r6], #4
  409732:	6828      	ldr	r0, [r5, #0]
  409734:	b293      	uxth	r3, r2
  409736:	b281      	uxth	r1, r0
  409738:	fb07 1303 	mla	r3, r7, r3, r1
  40973c:	0c12      	lsrs	r2, r2, #16
  40973e:	0c01      	lsrs	r1, r0, #16
  409740:	4423      	add	r3, r4
  409742:	fb07 1102 	mla	r1, r7, r2, r1
  409746:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40974a:	b29b      	uxth	r3, r3
  40974c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  409750:	45b6      	cmp	lr, r6
  409752:	f845 3b04 	str.w	r3, [r5], #4
  409756:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40975a:	d8e8      	bhi.n	40972e <__multiply+0x76>
  40975c:	602c      	str	r4, [r5, #0]
  40975e:	f8dc 5000 	ldr.w	r5, [ip]
  409762:	0c2d      	lsrs	r5, r5, #16
  409764:	d01d      	beq.n	4097a2 <__multiply+0xea>
  409766:	f8d9 3000 	ldr.w	r3, [r9]
  40976a:	4648      	mov	r0, r9
  40976c:	461c      	mov	r4, r3
  40976e:	4659      	mov	r1, fp
  409770:	2200      	movs	r2, #0
  409772:	880e      	ldrh	r6, [r1, #0]
  409774:	0c24      	lsrs	r4, r4, #16
  409776:	fb05 4406 	mla	r4, r5, r6, r4
  40977a:	4422      	add	r2, r4
  40977c:	b29b      	uxth	r3, r3
  40977e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  409782:	f840 3b04 	str.w	r3, [r0], #4
  409786:	f851 3b04 	ldr.w	r3, [r1], #4
  40978a:	6804      	ldr	r4, [r0, #0]
  40978c:	0c1b      	lsrs	r3, r3, #16
  40978e:	b2a6      	uxth	r6, r4
  409790:	fb05 6303 	mla	r3, r5, r3, r6
  409794:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  409798:	458e      	cmp	lr, r1
  40979a:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40979e:	d8e8      	bhi.n	409772 <__multiply+0xba>
  4097a0:	6003      	str	r3, [r0, #0]
  4097a2:	f10c 0c04 	add.w	ip, ip, #4
  4097a6:	45e2      	cmp	sl, ip
  4097a8:	f109 0904 	add.w	r9, r9, #4
  4097ac:	d8b7      	bhi.n	40971e <__multiply+0x66>
  4097ae:	f8dd a004 	ldr.w	sl, [sp, #4]
  4097b2:	f1b8 0f00 	cmp.w	r8, #0
  4097b6:	dd0b      	ble.n	4097d0 <__multiply+0x118>
  4097b8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4097bc:	f1aa 0a04 	sub.w	sl, sl, #4
  4097c0:	b11b      	cbz	r3, 4097ca <__multiply+0x112>
  4097c2:	e005      	b.n	4097d0 <__multiply+0x118>
  4097c4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4097c8:	b913      	cbnz	r3, 4097d0 <__multiply+0x118>
  4097ca:	f1b8 0801 	subs.w	r8, r8, #1
  4097ce:	d1f9      	bne.n	4097c4 <__multiply+0x10c>
  4097d0:	9800      	ldr	r0, [sp, #0]
  4097d2:	f8c0 8010 	str.w	r8, [r0, #16]
  4097d6:	b003      	add	sp, #12
  4097d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004097dc <__pow5mult>:
  4097dc:	f012 0303 	ands.w	r3, r2, #3
  4097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4097e4:	4614      	mov	r4, r2
  4097e6:	4607      	mov	r7, r0
  4097e8:	d12e      	bne.n	409848 <__pow5mult+0x6c>
  4097ea:	460d      	mov	r5, r1
  4097ec:	10a4      	asrs	r4, r4, #2
  4097ee:	d01c      	beq.n	40982a <__pow5mult+0x4e>
  4097f0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4097f2:	b396      	cbz	r6, 40985a <__pow5mult+0x7e>
  4097f4:	07e3      	lsls	r3, r4, #31
  4097f6:	f04f 0800 	mov.w	r8, #0
  4097fa:	d406      	bmi.n	40980a <__pow5mult+0x2e>
  4097fc:	1064      	asrs	r4, r4, #1
  4097fe:	d014      	beq.n	40982a <__pow5mult+0x4e>
  409800:	6830      	ldr	r0, [r6, #0]
  409802:	b1a8      	cbz	r0, 409830 <__pow5mult+0x54>
  409804:	4606      	mov	r6, r0
  409806:	07e3      	lsls	r3, r4, #31
  409808:	d5f8      	bpl.n	4097fc <__pow5mult+0x20>
  40980a:	4632      	mov	r2, r6
  40980c:	4629      	mov	r1, r5
  40980e:	4638      	mov	r0, r7
  409810:	f7ff ff52 	bl	4096b8 <__multiply>
  409814:	b1b5      	cbz	r5, 409844 <__pow5mult+0x68>
  409816:	686a      	ldr	r2, [r5, #4]
  409818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40981a:	1064      	asrs	r4, r4, #1
  40981c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409820:	6029      	str	r1, [r5, #0]
  409822:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  409826:	4605      	mov	r5, r0
  409828:	d1ea      	bne.n	409800 <__pow5mult+0x24>
  40982a:	4628      	mov	r0, r5
  40982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409830:	4632      	mov	r2, r6
  409832:	4631      	mov	r1, r6
  409834:	4638      	mov	r0, r7
  409836:	f7ff ff3f 	bl	4096b8 <__multiply>
  40983a:	6030      	str	r0, [r6, #0]
  40983c:	f8c0 8000 	str.w	r8, [r0]
  409840:	4606      	mov	r6, r0
  409842:	e7e0      	b.n	409806 <__pow5mult+0x2a>
  409844:	4605      	mov	r5, r0
  409846:	e7d9      	b.n	4097fc <__pow5mult+0x20>
  409848:	1e5a      	subs	r2, r3, #1
  40984a:	4d0b      	ldr	r5, [pc, #44]	; (409878 <__pow5mult+0x9c>)
  40984c:	2300      	movs	r3, #0
  40984e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409852:	f7ff fe97 	bl	409584 <__multadd>
  409856:	4605      	mov	r5, r0
  409858:	e7c8      	b.n	4097ec <__pow5mult+0x10>
  40985a:	2101      	movs	r1, #1
  40985c:	4638      	mov	r0, r7
  40985e:	f7ff fe61 	bl	409524 <_Balloc>
  409862:	f240 2171 	movw	r1, #625	; 0x271
  409866:	2201      	movs	r2, #1
  409868:	2300      	movs	r3, #0
  40986a:	6141      	str	r1, [r0, #20]
  40986c:	6102      	str	r2, [r0, #16]
  40986e:	4606      	mov	r6, r0
  409870:	64b8      	str	r0, [r7, #72]	; 0x48
  409872:	6003      	str	r3, [r0, #0]
  409874:	e7be      	b.n	4097f4 <__pow5mult+0x18>
  409876:	bf00      	nop
  409878:	0040c140 	.word	0x0040c140

0040987c <__lshift>:
  40987c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409880:	4691      	mov	r9, r2
  409882:	690a      	ldr	r2, [r1, #16]
  409884:	688b      	ldr	r3, [r1, #8]
  409886:	ea4f 1469 	mov.w	r4, r9, asr #5
  40988a:	eb04 0802 	add.w	r8, r4, r2
  40988e:	f108 0501 	add.w	r5, r8, #1
  409892:	429d      	cmp	r5, r3
  409894:	460e      	mov	r6, r1
  409896:	4607      	mov	r7, r0
  409898:	6849      	ldr	r1, [r1, #4]
  40989a:	dd04      	ble.n	4098a6 <__lshift+0x2a>
  40989c:	005b      	lsls	r3, r3, #1
  40989e:	429d      	cmp	r5, r3
  4098a0:	f101 0101 	add.w	r1, r1, #1
  4098a4:	dcfa      	bgt.n	40989c <__lshift+0x20>
  4098a6:	4638      	mov	r0, r7
  4098a8:	f7ff fe3c 	bl	409524 <_Balloc>
  4098ac:	2c00      	cmp	r4, #0
  4098ae:	f100 0314 	add.w	r3, r0, #20
  4098b2:	dd06      	ble.n	4098c2 <__lshift+0x46>
  4098b4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4098b8:	2100      	movs	r1, #0
  4098ba:	f843 1b04 	str.w	r1, [r3], #4
  4098be:	429a      	cmp	r2, r3
  4098c0:	d1fb      	bne.n	4098ba <__lshift+0x3e>
  4098c2:	6934      	ldr	r4, [r6, #16]
  4098c4:	f106 0114 	add.w	r1, r6, #20
  4098c8:	f019 091f 	ands.w	r9, r9, #31
  4098cc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4098d0:	d01d      	beq.n	40990e <__lshift+0x92>
  4098d2:	f1c9 0c20 	rsb	ip, r9, #32
  4098d6:	2200      	movs	r2, #0
  4098d8:	680c      	ldr	r4, [r1, #0]
  4098da:	fa04 f409 	lsl.w	r4, r4, r9
  4098de:	4314      	orrs	r4, r2
  4098e0:	f843 4b04 	str.w	r4, [r3], #4
  4098e4:	f851 2b04 	ldr.w	r2, [r1], #4
  4098e8:	458e      	cmp	lr, r1
  4098ea:	fa22 f20c 	lsr.w	r2, r2, ip
  4098ee:	d8f3      	bhi.n	4098d8 <__lshift+0x5c>
  4098f0:	601a      	str	r2, [r3, #0]
  4098f2:	b10a      	cbz	r2, 4098f8 <__lshift+0x7c>
  4098f4:	f108 0502 	add.w	r5, r8, #2
  4098f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4098fa:	6872      	ldr	r2, [r6, #4]
  4098fc:	3d01      	subs	r5, #1
  4098fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409902:	6105      	str	r5, [r0, #16]
  409904:	6031      	str	r1, [r6, #0]
  409906:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40990a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40990e:	3b04      	subs	r3, #4
  409910:	f851 2b04 	ldr.w	r2, [r1], #4
  409914:	f843 2f04 	str.w	r2, [r3, #4]!
  409918:	458e      	cmp	lr, r1
  40991a:	d8f9      	bhi.n	409910 <__lshift+0x94>
  40991c:	e7ec      	b.n	4098f8 <__lshift+0x7c>
  40991e:	bf00      	nop

00409920 <__mcmp>:
  409920:	b430      	push	{r4, r5}
  409922:	690b      	ldr	r3, [r1, #16]
  409924:	4605      	mov	r5, r0
  409926:	6900      	ldr	r0, [r0, #16]
  409928:	1ac0      	subs	r0, r0, r3
  40992a:	d10f      	bne.n	40994c <__mcmp+0x2c>
  40992c:	009b      	lsls	r3, r3, #2
  40992e:	3514      	adds	r5, #20
  409930:	3114      	adds	r1, #20
  409932:	4419      	add	r1, r3
  409934:	442b      	add	r3, r5
  409936:	e001      	b.n	40993c <__mcmp+0x1c>
  409938:	429d      	cmp	r5, r3
  40993a:	d207      	bcs.n	40994c <__mcmp+0x2c>
  40993c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409944:	4294      	cmp	r4, r2
  409946:	d0f7      	beq.n	409938 <__mcmp+0x18>
  409948:	d302      	bcc.n	409950 <__mcmp+0x30>
  40994a:	2001      	movs	r0, #1
  40994c:	bc30      	pop	{r4, r5}
  40994e:	4770      	bx	lr
  409950:	f04f 30ff 	mov.w	r0, #4294967295
  409954:	e7fa      	b.n	40994c <__mcmp+0x2c>
  409956:	bf00      	nop

00409958 <__mdiff>:
  409958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40995c:	690f      	ldr	r7, [r1, #16]
  40995e:	460e      	mov	r6, r1
  409960:	6911      	ldr	r1, [r2, #16]
  409962:	1a7f      	subs	r7, r7, r1
  409964:	2f00      	cmp	r7, #0
  409966:	4690      	mov	r8, r2
  409968:	d117      	bne.n	40999a <__mdiff+0x42>
  40996a:	0089      	lsls	r1, r1, #2
  40996c:	f106 0514 	add.w	r5, r6, #20
  409970:	f102 0e14 	add.w	lr, r2, #20
  409974:	186b      	adds	r3, r5, r1
  409976:	4471      	add	r1, lr
  409978:	e001      	b.n	40997e <__mdiff+0x26>
  40997a:	429d      	cmp	r5, r3
  40997c:	d25c      	bcs.n	409a38 <__mdiff+0xe0>
  40997e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409982:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409986:	42a2      	cmp	r2, r4
  409988:	d0f7      	beq.n	40997a <__mdiff+0x22>
  40998a:	d25e      	bcs.n	409a4a <__mdiff+0xf2>
  40998c:	4633      	mov	r3, r6
  40998e:	462c      	mov	r4, r5
  409990:	4646      	mov	r6, r8
  409992:	4675      	mov	r5, lr
  409994:	4698      	mov	r8, r3
  409996:	2701      	movs	r7, #1
  409998:	e005      	b.n	4099a6 <__mdiff+0x4e>
  40999a:	db58      	blt.n	409a4e <__mdiff+0xf6>
  40999c:	f106 0514 	add.w	r5, r6, #20
  4099a0:	f108 0414 	add.w	r4, r8, #20
  4099a4:	2700      	movs	r7, #0
  4099a6:	6871      	ldr	r1, [r6, #4]
  4099a8:	f7ff fdbc 	bl	409524 <_Balloc>
  4099ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4099b0:	6936      	ldr	r6, [r6, #16]
  4099b2:	60c7      	str	r7, [r0, #12]
  4099b4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4099b8:	46a6      	mov	lr, r4
  4099ba:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4099be:	f100 0414 	add.w	r4, r0, #20
  4099c2:	2300      	movs	r3, #0
  4099c4:	f85e 1b04 	ldr.w	r1, [lr], #4
  4099c8:	f855 8b04 	ldr.w	r8, [r5], #4
  4099cc:	b28a      	uxth	r2, r1
  4099ce:	fa13 f388 	uxtah	r3, r3, r8
  4099d2:	0c09      	lsrs	r1, r1, #16
  4099d4:	1a9a      	subs	r2, r3, r2
  4099d6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4099da:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4099de:	b292      	uxth	r2, r2
  4099e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4099e4:	45f4      	cmp	ip, lr
  4099e6:	f844 2b04 	str.w	r2, [r4], #4
  4099ea:	ea4f 4323 	mov.w	r3, r3, asr #16
  4099ee:	d8e9      	bhi.n	4099c4 <__mdiff+0x6c>
  4099f0:	42af      	cmp	r7, r5
  4099f2:	d917      	bls.n	409a24 <__mdiff+0xcc>
  4099f4:	46a4      	mov	ip, r4
  4099f6:	46ae      	mov	lr, r5
  4099f8:	f85e 2b04 	ldr.w	r2, [lr], #4
  4099fc:	fa13 f382 	uxtah	r3, r3, r2
  409a00:	1419      	asrs	r1, r3, #16
  409a02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409a06:	b29b      	uxth	r3, r3
  409a08:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409a0c:	4577      	cmp	r7, lr
  409a0e:	f84c 2b04 	str.w	r2, [ip], #4
  409a12:	ea4f 4321 	mov.w	r3, r1, asr #16
  409a16:	d8ef      	bhi.n	4099f8 <__mdiff+0xa0>
  409a18:	43ed      	mvns	r5, r5
  409a1a:	442f      	add	r7, r5
  409a1c:	f027 0703 	bic.w	r7, r7, #3
  409a20:	3704      	adds	r7, #4
  409a22:	443c      	add	r4, r7
  409a24:	3c04      	subs	r4, #4
  409a26:	b922      	cbnz	r2, 409a32 <__mdiff+0xda>
  409a28:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409a2c:	3e01      	subs	r6, #1
  409a2e:	2b00      	cmp	r3, #0
  409a30:	d0fa      	beq.n	409a28 <__mdiff+0xd0>
  409a32:	6106      	str	r6, [r0, #16]
  409a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a38:	2100      	movs	r1, #0
  409a3a:	f7ff fd73 	bl	409524 <_Balloc>
  409a3e:	2201      	movs	r2, #1
  409a40:	2300      	movs	r3, #0
  409a42:	6102      	str	r2, [r0, #16]
  409a44:	6143      	str	r3, [r0, #20]
  409a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a4a:	4674      	mov	r4, lr
  409a4c:	e7ab      	b.n	4099a6 <__mdiff+0x4e>
  409a4e:	4633      	mov	r3, r6
  409a50:	f106 0414 	add.w	r4, r6, #20
  409a54:	f102 0514 	add.w	r5, r2, #20
  409a58:	4616      	mov	r6, r2
  409a5a:	2701      	movs	r7, #1
  409a5c:	4698      	mov	r8, r3
  409a5e:	e7a2      	b.n	4099a6 <__mdiff+0x4e>

00409a60 <__d2b>:
  409a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409a64:	b082      	sub	sp, #8
  409a66:	2101      	movs	r1, #1
  409a68:	461c      	mov	r4, r3
  409a6a:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409a6e:	4615      	mov	r5, r2
  409a70:	9e08      	ldr	r6, [sp, #32]
  409a72:	f7ff fd57 	bl	409524 <_Balloc>
  409a76:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409a7a:	4680      	mov	r8, r0
  409a7c:	b10f      	cbz	r7, 409a82 <__d2b+0x22>
  409a7e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409a82:	9401      	str	r4, [sp, #4]
  409a84:	b31d      	cbz	r5, 409ace <__d2b+0x6e>
  409a86:	a802      	add	r0, sp, #8
  409a88:	f840 5d08 	str.w	r5, [r0, #-8]!
  409a8c:	f7ff fdda 	bl	409644 <__lo0bits>
  409a90:	2800      	cmp	r0, #0
  409a92:	d134      	bne.n	409afe <__d2b+0x9e>
  409a94:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409a98:	f8c8 2014 	str.w	r2, [r8, #20]
  409a9c:	2b00      	cmp	r3, #0
  409a9e:	bf0c      	ite	eq
  409aa0:	2101      	moveq	r1, #1
  409aa2:	2102      	movne	r1, #2
  409aa4:	f8c8 3018 	str.w	r3, [r8, #24]
  409aa8:	f8c8 1010 	str.w	r1, [r8, #16]
  409aac:	b9df      	cbnz	r7, 409ae6 <__d2b+0x86>
  409aae:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409ab2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409ab6:	6030      	str	r0, [r6, #0]
  409ab8:	6918      	ldr	r0, [r3, #16]
  409aba:	f7ff fda3 	bl	409604 <__hi0bits>
  409abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ac0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409ac4:	6018      	str	r0, [r3, #0]
  409ac6:	4640      	mov	r0, r8
  409ac8:	b002      	add	sp, #8
  409aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ace:	a801      	add	r0, sp, #4
  409ad0:	f7ff fdb8 	bl	409644 <__lo0bits>
  409ad4:	9b01      	ldr	r3, [sp, #4]
  409ad6:	f8c8 3014 	str.w	r3, [r8, #20]
  409ada:	2101      	movs	r1, #1
  409adc:	3020      	adds	r0, #32
  409ade:	f8c8 1010 	str.w	r1, [r8, #16]
  409ae2:	2f00      	cmp	r7, #0
  409ae4:	d0e3      	beq.n	409aae <__d2b+0x4e>
  409ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ae8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409aec:	4407      	add	r7, r0
  409aee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409af2:	6037      	str	r7, [r6, #0]
  409af4:	6018      	str	r0, [r3, #0]
  409af6:	4640      	mov	r0, r8
  409af8:	b002      	add	sp, #8
  409afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409afe:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409b02:	f1c0 0220 	rsb	r2, r0, #32
  409b06:	fa03 f202 	lsl.w	r2, r3, r2
  409b0a:	430a      	orrs	r2, r1
  409b0c:	40c3      	lsrs	r3, r0
  409b0e:	9301      	str	r3, [sp, #4]
  409b10:	f8c8 2014 	str.w	r2, [r8, #20]
  409b14:	e7c2      	b.n	409a9c <__d2b+0x3c>
  409b16:	bf00      	nop

00409b18 <_realloc_r>:
  409b18:	2900      	cmp	r1, #0
  409b1a:	f000 8095 	beq.w	409c48 <_realloc_r+0x130>
  409b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409b22:	460d      	mov	r5, r1
  409b24:	4616      	mov	r6, r2
  409b26:	b083      	sub	sp, #12
  409b28:	4680      	mov	r8, r0
  409b2a:	f106 070b 	add.w	r7, r6, #11
  409b2e:	f7ff fcf5 	bl	40951c <__malloc_lock>
  409b32:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409b36:	2f16      	cmp	r7, #22
  409b38:	f02e 0403 	bic.w	r4, lr, #3
  409b3c:	f1a5 0908 	sub.w	r9, r5, #8
  409b40:	d83c      	bhi.n	409bbc <_realloc_r+0xa4>
  409b42:	2210      	movs	r2, #16
  409b44:	4617      	mov	r7, r2
  409b46:	42be      	cmp	r6, r7
  409b48:	d83d      	bhi.n	409bc6 <_realloc_r+0xae>
  409b4a:	4294      	cmp	r4, r2
  409b4c:	da43      	bge.n	409bd6 <_realloc_r+0xbe>
  409b4e:	4bc4      	ldr	r3, [pc, #784]	; (409e60 <_realloc_r+0x348>)
  409b50:	6899      	ldr	r1, [r3, #8]
  409b52:	eb09 0004 	add.w	r0, r9, r4
  409b56:	4288      	cmp	r0, r1
  409b58:	f000 80b4 	beq.w	409cc4 <_realloc_r+0x1ac>
  409b5c:	6843      	ldr	r3, [r0, #4]
  409b5e:	f023 0101 	bic.w	r1, r3, #1
  409b62:	4401      	add	r1, r0
  409b64:	6849      	ldr	r1, [r1, #4]
  409b66:	07c9      	lsls	r1, r1, #31
  409b68:	d54c      	bpl.n	409c04 <_realloc_r+0xec>
  409b6a:	f01e 0f01 	tst.w	lr, #1
  409b6e:	f000 809b 	beq.w	409ca8 <_realloc_r+0x190>
  409b72:	4631      	mov	r1, r6
  409b74:	4640      	mov	r0, r8
  409b76:	f7ff f88d 	bl	408c94 <_malloc_r>
  409b7a:	4606      	mov	r6, r0
  409b7c:	2800      	cmp	r0, #0
  409b7e:	d03a      	beq.n	409bf6 <_realloc_r+0xde>
  409b80:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409b84:	f023 0301 	bic.w	r3, r3, #1
  409b88:	444b      	add	r3, r9
  409b8a:	f1a0 0208 	sub.w	r2, r0, #8
  409b8e:	429a      	cmp	r2, r3
  409b90:	f000 8121 	beq.w	409dd6 <_realloc_r+0x2be>
  409b94:	1f22      	subs	r2, r4, #4
  409b96:	2a24      	cmp	r2, #36	; 0x24
  409b98:	f200 8107 	bhi.w	409daa <_realloc_r+0x292>
  409b9c:	2a13      	cmp	r2, #19
  409b9e:	f200 80db 	bhi.w	409d58 <_realloc_r+0x240>
  409ba2:	4603      	mov	r3, r0
  409ba4:	462a      	mov	r2, r5
  409ba6:	6811      	ldr	r1, [r2, #0]
  409ba8:	6019      	str	r1, [r3, #0]
  409baa:	6851      	ldr	r1, [r2, #4]
  409bac:	6059      	str	r1, [r3, #4]
  409bae:	6892      	ldr	r2, [r2, #8]
  409bb0:	609a      	str	r2, [r3, #8]
  409bb2:	4629      	mov	r1, r5
  409bb4:	4640      	mov	r0, r8
  409bb6:	f7fe fd4f 	bl	408658 <_free_r>
  409bba:	e01c      	b.n	409bf6 <_realloc_r+0xde>
  409bbc:	f027 0707 	bic.w	r7, r7, #7
  409bc0:	2f00      	cmp	r7, #0
  409bc2:	463a      	mov	r2, r7
  409bc4:	dabf      	bge.n	409b46 <_realloc_r+0x2e>
  409bc6:	2600      	movs	r6, #0
  409bc8:	230c      	movs	r3, #12
  409bca:	4630      	mov	r0, r6
  409bcc:	f8c8 3000 	str.w	r3, [r8]
  409bd0:	b003      	add	sp, #12
  409bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409bd6:	462e      	mov	r6, r5
  409bd8:	1be3      	subs	r3, r4, r7
  409bda:	2b0f      	cmp	r3, #15
  409bdc:	d81e      	bhi.n	409c1c <_realloc_r+0x104>
  409bde:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409be2:	f003 0301 	and.w	r3, r3, #1
  409be6:	4323      	orrs	r3, r4
  409be8:	444c      	add	r4, r9
  409bea:	f8c9 3004 	str.w	r3, [r9, #4]
  409bee:	6863      	ldr	r3, [r4, #4]
  409bf0:	f043 0301 	orr.w	r3, r3, #1
  409bf4:	6063      	str	r3, [r4, #4]
  409bf6:	4640      	mov	r0, r8
  409bf8:	f7ff fc92 	bl	409520 <__malloc_unlock>
  409bfc:	4630      	mov	r0, r6
  409bfe:	b003      	add	sp, #12
  409c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c04:	f023 0303 	bic.w	r3, r3, #3
  409c08:	18e1      	adds	r1, r4, r3
  409c0a:	4291      	cmp	r1, r2
  409c0c:	db1f      	blt.n	409c4e <_realloc_r+0x136>
  409c0e:	68c3      	ldr	r3, [r0, #12]
  409c10:	6882      	ldr	r2, [r0, #8]
  409c12:	462e      	mov	r6, r5
  409c14:	60d3      	str	r3, [r2, #12]
  409c16:	460c      	mov	r4, r1
  409c18:	609a      	str	r2, [r3, #8]
  409c1a:	e7dd      	b.n	409bd8 <_realloc_r+0xc0>
  409c1c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409c20:	eb09 0107 	add.w	r1, r9, r7
  409c24:	f002 0201 	and.w	r2, r2, #1
  409c28:	444c      	add	r4, r9
  409c2a:	f043 0301 	orr.w	r3, r3, #1
  409c2e:	4317      	orrs	r7, r2
  409c30:	f8c9 7004 	str.w	r7, [r9, #4]
  409c34:	604b      	str	r3, [r1, #4]
  409c36:	6863      	ldr	r3, [r4, #4]
  409c38:	f043 0301 	orr.w	r3, r3, #1
  409c3c:	3108      	adds	r1, #8
  409c3e:	6063      	str	r3, [r4, #4]
  409c40:	4640      	mov	r0, r8
  409c42:	f7fe fd09 	bl	408658 <_free_r>
  409c46:	e7d6      	b.n	409bf6 <_realloc_r+0xde>
  409c48:	4611      	mov	r1, r2
  409c4a:	f7ff b823 	b.w	408c94 <_malloc_r>
  409c4e:	f01e 0f01 	tst.w	lr, #1
  409c52:	d18e      	bne.n	409b72 <_realloc_r+0x5a>
  409c54:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409c58:	eba9 0a01 	sub.w	sl, r9, r1
  409c5c:	f8da 1004 	ldr.w	r1, [sl, #4]
  409c60:	f021 0103 	bic.w	r1, r1, #3
  409c64:	440b      	add	r3, r1
  409c66:	4423      	add	r3, r4
  409c68:	4293      	cmp	r3, r2
  409c6a:	db25      	blt.n	409cb8 <_realloc_r+0x1a0>
  409c6c:	68c2      	ldr	r2, [r0, #12]
  409c6e:	6881      	ldr	r1, [r0, #8]
  409c70:	4656      	mov	r6, sl
  409c72:	60ca      	str	r2, [r1, #12]
  409c74:	6091      	str	r1, [r2, #8]
  409c76:	f8da 100c 	ldr.w	r1, [sl, #12]
  409c7a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409c7e:	1f22      	subs	r2, r4, #4
  409c80:	2a24      	cmp	r2, #36	; 0x24
  409c82:	60c1      	str	r1, [r0, #12]
  409c84:	6088      	str	r0, [r1, #8]
  409c86:	f200 8094 	bhi.w	409db2 <_realloc_r+0x29a>
  409c8a:	2a13      	cmp	r2, #19
  409c8c:	d96f      	bls.n	409d6e <_realloc_r+0x256>
  409c8e:	6829      	ldr	r1, [r5, #0]
  409c90:	f8ca 1008 	str.w	r1, [sl, #8]
  409c94:	6869      	ldr	r1, [r5, #4]
  409c96:	f8ca 100c 	str.w	r1, [sl, #12]
  409c9a:	2a1b      	cmp	r2, #27
  409c9c:	f200 80a2 	bhi.w	409de4 <_realloc_r+0x2cc>
  409ca0:	3508      	adds	r5, #8
  409ca2:	f10a 0210 	add.w	r2, sl, #16
  409ca6:	e063      	b.n	409d70 <_realloc_r+0x258>
  409ca8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409cac:	eba9 0a03 	sub.w	sl, r9, r3
  409cb0:	f8da 1004 	ldr.w	r1, [sl, #4]
  409cb4:	f021 0103 	bic.w	r1, r1, #3
  409cb8:	1863      	adds	r3, r4, r1
  409cba:	4293      	cmp	r3, r2
  409cbc:	f6ff af59 	blt.w	409b72 <_realloc_r+0x5a>
  409cc0:	4656      	mov	r6, sl
  409cc2:	e7d8      	b.n	409c76 <_realloc_r+0x15e>
  409cc4:	6841      	ldr	r1, [r0, #4]
  409cc6:	f021 0b03 	bic.w	fp, r1, #3
  409cca:	44a3      	add	fp, r4
  409ccc:	f107 0010 	add.w	r0, r7, #16
  409cd0:	4583      	cmp	fp, r0
  409cd2:	da56      	bge.n	409d82 <_realloc_r+0x26a>
  409cd4:	f01e 0f01 	tst.w	lr, #1
  409cd8:	f47f af4b 	bne.w	409b72 <_realloc_r+0x5a>
  409cdc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409ce0:	eba9 0a01 	sub.w	sl, r9, r1
  409ce4:	f8da 1004 	ldr.w	r1, [sl, #4]
  409ce8:	f021 0103 	bic.w	r1, r1, #3
  409cec:	448b      	add	fp, r1
  409cee:	4558      	cmp	r0, fp
  409cf0:	dce2      	bgt.n	409cb8 <_realloc_r+0x1a0>
  409cf2:	4656      	mov	r6, sl
  409cf4:	f8da 100c 	ldr.w	r1, [sl, #12]
  409cf8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409cfc:	1f22      	subs	r2, r4, #4
  409cfe:	2a24      	cmp	r2, #36	; 0x24
  409d00:	60c1      	str	r1, [r0, #12]
  409d02:	6088      	str	r0, [r1, #8]
  409d04:	f200 808f 	bhi.w	409e26 <_realloc_r+0x30e>
  409d08:	2a13      	cmp	r2, #19
  409d0a:	f240 808a 	bls.w	409e22 <_realloc_r+0x30a>
  409d0e:	6829      	ldr	r1, [r5, #0]
  409d10:	f8ca 1008 	str.w	r1, [sl, #8]
  409d14:	6869      	ldr	r1, [r5, #4]
  409d16:	f8ca 100c 	str.w	r1, [sl, #12]
  409d1a:	2a1b      	cmp	r2, #27
  409d1c:	f200 808a 	bhi.w	409e34 <_realloc_r+0x31c>
  409d20:	3508      	adds	r5, #8
  409d22:	f10a 0210 	add.w	r2, sl, #16
  409d26:	6829      	ldr	r1, [r5, #0]
  409d28:	6011      	str	r1, [r2, #0]
  409d2a:	6869      	ldr	r1, [r5, #4]
  409d2c:	6051      	str	r1, [r2, #4]
  409d2e:	68a9      	ldr	r1, [r5, #8]
  409d30:	6091      	str	r1, [r2, #8]
  409d32:	eb0a 0107 	add.w	r1, sl, r7
  409d36:	ebab 0207 	sub.w	r2, fp, r7
  409d3a:	f042 0201 	orr.w	r2, r2, #1
  409d3e:	6099      	str	r1, [r3, #8]
  409d40:	604a      	str	r2, [r1, #4]
  409d42:	f8da 3004 	ldr.w	r3, [sl, #4]
  409d46:	f003 0301 	and.w	r3, r3, #1
  409d4a:	431f      	orrs	r7, r3
  409d4c:	4640      	mov	r0, r8
  409d4e:	f8ca 7004 	str.w	r7, [sl, #4]
  409d52:	f7ff fbe5 	bl	409520 <__malloc_unlock>
  409d56:	e751      	b.n	409bfc <_realloc_r+0xe4>
  409d58:	682b      	ldr	r3, [r5, #0]
  409d5a:	6003      	str	r3, [r0, #0]
  409d5c:	686b      	ldr	r3, [r5, #4]
  409d5e:	6043      	str	r3, [r0, #4]
  409d60:	2a1b      	cmp	r2, #27
  409d62:	d82d      	bhi.n	409dc0 <_realloc_r+0x2a8>
  409d64:	f100 0308 	add.w	r3, r0, #8
  409d68:	f105 0208 	add.w	r2, r5, #8
  409d6c:	e71b      	b.n	409ba6 <_realloc_r+0x8e>
  409d6e:	4632      	mov	r2, r6
  409d70:	6829      	ldr	r1, [r5, #0]
  409d72:	6011      	str	r1, [r2, #0]
  409d74:	6869      	ldr	r1, [r5, #4]
  409d76:	6051      	str	r1, [r2, #4]
  409d78:	68a9      	ldr	r1, [r5, #8]
  409d7a:	6091      	str	r1, [r2, #8]
  409d7c:	461c      	mov	r4, r3
  409d7e:	46d1      	mov	r9, sl
  409d80:	e72a      	b.n	409bd8 <_realloc_r+0xc0>
  409d82:	eb09 0107 	add.w	r1, r9, r7
  409d86:	ebab 0b07 	sub.w	fp, fp, r7
  409d8a:	f04b 0201 	orr.w	r2, fp, #1
  409d8e:	6099      	str	r1, [r3, #8]
  409d90:	604a      	str	r2, [r1, #4]
  409d92:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409d96:	f003 0301 	and.w	r3, r3, #1
  409d9a:	431f      	orrs	r7, r3
  409d9c:	4640      	mov	r0, r8
  409d9e:	f845 7c04 	str.w	r7, [r5, #-4]
  409da2:	f7ff fbbd 	bl	409520 <__malloc_unlock>
  409da6:	462e      	mov	r6, r5
  409da8:	e728      	b.n	409bfc <_realloc_r+0xe4>
  409daa:	4629      	mov	r1, r5
  409dac:	f7ff fb52 	bl	409454 <memmove>
  409db0:	e6ff      	b.n	409bb2 <_realloc_r+0x9a>
  409db2:	4629      	mov	r1, r5
  409db4:	4630      	mov	r0, r6
  409db6:	461c      	mov	r4, r3
  409db8:	46d1      	mov	r9, sl
  409dba:	f7ff fb4b 	bl	409454 <memmove>
  409dbe:	e70b      	b.n	409bd8 <_realloc_r+0xc0>
  409dc0:	68ab      	ldr	r3, [r5, #8]
  409dc2:	6083      	str	r3, [r0, #8]
  409dc4:	68eb      	ldr	r3, [r5, #12]
  409dc6:	60c3      	str	r3, [r0, #12]
  409dc8:	2a24      	cmp	r2, #36	; 0x24
  409dca:	d017      	beq.n	409dfc <_realloc_r+0x2e4>
  409dcc:	f100 0310 	add.w	r3, r0, #16
  409dd0:	f105 0210 	add.w	r2, r5, #16
  409dd4:	e6e7      	b.n	409ba6 <_realloc_r+0x8e>
  409dd6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409dda:	f023 0303 	bic.w	r3, r3, #3
  409dde:	441c      	add	r4, r3
  409de0:	462e      	mov	r6, r5
  409de2:	e6f9      	b.n	409bd8 <_realloc_r+0xc0>
  409de4:	68a9      	ldr	r1, [r5, #8]
  409de6:	f8ca 1010 	str.w	r1, [sl, #16]
  409dea:	68e9      	ldr	r1, [r5, #12]
  409dec:	f8ca 1014 	str.w	r1, [sl, #20]
  409df0:	2a24      	cmp	r2, #36	; 0x24
  409df2:	d00c      	beq.n	409e0e <_realloc_r+0x2f6>
  409df4:	3510      	adds	r5, #16
  409df6:	f10a 0218 	add.w	r2, sl, #24
  409dfa:	e7b9      	b.n	409d70 <_realloc_r+0x258>
  409dfc:	692b      	ldr	r3, [r5, #16]
  409dfe:	6103      	str	r3, [r0, #16]
  409e00:	696b      	ldr	r3, [r5, #20]
  409e02:	6143      	str	r3, [r0, #20]
  409e04:	f105 0218 	add.w	r2, r5, #24
  409e08:	f100 0318 	add.w	r3, r0, #24
  409e0c:	e6cb      	b.n	409ba6 <_realloc_r+0x8e>
  409e0e:	692a      	ldr	r2, [r5, #16]
  409e10:	f8ca 2018 	str.w	r2, [sl, #24]
  409e14:	696a      	ldr	r2, [r5, #20]
  409e16:	f8ca 201c 	str.w	r2, [sl, #28]
  409e1a:	3518      	adds	r5, #24
  409e1c:	f10a 0220 	add.w	r2, sl, #32
  409e20:	e7a6      	b.n	409d70 <_realloc_r+0x258>
  409e22:	4632      	mov	r2, r6
  409e24:	e77f      	b.n	409d26 <_realloc_r+0x20e>
  409e26:	4629      	mov	r1, r5
  409e28:	4630      	mov	r0, r6
  409e2a:	9301      	str	r3, [sp, #4]
  409e2c:	f7ff fb12 	bl	409454 <memmove>
  409e30:	9b01      	ldr	r3, [sp, #4]
  409e32:	e77e      	b.n	409d32 <_realloc_r+0x21a>
  409e34:	68a9      	ldr	r1, [r5, #8]
  409e36:	f8ca 1010 	str.w	r1, [sl, #16]
  409e3a:	68e9      	ldr	r1, [r5, #12]
  409e3c:	f8ca 1014 	str.w	r1, [sl, #20]
  409e40:	2a24      	cmp	r2, #36	; 0x24
  409e42:	d003      	beq.n	409e4c <_realloc_r+0x334>
  409e44:	3510      	adds	r5, #16
  409e46:	f10a 0218 	add.w	r2, sl, #24
  409e4a:	e76c      	b.n	409d26 <_realloc_r+0x20e>
  409e4c:	692a      	ldr	r2, [r5, #16]
  409e4e:	f8ca 2018 	str.w	r2, [sl, #24]
  409e52:	696a      	ldr	r2, [r5, #20]
  409e54:	f8ca 201c 	str.w	r2, [sl, #28]
  409e58:	3518      	adds	r5, #24
  409e5a:	f10a 0220 	add.w	r2, sl, #32
  409e5e:	e762      	b.n	409d26 <_realloc_r+0x20e>
  409e60:	204005bc 	.word	0x204005bc

00409e64 <_sbrk_r>:
  409e64:	b538      	push	{r3, r4, r5, lr}
  409e66:	4c07      	ldr	r4, [pc, #28]	; (409e84 <_sbrk_r+0x20>)
  409e68:	2300      	movs	r3, #0
  409e6a:	4605      	mov	r5, r0
  409e6c:	4608      	mov	r0, r1
  409e6e:	6023      	str	r3, [r4, #0]
  409e70:	f7f9 ff54 	bl	403d1c <_sbrk>
  409e74:	1c43      	adds	r3, r0, #1
  409e76:	d000      	beq.n	409e7a <_sbrk_r+0x16>
  409e78:	bd38      	pop	{r3, r4, r5, pc}
  409e7a:	6823      	ldr	r3, [r4, #0]
  409e7c:	2b00      	cmp	r3, #0
  409e7e:	d0fb      	beq.n	409e78 <_sbrk_r+0x14>
  409e80:	602b      	str	r3, [r5, #0]
  409e82:	bd38      	pop	{r3, r4, r5, pc}
  409e84:	2040173c 	.word	0x2040173c

00409e88 <__sread>:
  409e88:	b510      	push	{r4, lr}
  409e8a:	460c      	mov	r4, r1
  409e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409e90:	f000 fae6 	bl	40a460 <_read_r>
  409e94:	2800      	cmp	r0, #0
  409e96:	db03      	blt.n	409ea0 <__sread+0x18>
  409e98:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409e9a:	4403      	add	r3, r0
  409e9c:	6523      	str	r3, [r4, #80]	; 0x50
  409e9e:	bd10      	pop	{r4, pc}
  409ea0:	89a3      	ldrh	r3, [r4, #12]
  409ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409ea6:	81a3      	strh	r3, [r4, #12]
  409ea8:	bd10      	pop	{r4, pc}
  409eaa:	bf00      	nop

00409eac <__swrite>:
  409eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409eb0:	4616      	mov	r6, r2
  409eb2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409eb6:	461f      	mov	r7, r3
  409eb8:	05d3      	lsls	r3, r2, #23
  409eba:	460c      	mov	r4, r1
  409ebc:	4605      	mov	r5, r0
  409ebe:	d507      	bpl.n	409ed0 <__swrite+0x24>
  409ec0:	2200      	movs	r2, #0
  409ec2:	2302      	movs	r3, #2
  409ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409ec8:	f000 fab4 	bl	40a434 <_lseek_r>
  409ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409ed4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409ed8:	81a2      	strh	r2, [r4, #12]
  409eda:	463b      	mov	r3, r7
  409edc:	4632      	mov	r2, r6
  409ede:	4628      	mov	r0, r5
  409ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409ee4:	f000 b996 	b.w	40a214 <_write_r>

00409ee8 <__sseek>:
  409ee8:	b510      	push	{r4, lr}
  409eea:	460c      	mov	r4, r1
  409eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409ef0:	f000 faa0 	bl	40a434 <_lseek_r>
  409ef4:	89a3      	ldrh	r3, [r4, #12]
  409ef6:	1c42      	adds	r2, r0, #1
  409ef8:	bf0e      	itee	eq
  409efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409f02:	6520      	strne	r0, [r4, #80]	; 0x50
  409f04:	81a3      	strh	r3, [r4, #12]
  409f06:	bd10      	pop	{r4, pc}

00409f08 <__sclose>:
  409f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409f0c:	f000 ba1a 	b.w	40a344 <_close_r>

00409f10 <strchr>:
  409f10:	b2c9      	uxtb	r1, r1
  409f12:	2900      	cmp	r1, #0
  409f14:	d041      	beq.n	409f9a <strchr+0x8a>
  409f16:	0782      	lsls	r2, r0, #30
  409f18:	b4f0      	push	{r4, r5, r6, r7}
  409f1a:	d067      	beq.n	409fec <strchr+0xdc>
  409f1c:	7803      	ldrb	r3, [r0, #0]
  409f1e:	2b00      	cmp	r3, #0
  409f20:	d068      	beq.n	409ff4 <strchr+0xe4>
  409f22:	4299      	cmp	r1, r3
  409f24:	d037      	beq.n	409f96 <strchr+0x86>
  409f26:	1c43      	adds	r3, r0, #1
  409f28:	e004      	b.n	409f34 <strchr+0x24>
  409f2a:	f813 0b01 	ldrb.w	r0, [r3], #1
  409f2e:	b390      	cbz	r0, 409f96 <strchr+0x86>
  409f30:	4281      	cmp	r1, r0
  409f32:	d02f      	beq.n	409f94 <strchr+0x84>
  409f34:	079a      	lsls	r2, r3, #30
  409f36:	461c      	mov	r4, r3
  409f38:	d1f7      	bne.n	409f2a <strchr+0x1a>
  409f3a:	6825      	ldr	r5, [r4, #0]
  409f3c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  409f40:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  409f44:	ea83 0605 	eor.w	r6, r3, r5
  409f48:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  409f4c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  409f50:	ea20 0006 	bic.w	r0, r0, r6
  409f54:	ea22 0205 	bic.w	r2, r2, r5
  409f58:	4302      	orrs	r2, r0
  409f5a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  409f5e:	d111      	bne.n	409f84 <strchr+0x74>
  409f60:	4620      	mov	r0, r4
  409f62:	f850 6f04 	ldr.w	r6, [r0, #4]!
  409f66:	ea83 0706 	eor.w	r7, r3, r6
  409f6a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  409f6e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  409f72:	ea25 0507 	bic.w	r5, r5, r7
  409f76:	ea22 0206 	bic.w	r2, r2, r6
  409f7a:	432a      	orrs	r2, r5
  409f7c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  409f80:	d0ef      	beq.n	409f62 <strchr+0x52>
  409f82:	4604      	mov	r4, r0
  409f84:	7820      	ldrb	r0, [r4, #0]
  409f86:	b918      	cbnz	r0, 409f90 <strchr+0x80>
  409f88:	e005      	b.n	409f96 <strchr+0x86>
  409f8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  409f8e:	b110      	cbz	r0, 409f96 <strchr+0x86>
  409f90:	4281      	cmp	r1, r0
  409f92:	d1fa      	bne.n	409f8a <strchr+0x7a>
  409f94:	4620      	mov	r0, r4
  409f96:	bcf0      	pop	{r4, r5, r6, r7}
  409f98:	4770      	bx	lr
  409f9a:	0783      	lsls	r3, r0, #30
  409f9c:	d024      	beq.n	409fe8 <strchr+0xd8>
  409f9e:	7803      	ldrb	r3, [r0, #0]
  409fa0:	2b00      	cmp	r3, #0
  409fa2:	d0f9      	beq.n	409f98 <strchr+0x88>
  409fa4:	1c43      	adds	r3, r0, #1
  409fa6:	e003      	b.n	409fb0 <strchr+0xa0>
  409fa8:	7802      	ldrb	r2, [r0, #0]
  409faa:	3301      	adds	r3, #1
  409fac:	2a00      	cmp	r2, #0
  409fae:	d0f3      	beq.n	409f98 <strchr+0x88>
  409fb0:	0799      	lsls	r1, r3, #30
  409fb2:	4618      	mov	r0, r3
  409fb4:	d1f8      	bne.n	409fa8 <strchr+0x98>
  409fb6:	6819      	ldr	r1, [r3, #0]
  409fb8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  409fbc:	ea22 0201 	bic.w	r2, r2, r1
  409fc0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  409fc4:	d108      	bne.n	409fd8 <strchr+0xc8>
  409fc6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  409fca:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  409fce:	ea22 0201 	bic.w	r2, r2, r1
  409fd2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  409fd6:	d0f6      	beq.n	409fc6 <strchr+0xb6>
  409fd8:	781a      	ldrb	r2, [r3, #0]
  409fda:	4618      	mov	r0, r3
  409fdc:	b142      	cbz	r2, 409ff0 <strchr+0xe0>
  409fde:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  409fe2:	2b00      	cmp	r3, #0
  409fe4:	d1fb      	bne.n	409fde <strchr+0xce>
  409fe6:	4770      	bx	lr
  409fe8:	4603      	mov	r3, r0
  409fea:	e7e4      	b.n	409fb6 <strchr+0xa6>
  409fec:	4604      	mov	r4, r0
  409fee:	e7a4      	b.n	409f3a <strchr+0x2a>
  409ff0:	4618      	mov	r0, r3
  409ff2:	4770      	bx	lr
  409ff4:	4618      	mov	r0, r3
  409ff6:	e7ce      	b.n	409f96 <strchr+0x86>

00409ff8 <__ssprint_r>:
  409ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ffc:	6893      	ldr	r3, [r2, #8]
  409ffe:	b083      	sub	sp, #12
  40a000:	4690      	mov	r8, r2
  40a002:	2b00      	cmp	r3, #0
  40a004:	d070      	beq.n	40a0e8 <__ssprint_r+0xf0>
  40a006:	4682      	mov	sl, r0
  40a008:	460c      	mov	r4, r1
  40a00a:	6817      	ldr	r7, [r2, #0]
  40a00c:	688d      	ldr	r5, [r1, #8]
  40a00e:	6808      	ldr	r0, [r1, #0]
  40a010:	e042      	b.n	40a098 <__ssprint_r+0xa0>
  40a012:	89a3      	ldrh	r3, [r4, #12]
  40a014:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a018:	d02e      	beq.n	40a078 <__ssprint_r+0x80>
  40a01a:	6965      	ldr	r5, [r4, #20]
  40a01c:	6921      	ldr	r1, [r4, #16]
  40a01e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40a022:	eba0 0b01 	sub.w	fp, r0, r1
  40a026:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40a02a:	f10b 0001 	add.w	r0, fp, #1
  40a02e:	106d      	asrs	r5, r5, #1
  40a030:	4430      	add	r0, r6
  40a032:	42a8      	cmp	r0, r5
  40a034:	462a      	mov	r2, r5
  40a036:	bf84      	itt	hi
  40a038:	4605      	movhi	r5, r0
  40a03a:	462a      	movhi	r2, r5
  40a03c:	055b      	lsls	r3, r3, #21
  40a03e:	d538      	bpl.n	40a0b2 <__ssprint_r+0xba>
  40a040:	4611      	mov	r1, r2
  40a042:	4650      	mov	r0, sl
  40a044:	f7fe fe26 	bl	408c94 <_malloc_r>
  40a048:	2800      	cmp	r0, #0
  40a04a:	d03c      	beq.n	40a0c6 <__ssprint_r+0xce>
  40a04c:	465a      	mov	r2, fp
  40a04e:	6921      	ldr	r1, [r4, #16]
  40a050:	9001      	str	r0, [sp, #4]
  40a052:	f7ff f965 	bl	409320 <memcpy>
  40a056:	89a2      	ldrh	r2, [r4, #12]
  40a058:	9b01      	ldr	r3, [sp, #4]
  40a05a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a05e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a062:	81a2      	strh	r2, [r4, #12]
  40a064:	eba5 020b 	sub.w	r2, r5, fp
  40a068:	eb03 000b 	add.w	r0, r3, fp
  40a06c:	6165      	str	r5, [r4, #20]
  40a06e:	6123      	str	r3, [r4, #16]
  40a070:	6020      	str	r0, [r4, #0]
  40a072:	60a2      	str	r2, [r4, #8]
  40a074:	4635      	mov	r5, r6
  40a076:	46b3      	mov	fp, r6
  40a078:	465a      	mov	r2, fp
  40a07a:	4649      	mov	r1, r9
  40a07c:	f7ff f9ea 	bl	409454 <memmove>
  40a080:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a084:	68a2      	ldr	r2, [r4, #8]
  40a086:	6820      	ldr	r0, [r4, #0]
  40a088:	1b55      	subs	r5, r2, r5
  40a08a:	4458      	add	r0, fp
  40a08c:	1b9e      	subs	r6, r3, r6
  40a08e:	60a5      	str	r5, [r4, #8]
  40a090:	6020      	str	r0, [r4, #0]
  40a092:	f8c8 6008 	str.w	r6, [r8, #8]
  40a096:	b33e      	cbz	r6, 40a0e8 <__ssprint_r+0xf0>
  40a098:	687e      	ldr	r6, [r7, #4]
  40a09a:	463b      	mov	r3, r7
  40a09c:	3708      	adds	r7, #8
  40a09e:	2e00      	cmp	r6, #0
  40a0a0:	d0fa      	beq.n	40a098 <__ssprint_r+0xa0>
  40a0a2:	42ae      	cmp	r6, r5
  40a0a4:	f8d3 9000 	ldr.w	r9, [r3]
  40a0a8:	46ab      	mov	fp, r5
  40a0aa:	d2b2      	bcs.n	40a012 <__ssprint_r+0x1a>
  40a0ac:	4635      	mov	r5, r6
  40a0ae:	46b3      	mov	fp, r6
  40a0b0:	e7e2      	b.n	40a078 <__ssprint_r+0x80>
  40a0b2:	4650      	mov	r0, sl
  40a0b4:	f7ff fd30 	bl	409b18 <_realloc_r>
  40a0b8:	4603      	mov	r3, r0
  40a0ba:	2800      	cmp	r0, #0
  40a0bc:	d1d2      	bne.n	40a064 <__ssprint_r+0x6c>
  40a0be:	6921      	ldr	r1, [r4, #16]
  40a0c0:	4650      	mov	r0, sl
  40a0c2:	f7fe fac9 	bl	408658 <_free_r>
  40a0c6:	230c      	movs	r3, #12
  40a0c8:	f8ca 3000 	str.w	r3, [sl]
  40a0cc:	89a3      	ldrh	r3, [r4, #12]
  40a0ce:	2200      	movs	r2, #0
  40a0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a0d4:	f04f 30ff 	mov.w	r0, #4294967295
  40a0d8:	81a3      	strh	r3, [r4, #12]
  40a0da:	f8c8 2008 	str.w	r2, [r8, #8]
  40a0de:	f8c8 2004 	str.w	r2, [r8, #4]
  40a0e2:	b003      	add	sp, #12
  40a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a0e8:	2000      	movs	r0, #0
  40a0ea:	f8c8 0004 	str.w	r0, [r8, #4]
  40a0ee:	b003      	add	sp, #12
  40a0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a0f4 <__swbuf_r>:
  40a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a0f6:	460d      	mov	r5, r1
  40a0f8:	4614      	mov	r4, r2
  40a0fa:	4606      	mov	r6, r0
  40a0fc:	b110      	cbz	r0, 40a104 <__swbuf_r+0x10>
  40a0fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a100:	2b00      	cmp	r3, #0
  40a102:	d04b      	beq.n	40a19c <__swbuf_r+0xa8>
  40a104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a108:	69a3      	ldr	r3, [r4, #24]
  40a10a:	60a3      	str	r3, [r4, #8]
  40a10c:	b291      	uxth	r1, r2
  40a10e:	0708      	lsls	r0, r1, #28
  40a110:	d539      	bpl.n	40a186 <__swbuf_r+0x92>
  40a112:	6923      	ldr	r3, [r4, #16]
  40a114:	2b00      	cmp	r3, #0
  40a116:	d036      	beq.n	40a186 <__swbuf_r+0x92>
  40a118:	b2ed      	uxtb	r5, r5
  40a11a:	0489      	lsls	r1, r1, #18
  40a11c:	462f      	mov	r7, r5
  40a11e:	d515      	bpl.n	40a14c <__swbuf_r+0x58>
  40a120:	6822      	ldr	r2, [r4, #0]
  40a122:	6961      	ldr	r1, [r4, #20]
  40a124:	1ad3      	subs	r3, r2, r3
  40a126:	428b      	cmp	r3, r1
  40a128:	da1c      	bge.n	40a164 <__swbuf_r+0x70>
  40a12a:	3301      	adds	r3, #1
  40a12c:	68a1      	ldr	r1, [r4, #8]
  40a12e:	1c50      	adds	r0, r2, #1
  40a130:	3901      	subs	r1, #1
  40a132:	60a1      	str	r1, [r4, #8]
  40a134:	6020      	str	r0, [r4, #0]
  40a136:	7015      	strb	r5, [r2, #0]
  40a138:	6962      	ldr	r2, [r4, #20]
  40a13a:	429a      	cmp	r2, r3
  40a13c:	d01a      	beq.n	40a174 <__swbuf_r+0x80>
  40a13e:	89a3      	ldrh	r3, [r4, #12]
  40a140:	07db      	lsls	r3, r3, #31
  40a142:	d501      	bpl.n	40a148 <__swbuf_r+0x54>
  40a144:	2d0a      	cmp	r5, #10
  40a146:	d015      	beq.n	40a174 <__swbuf_r+0x80>
  40a148:	4638      	mov	r0, r7
  40a14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a14c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a14e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a152:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a156:	81a2      	strh	r2, [r4, #12]
  40a158:	6822      	ldr	r2, [r4, #0]
  40a15a:	6661      	str	r1, [r4, #100]	; 0x64
  40a15c:	6961      	ldr	r1, [r4, #20]
  40a15e:	1ad3      	subs	r3, r2, r3
  40a160:	428b      	cmp	r3, r1
  40a162:	dbe2      	blt.n	40a12a <__swbuf_r+0x36>
  40a164:	4621      	mov	r1, r4
  40a166:	4630      	mov	r0, r6
  40a168:	f7fe f90c 	bl	408384 <_fflush_r>
  40a16c:	b940      	cbnz	r0, 40a180 <__swbuf_r+0x8c>
  40a16e:	6822      	ldr	r2, [r4, #0]
  40a170:	2301      	movs	r3, #1
  40a172:	e7db      	b.n	40a12c <__swbuf_r+0x38>
  40a174:	4621      	mov	r1, r4
  40a176:	4630      	mov	r0, r6
  40a178:	f7fe f904 	bl	408384 <_fflush_r>
  40a17c:	2800      	cmp	r0, #0
  40a17e:	d0e3      	beq.n	40a148 <__swbuf_r+0x54>
  40a180:	f04f 37ff 	mov.w	r7, #4294967295
  40a184:	e7e0      	b.n	40a148 <__swbuf_r+0x54>
  40a186:	4621      	mov	r1, r4
  40a188:	4630      	mov	r0, r6
  40a18a:	f7fd f827 	bl	4071dc <__swsetup_r>
  40a18e:	2800      	cmp	r0, #0
  40a190:	d1f6      	bne.n	40a180 <__swbuf_r+0x8c>
  40a192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a196:	6923      	ldr	r3, [r4, #16]
  40a198:	b291      	uxth	r1, r2
  40a19a:	e7bd      	b.n	40a118 <__swbuf_r+0x24>
  40a19c:	f7fe f986 	bl	4084ac <__sinit>
  40a1a0:	e7b0      	b.n	40a104 <__swbuf_r+0x10>
  40a1a2:	bf00      	nop

0040a1a4 <_wcrtomb_r>:
  40a1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a1a6:	4606      	mov	r6, r0
  40a1a8:	b085      	sub	sp, #20
  40a1aa:	461f      	mov	r7, r3
  40a1ac:	b189      	cbz	r1, 40a1d2 <_wcrtomb_r+0x2e>
  40a1ae:	4c10      	ldr	r4, [pc, #64]	; (40a1f0 <_wcrtomb_r+0x4c>)
  40a1b0:	4d10      	ldr	r5, [pc, #64]	; (40a1f4 <_wcrtomb_r+0x50>)
  40a1b2:	6824      	ldr	r4, [r4, #0]
  40a1b4:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a1b6:	2c00      	cmp	r4, #0
  40a1b8:	bf08      	it	eq
  40a1ba:	462c      	moveq	r4, r5
  40a1bc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a1c0:	47a0      	blx	r4
  40a1c2:	1c43      	adds	r3, r0, #1
  40a1c4:	d103      	bne.n	40a1ce <_wcrtomb_r+0x2a>
  40a1c6:	2200      	movs	r2, #0
  40a1c8:	238a      	movs	r3, #138	; 0x8a
  40a1ca:	603a      	str	r2, [r7, #0]
  40a1cc:	6033      	str	r3, [r6, #0]
  40a1ce:	b005      	add	sp, #20
  40a1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a1d2:	460c      	mov	r4, r1
  40a1d4:	4906      	ldr	r1, [pc, #24]	; (40a1f0 <_wcrtomb_r+0x4c>)
  40a1d6:	4a07      	ldr	r2, [pc, #28]	; (40a1f4 <_wcrtomb_r+0x50>)
  40a1d8:	6809      	ldr	r1, [r1, #0]
  40a1da:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a1dc:	2900      	cmp	r1, #0
  40a1de:	bf08      	it	eq
  40a1e0:	4611      	moveq	r1, r2
  40a1e2:	4622      	mov	r2, r4
  40a1e4:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a1e8:	a901      	add	r1, sp, #4
  40a1ea:	47a0      	blx	r4
  40a1ec:	e7e9      	b.n	40a1c2 <_wcrtomb_r+0x1e>
  40a1ee:	bf00      	nop
  40a1f0:	20400020 	.word	0x20400020
  40a1f4:	20400450 	.word	0x20400450

0040a1f8 <__ascii_wctomb>:
  40a1f8:	b121      	cbz	r1, 40a204 <__ascii_wctomb+0xc>
  40a1fa:	2aff      	cmp	r2, #255	; 0xff
  40a1fc:	d804      	bhi.n	40a208 <__ascii_wctomb+0x10>
  40a1fe:	700a      	strb	r2, [r1, #0]
  40a200:	2001      	movs	r0, #1
  40a202:	4770      	bx	lr
  40a204:	4608      	mov	r0, r1
  40a206:	4770      	bx	lr
  40a208:	238a      	movs	r3, #138	; 0x8a
  40a20a:	6003      	str	r3, [r0, #0]
  40a20c:	f04f 30ff 	mov.w	r0, #4294967295
  40a210:	4770      	bx	lr
  40a212:	bf00      	nop

0040a214 <_write_r>:
  40a214:	b570      	push	{r4, r5, r6, lr}
  40a216:	460d      	mov	r5, r1
  40a218:	4c08      	ldr	r4, [pc, #32]	; (40a23c <_write_r+0x28>)
  40a21a:	4611      	mov	r1, r2
  40a21c:	4606      	mov	r6, r0
  40a21e:	461a      	mov	r2, r3
  40a220:	4628      	mov	r0, r5
  40a222:	2300      	movs	r3, #0
  40a224:	6023      	str	r3, [r4, #0]
  40a226:	f7f8 feff 	bl	403028 <_write>
  40a22a:	1c43      	adds	r3, r0, #1
  40a22c:	d000      	beq.n	40a230 <_write_r+0x1c>
  40a22e:	bd70      	pop	{r4, r5, r6, pc}
  40a230:	6823      	ldr	r3, [r4, #0]
  40a232:	2b00      	cmp	r3, #0
  40a234:	d0fb      	beq.n	40a22e <_write_r+0x1a>
  40a236:	6033      	str	r3, [r6, #0]
  40a238:	bd70      	pop	{r4, r5, r6, pc}
  40a23a:	bf00      	nop
  40a23c:	2040173c 	.word	0x2040173c

0040a240 <__register_exitproc>:
  40a240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a244:	4c25      	ldr	r4, [pc, #148]	; (40a2dc <__register_exitproc+0x9c>)
  40a246:	6825      	ldr	r5, [r4, #0]
  40a248:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40a24c:	4606      	mov	r6, r0
  40a24e:	4688      	mov	r8, r1
  40a250:	4692      	mov	sl, r2
  40a252:	4699      	mov	r9, r3
  40a254:	b3c4      	cbz	r4, 40a2c8 <__register_exitproc+0x88>
  40a256:	6860      	ldr	r0, [r4, #4]
  40a258:	281f      	cmp	r0, #31
  40a25a:	dc17      	bgt.n	40a28c <__register_exitproc+0x4c>
  40a25c:	1c43      	adds	r3, r0, #1
  40a25e:	b176      	cbz	r6, 40a27e <__register_exitproc+0x3e>
  40a260:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40a264:	2201      	movs	r2, #1
  40a266:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40a26a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40a26e:	4082      	lsls	r2, r0
  40a270:	4311      	orrs	r1, r2
  40a272:	2e02      	cmp	r6, #2
  40a274:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40a278:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40a27c:	d01e      	beq.n	40a2bc <__register_exitproc+0x7c>
  40a27e:	3002      	adds	r0, #2
  40a280:	6063      	str	r3, [r4, #4]
  40a282:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40a286:	2000      	movs	r0, #0
  40a288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a28c:	4b14      	ldr	r3, [pc, #80]	; (40a2e0 <__register_exitproc+0xa0>)
  40a28e:	b303      	cbz	r3, 40a2d2 <__register_exitproc+0x92>
  40a290:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a294:	f7fe fcf6 	bl	408c84 <malloc>
  40a298:	4604      	mov	r4, r0
  40a29a:	b1d0      	cbz	r0, 40a2d2 <__register_exitproc+0x92>
  40a29c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40a2a0:	2700      	movs	r7, #0
  40a2a2:	e880 0088 	stmia.w	r0, {r3, r7}
  40a2a6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40a2aa:	4638      	mov	r0, r7
  40a2ac:	2301      	movs	r3, #1
  40a2ae:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40a2b2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40a2b6:	2e00      	cmp	r6, #0
  40a2b8:	d0e1      	beq.n	40a27e <__register_exitproc+0x3e>
  40a2ba:	e7d1      	b.n	40a260 <__register_exitproc+0x20>
  40a2bc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40a2c0:	430a      	orrs	r2, r1
  40a2c2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40a2c6:	e7da      	b.n	40a27e <__register_exitproc+0x3e>
  40a2c8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40a2cc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40a2d0:	e7c1      	b.n	40a256 <__register_exitproc+0x16>
  40a2d2:	f04f 30ff 	mov.w	r0, #4294967295
  40a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a2da:	bf00      	nop
  40a2dc:	0040bfa4 	.word	0x0040bfa4
  40a2e0:	00408c85 	.word	0x00408c85

0040a2e4 <_calloc_r>:
  40a2e4:	b510      	push	{r4, lr}
  40a2e6:	fb02 f101 	mul.w	r1, r2, r1
  40a2ea:	f7fe fcd3 	bl	408c94 <_malloc_r>
  40a2ee:	4604      	mov	r4, r0
  40a2f0:	b1d8      	cbz	r0, 40a32a <_calloc_r+0x46>
  40a2f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a2f6:	f022 0203 	bic.w	r2, r2, #3
  40a2fa:	3a04      	subs	r2, #4
  40a2fc:	2a24      	cmp	r2, #36	; 0x24
  40a2fe:	d818      	bhi.n	40a332 <_calloc_r+0x4e>
  40a300:	2a13      	cmp	r2, #19
  40a302:	d914      	bls.n	40a32e <_calloc_r+0x4a>
  40a304:	2300      	movs	r3, #0
  40a306:	2a1b      	cmp	r2, #27
  40a308:	6003      	str	r3, [r0, #0]
  40a30a:	6043      	str	r3, [r0, #4]
  40a30c:	d916      	bls.n	40a33c <_calloc_r+0x58>
  40a30e:	2a24      	cmp	r2, #36	; 0x24
  40a310:	6083      	str	r3, [r0, #8]
  40a312:	60c3      	str	r3, [r0, #12]
  40a314:	bf11      	iteee	ne
  40a316:	f100 0210 	addne.w	r2, r0, #16
  40a31a:	6103      	streq	r3, [r0, #16]
  40a31c:	6143      	streq	r3, [r0, #20]
  40a31e:	f100 0218 	addeq.w	r2, r0, #24
  40a322:	2300      	movs	r3, #0
  40a324:	6013      	str	r3, [r2, #0]
  40a326:	6053      	str	r3, [r2, #4]
  40a328:	6093      	str	r3, [r2, #8]
  40a32a:	4620      	mov	r0, r4
  40a32c:	bd10      	pop	{r4, pc}
  40a32e:	4602      	mov	r2, r0
  40a330:	e7f7      	b.n	40a322 <_calloc_r+0x3e>
  40a332:	2100      	movs	r1, #0
  40a334:	f7fa fab4 	bl	4048a0 <memset>
  40a338:	4620      	mov	r0, r4
  40a33a:	bd10      	pop	{r4, pc}
  40a33c:	f100 0208 	add.w	r2, r0, #8
  40a340:	e7ef      	b.n	40a322 <_calloc_r+0x3e>
  40a342:	bf00      	nop

0040a344 <_close_r>:
  40a344:	b538      	push	{r3, r4, r5, lr}
  40a346:	4c07      	ldr	r4, [pc, #28]	; (40a364 <_close_r+0x20>)
  40a348:	2300      	movs	r3, #0
  40a34a:	4605      	mov	r5, r0
  40a34c:	4608      	mov	r0, r1
  40a34e:	6023      	str	r3, [r4, #0]
  40a350:	f7f9 fd00 	bl	403d54 <_close>
  40a354:	1c43      	adds	r3, r0, #1
  40a356:	d000      	beq.n	40a35a <_close_r+0x16>
  40a358:	bd38      	pop	{r3, r4, r5, pc}
  40a35a:	6823      	ldr	r3, [r4, #0]
  40a35c:	2b00      	cmp	r3, #0
  40a35e:	d0fb      	beq.n	40a358 <_close_r+0x14>
  40a360:	602b      	str	r3, [r5, #0]
  40a362:	bd38      	pop	{r3, r4, r5, pc}
  40a364:	2040173c 	.word	0x2040173c

0040a368 <_fclose_r>:
  40a368:	b570      	push	{r4, r5, r6, lr}
  40a36a:	b139      	cbz	r1, 40a37c <_fclose_r+0x14>
  40a36c:	4605      	mov	r5, r0
  40a36e:	460c      	mov	r4, r1
  40a370:	b108      	cbz	r0, 40a376 <_fclose_r+0xe>
  40a372:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a374:	b383      	cbz	r3, 40a3d8 <_fclose_r+0x70>
  40a376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a37a:	b913      	cbnz	r3, 40a382 <_fclose_r+0x1a>
  40a37c:	2600      	movs	r6, #0
  40a37e:	4630      	mov	r0, r6
  40a380:	bd70      	pop	{r4, r5, r6, pc}
  40a382:	4621      	mov	r1, r4
  40a384:	4628      	mov	r0, r5
  40a386:	f7fd ff5d 	bl	408244 <__sflush_r>
  40a38a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a38c:	4606      	mov	r6, r0
  40a38e:	b133      	cbz	r3, 40a39e <_fclose_r+0x36>
  40a390:	69e1      	ldr	r1, [r4, #28]
  40a392:	4628      	mov	r0, r5
  40a394:	4798      	blx	r3
  40a396:	2800      	cmp	r0, #0
  40a398:	bfb8      	it	lt
  40a39a:	f04f 36ff 	movlt.w	r6, #4294967295
  40a39e:	89a3      	ldrh	r3, [r4, #12]
  40a3a0:	061b      	lsls	r3, r3, #24
  40a3a2:	d41c      	bmi.n	40a3de <_fclose_r+0x76>
  40a3a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a3a6:	b141      	cbz	r1, 40a3ba <_fclose_r+0x52>
  40a3a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a3ac:	4299      	cmp	r1, r3
  40a3ae:	d002      	beq.n	40a3b6 <_fclose_r+0x4e>
  40a3b0:	4628      	mov	r0, r5
  40a3b2:	f7fe f951 	bl	408658 <_free_r>
  40a3b6:	2300      	movs	r3, #0
  40a3b8:	6323      	str	r3, [r4, #48]	; 0x30
  40a3ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a3bc:	b121      	cbz	r1, 40a3c8 <_fclose_r+0x60>
  40a3be:	4628      	mov	r0, r5
  40a3c0:	f7fe f94a 	bl	408658 <_free_r>
  40a3c4:	2300      	movs	r3, #0
  40a3c6:	6463      	str	r3, [r4, #68]	; 0x44
  40a3c8:	f7fe f876 	bl	4084b8 <__sfp_lock_acquire>
  40a3cc:	2300      	movs	r3, #0
  40a3ce:	81a3      	strh	r3, [r4, #12]
  40a3d0:	f7fe f874 	bl	4084bc <__sfp_lock_release>
  40a3d4:	4630      	mov	r0, r6
  40a3d6:	bd70      	pop	{r4, r5, r6, pc}
  40a3d8:	f7fe f868 	bl	4084ac <__sinit>
  40a3dc:	e7cb      	b.n	40a376 <_fclose_r+0xe>
  40a3de:	6921      	ldr	r1, [r4, #16]
  40a3e0:	4628      	mov	r0, r5
  40a3e2:	f7fe f939 	bl	408658 <_free_r>
  40a3e6:	e7dd      	b.n	40a3a4 <_fclose_r+0x3c>

0040a3e8 <_fstat_r>:
  40a3e8:	b538      	push	{r3, r4, r5, lr}
  40a3ea:	460b      	mov	r3, r1
  40a3ec:	4c07      	ldr	r4, [pc, #28]	; (40a40c <_fstat_r+0x24>)
  40a3ee:	4605      	mov	r5, r0
  40a3f0:	4611      	mov	r1, r2
  40a3f2:	4618      	mov	r0, r3
  40a3f4:	2300      	movs	r3, #0
  40a3f6:	6023      	str	r3, [r4, #0]
  40a3f8:	f7f9 fcaf 	bl	403d5a <_fstat>
  40a3fc:	1c43      	adds	r3, r0, #1
  40a3fe:	d000      	beq.n	40a402 <_fstat_r+0x1a>
  40a400:	bd38      	pop	{r3, r4, r5, pc}
  40a402:	6823      	ldr	r3, [r4, #0]
  40a404:	2b00      	cmp	r3, #0
  40a406:	d0fb      	beq.n	40a400 <_fstat_r+0x18>
  40a408:	602b      	str	r3, [r5, #0]
  40a40a:	bd38      	pop	{r3, r4, r5, pc}
  40a40c:	2040173c 	.word	0x2040173c

0040a410 <_isatty_r>:
  40a410:	b538      	push	{r3, r4, r5, lr}
  40a412:	4c07      	ldr	r4, [pc, #28]	; (40a430 <_isatty_r+0x20>)
  40a414:	2300      	movs	r3, #0
  40a416:	4605      	mov	r5, r0
  40a418:	4608      	mov	r0, r1
  40a41a:	6023      	str	r3, [r4, #0]
  40a41c:	f7f9 fca2 	bl	403d64 <_isatty>
  40a420:	1c43      	adds	r3, r0, #1
  40a422:	d000      	beq.n	40a426 <_isatty_r+0x16>
  40a424:	bd38      	pop	{r3, r4, r5, pc}
  40a426:	6823      	ldr	r3, [r4, #0]
  40a428:	2b00      	cmp	r3, #0
  40a42a:	d0fb      	beq.n	40a424 <_isatty_r+0x14>
  40a42c:	602b      	str	r3, [r5, #0]
  40a42e:	bd38      	pop	{r3, r4, r5, pc}
  40a430:	2040173c 	.word	0x2040173c

0040a434 <_lseek_r>:
  40a434:	b570      	push	{r4, r5, r6, lr}
  40a436:	460d      	mov	r5, r1
  40a438:	4c08      	ldr	r4, [pc, #32]	; (40a45c <_lseek_r+0x28>)
  40a43a:	4611      	mov	r1, r2
  40a43c:	4606      	mov	r6, r0
  40a43e:	461a      	mov	r2, r3
  40a440:	4628      	mov	r0, r5
  40a442:	2300      	movs	r3, #0
  40a444:	6023      	str	r3, [r4, #0]
  40a446:	f7f9 fc8f 	bl	403d68 <_lseek>
  40a44a:	1c43      	adds	r3, r0, #1
  40a44c:	d000      	beq.n	40a450 <_lseek_r+0x1c>
  40a44e:	bd70      	pop	{r4, r5, r6, pc}
  40a450:	6823      	ldr	r3, [r4, #0]
  40a452:	2b00      	cmp	r3, #0
  40a454:	d0fb      	beq.n	40a44e <_lseek_r+0x1a>
  40a456:	6033      	str	r3, [r6, #0]
  40a458:	bd70      	pop	{r4, r5, r6, pc}
  40a45a:	bf00      	nop
  40a45c:	2040173c 	.word	0x2040173c

0040a460 <_read_r>:
  40a460:	b570      	push	{r4, r5, r6, lr}
  40a462:	460d      	mov	r5, r1
  40a464:	4c08      	ldr	r4, [pc, #32]	; (40a488 <_read_r+0x28>)
  40a466:	4611      	mov	r1, r2
  40a468:	4606      	mov	r6, r0
  40a46a:	461a      	mov	r2, r3
  40a46c:	4628      	mov	r0, r5
  40a46e:	2300      	movs	r3, #0
  40a470:	6023      	str	r3, [r4, #0]
  40a472:	f7f8 fdbb 	bl	402fec <_read>
  40a476:	1c43      	adds	r3, r0, #1
  40a478:	d000      	beq.n	40a47c <_read_r+0x1c>
  40a47a:	bd70      	pop	{r4, r5, r6, pc}
  40a47c:	6823      	ldr	r3, [r4, #0]
  40a47e:	2b00      	cmp	r3, #0
  40a480:	d0fb      	beq.n	40a47a <_read_r+0x1a>
  40a482:	6033      	str	r3, [r6, #0]
  40a484:	bd70      	pop	{r4, r5, r6, pc}
  40a486:	bf00      	nop
  40a488:	2040173c 	.word	0x2040173c

0040a48c <__aeabi_drsub>:
  40a48c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a490:	e002      	b.n	40a498 <__adddf3>
  40a492:	bf00      	nop

0040a494 <__aeabi_dsub>:
  40a494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a498 <__adddf3>:
  40a498:	b530      	push	{r4, r5, lr}
  40a49a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a49e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a4a2:	ea94 0f05 	teq	r4, r5
  40a4a6:	bf08      	it	eq
  40a4a8:	ea90 0f02 	teqeq	r0, r2
  40a4ac:	bf1f      	itttt	ne
  40a4ae:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a4b2:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a4b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a4ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a4be:	f000 80e2 	beq.w	40a686 <__adddf3+0x1ee>
  40a4c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a4c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a4ca:	bfb8      	it	lt
  40a4cc:	426d      	neglt	r5, r5
  40a4ce:	dd0c      	ble.n	40a4ea <__adddf3+0x52>
  40a4d0:	442c      	add	r4, r5
  40a4d2:	ea80 0202 	eor.w	r2, r0, r2
  40a4d6:	ea81 0303 	eor.w	r3, r1, r3
  40a4da:	ea82 0000 	eor.w	r0, r2, r0
  40a4de:	ea83 0101 	eor.w	r1, r3, r1
  40a4e2:	ea80 0202 	eor.w	r2, r0, r2
  40a4e6:	ea81 0303 	eor.w	r3, r1, r3
  40a4ea:	2d36      	cmp	r5, #54	; 0x36
  40a4ec:	bf88      	it	hi
  40a4ee:	bd30      	pophi	{r4, r5, pc}
  40a4f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a4f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a4f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a4fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a500:	d002      	beq.n	40a508 <__adddf3+0x70>
  40a502:	4240      	negs	r0, r0
  40a504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a508:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a50c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a514:	d002      	beq.n	40a51c <__adddf3+0x84>
  40a516:	4252      	negs	r2, r2
  40a518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a51c:	ea94 0f05 	teq	r4, r5
  40a520:	f000 80a7 	beq.w	40a672 <__adddf3+0x1da>
  40a524:	f1a4 0401 	sub.w	r4, r4, #1
  40a528:	f1d5 0e20 	rsbs	lr, r5, #32
  40a52c:	db0d      	blt.n	40a54a <__adddf3+0xb2>
  40a52e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a532:	fa22 f205 	lsr.w	r2, r2, r5
  40a536:	1880      	adds	r0, r0, r2
  40a538:	f141 0100 	adc.w	r1, r1, #0
  40a53c:	fa03 f20e 	lsl.w	r2, r3, lr
  40a540:	1880      	adds	r0, r0, r2
  40a542:	fa43 f305 	asr.w	r3, r3, r5
  40a546:	4159      	adcs	r1, r3
  40a548:	e00e      	b.n	40a568 <__adddf3+0xd0>
  40a54a:	f1a5 0520 	sub.w	r5, r5, #32
  40a54e:	f10e 0e20 	add.w	lr, lr, #32
  40a552:	2a01      	cmp	r2, #1
  40a554:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a558:	bf28      	it	cs
  40a55a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a55e:	fa43 f305 	asr.w	r3, r3, r5
  40a562:	18c0      	adds	r0, r0, r3
  40a564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a56c:	d507      	bpl.n	40a57e <__adddf3+0xe6>
  40a56e:	f04f 0e00 	mov.w	lr, #0
  40a572:	f1dc 0c00 	rsbs	ip, ip, #0
  40a576:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a57a:	eb6e 0101 	sbc.w	r1, lr, r1
  40a57e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a582:	d31b      	bcc.n	40a5bc <__adddf3+0x124>
  40a584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a588:	d30c      	bcc.n	40a5a4 <__adddf3+0x10c>
  40a58a:	0849      	lsrs	r1, r1, #1
  40a58c:	ea5f 0030 	movs.w	r0, r0, rrx
  40a590:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a594:	f104 0401 	add.w	r4, r4, #1
  40a598:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a59c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a5a0:	f080 809a 	bcs.w	40a6d8 <__adddf3+0x240>
  40a5a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a5a8:	bf08      	it	eq
  40a5aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a5ae:	f150 0000 	adcs.w	r0, r0, #0
  40a5b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a5b6:	ea41 0105 	orr.w	r1, r1, r5
  40a5ba:	bd30      	pop	{r4, r5, pc}
  40a5bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a5c0:	4140      	adcs	r0, r0
  40a5c2:	eb41 0101 	adc.w	r1, r1, r1
  40a5c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a5ca:	f1a4 0401 	sub.w	r4, r4, #1
  40a5ce:	d1e9      	bne.n	40a5a4 <__adddf3+0x10c>
  40a5d0:	f091 0f00 	teq	r1, #0
  40a5d4:	bf04      	itt	eq
  40a5d6:	4601      	moveq	r1, r0
  40a5d8:	2000      	moveq	r0, #0
  40a5da:	fab1 f381 	clz	r3, r1
  40a5de:	bf08      	it	eq
  40a5e0:	3320      	addeq	r3, #32
  40a5e2:	f1a3 030b 	sub.w	r3, r3, #11
  40a5e6:	f1b3 0220 	subs.w	r2, r3, #32
  40a5ea:	da0c      	bge.n	40a606 <__adddf3+0x16e>
  40a5ec:	320c      	adds	r2, #12
  40a5ee:	dd08      	ble.n	40a602 <__adddf3+0x16a>
  40a5f0:	f102 0c14 	add.w	ip, r2, #20
  40a5f4:	f1c2 020c 	rsb	r2, r2, #12
  40a5f8:	fa01 f00c 	lsl.w	r0, r1, ip
  40a5fc:	fa21 f102 	lsr.w	r1, r1, r2
  40a600:	e00c      	b.n	40a61c <__adddf3+0x184>
  40a602:	f102 0214 	add.w	r2, r2, #20
  40a606:	bfd8      	it	le
  40a608:	f1c2 0c20 	rsble	ip, r2, #32
  40a60c:	fa01 f102 	lsl.w	r1, r1, r2
  40a610:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a614:	bfdc      	itt	le
  40a616:	ea41 010c 	orrle.w	r1, r1, ip
  40a61a:	4090      	lslle	r0, r2
  40a61c:	1ae4      	subs	r4, r4, r3
  40a61e:	bfa2      	ittt	ge
  40a620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a624:	4329      	orrge	r1, r5
  40a626:	bd30      	popge	{r4, r5, pc}
  40a628:	ea6f 0404 	mvn.w	r4, r4
  40a62c:	3c1f      	subs	r4, #31
  40a62e:	da1c      	bge.n	40a66a <__adddf3+0x1d2>
  40a630:	340c      	adds	r4, #12
  40a632:	dc0e      	bgt.n	40a652 <__adddf3+0x1ba>
  40a634:	f104 0414 	add.w	r4, r4, #20
  40a638:	f1c4 0220 	rsb	r2, r4, #32
  40a63c:	fa20 f004 	lsr.w	r0, r0, r4
  40a640:	fa01 f302 	lsl.w	r3, r1, r2
  40a644:	ea40 0003 	orr.w	r0, r0, r3
  40a648:	fa21 f304 	lsr.w	r3, r1, r4
  40a64c:	ea45 0103 	orr.w	r1, r5, r3
  40a650:	bd30      	pop	{r4, r5, pc}
  40a652:	f1c4 040c 	rsb	r4, r4, #12
  40a656:	f1c4 0220 	rsb	r2, r4, #32
  40a65a:	fa20 f002 	lsr.w	r0, r0, r2
  40a65e:	fa01 f304 	lsl.w	r3, r1, r4
  40a662:	ea40 0003 	orr.w	r0, r0, r3
  40a666:	4629      	mov	r1, r5
  40a668:	bd30      	pop	{r4, r5, pc}
  40a66a:	fa21 f004 	lsr.w	r0, r1, r4
  40a66e:	4629      	mov	r1, r5
  40a670:	bd30      	pop	{r4, r5, pc}
  40a672:	f094 0f00 	teq	r4, #0
  40a676:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a67a:	bf06      	itte	eq
  40a67c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a680:	3401      	addeq	r4, #1
  40a682:	3d01      	subne	r5, #1
  40a684:	e74e      	b.n	40a524 <__adddf3+0x8c>
  40a686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a68a:	bf18      	it	ne
  40a68c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a690:	d029      	beq.n	40a6e6 <__adddf3+0x24e>
  40a692:	ea94 0f05 	teq	r4, r5
  40a696:	bf08      	it	eq
  40a698:	ea90 0f02 	teqeq	r0, r2
  40a69c:	d005      	beq.n	40a6aa <__adddf3+0x212>
  40a69e:	ea54 0c00 	orrs.w	ip, r4, r0
  40a6a2:	bf04      	itt	eq
  40a6a4:	4619      	moveq	r1, r3
  40a6a6:	4610      	moveq	r0, r2
  40a6a8:	bd30      	pop	{r4, r5, pc}
  40a6aa:	ea91 0f03 	teq	r1, r3
  40a6ae:	bf1e      	ittt	ne
  40a6b0:	2100      	movne	r1, #0
  40a6b2:	2000      	movne	r0, #0
  40a6b4:	bd30      	popne	{r4, r5, pc}
  40a6b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a6ba:	d105      	bne.n	40a6c8 <__adddf3+0x230>
  40a6bc:	0040      	lsls	r0, r0, #1
  40a6be:	4149      	adcs	r1, r1
  40a6c0:	bf28      	it	cs
  40a6c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a6c6:	bd30      	pop	{r4, r5, pc}
  40a6c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a6cc:	bf3c      	itt	cc
  40a6ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a6d2:	bd30      	popcc	{r4, r5, pc}
  40a6d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a6d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a6dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a6e0:	f04f 0000 	mov.w	r0, #0
  40a6e4:	bd30      	pop	{r4, r5, pc}
  40a6e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a6ea:	bf1a      	itte	ne
  40a6ec:	4619      	movne	r1, r3
  40a6ee:	4610      	movne	r0, r2
  40a6f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a6f4:	bf1c      	itt	ne
  40a6f6:	460b      	movne	r3, r1
  40a6f8:	4602      	movne	r2, r0
  40a6fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a6fe:	bf06      	itte	eq
  40a700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a704:	ea91 0f03 	teqeq	r1, r3
  40a708:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a70c:	bd30      	pop	{r4, r5, pc}
  40a70e:	bf00      	nop

0040a710 <__aeabi_ui2d>:
  40a710:	f090 0f00 	teq	r0, #0
  40a714:	bf04      	itt	eq
  40a716:	2100      	moveq	r1, #0
  40a718:	4770      	bxeq	lr
  40a71a:	b530      	push	{r4, r5, lr}
  40a71c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a720:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a724:	f04f 0500 	mov.w	r5, #0
  40a728:	f04f 0100 	mov.w	r1, #0
  40a72c:	e750      	b.n	40a5d0 <__adddf3+0x138>
  40a72e:	bf00      	nop

0040a730 <__aeabi_i2d>:
  40a730:	f090 0f00 	teq	r0, #0
  40a734:	bf04      	itt	eq
  40a736:	2100      	moveq	r1, #0
  40a738:	4770      	bxeq	lr
  40a73a:	b530      	push	{r4, r5, lr}
  40a73c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a740:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a744:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a748:	bf48      	it	mi
  40a74a:	4240      	negmi	r0, r0
  40a74c:	f04f 0100 	mov.w	r1, #0
  40a750:	e73e      	b.n	40a5d0 <__adddf3+0x138>
  40a752:	bf00      	nop

0040a754 <__aeabi_f2d>:
  40a754:	0042      	lsls	r2, r0, #1
  40a756:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a75a:	ea4f 0131 	mov.w	r1, r1, rrx
  40a75e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a762:	bf1f      	itttt	ne
  40a764:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a76c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a770:	4770      	bxne	lr
  40a772:	f092 0f00 	teq	r2, #0
  40a776:	bf14      	ite	ne
  40a778:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a77c:	4770      	bxeq	lr
  40a77e:	b530      	push	{r4, r5, lr}
  40a780:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a78c:	e720      	b.n	40a5d0 <__adddf3+0x138>
  40a78e:	bf00      	nop

0040a790 <__aeabi_ul2d>:
  40a790:	ea50 0201 	orrs.w	r2, r0, r1
  40a794:	bf08      	it	eq
  40a796:	4770      	bxeq	lr
  40a798:	b530      	push	{r4, r5, lr}
  40a79a:	f04f 0500 	mov.w	r5, #0
  40a79e:	e00a      	b.n	40a7b6 <__aeabi_l2d+0x16>

0040a7a0 <__aeabi_l2d>:
  40a7a0:	ea50 0201 	orrs.w	r2, r0, r1
  40a7a4:	bf08      	it	eq
  40a7a6:	4770      	bxeq	lr
  40a7a8:	b530      	push	{r4, r5, lr}
  40a7aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a7ae:	d502      	bpl.n	40a7b6 <__aeabi_l2d+0x16>
  40a7b0:	4240      	negs	r0, r0
  40a7b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a7b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a7ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a7be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a7c2:	f43f aedc 	beq.w	40a57e <__adddf3+0xe6>
  40a7c6:	f04f 0203 	mov.w	r2, #3
  40a7ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a7ce:	bf18      	it	ne
  40a7d0:	3203      	addne	r2, #3
  40a7d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a7d6:	bf18      	it	ne
  40a7d8:	3203      	addne	r2, #3
  40a7da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a7de:	f1c2 0320 	rsb	r3, r2, #32
  40a7e2:	fa00 fc03 	lsl.w	ip, r0, r3
  40a7e6:	fa20 f002 	lsr.w	r0, r0, r2
  40a7ea:	fa01 fe03 	lsl.w	lr, r1, r3
  40a7ee:	ea40 000e 	orr.w	r0, r0, lr
  40a7f2:	fa21 f102 	lsr.w	r1, r1, r2
  40a7f6:	4414      	add	r4, r2
  40a7f8:	e6c1      	b.n	40a57e <__adddf3+0xe6>
  40a7fa:	bf00      	nop

0040a7fc <__aeabi_dmul>:
  40a7fc:	b570      	push	{r4, r5, r6, lr}
  40a7fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a80a:	bf1d      	ittte	ne
  40a80c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a810:	ea94 0f0c 	teqne	r4, ip
  40a814:	ea95 0f0c 	teqne	r5, ip
  40a818:	f000 f8de 	bleq	40a9d8 <__aeabi_dmul+0x1dc>
  40a81c:	442c      	add	r4, r5
  40a81e:	ea81 0603 	eor.w	r6, r1, r3
  40a822:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a826:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a82a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a82e:	bf18      	it	ne
  40a830:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a834:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a83c:	d038      	beq.n	40a8b0 <__aeabi_dmul+0xb4>
  40a83e:	fba0 ce02 	umull	ip, lr, r0, r2
  40a842:	f04f 0500 	mov.w	r5, #0
  40a846:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a84a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a84e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a852:	f04f 0600 	mov.w	r6, #0
  40a856:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a85a:	f09c 0f00 	teq	ip, #0
  40a85e:	bf18      	it	ne
  40a860:	f04e 0e01 	orrne.w	lr, lr, #1
  40a864:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a868:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a86c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a870:	d204      	bcs.n	40a87c <__aeabi_dmul+0x80>
  40a872:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a876:	416d      	adcs	r5, r5
  40a878:	eb46 0606 	adc.w	r6, r6, r6
  40a87c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a880:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a884:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a888:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a88c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a890:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a894:	bf88      	it	hi
  40a896:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a89a:	d81e      	bhi.n	40a8da <__aeabi_dmul+0xde>
  40a89c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a8a0:	bf08      	it	eq
  40a8a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a8a6:	f150 0000 	adcs.w	r0, r0, #0
  40a8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a8ae:	bd70      	pop	{r4, r5, r6, pc}
  40a8b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a8b4:	ea46 0101 	orr.w	r1, r6, r1
  40a8b8:	ea40 0002 	orr.w	r0, r0, r2
  40a8bc:	ea81 0103 	eor.w	r1, r1, r3
  40a8c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a8c4:	bfc2      	ittt	gt
  40a8c6:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a8ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a8ce:	bd70      	popgt	{r4, r5, r6, pc}
  40a8d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a8d4:	f04f 0e00 	mov.w	lr, #0
  40a8d8:	3c01      	subs	r4, #1
  40a8da:	f300 80ab 	bgt.w	40aa34 <__aeabi_dmul+0x238>
  40a8de:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a8e2:	bfde      	ittt	le
  40a8e4:	2000      	movle	r0, #0
  40a8e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a8ea:	bd70      	pople	{r4, r5, r6, pc}
  40a8ec:	f1c4 0400 	rsb	r4, r4, #0
  40a8f0:	3c20      	subs	r4, #32
  40a8f2:	da35      	bge.n	40a960 <__aeabi_dmul+0x164>
  40a8f4:	340c      	adds	r4, #12
  40a8f6:	dc1b      	bgt.n	40a930 <__aeabi_dmul+0x134>
  40a8f8:	f104 0414 	add.w	r4, r4, #20
  40a8fc:	f1c4 0520 	rsb	r5, r4, #32
  40a900:	fa00 f305 	lsl.w	r3, r0, r5
  40a904:	fa20 f004 	lsr.w	r0, r0, r4
  40a908:	fa01 f205 	lsl.w	r2, r1, r5
  40a90c:	ea40 0002 	orr.w	r0, r0, r2
  40a910:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a914:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a918:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a91c:	fa21 f604 	lsr.w	r6, r1, r4
  40a920:	eb42 0106 	adc.w	r1, r2, r6
  40a924:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a928:	bf08      	it	eq
  40a92a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a92e:	bd70      	pop	{r4, r5, r6, pc}
  40a930:	f1c4 040c 	rsb	r4, r4, #12
  40a934:	f1c4 0520 	rsb	r5, r4, #32
  40a938:	fa00 f304 	lsl.w	r3, r0, r4
  40a93c:	fa20 f005 	lsr.w	r0, r0, r5
  40a940:	fa01 f204 	lsl.w	r2, r1, r4
  40a944:	ea40 0002 	orr.w	r0, r0, r2
  40a948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a94c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a950:	f141 0100 	adc.w	r1, r1, #0
  40a954:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a958:	bf08      	it	eq
  40a95a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a95e:	bd70      	pop	{r4, r5, r6, pc}
  40a960:	f1c4 0520 	rsb	r5, r4, #32
  40a964:	fa00 f205 	lsl.w	r2, r0, r5
  40a968:	ea4e 0e02 	orr.w	lr, lr, r2
  40a96c:	fa20 f304 	lsr.w	r3, r0, r4
  40a970:	fa01 f205 	lsl.w	r2, r1, r5
  40a974:	ea43 0302 	orr.w	r3, r3, r2
  40a978:	fa21 f004 	lsr.w	r0, r1, r4
  40a97c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a980:	fa21 f204 	lsr.w	r2, r1, r4
  40a984:	ea20 0002 	bic.w	r0, r0, r2
  40a988:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a98c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a990:	bf08      	it	eq
  40a992:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a996:	bd70      	pop	{r4, r5, r6, pc}
  40a998:	f094 0f00 	teq	r4, #0
  40a99c:	d10f      	bne.n	40a9be <__aeabi_dmul+0x1c2>
  40a99e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a9a2:	0040      	lsls	r0, r0, #1
  40a9a4:	eb41 0101 	adc.w	r1, r1, r1
  40a9a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a9ac:	bf08      	it	eq
  40a9ae:	3c01      	subeq	r4, #1
  40a9b0:	d0f7      	beq.n	40a9a2 <__aeabi_dmul+0x1a6>
  40a9b2:	ea41 0106 	orr.w	r1, r1, r6
  40a9b6:	f095 0f00 	teq	r5, #0
  40a9ba:	bf18      	it	ne
  40a9bc:	4770      	bxne	lr
  40a9be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a9c2:	0052      	lsls	r2, r2, #1
  40a9c4:	eb43 0303 	adc.w	r3, r3, r3
  40a9c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a9cc:	bf08      	it	eq
  40a9ce:	3d01      	subeq	r5, #1
  40a9d0:	d0f7      	beq.n	40a9c2 <__aeabi_dmul+0x1c6>
  40a9d2:	ea43 0306 	orr.w	r3, r3, r6
  40a9d6:	4770      	bx	lr
  40a9d8:	ea94 0f0c 	teq	r4, ip
  40a9dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a9e0:	bf18      	it	ne
  40a9e2:	ea95 0f0c 	teqne	r5, ip
  40a9e6:	d00c      	beq.n	40aa02 <__aeabi_dmul+0x206>
  40a9e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a9ec:	bf18      	it	ne
  40a9ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a9f2:	d1d1      	bne.n	40a998 <__aeabi_dmul+0x19c>
  40a9f4:	ea81 0103 	eor.w	r1, r1, r3
  40a9f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a9fc:	f04f 0000 	mov.w	r0, #0
  40aa00:	bd70      	pop	{r4, r5, r6, pc}
  40aa02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aa06:	bf06      	itte	eq
  40aa08:	4610      	moveq	r0, r2
  40aa0a:	4619      	moveq	r1, r3
  40aa0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40aa10:	d019      	beq.n	40aa46 <__aeabi_dmul+0x24a>
  40aa12:	ea94 0f0c 	teq	r4, ip
  40aa16:	d102      	bne.n	40aa1e <__aeabi_dmul+0x222>
  40aa18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40aa1c:	d113      	bne.n	40aa46 <__aeabi_dmul+0x24a>
  40aa1e:	ea95 0f0c 	teq	r5, ip
  40aa22:	d105      	bne.n	40aa30 <__aeabi_dmul+0x234>
  40aa24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40aa28:	bf1c      	itt	ne
  40aa2a:	4610      	movne	r0, r2
  40aa2c:	4619      	movne	r1, r3
  40aa2e:	d10a      	bne.n	40aa46 <__aeabi_dmul+0x24a>
  40aa30:	ea81 0103 	eor.w	r1, r1, r3
  40aa34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aa38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40aa3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40aa40:	f04f 0000 	mov.w	r0, #0
  40aa44:	bd70      	pop	{r4, r5, r6, pc}
  40aa46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40aa4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40aa4e:	bd70      	pop	{r4, r5, r6, pc}

0040aa50 <__aeabi_ddiv>:
  40aa50:	b570      	push	{r4, r5, r6, lr}
  40aa52:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40aa56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40aa5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40aa5e:	bf1d      	ittte	ne
  40aa60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40aa64:	ea94 0f0c 	teqne	r4, ip
  40aa68:	ea95 0f0c 	teqne	r5, ip
  40aa6c:	f000 f8a7 	bleq	40abbe <__aeabi_ddiv+0x16e>
  40aa70:	eba4 0405 	sub.w	r4, r4, r5
  40aa74:	ea81 0e03 	eor.w	lr, r1, r3
  40aa78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40aa7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40aa80:	f000 8088 	beq.w	40ab94 <__aeabi_ddiv+0x144>
  40aa84:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40aa88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40aa8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40aa90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40aa94:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40aa98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40aa9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40aaa0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40aaa4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40aaa8:	429d      	cmp	r5, r3
  40aaaa:	bf08      	it	eq
  40aaac:	4296      	cmpeq	r6, r2
  40aaae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40aab2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40aab6:	d202      	bcs.n	40aabe <__aeabi_ddiv+0x6e>
  40aab8:	085b      	lsrs	r3, r3, #1
  40aaba:	ea4f 0232 	mov.w	r2, r2, rrx
  40aabe:	1ab6      	subs	r6, r6, r2
  40aac0:	eb65 0503 	sbc.w	r5, r5, r3
  40aac4:	085b      	lsrs	r3, r3, #1
  40aac6:	ea4f 0232 	mov.w	r2, r2, rrx
  40aaca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40aace:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40aad2:	ebb6 0e02 	subs.w	lr, r6, r2
  40aad6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aada:	bf22      	ittt	cs
  40aadc:	1ab6      	subcs	r6, r6, r2
  40aade:	4675      	movcs	r5, lr
  40aae0:	ea40 000c 	orrcs.w	r0, r0, ip
  40aae4:	085b      	lsrs	r3, r3, #1
  40aae6:	ea4f 0232 	mov.w	r2, r2, rrx
  40aaea:	ebb6 0e02 	subs.w	lr, r6, r2
  40aaee:	eb75 0e03 	sbcs.w	lr, r5, r3
  40aaf2:	bf22      	ittt	cs
  40aaf4:	1ab6      	subcs	r6, r6, r2
  40aaf6:	4675      	movcs	r5, lr
  40aaf8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40aafc:	085b      	lsrs	r3, r3, #1
  40aafe:	ea4f 0232 	mov.w	r2, r2, rrx
  40ab02:	ebb6 0e02 	subs.w	lr, r6, r2
  40ab06:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ab0a:	bf22      	ittt	cs
  40ab0c:	1ab6      	subcs	r6, r6, r2
  40ab0e:	4675      	movcs	r5, lr
  40ab10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ab14:	085b      	lsrs	r3, r3, #1
  40ab16:	ea4f 0232 	mov.w	r2, r2, rrx
  40ab1a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ab1e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ab22:	bf22      	ittt	cs
  40ab24:	1ab6      	subcs	r6, r6, r2
  40ab26:	4675      	movcs	r5, lr
  40ab28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ab2c:	ea55 0e06 	orrs.w	lr, r5, r6
  40ab30:	d018      	beq.n	40ab64 <__aeabi_ddiv+0x114>
  40ab32:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40ab36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40ab3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40ab3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40ab42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40ab46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40ab4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40ab4e:	d1c0      	bne.n	40aad2 <__aeabi_ddiv+0x82>
  40ab50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ab54:	d10b      	bne.n	40ab6e <__aeabi_ddiv+0x11e>
  40ab56:	ea41 0100 	orr.w	r1, r1, r0
  40ab5a:	f04f 0000 	mov.w	r0, #0
  40ab5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40ab62:	e7b6      	b.n	40aad2 <__aeabi_ddiv+0x82>
  40ab64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ab68:	bf04      	itt	eq
  40ab6a:	4301      	orreq	r1, r0
  40ab6c:	2000      	moveq	r0, #0
  40ab6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ab72:	bf88      	it	hi
  40ab74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ab78:	f63f aeaf 	bhi.w	40a8da <__aeabi_dmul+0xde>
  40ab7c:	ebb5 0c03 	subs.w	ip, r5, r3
  40ab80:	bf04      	itt	eq
  40ab82:	ebb6 0c02 	subseq.w	ip, r6, r2
  40ab86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ab8a:	f150 0000 	adcs.w	r0, r0, #0
  40ab8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ab92:	bd70      	pop	{r4, r5, r6, pc}
  40ab94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40ab98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40ab9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40aba0:	bfc2      	ittt	gt
  40aba2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40aba6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40abaa:	bd70      	popgt	{r4, r5, r6, pc}
  40abac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40abb0:	f04f 0e00 	mov.w	lr, #0
  40abb4:	3c01      	subs	r4, #1
  40abb6:	e690      	b.n	40a8da <__aeabi_dmul+0xde>
  40abb8:	ea45 0e06 	orr.w	lr, r5, r6
  40abbc:	e68d      	b.n	40a8da <__aeabi_dmul+0xde>
  40abbe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40abc2:	ea94 0f0c 	teq	r4, ip
  40abc6:	bf08      	it	eq
  40abc8:	ea95 0f0c 	teqeq	r5, ip
  40abcc:	f43f af3b 	beq.w	40aa46 <__aeabi_dmul+0x24a>
  40abd0:	ea94 0f0c 	teq	r4, ip
  40abd4:	d10a      	bne.n	40abec <__aeabi_ddiv+0x19c>
  40abd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40abda:	f47f af34 	bne.w	40aa46 <__aeabi_dmul+0x24a>
  40abde:	ea95 0f0c 	teq	r5, ip
  40abe2:	f47f af25 	bne.w	40aa30 <__aeabi_dmul+0x234>
  40abe6:	4610      	mov	r0, r2
  40abe8:	4619      	mov	r1, r3
  40abea:	e72c      	b.n	40aa46 <__aeabi_dmul+0x24a>
  40abec:	ea95 0f0c 	teq	r5, ip
  40abf0:	d106      	bne.n	40ac00 <__aeabi_ddiv+0x1b0>
  40abf2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40abf6:	f43f aefd 	beq.w	40a9f4 <__aeabi_dmul+0x1f8>
  40abfa:	4610      	mov	r0, r2
  40abfc:	4619      	mov	r1, r3
  40abfe:	e722      	b.n	40aa46 <__aeabi_dmul+0x24a>
  40ac00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ac04:	bf18      	it	ne
  40ac06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ac0a:	f47f aec5 	bne.w	40a998 <__aeabi_dmul+0x19c>
  40ac0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40ac12:	f47f af0d 	bne.w	40aa30 <__aeabi_dmul+0x234>
  40ac16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40ac1a:	f47f aeeb 	bne.w	40a9f4 <__aeabi_dmul+0x1f8>
  40ac1e:	e712      	b.n	40aa46 <__aeabi_dmul+0x24a>

0040ac20 <__gedf2>:
  40ac20:	f04f 3cff 	mov.w	ip, #4294967295
  40ac24:	e006      	b.n	40ac34 <__cmpdf2+0x4>
  40ac26:	bf00      	nop

0040ac28 <__ledf2>:
  40ac28:	f04f 0c01 	mov.w	ip, #1
  40ac2c:	e002      	b.n	40ac34 <__cmpdf2+0x4>
  40ac2e:	bf00      	nop

0040ac30 <__cmpdf2>:
  40ac30:	f04f 0c01 	mov.w	ip, #1
  40ac34:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ac38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ac3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ac40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ac44:	bf18      	it	ne
  40ac46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40ac4a:	d01b      	beq.n	40ac84 <__cmpdf2+0x54>
  40ac4c:	b001      	add	sp, #4
  40ac4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40ac52:	bf0c      	ite	eq
  40ac54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ac58:	ea91 0f03 	teqne	r1, r3
  40ac5c:	bf02      	ittt	eq
  40ac5e:	ea90 0f02 	teqeq	r0, r2
  40ac62:	2000      	moveq	r0, #0
  40ac64:	4770      	bxeq	lr
  40ac66:	f110 0f00 	cmn.w	r0, #0
  40ac6a:	ea91 0f03 	teq	r1, r3
  40ac6e:	bf58      	it	pl
  40ac70:	4299      	cmppl	r1, r3
  40ac72:	bf08      	it	eq
  40ac74:	4290      	cmpeq	r0, r2
  40ac76:	bf2c      	ite	cs
  40ac78:	17d8      	asrcs	r0, r3, #31
  40ac7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ac7e:	f040 0001 	orr.w	r0, r0, #1
  40ac82:	4770      	bx	lr
  40ac84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ac88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ac8c:	d102      	bne.n	40ac94 <__cmpdf2+0x64>
  40ac8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ac92:	d107      	bne.n	40aca4 <__cmpdf2+0x74>
  40ac94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ac98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ac9c:	d1d6      	bne.n	40ac4c <__cmpdf2+0x1c>
  40ac9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40aca2:	d0d3      	beq.n	40ac4c <__cmpdf2+0x1c>
  40aca4:	f85d 0b04 	ldr.w	r0, [sp], #4
  40aca8:	4770      	bx	lr
  40acaa:	bf00      	nop

0040acac <__aeabi_cdrcmple>:
  40acac:	4684      	mov	ip, r0
  40acae:	4610      	mov	r0, r2
  40acb0:	4662      	mov	r2, ip
  40acb2:	468c      	mov	ip, r1
  40acb4:	4619      	mov	r1, r3
  40acb6:	4663      	mov	r3, ip
  40acb8:	e000      	b.n	40acbc <__aeabi_cdcmpeq>
  40acba:	bf00      	nop

0040acbc <__aeabi_cdcmpeq>:
  40acbc:	b501      	push	{r0, lr}
  40acbe:	f7ff ffb7 	bl	40ac30 <__cmpdf2>
  40acc2:	2800      	cmp	r0, #0
  40acc4:	bf48      	it	mi
  40acc6:	f110 0f00 	cmnmi.w	r0, #0
  40acca:	bd01      	pop	{r0, pc}

0040accc <__aeabi_dcmpeq>:
  40accc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40acd0:	f7ff fff4 	bl	40acbc <__aeabi_cdcmpeq>
  40acd4:	bf0c      	ite	eq
  40acd6:	2001      	moveq	r0, #1
  40acd8:	2000      	movne	r0, #0
  40acda:	f85d fb08 	ldr.w	pc, [sp], #8
  40acde:	bf00      	nop

0040ace0 <__aeabi_dcmplt>:
  40ace0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ace4:	f7ff ffea 	bl	40acbc <__aeabi_cdcmpeq>
  40ace8:	bf34      	ite	cc
  40acea:	2001      	movcc	r0, #1
  40acec:	2000      	movcs	r0, #0
  40acee:	f85d fb08 	ldr.w	pc, [sp], #8
  40acf2:	bf00      	nop

0040acf4 <__aeabi_dcmple>:
  40acf4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40acf8:	f7ff ffe0 	bl	40acbc <__aeabi_cdcmpeq>
  40acfc:	bf94      	ite	ls
  40acfe:	2001      	movls	r0, #1
  40ad00:	2000      	movhi	r0, #0
  40ad02:	f85d fb08 	ldr.w	pc, [sp], #8
  40ad06:	bf00      	nop

0040ad08 <__aeabi_dcmpge>:
  40ad08:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ad0c:	f7ff ffce 	bl	40acac <__aeabi_cdrcmple>
  40ad10:	bf94      	ite	ls
  40ad12:	2001      	movls	r0, #1
  40ad14:	2000      	movhi	r0, #0
  40ad16:	f85d fb08 	ldr.w	pc, [sp], #8
  40ad1a:	bf00      	nop

0040ad1c <__aeabi_dcmpgt>:
  40ad1c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ad20:	f7ff ffc4 	bl	40acac <__aeabi_cdrcmple>
  40ad24:	bf34      	ite	cc
  40ad26:	2001      	movcc	r0, #1
  40ad28:	2000      	movcs	r0, #0
  40ad2a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ad2e:	bf00      	nop

0040ad30 <__aeabi_dcmpun>:
  40ad30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ad34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad38:	d102      	bne.n	40ad40 <__aeabi_dcmpun+0x10>
  40ad3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ad3e:	d10a      	bne.n	40ad56 <__aeabi_dcmpun+0x26>
  40ad40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ad44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad48:	d102      	bne.n	40ad50 <__aeabi_dcmpun+0x20>
  40ad4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ad4e:	d102      	bne.n	40ad56 <__aeabi_dcmpun+0x26>
  40ad50:	f04f 0000 	mov.w	r0, #0
  40ad54:	4770      	bx	lr
  40ad56:	f04f 0001 	mov.w	r0, #1
  40ad5a:	4770      	bx	lr

0040ad5c <__aeabi_d2iz>:
  40ad5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ad60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ad64:	d215      	bcs.n	40ad92 <__aeabi_d2iz+0x36>
  40ad66:	d511      	bpl.n	40ad8c <__aeabi_d2iz+0x30>
  40ad68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ad6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ad70:	d912      	bls.n	40ad98 <__aeabi_d2iz+0x3c>
  40ad72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ad76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ad7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ad7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ad82:	fa23 f002 	lsr.w	r0, r3, r2
  40ad86:	bf18      	it	ne
  40ad88:	4240      	negne	r0, r0
  40ad8a:	4770      	bx	lr
  40ad8c:	f04f 0000 	mov.w	r0, #0
  40ad90:	4770      	bx	lr
  40ad92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ad96:	d105      	bne.n	40ada4 <__aeabi_d2iz+0x48>
  40ad98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40ad9c:	bf08      	it	eq
  40ad9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ada2:	4770      	bx	lr
  40ada4:	f04f 0000 	mov.w	r0, #0
  40ada8:	4770      	bx	lr
  40adaa:	bf00      	nop

0040adac <__aeabi_uldivmod>:
  40adac:	b953      	cbnz	r3, 40adc4 <__aeabi_uldivmod+0x18>
  40adae:	b94a      	cbnz	r2, 40adc4 <__aeabi_uldivmod+0x18>
  40adb0:	2900      	cmp	r1, #0
  40adb2:	bf08      	it	eq
  40adb4:	2800      	cmpeq	r0, #0
  40adb6:	bf1c      	itt	ne
  40adb8:	f04f 31ff 	movne.w	r1, #4294967295
  40adbc:	f04f 30ff 	movne.w	r0, #4294967295
  40adc0:	f000 b97a 	b.w	40b0b8 <__aeabi_idiv0>
  40adc4:	f1ad 0c08 	sub.w	ip, sp, #8
  40adc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40adcc:	f000 f806 	bl	40addc <__udivmoddi4>
  40add0:	f8dd e004 	ldr.w	lr, [sp, #4]
  40add4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40add8:	b004      	add	sp, #16
  40adda:	4770      	bx	lr

0040addc <__udivmoddi4>:
  40addc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ade0:	468c      	mov	ip, r1
  40ade2:	460d      	mov	r5, r1
  40ade4:	4604      	mov	r4, r0
  40ade6:	9e08      	ldr	r6, [sp, #32]
  40ade8:	2b00      	cmp	r3, #0
  40adea:	d151      	bne.n	40ae90 <__udivmoddi4+0xb4>
  40adec:	428a      	cmp	r2, r1
  40adee:	4617      	mov	r7, r2
  40adf0:	d96d      	bls.n	40aece <__udivmoddi4+0xf2>
  40adf2:	fab2 fe82 	clz	lr, r2
  40adf6:	f1be 0f00 	cmp.w	lr, #0
  40adfa:	d00b      	beq.n	40ae14 <__udivmoddi4+0x38>
  40adfc:	f1ce 0c20 	rsb	ip, lr, #32
  40ae00:	fa01 f50e 	lsl.w	r5, r1, lr
  40ae04:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ae08:	fa02 f70e 	lsl.w	r7, r2, lr
  40ae0c:	ea4c 0c05 	orr.w	ip, ip, r5
  40ae10:	fa00 f40e 	lsl.w	r4, r0, lr
  40ae14:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40ae18:	0c25      	lsrs	r5, r4, #16
  40ae1a:	fbbc f8fa 	udiv	r8, ip, sl
  40ae1e:	fa1f f987 	uxth.w	r9, r7
  40ae22:	fb0a cc18 	mls	ip, sl, r8, ip
  40ae26:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40ae2a:	fb08 f309 	mul.w	r3, r8, r9
  40ae2e:	42ab      	cmp	r3, r5
  40ae30:	d90a      	bls.n	40ae48 <__udivmoddi4+0x6c>
  40ae32:	19ed      	adds	r5, r5, r7
  40ae34:	f108 32ff 	add.w	r2, r8, #4294967295
  40ae38:	f080 8123 	bcs.w	40b082 <__udivmoddi4+0x2a6>
  40ae3c:	42ab      	cmp	r3, r5
  40ae3e:	f240 8120 	bls.w	40b082 <__udivmoddi4+0x2a6>
  40ae42:	f1a8 0802 	sub.w	r8, r8, #2
  40ae46:	443d      	add	r5, r7
  40ae48:	1aed      	subs	r5, r5, r3
  40ae4a:	b2a4      	uxth	r4, r4
  40ae4c:	fbb5 f0fa 	udiv	r0, r5, sl
  40ae50:	fb0a 5510 	mls	r5, sl, r0, r5
  40ae54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40ae58:	fb00 f909 	mul.w	r9, r0, r9
  40ae5c:	45a1      	cmp	r9, r4
  40ae5e:	d909      	bls.n	40ae74 <__udivmoddi4+0x98>
  40ae60:	19e4      	adds	r4, r4, r7
  40ae62:	f100 33ff 	add.w	r3, r0, #4294967295
  40ae66:	f080 810a 	bcs.w	40b07e <__udivmoddi4+0x2a2>
  40ae6a:	45a1      	cmp	r9, r4
  40ae6c:	f240 8107 	bls.w	40b07e <__udivmoddi4+0x2a2>
  40ae70:	3802      	subs	r0, #2
  40ae72:	443c      	add	r4, r7
  40ae74:	eba4 0409 	sub.w	r4, r4, r9
  40ae78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40ae7c:	2100      	movs	r1, #0
  40ae7e:	2e00      	cmp	r6, #0
  40ae80:	d061      	beq.n	40af46 <__udivmoddi4+0x16a>
  40ae82:	fa24 f40e 	lsr.w	r4, r4, lr
  40ae86:	2300      	movs	r3, #0
  40ae88:	6034      	str	r4, [r6, #0]
  40ae8a:	6073      	str	r3, [r6, #4]
  40ae8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae90:	428b      	cmp	r3, r1
  40ae92:	d907      	bls.n	40aea4 <__udivmoddi4+0xc8>
  40ae94:	2e00      	cmp	r6, #0
  40ae96:	d054      	beq.n	40af42 <__udivmoddi4+0x166>
  40ae98:	2100      	movs	r1, #0
  40ae9a:	e886 0021 	stmia.w	r6, {r0, r5}
  40ae9e:	4608      	mov	r0, r1
  40aea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aea4:	fab3 f183 	clz	r1, r3
  40aea8:	2900      	cmp	r1, #0
  40aeaa:	f040 808e 	bne.w	40afca <__udivmoddi4+0x1ee>
  40aeae:	42ab      	cmp	r3, r5
  40aeb0:	d302      	bcc.n	40aeb8 <__udivmoddi4+0xdc>
  40aeb2:	4282      	cmp	r2, r0
  40aeb4:	f200 80fa 	bhi.w	40b0ac <__udivmoddi4+0x2d0>
  40aeb8:	1a84      	subs	r4, r0, r2
  40aeba:	eb65 0503 	sbc.w	r5, r5, r3
  40aebe:	2001      	movs	r0, #1
  40aec0:	46ac      	mov	ip, r5
  40aec2:	2e00      	cmp	r6, #0
  40aec4:	d03f      	beq.n	40af46 <__udivmoddi4+0x16a>
  40aec6:	e886 1010 	stmia.w	r6, {r4, ip}
  40aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aece:	b912      	cbnz	r2, 40aed6 <__udivmoddi4+0xfa>
  40aed0:	2701      	movs	r7, #1
  40aed2:	fbb7 f7f2 	udiv	r7, r7, r2
  40aed6:	fab7 fe87 	clz	lr, r7
  40aeda:	f1be 0f00 	cmp.w	lr, #0
  40aede:	d134      	bne.n	40af4a <__udivmoddi4+0x16e>
  40aee0:	1beb      	subs	r3, r5, r7
  40aee2:	0c3a      	lsrs	r2, r7, #16
  40aee4:	fa1f fc87 	uxth.w	ip, r7
  40aee8:	2101      	movs	r1, #1
  40aeea:	fbb3 f8f2 	udiv	r8, r3, r2
  40aeee:	0c25      	lsrs	r5, r4, #16
  40aef0:	fb02 3318 	mls	r3, r2, r8, r3
  40aef4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40aef8:	fb0c f308 	mul.w	r3, ip, r8
  40aefc:	42ab      	cmp	r3, r5
  40aefe:	d907      	bls.n	40af10 <__udivmoddi4+0x134>
  40af00:	19ed      	adds	r5, r5, r7
  40af02:	f108 30ff 	add.w	r0, r8, #4294967295
  40af06:	d202      	bcs.n	40af0e <__udivmoddi4+0x132>
  40af08:	42ab      	cmp	r3, r5
  40af0a:	f200 80d1 	bhi.w	40b0b0 <__udivmoddi4+0x2d4>
  40af0e:	4680      	mov	r8, r0
  40af10:	1aed      	subs	r5, r5, r3
  40af12:	b2a3      	uxth	r3, r4
  40af14:	fbb5 f0f2 	udiv	r0, r5, r2
  40af18:	fb02 5510 	mls	r5, r2, r0, r5
  40af1c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40af20:	fb0c fc00 	mul.w	ip, ip, r0
  40af24:	45a4      	cmp	ip, r4
  40af26:	d907      	bls.n	40af38 <__udivmoddi4+0x15c>
  40af28:	19e4      	adds	r4, r4, r7
  40af2a:	f100 33ff 	add.w	r3, r0, #4294967295
  40af2e:	d202      	bcs.n	40af36 <__udivmoddi4+0x15a>
  40af30:	45a4      	cmp	ip, r4
  40af32:	f200 80b8 	bhi.w	40b0a6 <__udivmoddi4+0x2ca>
  40af36:	4618      	mov	r0, r3
  40af38:	eba4 040c 	sub.w	r4, r4, ip
  40af3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40af40:	e79d      	b.n	40ae7e <__udivmoddi4+0xa2>
  40af42:	4631      	mov	r1, r6
  40af44:	4630      	mov	r0, r6
  40af46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40af4a:	f1ce 0420 	rsb	r4, lr, #32
  40af4e:	fa05 f30e 	lsl.w	r3, r5, lr
  40af52:	fa07 f70e 	lsl.w	r7, r7, lr
  40af56:	fa20 f804 	lsr.w	r8, r0, r4
  40af5a:	0c3a      	lsrs	r2, r7, #16
  40af5c:	fa25 f404 	lsr.w	r4, r5, r4
  40af60:	ea48 0803 	orr.w	r8, r8, r3
  40af64:	fbb4 f1f2 	udiv	r1, r4, r2
  40af68:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40af6c:	fb02 4411 	mls	r4, r2, r1, r4
  40af70:	fa1f fc87 	uxth.w	ip, r7
  40af74:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40af78:	fb01 f30c 	mul.w	r3, r1, ip
  40af7c:	42ab      	cmp	r3, r5
  40af7e:	fa00 f40e 	lsl.w	r4, r0, lr
  40af82:	d909      	bls.n	40af98 <__udivmoddi4+0x1bc>
  40af84:	19ed      	adds	r5, r5, r7
  40af86:	f101 30ff 	add.w	r0, r1, #4294967295
  40af8a:	f080 808a 	bcs.w	40b0a2 <__udivmoddi4+0x2c6>
  40af8e:	42ab      	cmp	r3, r5
  40af90:	f240 8087 	bls.w	40b0a2 <__udivmoddi4+0x2c6>
  40af94:	3902      	subs	r1, #2
  40af96:	443d      	add	r5, r7
  40af98:	1aeb      	subs	r3, r5, r3
  40af9a:	fa1f f588 	uxth.w	r5, r8
  40af9e:	fbb3 f0f2 	udiv	r0, r3, r2
  40afa2:	fb02 3310 	mls	r3, r2, r0, r3
  40afa6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40afaa:	fb00 f30c 	mul.w	r3, r0, ip
  40afae:	42ab      	cmp	r3, r5
  40afb0:	d907      	bls.n	40afc2 <__udivmoddi4+0x1e6>
  40afb2:	19ed      	adds	r5, r5, r7
  40afb4:	f100 38ff 	add.w	r8, r0, #4294967295
  40afb8:	d26f      	bcs.n	40b09a <__udivmoddi4+0x2be>
  40afba:	42ab      	cmp	r3, r5
  40afbc:	d96d      	bls.n	40b09a <__udivmoddi4+0x2be>
  40afbe:	3802      	subs	r0, #2
  40afc0:	443d      	add	r5, r7
  40afc2:	1aeb      	subs	r3, r5, r3
  40afc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40afc8:	e78f      	b.n	40aeea <__udivmoddi4+0x10e>
  40afca:	f1c1 0720 	rsb	r7, r1, #32
  40afce:	fa22 f807 	lsr.w	r8, r2, r7
  40afd2:	408b      	lsls	r3, r1
  40afd4:	fa05 f401 	lsl.w	r4, r5, r1
  40afd8:	ea48 0303 	orr.w	r3, r8, r3
  40afdc:	fa20 fe07 	lsr.w	lr, r0, r7
  40afe0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40afe4:	40fd      	lsrs	r5, r7
  40afe6:	ea4e 0e04 	orr.w	lr, lr, r4
  40afea:	fbb5 f9fc 	udiv	r9, r5, ip
  40afee:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40aff2:	fb0c 5519 	mls	r5, ip, r9, r5
  40aff6:	fa1f f883 	uxth.w	r8, r3
  40affa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40affe:	fb09 f408 	mul.w	r4, r9, r8
  40b002:	42ac      	cmp	r4, r5
  40b004:	fa02 f201 	lsl.w	r2, r2, r1
  40b008:	fa00 fa01 	lsl.w	sl, r0, r1
  40b00c:	d908      	bls.n	40b020 <__udivmoddi4+0x244>
  40b00e:	18ed      	adds	r5, r5, r3
  40b010:	f109 30ff 	add.w	r0, r9, #4294967295
  40b014:	d243      	bcs.n	40b09e <__udivmoddi4+0x2c2>
  40b016:	42ac      	cmp	r4, r5
  40b018:	d941      	bls.n	40b09e <__udivmoddi4+0x2c2>
  40b01a:	f1a9 0902 	sub.w	r9, r9, #2
  40b01e:	441d      	add	r5, r3
  40b020:	1b2d      	subs	r5, r5, r4
  40b022:	fa1f fe8e 	uxth.w	lr, lr
  40b026:	fbb5 f0fc 	udiv	r0, r5, ip
  40b02a:	fb0c 5510 	mls	r5, ip, r0, r5
  40b02e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40b032:	fb00 f808 	mul.w	r8, r0, r8
  40b036:	45a0      	cmp	r8, r4
  40b038:	d907      	bls.n	40b04a <__udivmoddi4+0x26e>
  40b03a:	18e4      	adds	r4, r4, r3
  40b03c:	f100 35ff 	add.w	r5, r0, #4294967295
  40b040:	d229      	bcs.n	40b096 <__udivmoddi4+0x2ba>
  40b042:	45a0      	cmp	r8, r4
  40b044:	d927      	bls.n	40b096 <__udivmoddi4+0x2ba>
  40b046:	3802      	subs	r0, #2
  40b048:	441c      	add	r4, r3
  40b04a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40b04e:	eba4 0408 	sub.w	r4, r4, r8
  40b052:	fba0 8902 	umull	r8, r9, r0, r2
  40b056:	454c      	cmp	r4, r9
  40b058:	46c6      	mov	lr, r8
  40b05a:	464d      	mov	r5, r9
  40b05c:	d315      	bcc.n	40b08a <__udivmoddi4+0x2ae>
  40b05e:	d012      	beq.n	40b086 <__udivmoddi4+0x2aa>
  40b060:	b156      	cbz	r6, 40b078 <__udivmoddi4+0x29c>
  40b062:	ebba 030e 	subs.w	r3, sl, lr
  40b066:	eb64 0405 	sbc.w	r4, r4, r5
  40b06a:	fa04 f707 	lsl.w	r7, r4, r7
  40b06e:	40cb      	lsrs	r3, r1
  40b070:	431f      	orrs	r7, r3
  40b072:	40cc      	lsrs	r4, r1
  40b074:	6037      	str	r7, [r6, #0]
  40b076:	6074      	str	r4, [r6, #4]
  40b078:	2100      	movs	r1, #0
  40b07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b07e:	4618      	mov	r0, r3
  40b080:	e6f8      	b.n	40ae74 <__udivmoddi4+0x98>
  40b082:	4690      	mov	r8, r2
  40b084:	e6e0      	b.n	40ae48 <__udivmoddi4+0x6c>
  40b086:	45c2      	cmp	sl, r8
  40b088:	d2ea      	bcs.n	40b060 <__udivmoddi4+0x284>
  40b08a:	ebb8 0e02 	subs.w	lr, r8, r2
  40b08e:	eb69 0503 	sbc.w	r5, r9, r3
  40b092:	3801      	subs	r0, #1
  40b094:	e7e4      	b.n	40b060 <__udivmoddi4+0x284>
  40b096:	4628      	mov	r0, r5
  40b098:	e7d7      	b.n	40b04a <__udivmoddi4+0x26e>
  40b09a:	4640      	mov	r0, r8
  40b09c:	e791      	b.n	40afc2 <__udivmoddi4+0x1e6>
  40b09e:	4681      	mov	r9, r0
  40b0a0:	e7be      	b.n	40b020 <__udivmoddi4+0x244>
  40b0a2:	4601      	mov	r1, r0
  40b0a4:	e778      	b.n	40af98 <__udivmoddi4+0x1bc>
  40b0a6:	3802      	subs	r0, #2
  40b0a8:	443c      	add	r4, r7
  40b0aa:	e745      	b.n	40af38 <__udivmoddi4+0x15c>
  40b0ac:	4608      	mov	r0, r1
  40b0ae:	e708      	b.n	40aec2 <__udivmoddi4+0xe6>
  40b0b0:	f1a8 0802 	sub.w	r8, r8, #2
  40b0b4:	443d      	add	r5, r7
  40b0b6:	e72b      	b.n	40af10 <__udivmoddi4+0x134>

0040b0b8 <__aeabi_idiv0>:
  40b0b8:	4770      	bx	lr
  40b0ba:	bf00      	nop

0040b0bc <__FUNCTION__.11050>:
  40b0bc:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  40b0cc:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  40b0dc:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  40b0ec:	204c 6f63 6d6d 6e61 2164 000a 000d 0000     L command!......

0040b0fc <__FUNCTION__.9877>:
  40b0fc:	6968 5f66 6573 646e 0000 0000               hif_send....

0040b108 <__FUNCTION__.9887>:
  40b108:	6968 5f66 7369 0072                         hif_isr.

0040b110 <__FUNCTION__.9893>:
  40b110:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0040b120 <__FUNCTION__.9908>:
  40b120:	6968 5f66 6572 6563 7669 0065               hif_receive.

0040b12c <__FUNCTION__.9923>:
  40b12c:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
  40b13c:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
  40b14c:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
  40b15c:	6961 0a6c 0000 0000 6828 6669 2029 6461     ail.....(hif) ad
  40b16c:	7264 7365 2073 7562 2073 6166 6c69 000a     dress bus fail..
  40b17c:	6828 6669 2029 6f43 7272 7075 6574 2064     (hif) Corrupted 
  40b18c:	6170 6b63 7465 5320 7a69 2065 203d 7525     packet Size = %u
  40b19c:	3c20 204c 203d 7525 202c 2047 203d 7525      <L = %u, G = %u
  40b1ac:	202c 504f 3d20 2520 3230 3e58 000a 0000     , OP = %02X>....
  40b1bc:	6828 6669 2029 6e69 6176 696c 2064 7267     (hif) invalid gr
  40b1cc:	756f 2070 4449 000a 6828 6669 2029 6f68     oup ID..(hif) ho
  40b1dc:	7473 6120 7070 6420 6469 276e 2074 6573     st app didn't se
  40b1ec:	2074 5852 4420 6e6f 0a65 0000 6828 6669     t RX Done...(hif
  40b1fc:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
  40b20c:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
  40b21c:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
  40b22c:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
  40b23c:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
  40b24c:	6828 6669 2029 4146 4c49 7420 206f 6177     (hif) FAIL to wa
  40b25c:	656b 7075 7420 6568 6320 6968 0a70 0000     keup the chip...
  40b26c:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
  40b27c:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
  40b28c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
  40b29c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
  40b2ac:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
  40b2bc:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
  40b2cc:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
  40b2dc:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
  40b2ec:	6666 7265 7320 7a69 2065 253c 3e64 253c     ffer size <%d><%
  40b2fc:	3e64 000a 5041 2050 6552 7571 7365 6574     d>..APP Requeste
  40b30c:	2064 6441 7264 7365 2073 6562 6f79 646e     d Address beyond
  40b31c:	7420 6568 7220 6365 7669 6465 6220 6675      the recived buf
  40b32c:	6566 2072 6461 7264 7365 2073 6e61 2064     fer address and 
  40b33c:	656c 676e 6874 000a 5247 2070 203f 6425     length..GRp ? %d
  40b34c:	000a 0000 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
  40b35c:	7720 6b61 7075 7420 6568 6320 6968 0a70      wakup the chip.
  40b36c:	0000 0000                                   ....

0040b370 <__FUNCTION__.9850>:
  40b370:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0040b37c <__FUNCTION__.9874>:
  40b37c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0040b38c <__FUNCTION__.9902>:
  40b38c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  40b39c:	735f 0063 4128 5050 2829 4e49 4f46 0029     _sc.(APP)(INFO).
  40b3ac:	6f43 666e 696c 7463 6465 4920 2050 2022     Conflicted IP " 
  40b3bc:	7525 252e 2e75 7525 252e 2075 2022 000a     %u.%u.%u.%u " ..
  40b3cc:	4552 2051 6f4e 2074 6564 6966 656e 2064     REQ Not defined 
  40b3dc:	6425 000a 654b 2079 7369 6e20 746f 7620     %d..Key is not v
  40b3ec:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
  40b3fc:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
  40b40c:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
  40b41c:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
  40b42c:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
  40b43c:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
  40b44c:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
  40b45c:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
  40b46c:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
  40b47c:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
  40b48c:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  40b49c:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  40b4ac:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  40b4bc:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  40b4cc:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  40b4dc:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  40b4ec:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...

0040b4fc <__FUNCTION__.9687>:
  40b4fc:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.

0040b50c <__FUNCTION__.9781>:
  40b50c:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
  40b51c:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  40b52c:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  40b53c:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  40b54c:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  40b55c:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  40b56c:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  40b57c:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40b58c:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  40b59c:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40b5ac:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  40b5bc:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  40b5cc:	000a 0000 6572 3a67 7825 2f20 2520 2078     ....reg:%x / %x 
  40b5dc:	000a 0000                                   ....

0040b5e0 <__FUNCTION__.9768>:
  40b5e0:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0040b5ec <__FUNCTION__.9775>:
  40b5ec:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
  40b5fc:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
  40b60c:	645f 6965 696e 2074 6166 6c69 000a 0000     _deinit fail....
  40b61c:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
  40b62c:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
  40b63c:	6c69 000a 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
  40b64c:	6166 6c69 6920 696e 2074 7562 0a73 0000     fail init bus...
  40b65c:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
  40b66c:	6920 746e 7265 7572 7470 2e73 0a2e 0000      interrupts.....
  40b67c:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  40b68c:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  40b69c:	4920 2044 6c25 0a78 0000 0000                ID %lx.....

0040b6a8 <__FUNCTION__.9152>:
  40b6a8:	7073 5f69 6d63 0064                         spi_cmd.

0040b6b0 <__FUNCTION__.9160>:
  40b6b0:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0040b6bc <__FUNCTION__.9176>:
  40b6bc:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0040b6cc <__FUNCTION__.9191>:
  40b6cc:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0040b6dc <__FUNCTION__.9201>:
  40b6dc:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0040b6ec <__FUNCTION__.9209>:
  40b6ec:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0040b6fc <__FUNCTION__.9218>:
  40b6fc:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0040b70c <__FUNCTION__.9226>:
  40b70c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0040b718 <__FUNCTION__.9243>:
  40b718:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0040b724 <crc7_syndrome_table>:
  40b724:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  40b734:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  40b744:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  40b754:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  40b764:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  40b774:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  40b784:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  40b794:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  40b7a4:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  40b7b4:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  40b7c4:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  40b7d4:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  40b7e4:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  40b7f4:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  40b804:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  40b814:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
  40b824:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40b834:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40b844:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  40b854:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  40b864:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  40b874:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40b884:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40b894:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  40b8a4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40b8b4:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  40b8c4:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  40b8d4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40b8e4:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  40b8f4:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  40b904:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40b914:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  40b924:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  40b934:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40b944:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40b954:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  40b964:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40b974:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  40b984:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  40b994:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40b9a4:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  40b9b4:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  40b9c4:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  40b9d4:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  40b9e4:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  40b9f4:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40ba04:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40ba14:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  40ba24:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  40ba34:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  40ba44:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  40ba54:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  40ba64:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40ba74:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  40ba84:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  40ba94:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  40baa4:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  40bab4:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......
  40bac4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bad4:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  40bae4:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  40baf4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40bb04:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  40bb14:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  40bb24:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bb34:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  40bb44:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  40bb54:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40bb64:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  40bb74:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  40bb84:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  40bb94:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40bba4:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  40bbb4:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  40bbc4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  40bbd4:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  40bbe4:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  40bbf4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bc04:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  40bc14:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  40bc24:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40bc34:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40bc44:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  40bc54:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bc64:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  40bc74:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bc84:	2064 6d63 2c64 7720 6972 6574 7220 6765     d cmd, write reg
  40bc94:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
  40bca4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40bcb4:	2064 6572 7073 6e6f 6573 202c 7277 7469     d response, writ
  40bcc4:	2065 6572 2067 2528 3830 2978 2e2e 0a2e     e reg (%08x)....
  40bcd4:	0000 0000 4528 5252 2952 7543 7272 6e65     ....(ERRR)Curren
  40bce4:	2074 253c 3e64 000a 0a21 0000 0a23 0000     t <%d>..!...#...
  40bcf4:	4547 0054 7325 2520 2073 7325 7325 0000     GET.%s %s %s%s..
  40bd04:	5448 5054 312f 312e 0a0d 0000 4f50 5453     HTTP/1.1....POST
  40bd14:	0000 0000 7325 2520 2073 7325 7325 7325     ....%s %s %s%s%s
  40bd24:	7325 7325 0000 0000 5448 5054 312f 312e     %s%s....HTTP/1.1
  40bd34:	0a0d 6f43 746e 6e65 2d74 7954 6570 203a     ..Content-Type: 
  40bd44:	7061 6c70 6369 7461 6f69 2f6e 2d78 7777     application/x-ww
  40bd54:	2d77 6f66 6d72 752d 6c72 6e65 6f63 6564     w-form-urlencode
  40bd64:	0d64 430a 6e6f 6574 746e 4c2d 6e65 7467     d..Content-Lengt
  40bd74:	3a68 0020 6f48 656d 4320 6e6f 7274 6c6f     h: .Home Control
  40bd84:	656c 2072 3176 302e 000a 0000 326d 5f6d     ler v1.0....m2m_
  40bd94:	6977 6966 695f 696e 2074 6163 6c6c 6520     wifi_init call e
  40bda4:	7272 726f 2021 2528 2964 0a0d 0000 0000     rror! (%d)......
  40bdb4:	6f43 706d 7475 6361 6f61 6d45 6162 6372     ComputacaoEmbarc
  40bdc4:	6461 0061 575b 2d49 4946 205d 6f43 6e6e     ada.[WI-FI] Conn
  40bdd4:	6365 6974 676e 7420 206f 5353 4449 203a     ecting to SSID: 
  40bde4:	7325 000a 6f63 706d 7475 6361 6f61 0000     %s..computacao..
  40bdf4:	3435 312e 3537 312e 3239 322e 0000 0000     54.175.192.2....
  40be04:	535b 434f 454b 5d54 4920 696e 6974 6c61     [SOCKET] Initial
  40be14:	7a69 6e69 0a67 0000 535b 434f 454b 5d54     izing...[SOCKET]
  40be24:	4520 5252 524f 6620 6961 656c 2064 6f74      ERROR failed to
  40be34:	6320 6572 7461 2065 4354 2050 6c63 6569      create TCP clie
  40be44:	746e 7320 636f 656b 0a74 0000 535b 434f     nt socket...[SOC
  40be54:	454b 5d54 4320 6e6f 656e 7463 6e69 0a67     KET] Connecting.
  40be64:	0000 0000 5245 4f52 0a52 0000 4c55 565f     ....ERROR...UL_V
  40be74:	4c41 4555 0000 0000 4c55 565f 4c41 4555     ALUE....UL_VALUE
  40be84:	455f 534c 0045 0000 646c 3d72 6c25 0075     _ELSE...ldr=%lu.
  40be94:	6c2f 7264 7075 6164 6574 0000 4f50 5453     /ldrupdate..POST
  40bea4:	5720 4941 2054 000a 4547 5f54 454c 5344      WAIT ..GET_LEDS
  40beb4:	000a 0000 6c2f 6465 0073 0000 6425 0000     ..../leds...%d..
  40bec4:	4547 2054 4157 5449 0a20 0000 6572 6f73     GET WAIT ...reso
  40bed4:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
  40bee4:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
  40bef4:	2e64 6425 0a0d 0a0d 0000 0000 535b 434f     d.%d........[SOC
  40bf04:	454b 5d54 4320 6e6f 656e 7463 6465 000a     KET] Connected..
  40bf14:	535b 434f 454b 5d54 4320 6e6f 656e 7463     [SOCKET] Connect
  40bf24:	6f69 206e 7245 6f72 0a72 0000 3032 2030     ion Error...200 
  40bf34:	4b4f 0000 4554 5453 0000 0000 454c 5344     OK..TEST....LEDS
  40bf44:	0023 0000 454c 5f44 5453 5441 5345 2520     #...LED_STATES %
  40bf54:	2063 6325 2520 2063 000a 0000 535b 434f     c %c %c ....[SOC
  40bf64:	454b 5d54 5220 6365 6965 6576 4520 7272     KET] Receive Err
  40bf74:	726f 000a 575b 2d49 4946 205d 6f43 6e6e     or..[WI-FI] Conn
  40bf84:	6365 6574 0a64 0000 575b 2d49 4946 205d     ected...[WI-FI] 
  40bf94:	6944 6373 6e6f 656e 7463 6465 000a 0000     Disconnected....

0040bfa4 <_global_impure_ptr>:
  40bfa4:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  40bfb4:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40bfc4:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40bfd4:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40bfe4:	296c 0000 0030 0000                         l)..0...

0040bfec <blanks.7208>:
  40bfec:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040bffc <zeroes.7209>:
  40bffc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040c00c <blanks.7202>:
  40c00c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040c01c <zeroes.7203>:
  40c01c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40c02c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40c03c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
  40c04c:	0000 0000                                   ....

0040c050 <__mprec_bigtens>:
  40c050:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40c060:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40c070:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040c078 <__mprec_tens>:
  40c078:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40c088:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40c098:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40c0a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40c0b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40c0c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40c0d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40c0e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40c0f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40c108:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40c118:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40c128:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40c138:	9db4 79d9 7843 44ea                         ...yCx.D

0040c140 <p05.6040>:
  40c140:	0005 0000 0019 0000 007d 0000               ........}...

0040c14c <_ctype_>:
  40c14c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40c15c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40c16c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40c17c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40c18c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40c19c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40c1ac:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40c1bc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40c1cc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040c250 <_init>:
  40c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c252:	bf00      	nop
  40c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c256:	bc08      	pop	{r3}
  40c258:	469e      	mov	lr, r3
  40c25a:	4770      	bx	lr

0040c25c <__init_array_start>:
  40c25c:	004072a5 	.word	0x004072a5

0040c260 <__frame_dummy_init_array_entry>:
  40c260:	00400165                                e.@.

0040c264 <_fini>:
  40c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c266:	bf00      	nop
  40c268:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c26a:	bc08      	pop	{r3}
  40c26c:	469e      	mov	lr, r3
  40c26e:	4770      	bx	lr

0040c270 <__fini_array_start>:
  40c270:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d                                   ..=.

2040001c <tcp_client_socket>:
2040001c:	00ff 0000                                   ....

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__global_locale>:
20400450:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400470:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400490:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400510:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400530:	a1f9 0040 91f5 0040 0000 0000 c14c 0040     ..@...@.....L.@.
20400540:	c048 0040 befc 0040 befc 0040 befc 0040     H.@...@...@...@.
20400550:	befc 0040 befc 0040 befc 0040 befc 0040     ..@...@...@...@.
20400560:	befc 0040 befc 0040 ffff ffff ffff ffff     ..@...@.........
20400570:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400598:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005bc <__malloc_av_>:
	...
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 
20400884:	087c 2040 087c 2040 0884 2040 0884 2040     |.@ |.@ ..@ ..@ 
20400894:	088c 2040 088c 2040 0894 2040 0894 2040     ..@ ..@ ..@ ..@ 
204008a4:	089c 2040 089c 2040 08a4 2040 08a4 2040     ..@ ..@ ..@ ..@ 
204008b4:	08ac 2040 08ac 2040 08b4 2040 08b4 2040     ..@ ..@ ..@ ..@ 
204008c4:	08bc 2040 08bc 2040 08c4 2040 08c4 2040     ..@ ..@ ..@ ..@ 
204008d4:	08cc 2040 08cc 2040 08d4 2040 08d4 2040     ..@ ..@ ..@ ..@ 
204008e4:	08dc 2040 08dc 2040 08e4 2040 08e4 2040     ..@ ..@ ..@ ..@ 
204008f4:	08ec 2040 08ec 2040 08f4 2040 08f4 2040     ..@ ..@ ..@ ..@ 
20400904:	08fc 2040 08fc 2040 0904 2040 0904 2040     ..@ ..@ ..@ ..@ 
20400914:	090c 2040 090c 2040 0914 2040 0914 2040     ..@ ..@ ..@ ..@ 
20400924:	091c 2040 091c 2040 0924 2040 0924 2040     ..@ ..@ $.@ $.@ 
20400934:	092c 2040 092c 2040 0934 2040 0934 2040     ,.@ ,.@ 4.@ 4.@ 
20400944:	093c 2040 093c 2040 0944 2040 0944 2040     <.@ <.@ D.@ D.@ 
20400954:	094c 2040 094c 2040 0954 2040 0954 2040     L.@ L.@ T.@ T.@ 
20400964:	095c 2040 095c 2040 0964 2040 0964 2040     \.@ \.@ d.@ d.@ 
20400974:	096c 2040 096c 2040 0974 2040 0974 2040     l.@ l.@ t.@ t.@ 
20400984:	097c 2040 097c 2040 0984 2040 0984 2040     |.@ |.@ ..@ ..@ 
20400994:	098c 2040 098c 2040 0994 2040 0994 2040     ..@ ..@ ..@ ..@ 
204009a4:	099c 2040 099c 2040 09a4 2040 09a4 2040     ..@ ..@ ..@ ..@ 
204009b4:	09ac 2040 09ac 2040 09b4 2040 09b4 2040     ..@ ..@ ..@ ..@ 

204009c4 <__malloc_sbrk_base>:
204009c4:	ffff ffff                                   ....

204009c8 <__malloc_trim_threshold>:
204009c8:	0000 0002                                   ....
