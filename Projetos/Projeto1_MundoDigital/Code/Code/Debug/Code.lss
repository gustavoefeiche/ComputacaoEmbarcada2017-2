
Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054c0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004054c0  004054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c4  20400000  004054c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000fc  204009c4  00405e8c  000209c4  2**2
                  ALLOC
  4 .stack        00002000  20400ac0  00405f88  000209c4  2**0
                  ALLOC
  5 .heap         00000200  20402ac0  00407f88  000209c4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f2  2**0
                  CONTENTS, READONLY
  8 .debug_info   000138b2  00000000  00000000  00020a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000024b8  00000000  00000000  000342fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006f94  00000000  00000000  000367b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000be0  00000000  00000000  0003d749  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b68  00000000  00000000  0003e329  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006998  00000000  00000000  0003ee91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b16e  00000000  00000000  00045829  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008b795  00000000  00000000  00050997  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003f14  00000000  00000000  000dc12c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 2a 40 20 35 17 40 00 e5 17 40 00 e5 17 40 00     .*@ 5.@...@...@.
  400010:	e5 17 40 00 e5 17 40 00 e5 17 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e5 17 40 00 e5 17 40 00 00 00 00 00 e5 17 40 00     ..@...@.......@.
  40003c:	e5 17 40 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ..@...@...@...@.
  40004c:	e5 17 40 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ..@...@...@...@.
  40005c:	e5 17 40 00 e5 17 40 00 00 00 00 00 61 10 40 00     ..@...@.....a.@.
  40006c:	79 10 40 00 91 10 40 00 e5 17 40 00 e5 17 40 00     y.@...@...@...@.
  40007c:	e5 17 40 00 a9 10 40 00 c1 10 40 00 e5 17 40 00     ..@...@...@...@.
  40008c:	e5 17 40 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ..@...@...@...@.
  40009c:	e5 17 40 00 f1 21 40 00 e5 17 40 00 e5 17 40 00     ..@..!@...@...@.
  4000ac:	e5 17 40 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ..@...@...@...@.
  4000bc:	e5 17 40 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ..@...@...@...@.
  4000cc:	e5 17 40 00 00 00 00 00 e5 17 40 00 00 00 00 00     ..@.......@.....
  4000dc:	e5 17 40 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ..@...@...@...@.
  4000ec:	e5 17 40 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ..@...@...@...@.
  4000fc:	e5 17 40 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ..@...@...@...@.
  40010c:	e5 17 40 00 e5 17 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 e5 17 40 00 e5 17 40 00 e5 17 40 00     ......@...@...@.
  40012c:	e5 17 40 00 e5 17 40 00 00 00 00 00 e5 17 40 00     ..@...@.......@.
  40013c:	e5 17 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c4 	.word	0x204009c4
  40015c:	00000000 	.word	0x00000000
  400160:	004054c8 	.word	0x004054c8

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004054c8 	.word	0x004054c8
  4001a0:	204009c8 	.word	0x204009c8
  4001a4:	004054c8 	.word	0x004054c8
  4001a8:	00000000 	.word	0x00000000

004001ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b086      	sub	sp, #24
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	60f8      	str	r0, [r7, #12]
  4001b4:	60b9      	str	r1, [r7, #8]
  4001b6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4001b8:	2300      	movs	r3, #0
  4001ba:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4001bc:	68fb      	ldr	r3, [r7, #12]
  4001be:	2b00      	cmp	r3, #0
  4001c0:	d012      	beq.n	4001e8 <_read+0x3c>
		return -1;
  4001c2:	f04f 33ff 	mov.w	r3, #4294967295
  4001c6:	e013      	b.n	4001f0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4001c8:	4b0b      	ldr	r3, [pc, #44]	; (4001f8 <_read+0x4c>)
  4001ca:	681b      	ldr	r3, [r3, #0]
  4001cc:	4a0b      	ldr	r2, [pc, #44]	; (4001fc <_read+0x50>)
  4001ce:	6812      	ldr	r2, [r2, #0]
  4001d0:	68b9      	ldr	r1, [r7, #8]
  4001d2:	4610      	mov	r0, r2
  4001d4:	4798      	blx	r3
		ptr++;
  4001d6:	68bb      	ldr	r3, [r7, #8]
  4001d8:	3301      	adds	r3, #1
  4001da:	60bb      	str	r3, [r7, #8]
		nChars++;
  4001dc:	697b      	ldr	r3, [r7, #20]
  4001de:	3301      	adds	r3, #1
  4001e0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  4001e2:	687b      	ldr	r3, [r7, #4]
  4001e4:	3b01      	subs	r3, #1
  4001e6:	607b      	str	r3, [r7, #4]
  4001e8:	687b      	ldr	r3, [r7, #4]
  4001ea:	2b00      	cmp	r3, #0
  4001ec:	dcec      	bgt.n	4001c8 <_read+0x1c>
	}
	return nChars;
  4001ee:	697b      	ldr	r3, [r7, #20]
}
  4001f0:	4618      	mov	r0, r3
  4001f2:	3718      	adds	r7, #24
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	20400ab0 	.word	0x20400ab0
  4001fc:	20400ab8 	.word	0x20400ab8

00400200 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400200:	b580      	push	{r7, lr}
  400202:	b086      	sub	sp, #24
  400204:	af00      	add	r7, sp, #0
  400206:	60f8      	str	r0, [r7, #12]
  400208:	60b9      	str	r1, [r7, #8]
  40020a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40020c:	2300      	movs	r3, #0
  40020e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400210:	68fb      	ldr	r3, [r7, #12]
  400212:	2b01      	cmp	r3, #1
  400214:	d01e      	beq.n	400254 <_write+0x54>
  400216:	68fb      	ldr	r3, [r7, #12]
  400218:	2b02      	cmp	r3, #2
  40021a:	d01b      	beq.n	400254 <_write+0x54>
  40021c:	68fb      	ldr	r3, [r7, #12]
  40021e:	2b03      	cmp	r3, #3
  400220:	d018      	beq.n	400254 <_write+0x54>
		return -1;
  400222:	f04f 33ff 	mov.w	r3, #4294967295
  400226:	e019      	b.n	40025c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400228:	4b0e      	ldr	r3, [pc, #56]	; (400264 <_write+0x64>)
  40022a:	681a      	ldr	r2, [r3, #0]
  40022c:	4b0e      	ldr	r3, [pc, #56]	; (400268 <_write+0x68>)
  40022e:	6818      	ldr	r0, [r3, #0]
  400230:	68bb      	ldr	r3, [r7, #8]
  400232:	1c59      	adds	r1, r3, #1
  400234:	60b9      	str	r1, [r7, #8]
  400236:	781b      	ldrb	r3, [r3, #0]
  400238:	4619      	mov	r1, r3
  40023a:	4790      	blx	r2
  40023c:	4603      	mov	r3, r0
  40023e:	2b00      	cmp	r3, #0
  400240:	da02      	bge.n	400248 <_write+0x48>
			return -1;
  400242:	f04f 33ff 	mov.w	r3, #4294967295
  400246:	e009      	b.n	40025c <_write+0x5c>
		}
		++nChars;
  400248:	697b      	ldr	r3, [r7, #20]
  40024a:	3301      	adds	r3, #1
  40024c:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  40024e:	687b      	ldr	r3, [r7, #4]
  400250:	3b01      	subs	r3, #1
  400252:	607b      	str	r3, [r7, #4]
  400254:	687b      	ldr	r3, [r7, #4]
  400256:	2b00      	cmp	r3, #0
  400258:	d1e6      	bne.n	400228 <_write+0x28>
	}
	return nChars;
  40025a:	697b      	ldr	r3, [r7, #20]
}
  40025c:	4618      	mov	r0, r3
  40025e:	3718      	adds	r7, #24
  400260:	46bd      	mov	sp, r7
  400262:	bd80      	pop	{r7, pc}
  400264:	20400ab4 	.word	0x20400ab4
  400268:	20400ab8 	.word	0x20400ab8

0040026c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40026c:	b480      	push	{r7}
  40026e:	b087      	sub	sp, #28
  400270:	af00      	add	r7, sp, #0
  400272:	60f8      	str	r0, [r7, #12]
  400274:	60b9      	str	r1, [r7, #8]
  400276:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400278:	68fa      	ldr	r2, [r7, #12]
  40027a:	68bb      	ldr	r3, [r7, #8]
  40027c:	019b      	lsls	r3, r3, #6
  40027e:	4413      	add	r3, r2
  400280:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400282:	697b      	ldr	r3, [r7, #20]
  400284:	2202      	movs	r2, #2
  400286:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400288:	697b      	ldr	r3, [r7, #20]
  40028a:	f04f 32ff 	mov.w	r2, #4294967295
  40028e:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400290:	697b      	ldr	r3, [r7, #20]
  400292:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400294:	697b      	ldr	r3, [r7, #20]
  400296:	687a      	ldr	r2, [r7, #4]
  400298:	605a      	str	r2, [r3, #4]
}
  40029a:	bf00      	nop
  40029c:	371c      	adds	r7, #28
  40029e:	46bd      	mov	sp, r7
  4002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a4:	4770      	bx	lr

004002a6 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4002a6:	b480      	push	{r7}
  4002a8:	b083      	sub	sp, #12
  4002aa:	af00      	add	r7, sp, #0
  4002ac:	6078      	str	r0, [r7, #4]
  4002ae:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4002b0:	687a      	ldr	r2, [r7, #4]
  4002b2:	683b      	ldr	r3, [r7, #0]
  4002b4:	019b      	lsls	r3, r3, #6
  4002b6:	4413      	add	r3, r2
  4002b8:	2205      	movs	r2, #5
  4002ba:	601a      	str	r2, [r3, #0]
}
  4002bc:	bf00      	nop
  4002be:	370c      	adds	r7, #12
  4002c0:	46bd      	mov	sp, r7
  4002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002c6:	4770      	bx	lr

004002c8 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4002c8:	b480      	push	{r7}
  4002ca:	b085      	sub	sp, #20
  4002cc:	af00      	add	r7, sp, #0
  4002ce:	60f8      	str	r0, [r7, #12]
  4002d0:	60b9      	str	r1, [r7, #8]
  4002d2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4002d4:	68fa      	ldr	r2, [r7, #12]
  4002d6:	68bb      	ldr	r3, [r7, #8]
  4002d8:	019b      	lsls	r3, r3, #6
  4002da:	4413      	add	r3, r2
  4002dc:	331c      	adds	r3, #28
  4002de:	687a      	ldr	r2, [r7, #4]
  4002e0:	601a      	str	r2, [r3, #0]
}
  4002e2:	bf00      	nop
  4002e4:	3714      	adds	r7, #20
  4002e6:	46bd      	mov	sp, r7
  4002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002ec:	4770      	bx	lr

004002ee <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4002ee:	b480      	push	{r7}
  4002f0:	b087      	sub	sp, #28
  4002f2:	af00      	add	r7, sp, #0
  4002f4:	60f8      	str	r0, [r7, #12]
  4002f6:	60b9      	str	r1, [r7, #8]
  4002f8:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4002fa:	68fa      	ldr	r2, [r7, #12]
  4002fc:	68bb      	ldr	r3, [r7, #8]
  4002fe:	019b      	lsls	r3, r3, #6
  400300:	4413      	add	r3, r2
  400302:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400304:	697b      	ldr	r3, [r7, #20]
  400306:	687a      	ldr	r2, [r7, #4]
  400308:	625a      	str	r2, [r3, #36]	; 0x24
}
  40030a:	bf00      	nop
  40030c:	371c      	adds	r7, #28
  40030e:	46bd      	mov	sp, r7
  400310:	f85d 7b04 	ldr.w	r7, [sp], #4
  400314:	4770      	bx	lr

00400316 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400316:	b480      	push	{r7}
  400318:	b085      	sub	sp, #20
  40031a:	af00      	add	r7, sp, #0
  40031c:	6078      	str	r0, [r7, #4]
  40031e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400320:	687a      	ldr	r2, [r7, #4]
  400322:	683b      	ldr	r3, [r7, #0]
  400324:	019b      	lsls	r3, r3, #6
  400326:	4413      	add	r3, r2
  400328:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	6a1b      	ldr	r3, [r3, #32]
}
  40032e:	4618      	mov	r0, r3
  400330:	3714      	adds	r7, #20
  400332:	46bd      	mov	sp, r7
  400334:	f85d 7b04 	ldr.w	r7, [sp], #4
  400338:	4770      	bx	lr

0040033a <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40033a:	b480      	push	{r7}
  40033c:	b08d      	sub	sp, #52	; 0x34
  40033e:	af00      	add	r7, sp, #0
  400340:	60f8      	str	r0, [r7, #12]
  400342:	60b9      	str	r1, [r7, #8]
  400344:	607a      	str	r2, [r7, #4]
  400346:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400348:	2302      	movs	r3, #2
  40034a:	613b      	str	r3, [r7, #16]
  40034c:	2308      	movs	r3, #8
  40034e:	617b      	str	r3, [r7, #20]
  400350:	2320      	movs	r3, #32
  400352:	61bb      	str	r3, [r7, #24]
  400354:	2380      	movs	r3, #128	; 0x80
  400356:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40035a:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40035c:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  40035e:	2300      	movs	r3, #0
  400360:	62fb      	str	r3, [r7, #44]	; 0x2c
  400362:	e01a      	b.n	40039a <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400366:	009b      	lsls	r3, r3, #2
  400368:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40036c:	4413      	add	r3, r2
  40036e:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400372:	68ba      	ldr	r2, [r7, #8]
  400374:	fbb2 f3f3 	udiv	r3, r2, r3
  400378:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  40037a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40037c:	0c1b      	lsrs	r3, r3, #16
  40037e:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400380:	68fa      	ldr	r2, [r7, #12]
  400382:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400384:	429a      	cmp	r2, r3
  400386:	d901      	bls.n	40038c <tc_find_mck_divisor+0x52>
			return 0;
  400388:	2300      	movs	r3, #0
  40038a:	e023      	b.n	4003d4 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40038c:	68fa      	ldr	r2, [r7, #12]
  40038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400390:	429a      	cmp	r2, r3
  400392:	d206      	bcs.n	4003a2 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400396:	3301      	adds	r3, #1
  400398:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  40039a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40039c:	2b04      	cmp	r3, #4
  40039e:	d9e1      	bls.n	400364 <tc_find_mck_divisor+0x2a>
  4003a0:	e000      	b.n	4003a4 <tc_find_mck_divisor+0x6a>
			break;
  4003a2:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  4003a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003a6:	2b04      	cmp	r3, #4
  4003a8:	d901      	bls.n	4003ae <tc_find_mck_divisor+0x74>
		return 0;
  4003aa:	2300      	movs	r3, #0
  4003ac:	e012      	b.n	4003d4 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  4003ae:	687b      	ldr	r3, [r7, #4]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d008      	beq.n	4003c6 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  4003b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003b6:	009b      	lsls	r3, r3, #2
  4003b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4003bc:	4413      	add	r3, r2
  4003be:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4003c2:	687b      	ldr	r3, [r7, #4]
  4003c4:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4003c6:	683b      	ldr	r3, [r7, #0]
  4003c8:	2b00      	cmp	r3, #0
  4003ca:	d002      	beq.n	4003d2 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4003cc:	683b      	ldr	r3, [r7, #0]
  4003ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4003d0:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4003d2:	2301      	movs	r3, #1
}
  4003d4:	4618      	mov	r0, r3
  4003d6:	3734      	adds	r7, #52	; 0x34
  4003d8:	46bd      	mov	sp, r7
  4003da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003de:	4770      	bx	lr

004003e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4003e0:	b480      	push	{r7}
  4003e2:	b085      	sub	sp, #20
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
  4003e8:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  4003ea:	2300      	movs	r3, #0
  4003ec:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4003ee:	687b      	ldr	r3, [r7, #4]
  4003f0:	22ac      	movs	r2, #172	; 0xac
  4003f2:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4003f4:	683b      	ldr	r3, [r7, #0]
  4003f6:	681a      	ldr	r2, [r3, #0]
  4003f8:	683b      	ldr	r3, [r7, #0]
  4003fa:	685b      	ldr	r3, [r3, #4]
  4003fc:	fbb2 f3f3 	udiv	r3, r2, r3
  400400:	091b      	lsrs	r3, r3, #4
  400402:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400404:	68fb      	ldr	r3, [r7, #12]
  400406:	2b00      	cmp	r3, #0
  400408:	d003      	beq.n	400412 <uart_init+0x32>
  40040a:	68fb      	ldr	r3, [r7, #12]
  40040c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400410:	d301      	bcc.n	400416 <uart_init+0x36>
		return 1;
  400412:	2301      	movs	r3, #1
  400414:	e00a      	b.n	40042c <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  400416:	687b      	ldr	r3, [r7, #4]
  400418:	68fa      	ldr	r2, [r7, #12]
  40041a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40041c:	683b      	ldr	r3, [r7, #0]
  40041e:	689a      	ldr	r2, [r3, #8]
  400420:	687b      	ldr	r3, [r7, #4]
  400422:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400424:	687b      	ldr	r3, [r7, #4]
  400426:	2250      	movs	r2, #80	; 0x50
  400428:	601a      	str	r2, [r3, #0]

	return 0;
  40042a:	2300      	movs	r3, #0
}
  40042c:	4618      	mov	r0, r3
  40042e:	3714      	adds	r7, #20
  400430:	46bd      	mov	sp, r7
  400432:	f85d 7b04 	ldr.w	r7, [sp], #4
  400436:	4770      	bx	lr

00400438 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  400438:	b480      	push	{r7}
  40043a:	b083      	sub	sp, #12
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
  400440:	460b      	mov	r3, r1
  400442:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400444:	687b      	ldr	r3, [r7, #4]
  400446:	695b      	ldr	r3, [r3, #20]
  400448:	f003 0302 	and.w	r3, r3, #2
  40044c:	2b00      	cmp	r3, #0
  40044e:	d101      	bne.n	400454 <uart_write+0x1c>
		return 1;
  400450:	2301      	movs	r3, #1
  400452:	e003      	b.n	40045c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  400454:	78fa      	ldrb	r2, [r7, #3]
  400456:	687b      	ldr	r3, [r7, #4]
  400458:	61da      	str	r2, [r3, #28]
	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	370c      	adds	r7, #12
  400460:	46bd      	mov	sp, r7
  400462:	f85d 7b04 	ldr.w	r7, [sp], #4
  400466:	4770      	bx	lr

00400468 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  400468:	b480      	push	{r7}
  40046a:	b083      	sub	sp, #12
  40046c:	af00      	add	r7, sp, #0
  40046e:	6078      	str	r0, [r7, #4]
  400470:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400472:	687b      	ldr	r3, [r7, #4]
  400474:	695b      	ldr	r3, [r3, #20]
  400476:	f003 0301 	and.w	r3, r3, #1
  40047a:	2b00      	cmp	r3, #0
  40047c:	d101      	bne.n	400482 <uart_read+0x1a>
		return 1;
  40047e:	2301      	movs	r3, #1
  400480:	e005      	b.n	40048e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400482:	687b      	ldr	r3, [r7, #4]
  400484:	699b      	ldr	r3, [r3, #24]
  400486:	b2da      	uxtb	r2, r3
  400488:	683b      	ldr	r3, [r7, #0]
  40048a:	701a      	strb	r2, [r3, #0]
	return 0;
  40048c:	2300      	movs	r3, #0
}
  40048e:	4618      	mov	r0, r3
  400490:	370c      	adds	r7, #12
  400492:	46bd      	mov	sp, r7
  400494:	f85d 7b04 	ldr.w	r7, [sp], #4
  400498:	4770      	bx	lr
	...

0040049c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40049c:	b580      	push	{r7, lr}
  40049e:	b082      	sub	sp, #8
  4004a0:	af00      	add	r7, sp, #0
  4004a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4004a4:	687b      	ldr	r3, [r7, #4]
  4004a6:	2b07      	cmp	r3, #7
  4004a8:	d831      	bhi.n	40050e <osc_enable+0x72>
  4004aa:	a201      	add	r2, pc, #4	; (adr r2, 4004b0 <osc_enable+0x14>)
  4004ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4004b0:	0040050d 	.word	0x0040050d
  4004b4:	004004d1 	.word	0x004004d1
  4004b8:	004004d9 	.word	0x004004d9
  4004bc:	004004e1 	.word	0x004004e1
  4004c0:	004004e9 	.word	0x004004e9
  4004c4:	004004f1 	.word	0x004004f1
  4004c8:	004004f9 	.word	0x004004f9
  4004cc:	00400503 	.word	0x00400503
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4004d0:	2000      	movs	r0, #0
  4004d2:	4b11      	ldr	r3, [pc, #68]	; (400518 <osc_enable+0x7c>)
  4004d4:	4798      	blx	r3
		break;
  4004d6:	e01a      	b.n	40050e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4004d8:	2001      	movs	r0, #1
  4004da:	4b0f      	ldr	r3, [pc, #60]	; (400518 <osc_enable+0x7c>)
  4004dc:	4798      	blx	r3
		break;
  4004de:	e016      	b.n	40050e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <osc_enable+0x80>)
  4004e4:	4798      	blx	r3
		break;
  4004e6:	e012      	b.n	40050e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4004e8:	2010      	movs	r0, #16
  4004ea:	4b0c      	ldr	r3, [pc, #48]	; (40051c <osc_enable+0x80>)
  4004ec:	4798      	blx	r3
		break;
  4004ee:	e00e      	b.n	40050e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4004f0:	2020      	movs	r0, #32
  4004f2:	4b0a      	ldr	r3, [pc, #40]	; (40051c <osc_enable+0x80>)
  4004f4:	4798      	blx	r3
		break;
  4004f6:	e00a      	b.n	40050e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4004f8:	213e      	movs	r1, #62	; 0x3e
  4004fa:	2000      	movs	r0, #0
  4004fc:	4b08      	ldr	r3, [pc, #32]	; (400520 <osc_enable+0x84>)
  4004fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400500:	e005      	b.n	40050e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400502:	213e      	movs	r1, #62	; 0x3e
  400504:	2001      	movs	r0, #1
  400506:	4b06      	ldr	r3, [pc, #24]	; (400520 <osc_enable+0x84>)
  400508:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40050a:	e000      	b.n	40050e <osc_enable+0x72>
		break;
  40050c:	bf00      	nop
	}
}
  40050e:	bf00      	nop
  400510:	3708      	adds	r7, #8
  400512:	46bd      	mov	sp, r7
  400514:	bd80      	pop	{r7, pc}
  400516:	bf00      	nop
  400518:	004011d9 	.word	0x004011d9
  40051c:	00401245 	.word	0x00401245
  400520:	004012b5 	.word	0x004012b5

00400524 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400524:	b580      	push	{r7, lr}
  400526:	b082      	sub	sp, #8
  400528:	af00      	add	r7, sp, #0
  40052a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40052c:	687b      	ldr	r3, [r7, #4]
  40052e:	2b07      	cmp	r3, #7
  400530:	d826      	bhi.n	400580 <osc_is_ready+0x5c>
  400532:	a201      	add	r2, pc, #4	; (adr r2, 400538 <osc_is_ready+0x14>)
  400534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400538:	00400559 	.word	0x00400559
  40053c:	0040055d 	.word	0x0040055d
  400540:	0040055d 	.word	0x0040055d
  400544:	0040056f 	.word	0x0040056f
  400548:	0040056f 	.word	0x0040056f
  40054c:	0040056f 	.word	0x0040056f
  400550:	0040056f 	.word	0x0040056f
  400554:	0040056f 	.word	0x0040056f
	case OSC_SLCK_32K_RC:
		return 1;
  400558:	2301      	movs	r3, #1
  40055a:	e012      	b.n	400582 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40055c:	4b0b      	ldr	r3, [pc, #44]	; (40058c <osc_is_ready+0x68>)
  40055e:	4798      	blx	r3
  400560:	4603      	mov	r3, r0
  400562:	2b00      	cmp	r3, #0
  400564:	bf14      	ite	ne
  400566:	2301      	movne	r3, #1
  400568:	2300      	moveq	r3, #0
  40056a:	b2db      	uxtb	r3, r3
  40056c:	e009      	b.n	400582 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40056e:	4b08      	ldr	r3, [pc, #32]	; (400590 <osc_is_ready+0x6c>)
  400570:	4798      	blx	r3
  400572:	4603      	mov	r3, r0
  400574:	2b00      	cmp	r3, #0
  400576:	bf14      	ite	ne
  400578:	2301      	movne	r3, #1
  40057a:	2300      	moveq	r3, #0
  40057c:	b2db      	uxtb	r3, r3
  40057e:	e000      	b.n	400582 <osc_is_ready+0x5e>
	}

	return 0;
  400580:	2300      	movs	r3, #0
}
  400582:	4618      	mov	r0, r3
  400584:	3708      	adds	r7, #8
  400586:	46bd      	mov	sp, r7
  400588:	bd80      	pop	{r7, pc}
  40058a:	bf00      	nop
  40058c:	00401211 	.word	0x00401211
  400590:	0040132d 	.word	0x0040132d

00400594 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400594:	b480      	push	{r7}
  400596:	b083      	sub	sp, #12
  400598:	af00      	add	r7, sp, #0
  40059a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40059c:	687b      	ldr	r3, [r7, #4]
  40059e:	2b07      	cmp	r3, #7
  4005a0:	d825      	bhi.n	4005ee <osc_get_rate+0x5a>
  4005a2:	a201      	add	r2, pc, #4	; (adr r2, 4005a8 <osc_get_rate+0x14>)
  4005a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4005a8:	004005c9 	.word	0x004005c9
  4005ac:	004005cf 	.word	0x004005cf
  4005b0:	004005d5 	.word	0x004005d5
  4005b4:	004005db 	.word	0x004005db
  4005b8:	004005df 	.word	0x004005df
  4005bc:	004005e3 	.word	0x004005e3
  4005c0:	004005e7 	.word	0x004005e7
  4005c4:	004005eb 	.word	0x004005eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4005c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4005cc:	e010      	b.n	4005f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4005ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005d2:	e00d      	b.n	4005f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4005d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005d8:	e00a      	b.n	4005f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4005da:	4b08      	ldr	r3, [pc, #32]	; (4005fc <osc_get_rate+0x68>)
  4005dc:	e008      	b.n	4005f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4005de:	4b08      	ldr	r3, [pc, #32]	; (400600 <osc_get_rate+0x6c>)
  4005e0:	e006      	b.n	4005f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4005e2:	4b08      	ldr	r3, [pc, #32]	; (400604 <osc_get_rate+0x70>)
  4005e4:	e004      	b.n	4005f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4005e6:	4b07      	ldr	r3, [pc, #28]	; (400604 <osc_get_rate+0x70>)
  4005e8:	e002      	b.n	4005f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4005ea:	4b06      	ldr	r3, [pc, #24]	; (400604 <osc_get_rate+0x70>)
  4005ec:	e000      	b.n	4005f0 <osc_get_rate+0x5c>
	}

	return 0;
  4005ee:	2300      	movs	r3, #0
}
  4005f0:	4618      	mov	r0, r3
  4005f2:	370c      	adds	r7, #12
  4005f4:	46bd      	mov	sp, r7
  4005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005fa:	4770      	bx	lr
  4005fc:	003d0900 	.word	0x003d0900
  400600:	007a1200 	.word	0x007a1200
  400604:	00b71b00 	.word	0x00b71b00

00400608 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400608:	b580      	push	{r7, lr}
  40060a:	b082      	sub	sp, #8
  40060c:	af00      	add	r7, sp, #0
  40060e:	4603      	mov	r3, r0
  400610:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400612:	bf00      	nop
  400614:	79fb      	ldrb	r3, [r7, #7]
  400616:	4618      	mov	r0, r3
  400618:	4b05      	ldr	r3, [pc, #20]	; (400630 <osc_wait_ready+0x28>)
  40061a:	4798      	blx	r3
  40061c:	4603      	mov	r3, r0
  40061e:	f083 0301 	eor.w	r3, r3, #1
  400622:	b2db      	uxtb	r3, r3
  400624:	2b00      	cmp	r3, #0
  400626:	d1f5      	bne.n	400614 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400628:	bf00      	nop
  40062a:	3708      	adds	r7, #8
  40062c:	46bd      	mov	sp, r7
  40062e:	bd80      	pop	{r7, pc}
  400630:	00400525 	.word	0x00400525

00400634 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400634:	b580      	push	{r7, lr}
  400636:	b086      	sub	sp, #24
  400638:	af00      	add	r7, sp, #0
  40063a:	60f8      	str	r0, [r7, #12]
  40063c:	607a      	str	r2, [r7, #4]
  40063e:	603b      	str	r3, [r7, #0]
  400640:	460b      	mov	r3, r1
  400642:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400644:	687b      	ldr	r3, [r7, #4]
  400646:	2b00      	cmp	r3, #0
  400648:	d107      	bne.n	40065a <pll_config_init+0x26>
  40064a:	683b      	ldr	r3, [r7, #0]
  40064c:	2b00      	cmp	r3, #0
  40064e:	d104      	bne.n	40065a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400656:	601a      	str	r2, [r3, #0]
  400658:	e019      	b.n	40068e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40065a:	7afb      	ldrb	r3, [r7, #11]
  40065c:	4618      	mov	r0, r3
  40065e:	4b0e      	ldr	r3, [pc, #56]	; (400698 <pll_config_init+0x64>)
  400660:	4798      	blx	r3
  400662:	4602      	mov	r2, r0
  400664:	687b      	ldr	r3, [r7, #4]
  400666:	fbb2 f3f3 	udiv	r3, r2, r3
  40066a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40066c:	697b      	ldr	r3, [r7, #20]
  40066e:	683a      	ldr	r2, [r7, #0]
  400670:	fb02 f303 	mul.w	r3, r2, r3
  400674:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400676:	683b      	ldr	r3, [r7, #0]
  400678:	3b01      	subs	r3, #1
  40067a:	041a      	lsls	r2, r3, #16
  40067c:	4b07      	ldr	r3, [pc, #28]	; (40069c <pll_config_init+0x68>)
  40067e:	4013      	ands	r3, r2
  400680:	687a      	ldr	r2, [r7, #4]
  400682:	b2d2      	uxtb	r2, r2
  400684:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400686:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40068a:	68fb      	ldr	r3, [r7, #12]
  40068c:	601a      	str	r2, [r3, #0]
	}
}
  40068e:	bf00      	nop
  400690:	3718      	adds	r7, #24
  400692:	46bd      	mov	sp, r7
  400694:	bd80      	pop	{r7, pc}
  400696:	bf00      	nop
  400698:	00400595 	.word	0x00400595
  40069c:	07ff0000 	.word	0x07ff0000

004006a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4006a0:	b580      	push	{r7, lr}
  4006a2:	b082      	sub	sp, #8
  4006a4:	af00      	add	r7, sp, #0
  4006a6:	6078      	str	r0, [r7, #4]
  4006a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4006aa:	683b      	ldr	r3, [r7, #0]
  4006ac:	2b00      	cmp	r3, #0
  4006ae:	d108      	bne.n	4006c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4006b0:	4b09      	ldr	r3, [pc, #36]	; (4006d8 <pll_enable+0x38>)
  4006b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4006b4:	4a09      	ldr	r2, [pc, #36]	; (4006dc <pll_enable+0x3c>)
  4006b6:	687b      	ldr	r3, [r7, #4]
  4006b8:	681b      	ldr	r3, [r3, #0]
  4006ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4006be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4006c0:	e005      	b.n	4006ce <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4006c2:	4a06      	ldr	r2, [pc, #24]	; (4006dc <pll_enable+0x3c>)
  4006c4:	687b      	ldr	r3, [r7, #4]
  4006c6:	681b      	ldr	r3, [r3, #0]
  4006c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4006cc:	61d3      	str	r3, [r2, #28]
}
  4006ce:	bf00      	nop
  4006d0:	3708      	adds	r7, #8
  4006d2:	46bd      	mov	sp, r7
  4006d4:	bd80      	pop	{r7, pc}
  4006d6:	bf00      	nop
  4006d8:	00401349 	.word	0x00401349
  4006dc:	400e0600 	.word	0x400e0600

004006e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4006e0:	b580      	push	{r7, lr}
  4006e2:	b082      	sub	sp, #8
  4006e4:	af00      	add	r7, sp, #0
  4006e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4006e8:	687b      	ldr	r3, [r7, #4]
  4006ea:	2b00      	cmp	r3, #0
  4006ec:	d103      	bne.n	4006f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4006ee:	4b05      	ldr	r3, [pc, #20]	; (400704 <pll_is_locked+0x24>)
  4006f0:	4798      	blx	r3
  4006f2:	4603      	mov	r3, r0
  4006f4:	e002      	b.n	4006fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4006f6:	4b04      	ldr	r3, [pc, #16]	; (400708 <pll_is_locked+0x28>)
  4006f8:	4798      	blx	r3
  4006fa:	4603      	mov	r3, r0
	}
}
  4006fc:	4618      	mov	r0, r3
  4006fe:	3708      	adds	r7, #8
  400700:	46bd      	mov	sp, r7
  400702:	bd80      	pop	{r7, pc}
  400704:	00401365 	.word	0x00401365
  400708:	00401381 	.word	0x00401381

0040070c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40070c:	b580      	push	{r7, lr}
  40070e:	b082      	sub	sp, #8
  400710:	af00      	add	r7, sp, #0
  400712:	4603      	mov	r3, r0
  400714:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400716:	79fb      	ldrb	r3, [r7, #7]
  400718:	3b03      	subs	r3, #3
  40071a:	2b04      	cmp	r3, #4
  40071c:	d808      	bhi.n	400730 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40071e:	79fb      	ldrb	r3, [r7, #7]
  400720:	4618      	mov	r0, r3
  400722:	4b06      	ldr	r3, [pc, #24]	; (40073c <pll_enable_source+0x30>)
  400724:	4798      	blx	r3
		osc_wait_ready(e_src);
  400726:	79fb      	ldrb	r3, [r7, #7]
  400728:	4618      	mov	r0, r3
  40072a:	4b05      	ldr	r3, [pc, #20]	; (400740 <pll_enable_source+0x34>)
  40072c:	4798      	blx	r3
		break;
  40072e:	e000      	b.n	400732 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400730:	bf00      	nop
	}
}
  400732:	bf00      	nop
  400734:	3708      	adds	r7, #8
  400736:	46bd      	mov	sp, r7
  400738:	bd80      	pop	{r7, pc}
  40073a:	bf00      	nop
  40073c:	0040049d 	.word	0x0040049d
  400740:	00400609 	.word	0x00400609

00400744 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400744:	b580      	push	{r7, lr}
  400746:	b082      	sub	sp, #8
  400748:	af00      	add	r7, sp, #0
  40074a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40074c:	bf00      	nop
  40074e:	6878      	ldr	r0, [r7, #4]
  400750:	4b04      	ldr	r3, [pc, #16]	; (400764 <pll_wait_for_lock+0x20>)
  400752:	4798      	blx	r3
  400754:	4603      	mov	r3, r0
  400756:	2b00      	cmp	r3, #0
  400758:	d0f9      	beq.n	40074e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40075a:	2300      	movs	r3, #0
}
  40075c:	4618      	mov	r0, r3
  40075e:	3708      	adds	r7, #8
  400760:	46bd      	mov	sp, r7
  400762:	bd80      	pop	{r7, pc}
  400764:	004006e1 	.word	0x004006e1

00400768 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400768:	b580      	push	{r7, lr}
  40076a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40076c:	2006      	movs	r0, #6
  40076e:	4b05      	ldr	r3, [pc, #20]	; (400784 <sysclk_get_main_hz+0x1c>)
  400770:	4798      	blx	r3
  400772:	4602      	mov	r2, r0
  400774:	4613      	mov	r3, r2
  400776:	009b      	lsls	r3, r3, #2
  400778:	4413      	add	r3, r2
  40077a:	009a      	lsls	r2, r3, #2
  40077c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40077e:	4618      	mov	r0, r3
  400780:	bd80      	pop	{r7, pc}
  400782:	bf00      	nop
  400784:	00400595 	.word	0x00400595

00400788 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400788:	b580      	push	{r7, lr}
  40078a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40078c:	4b02      	ldr	r3, [pc, #8]	; (400798 <sysclk_get_cpu_hz+0x10>)
  40078e:	4798      	blx	r3
  400790:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400792:	4618      	mov	r0, r3
  400794:	bd80      	pop	{r7, pc}
  400796:	bf00      	nop
  400798:	00400769 	.word	0x00400769

0040079c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40079c:	b590      	push	{r4, r7, lr}
  40079e:	b083      	sub	sp, #12
  4007a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4007a2:	4813      	ldr	r0, [pc, #76]	; (4007f0 <sysclk_init+0x54>)
  4007a4:	4b13      	ldr	r3, [pc, #76]	; (4007f4 <sysclk_init+0x58>)
  4007a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4007a8:	2006      	movs	r0, #6
  4007aa:	4b13      	ldr	r3, [pc, #76]	; (4007f8 <sysclk_init+0x5c>)
  4007ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4007ae:	1d38      	adds	r0, r7, #4
  4007b0:	2319      	movs	r3, #25
  4007b2:	2201      	movs	r2, #1
  4007b4:	2106      	movs	r1, #6
  4007b6:	4c11      	ldr	r4, [pc, #68]	; (4007fc <sysclk_init+0x60>)
  4007b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4007ba:	1d3b      	adds	r3, r7, #4
  4007bc:	2100      	movs	r1, #0
  4007be:	4618      	mov	r0, r3
  4007c0:	4b0f      	ldr	r3, [pc, #60]	; (400800 <sysclk_init+0x64>)
  4007c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4007c4:	2000      	movs	r0, #0
  4007c6:	4b0f      	ldr	r3, [pc, #60]	; (400804 <sysclk_init+0x68>)
  4007c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4007ca:	2002      	movs	r0, #2
  4007cc:	4b0e      	ldr	r3, [pc, #56]	; (400808 <sysclk_init+0x6c>)
  4007ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4007d0:	2000      	movs	r0, #0
  4007d2:	4b0e      	ldr	r3, [pc, #56]	; (40080c <sysclk_init+0x70>)
  4007d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4007d6:	4b0e      	ldr	r3, [pc, #56]	; (400810 <sysclk_init+0x74>)
  4007d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4007da:	4b0e      	ldr	r3, [pc, #56]	; (400814 <sysclk_init+0x78>)
  4007dc:	4798      	blx	r3
  4007de:	4603      	mov	r3, r0
  4007e0:	4618      	mov	r0, r3
  4007e2:	4b04      	ldr	r3, [pc, #16]	; (4007f4 <sysclk_init+0x58>)
  4007e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4007e6:	bf00      	nop
  4007e8:	370c      	adds	r7, #12
  4007ea:	46bd      	mov	sp, r7
  4007ec:	bd90      	pop	{r4, r7, pc}
  4007ee:	bf00      	nop
  4007f0:	11e1a300 	.word	0x11e1a300
  4007f4:	00401955 	.word	0x00401955
  4007f8:	0040070d 	.word	0x0040070d
  4007fc:	00400635 	.word	0x00400635
  400800:	004006a1 	.word	0x004006a1
  400804:	00400745 	.word	0x00400745
  400808:	004010d9 	.word	0x004010d9
  40080c:	00401155 	.word	0x00401155
  400810:	004017ed 	.word	0x004017ed
  400814:	00400789 	.word	0x00400789

00400818 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400818:	b580      	push	{r7, lr}
  40081a:	b082      	sub	sp, #8
  40081c:	af00      	add	r7, sp, #0
  40081e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400820:	6878      	ldr	r0, [r7, #4]
  400822:	4b03      	ldr	r3, [pc, #12]	; (400830 <sysclk_enable_peripheral_clock+0x18>)
  400824:	4798      	blx	r3
}
  400826:	bf00      	nop
  400828:	3708      	adds	r7, #8
  40082a:	46bd      	mov	sp, r7
  40082c:	bd80      	pop	{r7, pc}
  40082e:	bf00      	nop
  400830:	0040139d 	.word	0x0040139d

00400834 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400834:	b580      	push	{r7, lr}
  400836:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400838:	200a      	movs	r0, #10
  40083a:	4b08      	ldr	r3, [pc, #32]	; (40085c <ioport_init+0x28>)
  40083c:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40083e:	200b      	movs	r0, #11
  400840:	4b06      	ldr	r3, [pc, #24]	; (40085c <ioport_init+0x28>)
  400842:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400844:	200c      	movs	r0, #12
  400846:	4b05      	ldr	r3, [pc, #20]	; (40085c <ioport_init+0x28>)
  400848:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  40084a:	2010      	movs	r0, #16
  40084c:	4b03      	ldr	r3, [pc, #12]	; (40085c <ioport_init+0x28>)
  40084e:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400850:	2011      	movs	r0, #17
  400852:	4b02      	ldr	r3, [pc, #8]	; (40085c <ioport_init+0x28>)
  400854:	4798      	blx	r3
	arch_ioport_init();
}
  400856:	bf00      	nop
  400858:	bd80      	pop	{r7, pc}
  40085a:	bf00      	nop
  40085c:	00400819 	.word	0x00400819

00400860 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400860:	b480      	push	{r7}
  400862:	b089      	sub	sp, #36	; 0x24
  400864:	af00      	add	r7, sp, #0
  400866:	6078      	str	r0, [r7, #4]
  400868:	687b      	ldr	r3, [r7, #4]
  40086a:	61fb      	str	r3, [r7, #28]
  40086c:	69fb      	ldr	r3, [r7, #28]
  40086e:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400870:	69bb      	ldr	r3, [r7, #24]
  400872:	095a      	lsrs	r2, r3, #5
  400874:	69fb      	ldr	r3, [r7, #28]
  400876:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400878:	697b      	ldr	r3, [r7, #20]
  40087a:	f003 031f 	and.w	r3, r3, #31
  40087e:	2101      	movs	r1, #1
  400880:	fa01 f303 	lsl.w	r3, r1, r3
  400884:	613a      	str	r2, [r7, #16]
  400886:	60fb      	str	r3, [r7, #12]
  400888:	693b      	ldr	r3, [r7, #16]
  40088a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40088c:	68ba      	ldr	r2, [r7, #8]
  40088e:	4b06      	ldr	r3, [pc, #24]	; (4008a8 <ioport_disable_pin+0x48>)
  400890:	4413      	add	r3, r2
  400892:	025b      	lsls	r3, r3, #9
  400894:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40089a:	bf00      	nop
  40089c:	3724      	adds	r7, #36	; 0x24
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	6039      	str	r1, [r7, #0]
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008ba:	683b      	ldr	r3, [r7, #0]
  4008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  4008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c4:	095a      	lsrs	r2, r3, #5
  4008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	f003 031f 	and.w	r3, r3, #31
  4008d0:	2101      	movs	r1, #1
  4008d2:	fa01 f303 	lsl.w	r3, r1, r3
  4008d6:	61fa      	str	r2, [r7, #28]
  4008d8:	61bb      	str	r3, [r7, #24]
  4008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4008dc:	617b      	str	r3, [r7, #20]
  4008de:	69fb      	ldr	r3, [r7, #28]
  4008e0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008e2:	693a      	ldr	r2, [r7, #16]
  4008e4:	4b37      	ldr	r3, [pc, #220]	; (4009c4 <ioport_set_pin_mode+0x118>)
  4008e6:	4413      	add	r3, r2
  4008e8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4008ea:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4008ec:	697b      	ldr	r3, [r7, #20]
  4008ee:	f003 0308 	and.w	r3, r3, #8
  4008f2:	2b00      	cmp	r3, #0
  4008f4:	d003      	beq.n	4008fe <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4008f6:	68fb      	ldr	r3, [r7, #12]
  4008f8:	69ba      	ldr	r2, [r7, #24]
  4008fa:	665a      	str	r2, [r3, #100]	; 0x64
  4008fc:	e002      	b.n	400904 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4008fe:	68fb      	ldr	r3, [r7, #12]
  400900:	69ba      	ldr	r2, [r7, #24]
  400902:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400904:	697b      	ldr	r3, [r7, #20]
  400906:	f003 0310 	and.w	r3, r3, #16
  40090a:	2b00      	cmp	r3, #0
  40090c:	d004      	beq.n	400918 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  40090e:	68fb      	ldr	r3, [r7, #12]
  400910:	69ba      	ldr	r2, [r7, #24]
  400912:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400916:	e003      	b.n	400920 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400918:	68fb      	ldr	r3, [r7, #12]
  40091a:	69ba      	ldr	r2, [r7, #24]
  40091c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400920:	697b      	ldr	r3, [r7, #20]
  400922:	f003 0320 	and.w	r3, r3, #32
  400926:	2b00      	cmp	r3, #0
  400928:	d003      	beq.n	400932 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40092a:	68fb      	ldr	r3, [r7, #12]
  40092c:	69ba      	ldr	r2, [r7, #24]
  40092e:	651a      	str	r2, [r3, #80]	; 0x50
  400930:	e002      	b.n	400938 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400932:	68fb      	ldr	r3, [r7, #12]
  400934:	69ba      	ldr	r2, [r7, #24]
  400936:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400938:	697b      	ldr	r3, [r7, #20]
  40093a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40093e:	2b00      	cmp	r3, #0
  400940:	d003      	beq.n	40094a <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400942:	68fb      	ldr	r3, [r7, #12]
  400944:	69ba      	ldr	r2, [r7, #24]
  400946:	621a      	str	r2, [r3, #32]
  400948:	e002      	b.n	400950 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40094a:	68fb      	ldr	r3, [r7, #12]
  40094c:	69ba      	ldr	r2, [r7, #24]
  40094e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400950:	697b      	ldr	r3, [r7, #20]
  400952:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400956:	2b00      	cmp	r3, #0
  400958:	d004      	beq.n	400964 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40095a:	68fb      	ldr	r3, [r7, #12]
  40095c:	69ba      	ldr	r2, [r7, #24]
  40095e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400962:	e003      	b.n	40096c <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400964:	68fb      	ldr	r3, [r7, #12]
  400966:	69ba      	ldr	r2, [r7, #24]
  400968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40096c:	697b      	ldr	r3, [r7, #20]
  40096e:	f003 0301 	and.w	r3, r3, #1
  400972:	2b00      	cmp	r3, #0
  400974:	d006      	beq.n	400984 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400976:	68fb      	ldr	r3, [r7, #12]
  400978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40097a:	69bb      	ldr	r3, [r7, #24]
  40097c:	431a      	orrs	r2, r3
  40097e:	68fb      	ldr	r3, [r7, #12]
  400980:	671a      	str	r2, [r3, #112]	; 0x70
  400982:	e006      	b.n	400992 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400984:	68fb      	ldr	r3, [r7, #12]
  400986:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400988:	69bb      	ldr	r3, [r7, #24]
  40098a:	43db      	mvns	r3, r3
  40098c:	401a      	ands	r2, r3
  40098e:	68fb      	ldr	r3, [r7, #12]
  400990:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400992:	697b      	ldr	r3, [r7, #20]
  400994:	f003 0302 	and.w	r3, r3, #2
  400998:	2b00      	cmp	r3, #0
  40099a:	d006      	beq.n	4009aa <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  40099c:	68fb      	ldr	r3, [r7, #12]
  40099e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009a0:	69bb      	ldr	r3, [r7, #24]
  4009a2:	431a      	orrs	r2, r3
  4009a4:	68fb      	ldr	r3, [r7, #12]
  4009a6:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4009a8:	e006      	b.n	4009b8 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4009aa:	68fb      	ldr	r3, [r7, #12]
  4009ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009ae:	69bb      	ldr	r3, [r7, #24]
  4009b0:	43db      	mvns	r3, r3
  4009b2:	401a      	ands	r2, r3
  4009b4:	68fb      	ldr	r3, [r7, #12]
  4009b6:	675a      	str	r2, [r3, #116]	; 0x74
  4009b8:	bf00      	nop
  4009ba:	3734      	adds	r7, #52	; 0x34
  4009bc:	46bd      	mov	sp, r7
  4009be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009c2:	4770      	bx	lr
  4009c4:	00200707 	.word	0x00200707

004009c8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4009c8:	b480      	push	{r7}
  4009ca:	b08d      	sub	sp, #52	; 0x34
  4009cc:	af00      	add	r7, sp, #0
  4009ce:	6078      	str	r0, [r7, #4]
  4009d0:	460b      	mov	r3, r1
  4009d2:	70fb      	strb	r3, [r7, #3]
  4009d4:	687b      	ldr	r3, [r7, #4]
  4009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009d8:	78fb      	ldrb	r3, [r7, #3]
  4009da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009e0:	627b      	str	r3, [r7, #36]	; 0x24
  4009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009e4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4009e6:	6a3b      	ldr	r3, [r7, #32]
  4009e8:	095b      	lsrs	r3, r3, #5
  4009ea:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009ec:	69fa      	ldr	r2, [r7, #28]
  4009ee:	4b17      	ldr	r3, [pc, #92]	; (400a4c <ioport_set_pin_dir+0x84>)
  4009f0:	4413      	add	r3, r2
  4009f2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4009f4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4009f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009fa:	2b01      	cmp	r3, #1
  4009fc:	d109      	bne.n	400a12 <ioport_set_pin_dir+0x4a>
  4009fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a00:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400a02:	697b      	ldr	r3, [r7, #20]
  400a04:	f003 031f 	and.w	r3, r3, #31
  400a08:	2201      	movs	r2, #1
  400a0a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a0c:	69bb      	ldr	r3, [r7, #24]
  400a0e:	611a      	str	r2, [r3, #16]
  400a10:	e00c      	b.n	400a2c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400a12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400a16:	2b00      	cmp	r3, #0
  400a18:	d108      	bne.n	400a2c <ioport_set_pin_dir+0x64>
  400a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a1c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400a1e:	693b      	ldr	r3, [r7, #16]
  400a20:	f003 031f 	and.w	r3, r3, #31
  400a24:	2201      	movs	r2, #1
  400a26:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400a28:	69bb      	ldr	r3, [r7, #24]
  400a2a:	615a      	str	r2, [r3, #20]
  400a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400a2e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	f003 031f 	and.w	r3, r3, #31
  400a36:	2201      	movs	r2, #1
  400a38:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a3a:	69bb      	ldr	r3, [r7, #24]
  400a3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400a40:	bf00      	nop
  400a42:	3734      	adds	r7, #52	; 0x34
  400a44:	46bd      	mov	sp, r7
  400a46:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a4a:	4770      	bx	lr
  400a4c:	00200707 	.word	0x00200707

00400a50 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400a50:	b480      	push	{r7}
  400a52:	b08b      	sub	sp, #44	; 0x2c
  400a54:	af00      	add	r7, sp, #0
  400a56:	6078      	str	r0, [r7, #4]
  400a58:	460b      	mov	r3, r1
  400a5a:	70fb      	strb	r3, [r7, #3]
  400a5c:	687b      	ldr	r3, [r7, #4]
  400a5e:	627b      	str	r3, [r7, #36]	; 0x24
  400a60:	78fb      	ldrb	r3, [r7, #3]
  400a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a68:	61fb      	str	r3, [r7, #28]
  400a6a:	69fb      	ldr	r3, [r7, #28]
  400a6c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400a6e:	69bb      	ldr	r3, [r7, #24]
  400a70:	095b      	lsrs	r3, r3, #5
  400a72:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a74:	697a      	ldr	r2, [r7, #20]
  400a76:	4b10      	ldr	r3, [pc, #64]	; (400ab8 <ioport_set_pin_level+0x68>)
  400a78:	4413      	add	r3, r2
  400a7a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400a7c:	613b      	str	r3, [r7, #16]

	if (level) {
  400a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400a82:	2b00      	cmp	r3, #0
  400a84:	d009      	beq.n	400a9a <ioport_set_pin_level+0x4a>
  400a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a88:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400a8a:	68fb      	ldr	r3, [r7, #12]
  400a8c:	f003 031f 	and.w	r3, r3, #31
  400a90:	2201      	movs	r2, #1
  400a92:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a94:	693b      	ldr	r3, [r7, #16]
  400a96:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400a98:	e008      	b.n	400aac <ioport_set_pin_level+0x5c>
  400a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a9c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400a9e:	68bb      	ldr	r3, [r7, #8]
  400aa0:	f003 031f 	and.w	r3, r3, #31
  400aa4:	2201      	movs	r2, #1
  400aa6:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400aa8:	693b      	ldr	r3, [r7, #16]
  400aaa:	635a      	str	r2, [r3, #52]	; 0x34
  400aac:	bf00      	nop
  400aae:	372c      	adds	r7, #44	; 0x2c
  400ab0:	46bd      	mov	sp, r7
  400ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ab6:	4770      	bx	lr
  400ab8:	00200707 	.word	0x00200707

00400abc <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  400abc:	b480      	push	{r7}
  400abe:	b08d      	sub	sp, #52	; 0x34
  400ac0:	af00      	add	r7, sp, #0
  400ac2:	6078      	str	r0, [r7, #4]
  400ac4:	460b      	mov	r3, r1
  400ac6:	70fb      	strb	r3, [r7, #3]
  400ac8:	687b      	ldr	r3, [r7, #4]
  400aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  400acc:	78fb      	ldrb	r3, [r7, #3]
  400ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400ad4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ad8:	095a      	lsrs	r2, r3, #5
  400ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400adc:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400ade:	6a3b      	ldr	r3, [r7, #32]
  400ae0:	f003 031f 	and.w	r3, r3, #31
  400ae4:	2101      	movs	r1, #1
  400ae6:	fa01 f303 	lsl.w	r3, r1, r3
  400aea:	61fa      	str	r2, [r7, #28]
  400aec:	61bb      	str	r3, [r7, #24]
  400aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400af2:	75fb      	strb	r3, [r7, #23]
  400af4:	69fb      	ldr	r3, [r7, #28]
  400af6:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400af8:	693a      	ldr	r2, [r7, #16]
  400afa:	4b23      	ldr	r3, [pc, #140]	; (400b88 <ioport_set_pin_sense_mode+0xcc>)
  400afc:	4413      	add	r3, r2
  400afe:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  400b00:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  400b02:	7dfb      	ldrb	r3, [r7, #23]
  400b04:	3b01      	subs	r3, #1
  400b06:	2b03      	cmp	r3, #3
  400b08:	d82e      	bhi.n	400b68 <ioport_set_pin_sense_mode+0xac>
  400b0a:	a201      	add	r2, pc, #4	; (adr r2, 400b10 <ioport_set_pin_sense_mode+0x54>)
  400b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b10:	00400b45 	.word	0x00400b45
  400b14:	00400b57 	.word	0x00400b57
  400b18:	00400b21 	.word	0x00400b21
  400b1c:	00400b33 	.word	0x00400b33
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400b20:	68fb      	ldr	r3, [r7, #12]
  400b22:	69ba      	ldr	r2, [r7, #24]
  400b24:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400b28:	68fb      	ldr	r3, [r7, #12]
  400b2a:	69ba      	ldr	r2, [r7, #24]
  400b2c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400b30:	e01f      	b.n	400b72 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400b32:	68fb      	ldr	r3, [r7, #12]
  400b34:	69ba      	ldr	r2, [r7, #24]
  400b36:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400b3a:	68fb      	ldr	r3, [r7, #12]
  400b3c:	69ba      	ldr	r2, [r7, #24]
  400b3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400b42:	e016      	b.n	400b72 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400b44:	68fb      	ldr	r3, [r7, #12]
  400b46:	69ba      	ldr	r2, [r7, #24]
  400b48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400b4c:	68fb      	ldr	r3, [r7, #12]
  400b4e:	69ba      	ldr	r2, [r7, #24]
  400b50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400b54:	e00d      	b.n	400b72 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400b56:	68fb      	ldr	r3, [r7, #12]
  400b58:	69ba      	ldr	r2, [r7, #24]
  400b5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400b5e:	68fb      	ldr	r3, [r7, #12]
  400b60:	69ba      	ldr	r2, [r7, #24]
  400b62:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400b66:	e004      	b.n	400b72 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400b68:	68fb      	ldr	r3, [r7, #12]
  400b6a:	69ba      	ldr	r2, [r7, #24]
  400b6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400b70:	e003      	b.n	400b7a <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400b72:	68fb      	ldr	r3, [r7, #12]
  400b74:	69ba      	ldr	r2, [r7, #24]
  400b76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400b7a:	bf00      	nop
  400b7c:	3734      	adds	r7, #52	; 0x34
  400b7e:	46bd      	mov	sp, r7
  400b80:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b84:	4770      	bx	lr
  400b86:	bf00      	nop
  400b88:	00200707 	.word	0x00200707

00400b8c <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400b8c:	b480      	push	{r7}
  400b8e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b94:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400b98:	4a0c      	ldr	r2, [pc, #48]	; (400bcc <tcm_disable+0x40>)
  400b9a:	4b0c      	ldr	r3, [pc, #48]	; (400bcc <tcm_disable+0x40>)
  400b9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400ba0:	f023 0301 	bic.w	r3, r3, #1
  400ba4:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400ba8:	4a08      	ldr	r2, [pc, #32]	; (400bcc <tcm_disable+0x40>)
  400baa:	4b08      	ldr	r3, [pc, #32]	; (400bcc <tcm_disable+0x40>)
  400bac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  400bb0:	f023 0301 	bic.w	r3, r3, #1
  400bb4:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  400bb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bbc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  400bc0:	bf00      	nop
  400bc2:	46bd      	mov	sp, r7
  400bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bc8:	4770      	bx	lr
  400bca:	bf00      	nop
  400bcc:	e000ed00 	.word	0xe000ed00

00400bd0 <board_init>:
#endif

void board_init(void)
{
  400bd0:	b580      	push	{r7, lr}
  400bd2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400bd4:	4b1c      	ldr	r3, [pc, #112]	; (400c48 <board_init+0x78>)
  400bd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bda:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400bdc:	4b1b      	ldr	r3, [pc, #108]	; (400c4c <board_init+0x7c>)
  400bde:	4a1c      	ldr	r2, [pc, #112]	; (400c50 <board_init+0x80>)
  400be0:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400be2:	4b1a      	ldr	r3, [pc, #104]	; (400c4c <board_init+0x7c>)
  400be4:	4a1b      	ldr	r2, [pc, #108]	; (400c54 <board_init+0x84>)
  400be6:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400be8:	4b1b      	ldr	r3, [pc, #108]	; (400c58 <board_init+0x88>)
  400bea:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400bec:	4b1b      	ldr	r3, [pc, #108]	; (400c5c <board_init+0x8c>)
  400bee:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400bf0:	2101      	movs	r1, #1
  400bf2:	2048      	movs	r0, #72	; 0x48
  400bf4:	4b1a      	ldr	r3, [pc, #104]	; (400c60 <board_init+0x90>)
  400bf6:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400bf8:	2101      	movs	r1, #1
  400bfa:	2048      	movs	r0, #72	; 0x48
  400bfc:	4b19      	ldr	r3, [pc, #100]	; (400c64 <board_init+0x94>)
  400bfe:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400c00:	2100      	movs	r1, #0
  400c02:	200b      	movs	r0, #11
  400c04:	4b16      	ldr	r3, [pc, #88]	; (400c60 <board_init+0x90>)
  400c06:	4798      	blx	r3
  400c08:	2188      	movs	r1, #136	; 0x88
  400c0a:	200b      	movs	r0, #11
  400c0c:	4b16      	ldr	r3, [pc, #88]	; (400c68 <board_init+0x98>)
  400c0e:	4798      	blx	r3
  400c10:	2102      	movs	r1, #2
  400c12:	200b      	movs	r0, #11
  400c14:	4b15      	ldr	r3, [pc, #84]	; (400c6c <board_init+0x9c>)
  400c16:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400c18:	2100      	movs	r1, #0
  400c1a:	2015      	movs	r0, #21
  400c1c:	4b12      	ldr	r3, [pc, #72]	; (400c68 <board_init+0x98>)
  400c1e:	4798      	blx	r3
  400c20:	2015      	movs	r0, #21
  400c22:	4b13      	ldr	r3, [pc, #76]	; (400c70 <board_init+0xa0>)
  400c24:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400c26:	4a13      	ldr	r2, [pc, #76]	; (400c74 <board_init+0xa4>)
  400c28:	4b12      	ldr	r3, [pc, #72]	; (400c74 <board_init+0xa4>)
  400c2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400c2e:	f043 0310 	orr.w	r3, r3, #16
  400c32:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400c36:	2103      	movs	r1, #3
  400c38:	2024      	movs	r0, #36	; 0x24
  400c3a:	4b0b      	ldr	r3, [pc, #44]	; (400c68 <board_init+0x98>)
  400c3c:	4798      	blx	r3
  400c3e:	2024      	movs	r0, #36	; 0x24
  400c40:	4b0b      	ldr	r3, [pc, #44]	; (400c70 <board_init+0xa0>)
  400c42:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400c44:	bf00      	nop
  400c46:	bd80      	pop	{r7, pc}
  400c48:	400e1850 	.word	0x400e1850
  400c4c:	400e0c00 	.word	0x400e0c00
  400c50:	5a00080c 	.word	0x5a00080c
  400c54:	5a00070c 	.word	0x5a00070c
  400c58:	00400b8d 	.word	0x00400b8d
  400c5c:	00400835 	.word	0x00400835
  400c60:	004009c9 	.word	0x004009c9
  400c64:	00400a51 	.word	0x00400a51
  400c68:	004008ad 	.word	0x004008ad
  400c6c:	00400abd 	.word	0x00400abd
  400c70:	00400861 	.word	0x00400861
  400c74:	40088000 	.word	0x40088000

00400c78 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400c78:	b480      	push	{r7}
  400c7a:	b085      	sub	sp, #20
  400c7c:	af00      	add	r7, sp, #0
  400c7e:	60f8      	str	r0, [r7, #12]
  400c80:	60b9      	str	r1, [r7, #8]
  400c82:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c84:	687b      	ldr	r3, [r7, #4]
  400c86:	2b00      	cmp	r3, #0
  400c88:	d003      	beq.n	400c92 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400c8a:	68fb      	ldr	r3, [r7, #12]
  400c8c:	68ba      	ldr	r2, [r7, #8]
  400c8e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400c90:	e002      	b.n	400c98 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400c92:	68fb      	ldr	r3, [r7, #12]
  400c94:	68ba      	ldr	r2, [r7, #8]
  400c96:	661a      	str	r2, [r3, #96]	; 0x60
}
  400c98:	bf00      	nop
  400c9a:	3714      	adds	r7, #20
  400c9c:	46bd      	mov	sp, r7
  400c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ca2:	4770      	bx	lr

00400ca4 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400ca4:	b480      	push	{r7}
  400ca6:	b083      	sub	sp, #12
  400ca8:	af00      	add	r7, sp, #0
  400caa:	6078      	str	r0, [r7, #4]
  400cac:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  400cae:	687b      	ldr	r3, [r7, #4]
  400cb0:	683a      	ldr	r2, [r7, #0]
  400cb2:	631a      	str	r2, [r3, #48]	; 0x30
}
  400cb4:	bf00      	nop
  400cb6:	370c      	adds	r7, #12
  400cb8:	46bd      	mov	sp, r7
  400cba:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cbe:	4770      	bx	lr

00400cc0 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400cc0:	b480      	push	{r7}
  400cc2:	b083      	sub	sp, #12
  400cc4:	af00      	add	r7, sp, #0
  400cc6:	6078      	str	r0, [r7, #4]
  400cc8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  400cca:	687b      	ldr	r3, [r7, #4]
  400ccc:	683a      	ldr	r2, [r7, #0]
  400cce:	635a      	str	r2, [r3, #52]	; 0x34
}
  400cd0:	bf00      	nop
  400cd2:	370c      	adds	r7, #12
  400cd4:	46bd      	mov	sp, r7
  400cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cda:	4770      	bx	lr

00400cdc <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400cdc:	b480      	push	{r7}
  400cde:	b087      	sub	sp, #28
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	60f8      	str	r0, [r7, #12]
  400ce4:	60b9      	str	r1, [r7, #8]
  400ce6:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400ce8:	68bb      	ldr	r3, [r7, #8]
  400cea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400cee:	d003      	beq.n	400cf8 <pio_get+0x1c>
  400cf0:	68bb      	ldr	r3, [r7, #8]
  400cf2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400cf6:	d103      	bne.n	400d00 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  400cf8:	68fb      	ldr	r3, [r7, #12]
  400cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400cfc:	617b      	str	r3, [r7, #20]
  400cfe:	e002      	b.n	400d06 <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  400d00:	68fb      	ldr	r3, [r7, #12]
  400d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400d04:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  400d06:	697a      	ldr	r2, [r7, #20]
  400d08:	687b      	ldr	r3, [r7, #4]
  400d0a:	4013      	ands	r3, r2
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d101      	bne.n	400d14 <pio_get+0x38>
		return 0;
  400d10:	2300      	movs	r3, #0
  400d12:	e000      	b.n	400d16 <pio_get+0x3a>
	} else {
		return 1;
  400d14:	2301      	movs	r3, #1
	}
}
  400d16:	4618      	mov	r0, r3
  400d18:	371c      	adds	r7, #28
  400d1a:	46bd      	mov	sp, r7
  400d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d20:	4770      	bx	lr
	...

00400d24 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400d24:	b580      	push	{r7, lr}
  400d26:	b084      	sub	sp, #16
  400d28:	af00      	add	r7, sp, #0
  400d2a:	60f8      	str	r0, [r7, #12]
  400d2c:	60b9      	str	r1, [r7, #8]
  400d2e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400d30:	68b9      	ldr	r1, [r7, #8]
  400d32:	68f8      	ldr	r0, [r7, #12]
  400d34:	4b19      	ldr	r3, [pc, #100]	; (400d9c <pio_set_input+0x78>)
  400d36:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400d38:	687b      	ldr	r3, [r7, #4]
  400d3a:	f003 0301 	and.w	r3, r3, #1
  400d3e:	461a      	mov	r2, r3
  400d40:	68b9      	ldr	r1, [r7, #8]
  400d42:	68f8      	ldr	r0, [r7, #12]
  400d44:	4b16      	ldr	r3, [pc, #88]	; (400da0 <pio_set_input+0x7c>)
  400d46:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400d48:	687b      	ldr	r3, [r7, #4]
  400d4a:	f003 030a 	and.w	r3, r3, #10
  400d4e:	2b00      	cmp	r3, #0
  400d50:	d003      	beq.n	400d5a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400d52:	68fb      	ldr	r3, [r7, #12]
  400d54:	68ba      	ldr	r2, [r7, #8]
  400d56:	621a      	str	r2, [r3, #32]
  400d58:	e002      	b.n	400d60 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400d5a:	68fb      	ldr	r3, [r7, #12]
  400d5c:	68ba      	ldr	r2, [r7, #8]
  400d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400d60:	687b      	ldr	r3, [r7, #4]
  400d62:	f003 0302 	and.w	r3, r3, #2
  400d66:	2b00      	cmp	r3, #0
  400d68:	d004      	beq.n	400d74 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400d6a:	68fb      	ldr	r3, [r7, #12]
  400d6c:	68ba      	ldr	r2, [r7, #8]
  400d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400d72:	e008      	b.n	400d86 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400d74:	687b      	ldr	r3, [r7, #4]
  400d76:	f003 0308 	and.w	r3, r3, #8
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d003      	beq.n	400d86 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400d7e:	68fb      	ldr	r3, [r7, #12]
  400d80:	68ba      	ldr	r2, [r7, #8]
  400d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400d86:	68fb      	ldr	r3, [r7, #12]
  400d88:	68ba      	ldr	r2, [r7, #8]
  400d8a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400d8c:	68fb      	ldr	r3, [r7, #12]
  400d8e:	68ba      	ldr	r2, [r7, #8]
  400d90:	601a      	str	r2, [r3, #0]
}
  400d92:	bf00      	nop
  400d94:	3710      	adds	r7, #16
  400d96:	46bd      	mov	sp, r7
  400d98:	bd80      	pop	{r7, pc}
  400d9a:	bf00      	nop
  400d9c:	00400ec1 	.word	0x00400ec1
  400da0:	00400c79 	.word	0x00400c79

00400da4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400da4:	b580      	push	{r7, lr}
  400da6:	b084      	sub	sp, #16
  400da8:	af00      	add	r7, sp, #0
  400daa:	60f8      	str	r0, [r7, #12]
  400dac:	60b9      	str	r1, [r7, #8]
  400dae:	607a      	str	r2, [r7, #4]
  400db0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400db2:	68b9      	ldr	r1, [r7, #8]
  400db4:	68f8      	ldr	r0, [r7, #12]
  400db6:	4b12      	ldr	r3, [pc, #72]	; (400e00 <pio_set_output+0x5c>)
  400db8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400dba:	69ba      	ldr	r2, [r7, #24]
  400dbc:	68b9      	ldr	r1, [r7, #8]
  400dbe:	68f8      	ldr	r0, [r7, #12]
  400dc0:	4b10      	ldr	r3, [pc, #64]	; (400e04 <pio_set_output+0x60>)
  400dc2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400dc4:	683b      	ldr	r3, [r7, #0]
  400dc6:	2b00      	cmp	r3, #0
  400dc8:	d003      	beq.n	400dd2 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400dca:	68fb      	ldr	r3, [r7, #12]
  400dcc:	68ba      	ldr	r2, [r7, #8]
  400dce:	651a      	str	r2, [r3, #80]	; 0x50
  400dd0:	e002      	b.n	400dd8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400dd2:	68fb      	ldr	r3, [r7, #12]
  400dd4:	68ba      	ldr	r2, [r7, #8]
  400dd6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400dd8:	687b      	ldr	r3, [r7, #4]
  400dda:	2b00      	cmp	r3, #0
  400ddc:	d003      	beq.n	400de6 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400dde:	68fb      	ldr	r3, [r7, #12]
  400de0:	68ba      	ldr	r2, [r7, #8]
  400de2:	631a      	str	r2, [r3, #48]	; 0x30
  400de4:	e002      	b.n	400dec <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400de6:	68fb      	ldr	r3, [r7, #12]
  400de8:	68ba      	ldr	r2, [r7, #8]
  400dea:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400dec:	68fb      	ldr	r3, [r7, #12]
  400dee:	68ba      	ldr	r2, [r7, #8]
  400df0:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400df2:	68fb      	ldr	r3, [r7, #12]
  400df4:	68ba      	ldr	r2, [r7, #8]
  400df6:	601a      	str	r2, [r3, #0]
}
  400df8:	bf00      	nop
  400dfa:	3710      	adds	r7, #16
  400dfc:	46bd      	mov	sp, r7
  400dfe:	bd80      	pop	{r7, pc}
  400e00:	00400ec1 	.word	0x00400ec1
  400e04:	00400c79 	.word	0x00400c79

00400e08 <pio_pull_down>:
 * \param ul_pull_down_enable Indicates if the pin(s) internal pull-down shall
 * be configured.
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
  400e08:	b480      	push	{r7}
  400e0a:	b085      	sub	sp, #20
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	60f8      	str	r0, [r7, #12]
  400e10:	60b9      	str	r1, [r7, #8]
  400e12:	607a      	str	r2, [r7, #4]
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  400e14:	687b      	ldr	r3, [r7, #4]
  400e16:	2b00      	cmp	r3, #0
  400e18:	d004      	beq.n	400e24 <pio_pull_down+0x1c>
		p_pio->PIO_PPDER = ul_mask;
  400e1a:	68fb      	ldr	r3, [r7, #12]
  400e1c:	68ba      	ldr	r2, [r7, #8]
  400e1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	} else {
		p_pio->PIO_PPDDR = ul_mask;
	}
}
  400e22:	e003      	b.n	400e2c <pio_pull_down+0x24>
		p_pio->PIO_PPDDR = ul_mask;
  400e24:	68fb      	ldr	r3, [r7, #12]
  400e26:	68ba      	ldr	r2, [r7, #8]
  400e28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  400e2c:	bf00      	nop
  400e2e:	3714      	adds	r7, #20
  400e30:	46bd      	mov	sp, r7
  400e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e36:	4770      	bx	lr

00400e38 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400e38:	b480      	push	{r7}
  400e3a:	b085      	sub	sp, #20
  400e3c:	af00      	add	r7, sp, #0
  400e3e:	60f8      	str	r0, [r7, #12]
  400e40:	60b9      	str	r1, [r7, #8]
  400e42:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400e44:	687b      	ldr	r3, [r7, #4]
  400e46:	f003 0310 	and.w	r3, r3, #16
  400e4a:	2b00      	cmp	r3, #0
  400e4c:	d020      	beq.n	400e90 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400e4e:	68fb      	ldr	r3, [r7, #12]
  400e50:	68ba      	ldr	r2, [r7, #8]
  400e52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400e56:	687b      	ldr	r3, [r7, #4]
  400e58:	f003 0320 	and.w	r3, r3, #32
  400e5c:	2b00      	cmp	r3, #0
  400e5e:	d004      	beq.n	400e6a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400e60:	68fb      	ldr	r3, [r7, #12]
  400e62:	68ba      	ldr	r2, [r7, #8]
  400e64:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400e68:	e003      	b.n	400e72 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400e6a:	68fb      	ldr	r3, [r7, #12]
  400e6c:	68ba      	ldr	r2, [r7, #8]
  400e6e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400e72:	687b      	ldr	r3, [r7, #4]
  400e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400e78:	2b00      	cmp	r3, #0
  400e7a:	d004      	beq.n	400e86 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400e7c:	68fb      	ldr	r3, [r7, #12]
  400e7e:	68ba      	ldr	r2, [r7, #8]
  400e80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400e84:	e008      	b.n	400e98 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400e86:	68fb      	ldr	r3, [r7, #12]
  400e88:	68ba      	ldr	r2, [r7, #8]
  400e8a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  400e8e:	e003      	b.n	400e98 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  400e90:	68fb      	ldr	r3, [r7, #12]
  400e92:	68ba      	ldr	r2, [r7, #8]
  400e94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400e98:	bf00      	nop
  400e9a:	3714      	adds	r7, #20
  400e9c:	46bd      	mov	sp, r7
  400e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ea2:	4770      	bx	lr

00400ea4 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400ea4:	b480      	push	{r7}
  400ea6:	b083      	sub	sp, #12
  400ea8:	af00      	add	r7, sp, #0
  400eaa:	6078      	str	r0, [r7, #4]
  400eac:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	683a      	ldr	r2, [r7, #0]
  400eb2:	641a      	str	r2, [r3, #64]	; 0x40
}
  400eb4:	bf00      	nop
  400eb6:	370c      	adds	r7, #12
  400eb8:	46bd      	mov	sp, r7
  400eba:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ebe:	4770      	bx	lr

00400ec0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400ec0:	b480      	push	{r7}
  400ec2:	b083      	sub	sp, #12
  400ec4:	af00      	add	r7, sp, #0
  400ec6:	6078      	str	r0, [r7, #4]
  400ec8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400eca:	687b      	ldr	r3, [r7, #4]
  400ecc:	683a      	ldr	r2, [r7, #0]
  400ece:	645a      	str	r2, [r3, #68]	; 0x44
}
  400ed0:	bf00      	nop
  400ed2:	370c      	adds	r7, #12
  400ed4:	46bd      	mov	sp, r7
  400ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eda:	4770      	bx	lr

00400edc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400edc:	b480      	push	{r7}
  400ede:	b083      	sub	sp, #12
  400ee0:	af00      	add	r7, sp, #0
  400ee2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400ee4:	687b      	ldr	r3, [r7, #4]
  400ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400ee8:	4618      	mov	r0, r3
  400eea:	370c      	adds	r7, #12
  400eec:	46bd      	mov	sp, r7
  400eee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ef2:	4770      	bx	lr

00400ef4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400ef4:	b480      	push	{r7}
  400ef6:	b083      	sub	sp, #12
  400ef8:	af00      	add	r7, sp, #0
  400efa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400efc:	687b      	ldr	r3, [r7, #4]
  400efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400f00:	4618      	mov	r0, r3
  400f02:	370c      	adds	r7, #12
  400f04:	46bd      	mov	sp, r7
  400f06:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f0a:	4770      	bx	lr

00400f0c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f0c:	b580      	push	{r7, lr}
  400f0e:	b084      	sub	sp, #16
  400f10:	af00      	add	r7, sp, #0
  400f12:	6078      	str	r0, [r7, #4]
  400f14:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f16:	6878      	ldr	r0, [r7, #4]
  400f18:	4b26      	ldr	r3, [pc, #152]	; (400fb4 <pio_handler_process+0xa8>)
  400f1a:	4798      	blx	r3
  400f1c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400f1e:	6878      	ldr	r0, [r7, #4]
  400f20:	4b25      	ldr	r3, [pc, #148]	; (400fb8 <pio_handler_process+0xac>)
  400f22:	4798      	blx	r3
  400f24:	4602      	mov	r2, r0
  400f26:	68fb      	ldr	r3, [r7, #12]
  400f28:	4013      	ands	r3, r2
  400f2a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400f2c:	68fb      	ldr	r3, [r7, #12]
  400f2e:	2b00      	cmp	r3, #0
  400f30:	d03c      	beq.n	400fac <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400f32:	2300      	movs	r3, #0
  400f34:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400f36:	e034      	b.n	400fa2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400f38:	4a20      	ldr	r2, [pc, #128]	; (400fbc <pio_handler_process+0xb0>)
  400f3a:	68bb      	ldr	r3, [r7, #8]
  400f3c:	011b      	lsls	r3, r3, #4
  400f3e:	4413      	add	r3, r2
  400f40:	681a      	ldr	r2, [r3, #0]
  400f42:	683b      	ldr	r3, [r7, #0]
  400f44:	429a      	cmp	r2, r3
  400f46:	d126      	bne.n	400f96 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f48:	4a1c      	ldr	r2, [pc, #112]	; (400fbc <pio_handler_process+0xb0>)
  400f4a:	68bb      	ldr	r3, [r7, #8]
  400f4c:	011b      	lsls	r3, r3, #4
  400f4e:	4413      	add	r3, r2
  400f50:	3304      	adds	r3, #4
  400f52:	681a      	ldr	r2, [r3, #0]
  400f54:	68fb      	ldr	r3, [r7, #12]
  400f56:	4013      	ands	r3, r2
  400f58:	2b00      	cmp	r3, #0
  400f5a:	d01c      	beq.n	400f96 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f5c:	4a17      	ldr	r2, [pc, #92]	; (400fbc <pio_handler_process+0xb0>)
  400f5e:	68bb      	ldr	r3, [r7, #8]
  400f60:	011b      	lsls	r3, r3, #4
  400f62:	4413      	add	r3, r2
  400f64:	330c      	adds	r3, #12
  400f66:	681b      	ldr	r3, [r3, #0]
  400f68:	4914      	ldr	r1, [pc, #80]	; (400fbc <pio_handler_process+0xb0>)
  400f6a:	68ba      	ldr	r2, [r7, #8]
  400f6c:	0112      	lsls	r2, r2, #4
  400f6e:	440a      	add	r2, r1
  400f70:	6810      	ldr	r0, [r2, #0]
  400f72:	4912      	ldr	r1, [pc, #72]	; (400fbc <pio_handler_process+0xb0>)
  400f74:	68ba      	ldr	r2, [r7, #8]
  400f76:	0112      	lsls	r2, r2, #4
  400f78:	440a      	add	r2, r1
  400f7a:	3204      	adds	r2, #4
  400f7c:	6812      	ldr	r2, [r2, #0]
  400f7e:	4611      	mov	r1, r2
  400f80:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400f82:	4a0e      	ldr	r2, [pc, #56]	; (400fbc <pio_handler_process+0xb0>)
  400f84:	68bb      	ldr	r3, [r7, #8]
  400f86:	011b      	lsls	r3, r3, #4
  400f88:	4413      	add	r3, r2
  400f8a:	3304      	adds	r3, #4
  400f8c:	681b      	ldr	r3, [r3, #0]
  400f8e:	43db      	mvns	r3, r3
  400f90:	68fa      	ldr	r2, [r7, #12]
  400f92:	4013      	ands	r3, r2
  400f94:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400f96:	68bb      	ldr	r3, [r7, #8]
  400f98:	3301      	adds	r3, #1
  400f9a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f9c:	68bb      	ldr	r3, [r7, #8]
  400f9e:	2b06      	cmp	r3, #6
  400fa0:	d803      	bhi.n	400faa <pio_handler_process+0x9e>
		while (status != 0) {
  400fa2:	68fb      	ldr	r3, [r7, #12]
  400fa4:	2b00      	cmp	r3, #0
  400fa6:	d1c7      	bne.n	400f38 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400fa8:	e000      	b.n	400fac <pio_handler_process+0xa0>
				break;
  400faa:	bf00      	nop
}
  400fac:	bf00      	nop
  400fae:	3710      	adds	r7, #16
  400fb0:	46bd      	mov	sp, r7
  400fb2:	bd80      	pop	{r7, pc}
  400fb4:	00400edd 	.word	0x00400edd
  400fb8:	00400ef5 	.word	0x00400ef5
  400fbc:	204009e0 	.word	0x204009e0

00400fc0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400fc0:	b580      	push	{r7, lr}
  400fc2:	b086      	sub	sp, #24
  400fc4:	af00      	add	r7, sp, #0
  400fc6:	60f8      	str	r0, [r7, #12]
  400fc8:	60b9      	str	r1, [r7, #8]
  400fca:	607a      	str	r2, [r7, #4]
  400fcc:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400fce:	4b21      	ldr	r3, [pc, #132]	; (401054 <pio_handler_set+0x94>)
  400fd0:	681b      	ldr	r3, [r3, #0]
  400fd2:	2b06      	cmp	r3, #6
  400fd4:	d901      	bls.n	400fda <pio_handler_set+0x1a>
		return 1;
  400fd6:	2301      	movs	r3, #1
  400fd8:	e038      	b.n	40104c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400fda:	2300      	movs	r3, #0
  400fdc:	75fb      	strb	r3, [r7, #23]
  400fde:	e011      	b.n	401004 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400fe0:	7dfb      	ldrb	r3, [r7, #23]
  400fe2:	011b      	lsls	r3, r3, #4
  400fe4:	4a1c      	ldr	r2, [pc, #112]	; (401058 <pio_handler_set+0x98>)
  400fe6:	4413      	add	r3, r2
  400fe8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400fea:	693b      	ldr	r3, [r7, #16]
  400fec:	681a      	ldr	r2, [r3, #0]
  400fee:	68bb      	ldr	r3, [r7, #8]
  400ff0:	429a      	cmp	r2, r3
  400ff2:	d104      	bne.n	400ffe <pio_handler_set+0x3e>
  400ff4:	693b      	ldr	r3, [r7, #16]
  400ff6:	685a      	ldr	r2, [r3, #4]
  400ff8:	687b      	ldr	r3, [r7, #4]
  400ffa:	429a      	cmp	r2, r3
  400ffc:	d008      	beq.n	401010 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400ffe:	7dfb      	ldrb	r3, [r7, #23]
  401000:	3301      	adds	r3, #1
  401002:	75fb      	strb	r3, [r7, #23]
  401004:	7dfa      	ldrb	r2, [r7, #23]
  401006:	4b13      	ldr	r3, [pc, #76]	; (401054 <pio_handler_set+0x94>)
  401008:	681b      	ldr	r3, [r3, #0]
  40100a:	429a      	cmp	r2, r3
  40100c:	d9e8      	bls.n	400fe0 <pio_handler_set+0x20>
  40100e:	e000      	b.n	401012 <pio_handler_set+0x52>
			break;
  401010:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401012:	693b      	ldr	r3, [r7, #16]
  401014:	68ba      	ldr	r2, [r7, #8]
  401016:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  401018:	693b      	ldr	r3, [r7, #16]
  40101a:	687a      	ldr	r2, [r7, #4]
  40101c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40101e:	693b      	ldr	r3, [r7, #16]
  401020:	683a      	ldr	r2, [r7, #0]
  401022:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  401024:	693b      	ldr	r3, [r7, #16]
  401026:	6a3a      	ldr	r2, [r7, #32]
  401028:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40102a:	7dfa      	ldrb	r2, [r7, #23]
  40102c:	4b09      	ldr	r3, [pc, #36]	; (401054 <pio_handler_set+0x94>)
  40102e:	681b      	ldr	r3, [r3, #0]
  401030:	3301      	adds	r3, #1
  401032:	429a      	cmp	r2, r3
  401034:	d104      	bne.n	401040 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  401036:	4b07      	ldr	r3, [pc, #28]	; (401054 <pio_handler_set+0x94>)
  401038:	681b      	ldr	r3, [r3, #0]
  40103a:	3301      	adds	r3, #1
  40103c:	4a05      	ldr	r2, [pc, #20]	; (401054 <pio_handler_set+0x94>)
  40103e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401040:	683a      	ldr	r2, [r7, #0]
  401042:	6879      	ldr	r1, [r7, #4]
  401044:	68f8      	ldr	r0, [r7, #12]
  401046:	4b05      	ldr	r3, [pc, #20]	; (40105c <pio_handler_set+0x9c>)
  401048:	4798      	blx	r3

	return 0;
  40104a:	2300      	movs	r3, #0
}
  40104c:	4618      	mov	r0, r3
  40104e:	3718      	adds	r7, #24
  401050:	46bd      	mov	sp, r7
  401052:	bd80      	pop	{r7, pc}
  401054:	20400a50 	.word	0x20400a50
  401058:	204009e0 	.word	0x204009e0
  40105c:	00400e39 	.word	0x00400e39

00401060 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401060:	b580      	push	{r7, lr}
  401062:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401064:	210a      	movs	r1, #10
  401066:	4802      	ldr	r0, [pc, #8]	; (401070 <PIOA_Handler+0x10>)
  401068:	4b02      	ldr	r3, [pc, #8]	; (401074 <PIOA_Handler+0x14>)
  40106a:	4798      	blx	r3
}
  40106c:	bf00      	nop
  40106e:	bd80      	pop	{r7, pc}
  401070:	400e0e00 	.word	0x400e0e00
  401074:	00400f0d 	.word	0x00400f0d

00401078 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401078:	b580      	push	{r7, lr}
  40107a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40107c:	210b      	movs	r1, #11
  40107e:	4802      	ldr	r0, [pc, #8]	; (401088 <PIOB_Handler+0x10>)
  401080:	4b02      	ldr	r3, [pc, #8]	; (40108c <PIOB_Handler+0x14>)
  401082:	4798      	blx	r3
}
  401084:	bf00      	nop
  401086:	bd80      	pop	{r7, pc}
  401088:	400e1000 	.word	0x400e1000
  40108c:	00400f0d 	.word	0x00400f0d

00401090 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401090:	b580      	push	{r7, lr}
  401092:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401094:	210c      	movs	r1, #12
  401096:	4802      	ldr	r0, [pc, #8]	; (4010a0 <PIOC_Handler+0x10>)
  401098:	4b02      	ldr	r3, [pc, #8]	; (4010a4 <PIOC_Handler+0x14>)
  40109a:	4798      	blx	r3
}
  40109c:	bf00      	nop
  40109e:	bd80      	pop	{r7, pc}
  4010a0:	400e1200 	.word	0x400e1200
  4010a4:	00400f0d 	.word	0x00400f0d

004010a8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4010a8:	b580      	push	{r7, lr}
  4010aa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4010ac:	2110      	movs	r1, #16
  4010ae:	4802      	ldr	r0, [pc, #8]	; (4010b8 <PIOD_Handler+0x10>)
  4010b0:	4b02      	ldr	r3, [pc, #8]	; (4010bc <PIOD_Handler+0x14>)
  4010b2:	4798      	blx	r3
}
  4010b4:	bf00      	nop
  4010b6:	bd80      	pop	{r7, pc}
  4010b8:	400e1400 	.word	0x400e1400
  4010bc:	00400f0d 	.word	0x00400f0d

004010c0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4010c0:	b580      	push	{r7, lr}
  4010c2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4010c4:	2111      	movs	r1, #17
  4010c6:	4802      	ldr	r0, [pc, #8]	; (4010d0 <PIOE_Handler+0x10>)
  4010c8:	4b02      	ldr	r3, [pc, #8]	; (4010d4 <PIOE_Handler+0x14>)
  4010ca:	4798      	blx	r3
}
  4010cc:	bf00      	nop
  4010ce:	bd80      	pop	{r7, pc}
  4010d0:	400e1600 	.word	0x400e1600
  4010d4:	00400f0d 	.word	0x00400f0d

004010d8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4010d8:	b480      	push	{r7}
  4010da:	b083      	sub	sp, #12
  4010dc:	af00      	add	r7, sp, #0
  4010de:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	3b01      	subs	r3, #1
  4010e4:	2b03      	cmp	r3, #3
  4010e6:	d81a      	bhi.n	40111e <pmc_mck_set_division+0x46>
  4010e8:	a201      	add	r2, pc, #4	; (adr r2, 4010f0 <pmc_mck_set_division+0x18>)
  4010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4010ee:	bf00      	nop
  4010f0:	00401101 	.word	0x00401101
  4010f4:	00401107 	.word	0x00401107
  4010f8:	0040110f 	.word	0x0040110f
  4010fc:	00401117 	.word	0x00401117
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401100:	2300      	movs	r3, #0
  401102:	607b      	str	r3, [r7, #4]
			break;
  401104:	e00e      	b.n	401124 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401106:	f44f 7380 	mov.w	r3, #256	; 0x100
  40110a:	607b      	str	r3, [r7, #4]
			break;
  40110c:	e00a      	b.n	401124 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40110e:	f44f 7340 	mov.w	r3, #768	; 0x300
  401112:	607b      	str	r3, [r7, #4]
			break;
  401114:	e006      	b.n	401124 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401116:	f44f 7300 	mov.w	r3, #512	; 0x200
  40111a:	607b      	str	r3, [r7, #4]
			break;
  40111c:	e002      	b.n	401124 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40111e:	2300      	movs	r3, #0
  401120:	607b      	str	r3, [r7, #4]
			break;
  401122:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401124:	490a      	ldr	r1, [pc, #40]	; (401150 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401126:	4b0a      	ldr	r3, [pc, #40]	; (401150 <pmc_mck_set_division+0x78>)
  401128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40112a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40112e:	687b      	ldr	r3, [r7, #4]
  401130:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  401132:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401134:	bf00      	nop
  401136:	4b06      	ldr	r3, [pc, #24]	; (401150 <pmc_mck_set_division+0x78>)
  401138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40113a:	f003 0308 	and.w	r3, r3, #8
  40113e:	2b00      	cmp	r3, #0
  401140:	d0f9      	beq.n	401136 <pmc_mck_set_division+0x5e>
}
  401142:	bf00      	nop
  401144:	370c      	adds	r7, #12
  401146:	46bd      	mov	sp, r7
  401148:	f85d 7b04 	ldr.w	r7, [sp], #4
  40114c:	4770      	bx	lr
  40114e:	bf00      	nop
  401150:	400e0600 	.word	0x400e0600

00401154 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401154:	b480      	push	{r7}
  401156:	b085      	sub	sp, #20
  401158:	af00      	add	r7, sp, #0
  40115a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40115c:	491d      	ldr	r1, [pc, #116]	; (4011d4 <pmc_switch_mck_to_pllack+0x80>)
  40115e:	4b1d      	ldr	r3, [pc, #116]	; (4011d4 <pmc_switch_mck_to_pllack+0x80>)
  401160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401166:	687b      	ldr	r3, [r7, #4]
  401168:	4313      	orrs	r3, r2
  40116a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401170:	60fb      	str	r3, [r7, #12]
  401172:	e007      	b.n	401184 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401174:	68fb      	ldr	r3, [r7, #12]
  401176:	2b00      	cmp	r3, #0
  401178:	d101      	bne.n	40117e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40117a:	2301      	movs	r3, #1
  40117c:	e023      	b.n	4011c6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40117e:	68fb      	ldr	r3, [r7, #12]
  401180:	3b01      	subs	r3, #1
  401182:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401184:	4b13      	ldr	r3, [pc, #76]	; (4011d4 <pmc_switch_mck_to_pllack+0x80>)
  401186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401188:	f003 0308 	and.w	r3, r3, #8
  40118c:	2b00      	cmp	r3, #0
  40118e:	d0f1      	beq.n	401174 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401190:	4a10      	ldr	r2, [pc, #64]	; (4011d4 <pmc_switch_mck_to_pllack+0x80>)
  401192:	4b10      	ldr	r3, [pc, #64]	; (4011d4 <pmc_switch_mck_to_pllack+0x80>)
  401194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401196:	f023 0303 	bic.w	r3, r3, #3
  40119a:	f043 0302 	orr.w	r3, r3, #2
  40119e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011a4:	60fb      	str	r3, [r7, #12]
  4011a6:	e007      	b.n	4011b8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011a8:	68fb      	ldr	r3, [r7, #12]
  4011aa:	2b00      	cmp	r3, #0
  4011ac:	d101      	bne.n	4011b2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4011ae:	2301      	movs	r3, #1
  4011b0:	e009      	b.n	4011c6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4011b2:	68fb      	ldr	r3, [r7, #12]
  4011b4:	3b01      	subs	r3, #1
  4011b6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011b8:	4b06      	ldr	r3, [pc, #24]	; (4011d4 <pmc_switch_mck_to_pllack+0x80>)
  4011ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011bc:	f003 0308 	and.w	r3, r3, #8
  4011c0:	2b00      	cmp	r3, #0
  4011c2:	d0f1      	beq.n	4011a8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4011c4:	2300      	movs	r3, #0
}
  4011c6:	4618      	mov	r0, r3
  4011c8:	3714      	adds	r7, #20
  4011ca:	46bd      	mov	sp, r7
  4011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011d0:	4770      	bx	lr
  4011d2:	bf00      	nop
  4011d4:	400e0600 	.word	0x400e0600

004011d8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4011d8:	b480      	push	{r7}
  4011da:	b083      	sub	sp, #12
  4011dc:	af00      	add	r7, sp, #0
  4011de:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4011e0:	687b      	ldr	r3, [r7, #4]
  4011e2:	2b01      	cmp	r3, #1
  4011e4:	d105      	bne.n	4011f2 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4011e6:	4907      	ldr	r1, [pc, #28]	; (401204 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4011e8:	4b06      	ldr	r3, [pc, #24]	; (401204 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4011ea:	689a      	ldr	r2, [r3, #8]
  4011ec:	4b06      	ldr	r3, [pc, #24]	; (401208 <pmc_switch_sclk_to_32kxtal+0x30>)
  4011ee:	4313      	orrs	r3, r2
  4011f0:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4011f2:	4b04      	ldr	r3, [pc, #16]	; (401204 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4011f4:	4a05      	ldr	r2, [pc, #20]	; (40120c <pmc_switch_sclk_to_32kxtal+0x34>)
  4011f6:	601a      	str	r2, [r3, #0]
}
  4011f8:	bf00      	nop
  4011fa:	370c      	adds	r7, #12
  4011fc:	46bd      	mov	sp, r7
  4011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401202:	4770      	bx	lr
  401204:	400e1810 	.word	0x400e1810
  401208:	a5100000 	.word	0xa5100000
  40120c:	a5000008 	.word	0xa5000008

00401210 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401210:	b480      	push	{r7}
  401212:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401214:	4b09      	ldr	r3, [pc, #36]	; (40123c <pmc_osc_is_ready_32kxtal+0x2c>)
  401216:	695b      	ldr	r3, [r3, #20]
  401218:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40121c:	2b00      	cmp	r3, #0
  40121e:	d007      	beq.n	401230 <pmc_osc_is_ready_32kxtal+0x20>
  401220:	4b07      	ldr	r3, [pc, #28]	; (401240 <pmc_osc_is_ready_32kxtal+0x30>)
  401222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401224:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401228:	2b00      	cmp	r3, #0
  40122a:	d001      	beq.n	401230 <pmc_osc_is_ready_32kxtal+0x20>
  40122c:	2301      	movs	r3, #1
  40122e:	e000      	b.n	401232 <pmc_osc_is_ready_32kxtal+0x22>
  401230:	2300      	movs	r3, #0
}
  401232:	4618      	mov	r0, r3
  401234:	46bd      	mov	sp, r7
  401236:	f85d 7b04 	ldr.w	r7, [sp], #4
  40123a:	4770      	bx	lr
  40123c:	400e1810 	.word	0x400e1810
  401240:	400e0600 	.word	0x400e0600

00401244 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401244:	b480      	push	{r7}
  401246:	b083      	sub	sp, #12
  401248:	af00      	add	r7, sp, #0
  40124a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40124c:	4915      	ldr	r1, [pc, #84]	; (4012a4 <pmc_switch_mainck_to_fastrc+0x60>)
  40124e:	4b15      	ldr	r3, [pc, #84]	; (4012a4 <pmc_switch_mainck_to_fastrc+0x60>)
  401250:	6a1a      	ldr	r2, [r3, #32]
  401252:	4b15      	ldr	r3, [pc, #84]	; (4012a8 <pmc_switch_mainck_to_fastrc+0x64>)
  401254:	4313      	orrs	r3, r2
  401256:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401258:	bf00      	nop
  40125a:	4b12      	ldr	r3, [pc, #72]	; (4012a4 <pmc_switch_mainck_to_fastrc+0x60>)
  40125c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401262:	2b00      	cmp	r3, #0
  401264:	d0f9      	beq.n	40125a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401266:	490f      	ldr	r1, [pc, #60]	; (4012a4 <pmc_switch_mainck_to_fastrc+0x60>)
  401268:	4b0e      	ldr	r3, [pc, #56]	; (4012a4 <pmc_switch_mainck_to_fastrc+0x60>)
  40126a:	6a1a      	ldr	r2, [r3, #32]
  40126c:	4b0f      	ldr	r3, [pc, #60]	; (4012ac <pmc_switch_mainck_to_fastrc+0x68>)
  40126e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401270:	687a      	ldr	r2, [r7, #4]
  401272:	4313      	orrs	r3, r2
  401274:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401278:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40127a:	bf00      	nop
  40127c:	4b09      	ldr	r3, [pc, #36]	; (4012a4 <pmc_switch_mainck_to_fastrc+0x60>)
  40127e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401284:	2b00      	cmp	r3, #0
  401286:	d0f9      	beq.n	40127c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401288:	4906      	ldr	r1, [pc, #24]	; (4012a4 <pmc_switch_mainck_to_fastrc+0x60>)
  40128a:	4b06      	ldr	r3, [pc, #24]	; (4012a4 <pmc_switch_mainck_to_fastrc+0x60>)
  40128c:	6a1a      	ldr	r2, [r3, #32]
  40128e:	4b08      	ldr	r3, [pc, #32]	; (4012b0 <pmc_switch_mainck_to_fastrc+0x6c>)
  401290:	4013      	ands	r3, r2
  401292:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401296:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401298:	bf00      	nop
  40129a:	370c      	adds	r7, #12
  40129c:	46bd      	mov	sp, r7
  40129e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012a2:	4770      	bx	lr
  4012a4:	400e0600 	.word	0x400e0600
  4012a8:	00370008 	.word	0x00370008
  4012ac:	ffc8ff8f 	.word	0xffc8ff8f
  4012b0:	fec8ffff 	.word	0xfec8ffff

004012b4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4012b4:	b480      	push	{r7}
  4012b6:	b083      	sub	sp, #12
  4012b8:	af00      	add	r7, sp, #0
  4012ba:	6078      	str	r0, [r7, #4]
  4012bc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4012be:	687b      	ldr	r3, [r7, #4]
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	d008      	beq.n	4012d6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012c4:	4913      	ldr	r1, [pc, #76]	; (401314 <pmc_switch_mainck_to_xtal+0x60>)
  4012c6:	4b13      	ldr	r3, [pc, #76]	; (401314 <pmc_switch_mainck_to_xtal+0x60>)
  4012c8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4012ca:	4a13      	ldr	r2, [pc, #76]	; (401318 <pmc_switch_mainck_to_xtal+0x64>)
  4012cc:	401a      	ands	r2, r3
  4012ce:	4b13      	ldr	r3, [pc, #76]	; (40131c <pmc_switch_mainck_to_xtal+0x68>)
  4012d0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012d2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4012d4:	e018      	b.n	401308 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012d6:	490f      	ldr	r1, [pc, #60]	; (401314 <pmc_switch_mainck_to_xtal+0x60>)
  4012d8:	4b0e      	ldr	r3, [pc, #56]	; (401314 <pmc_switch_mainck_to_xtal+0x60>)
  4012da:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4012dc:	4b10      	ldr	r3, [pc, #64]	; (401320 <pmc_switch_mainck_to_xtal+0x6c>)
  4012de:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4012e0:	683a      	ldr	r2, [r7, #0]
  4012e2:	0212      	lsls	r2, r2, #8
  4012e4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4012e6:	431a      	orrs	r2, r3
  4012e8:	4b0e      	ldr	r3, [pc, #56]	; (401324 <pmc_switch_mainck_to_xtal+0x70>)
  4012ea:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012ec:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4012ee:	bf00      	nop
  4012f0:	4b08      	ldr	r3, [pc, #32]	; (401314 <pmc_switch_mainck_to_xtal+0x60>)
  4012f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4012f4:	f003 0301 	and.w	r3, r3, #1
  4012f8:	2b00      	cmp	r3, #0
  4012fa:	d0f9      	beq.n	4012f0 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4012fc:	4905      	ldr	r1, [pc, #20]	; (401314 <pmc_switch_mainck_to_xtal+0x60>)
  4012fe:	4b05      	ldr	r3, [pc, #20]	; (401314 <pmc_switch_mainck_to_xtal+0x60>)
  401300:	6a1a      	ldr	r2, [r3, #32]
  401302:	4b09      	ldr	r3, [pc, #36]	; (401328 <pmc_switch_mainck_to_xtal+0x74>)
  401304:	4313      	orrs	r3, r2
  401306:	620b      	str	r3, [r1, #32]
}
  401308:	bf00      	nop
  40130a:	370c      	adds	r7, #12
  40130c:	46bd      	mov	sp, r7
  40130e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401312:	4770      	bx	lr
  401314:	400e0600 	.word	0x400e0600
  401318:	fec8fffc 	.word	0xfec8fffc
  40131c:	01370002 	.word	0x01370002
  401320:	ffc8fffc 	.word	0xffc8fffc
  401324:	00370001 	.word	0x00370001
  401328:	01370000 	.word	0x01370000

0040132c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40132c:	b480      	push	{r7}
  40132e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401330:	4b04      	ldr	r3, [pc, #16]	; (401344 <pmc_osc_is_ready_mainck+0x18>)
  401332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401338:	4618      	mov	r0, r3
  40133a:	46bd      	mov	sp, r7
  40133c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401340:	4770      	bx	lr
  401342:	bf00      	nop
  401344:	400e0600 	.word	0x400e0600

00401348 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401348:	b480      	push	{r7}
  40134a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40134c:	4b04      	ldr	r3, [pc, #16]	; (401360 <pmc_disable_pllack+0x18>)
  40134e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401352:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401354:	bf00      	nop
  401356:	46bd      	mov	sp, r7
  401358:	f85d 7b04 	ldr.w	r7, [sp], #4
  40135c:	4770      	bx	lr
  40135e:	bf00      	nop
  401360:	400e0600 	.word	0x400e0600

00401364 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401364:	b480      	push	{r7}
  401366:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401368:	4b04      	ldr	r3, [pc, #16]	; (40137c <pmc_is_locked_pllack+0x18>)
  40136a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40136c:	f003 0302 	and.w	r3, r3, #2
}
  401370:	4618      	mov	r0, r3
  401372:	46bd      	mov	sp, r7
  401374:	f85d 7b04 	ldr.w	r7, [sp], #4
  401378:	4770      	bx	lr
  40137a:	bf00      	nop
  40137c:	400e0600 	.word	0x400e0600

00401380 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401380:	b480      	push	{r7}
  401382:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401384:	4b04      	ldr	r3, [pc, #16]	; (401398 <pmc_is_locked_upll+0x18>)
  401386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401388:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  40138c:	4618      	mov	r0, r3
  40138e:	46bd      	mov	sp, r7
  401390:	f85d 7b04 	ldr.w	r7, [sp], #4
  401394:	4770      	bx	lr
  401396:	bf00      	nop
  401398:	400e0600 	.word	0x400e0600

0040139c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40139c:	b480      	push	{r7}
  40139e:	b083      	sub	sp, #12
  4013a0:	af00      	add	r7, sp, #0
  4013a2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4013a4:	687b      	ldr	r3, [r7, #4]
  4013a6:	2b3f      	cmp	r3, #63	; 0x3f
  4013a8:	d901      	bls.n	4013ae <pmc_enable_periph_clk+0x12>
		return 1;
  4013aa:	2301      	movs	r3, #1
  4013ac:	e02f      	b.n	40140e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4013ae:	687b      	ldr	r3, [r7, #4]
  4013b0:	2b1f      	cmp	r3, #31
  4013b2:	d813      	bhi.n	4013dc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4013b4:	4b19      	ldr	r3, [pc, #100]	; (40141c <pmc_enable_periph_clk+0x80>)
  4013b6:	699a      	ldr	r2, [r3, #24]
  4013b8:	2101      	movs	r1, #1
  4013ba:	687b      	ldr	r3, [r7, #4]
  4013bc:	fa01 f303 	lsl.w	r3, r1, r3
  4013c0:	401a      	ands	r2, r3
  4013c2:	2101      	movs	r1, #1
  4013c4:	687b      	ldr	r3, [r7, #4]
  4013c6:	fa01 f303 	lsl.w	r3, r1, r3
  4013ca:	429a      	cmp	r2, r3
  4013cc:	d01e      	beq.n	40140c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4013ce:	4a13      	ldr	r2, [pc, #76]	; (40141c <pmc_enable_periph_clk+0x80>)
  4013d0:	2101      	movs	r1, #1
  4013d2:	687b      	ldr	r3, [r7, #4]
  4013d4:	fa01 f303 	lsl.w	r3, r1, r3
  4013d8:	6113      	str	r3, [r2, #16]
  4013da:	e017      	b.n	40140c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4013dc:	687b      	ldr	r3, [r7, #4]
  4013de:	3b20      	subs	r3, #32
  4013e0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4013e2:	4b0e      	ldr	r3, [pc, #56]	; (40141c <pmc_enable_periph_clk+0x80>)
  4013e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4013e8:	2101      	movs	r1, #1
  4013ea:	687b      	ldr	r3, [r7, #4]
  4013ec:	fa01 f303 	lsl.w	r3, r1, r3
  4013f0:	401a      	ands	r2, r3
  4013f2:	2101      	movs	r1, #1
  4013f4:	687b      	ldr	r3, [r7, #4]
  4013f6:	fa01 f303 	lsl.w	r3, r1, r3
  4013fa:	429a      	cmp	r2, r3
  4013fc:	d006      	beq.n	40140c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4013fe:	4a07      	ldr	r2, [pc, #28]	; (40141c <pmc_enable_periph_clk+0x80>)
  401400:	2101      	movs	r1, #1
  401402:	687b      	ldr	r3, [r7, #4]
  401404:	fa01 f303 	lsl.w	r3, r1, r3
  401408:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40140c:	2300      	movs	r3, #0
}
  40140e:	4618      	mov	r0, r3
  401410:	370c      	adds	r7, #12
  401412:	46bd      	mov	sp, r7
  401414:	f85d 7b04 	ldr.w	r7, [sp], #4
  401418:	4770      	bx	lr
  40141a:	bf00      	nop
  40141c:	400e0600 	.word	0x400e0600

00401420 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401420:	b480      	push	{r7}
  401422:	b089      	sub	sp, #36	; 0x24
  401424:	af00      	add	r7, sp, #0
  401426:	60f8      	str	r0, [r7, #12]
  401428:	60b9      	str	r1, [r7, #8]
  40142a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40142c:	68bb      	ldr	r3, [r7, #8]
  40142e:	011a      	lsls	r2, r3, #4
  401430:	687b      	ldr	r3, [r7, #4]
  401432:	429a      	cmp	r2, r3
  401434:	d802      	bhi.n	40143c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401436:	2310      	movs	r3, #16
  401438:	61fb      	str	r3, [r7, #28]
  40143a:	e001      	b.n	401440 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40143c:	2308      	movs	r3, #8
  40143e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	00da      	lsls	r2, r3, #3
  401444:	69fb      	ldr	r3, [r7, #28]
  401446:	68b9      	ldr	r1, [r7, #8]
  401448:	fb01 f303 	mul.w	r3, r1, r3
  40144c:	085b      	lsrs	r3, r3, #1
  40144e:	441a      	add	r2, r3
  401450:	69fb      	ldr	r3, [r7, #28]
  401452:	68b9      	ldr	r1, [r7, #8]
  401454:	fb01 f303 	mul.w	r3, r1, r3
  401458:	fbb2 f3f3 	udiv	r3, r2, r3
  40145c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40145e:	69bb      	ldr	r3, [r7, #24]
  401460:	08db      	lsrs	r3, r3, #3
  401462:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401464:	69bb      	ldr	r3, [r7, #24]
  401466:	f003 0307 	and.w	r3, r3, #7
  40146a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40146c:	697b      	ldr	r3, [r7, #20]
  40146e:	2b00      	cmp	r3, #0
  401470:	d003      	beq.n	40147a <usart_set_async_baudrate+0x5a>
  401472:	697b      	ldr	r3, [r7, #20]
  401474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401478:	d301      	bcc.n	40147e <usart_set_async_baudrate+0x5e>
		return 1;
  40147a:	2301      	movs	r3, #1
  40147c:	e00f      	b.n	40149e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40147e:	69fb      	ldr	r3, [r7, #28]
  401480:	2b08      	cmp	r3, #8
  401482:	d105      	bne.n	401490 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401484:	68fb      	ldr	r3, [r7, #12]
  401486:	685b      	ldr	r3, [r3, #4]
  401488:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40148c:	68fb      	ldr	r3, [r7, #12]
  40148e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401490:	693b      	ldr	r3, [r7, #16]
  401492:	041a      	lsls	r2, r3, #16
  401494:	697b      	ldr	r3, [r7, #20]
  401496:	431a      	orrs	r2, r3
  401498:	68fb      	ldr	r3, [r7, #12]
  40149a:	621a      	str	r2, [r3, #32]

	return 0;
  40149c:	2300      	movs	r3, #0
}
  40149e:	4618      	mov	r0, r3
  4014a0:	3724      	adds	r7, #36	; 0x24
  4014a2:	46bd      	mov	sp, r7
  4014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014a8:	4770      	bx	lr
	...

004014ac <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4014ac:	b580      	push	{r7, lr}
  4014ae:	b082      	sub	sp, #8
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4014b4:	6878      	ldr	r0, [r7, #4]
  4014b6:	4b0d      	ldr	r3, [pc, #52]	; (4014ec <usart_reset+0x40>)
  4014b8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4014ba:	687b      	ldr	r3, [r7, #4]
  4014bc:	2200      	movs	r2, #0
  4014be:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	2200      	movs	r2, #0
  4014c4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4014c6:	687b      	ldr	r3, [r7, #4]
  4014c8:	2200      	movs	r2, #0
  4014ca:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4014cc:	6878      	ldr	r0, [r7, #4]
  4014ce:	4b08      	ldr	r3, [pc, #32]	; (4014f0 <usart_reset+0x44>)
  4014d0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4014d2:	6878      	ldr	r0, [r7, #4]
  4014d4:	4b07      	ldr	r3, [pc, #28]	; (4014f4 <usart_reset+0x48>)
  4014d6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4014d8:	6878      	ldr	r0, [r7, #4]
  4014da:	4b07      	ldr	r3, [pc, #28]	; (4014f8 <usart_reset+0x4c>)
  4014dc:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4014de:	6878      	ldr	r0, [r7, #4]
  4014e0:	4b06      	ldr	r3, [pc, #24]	; (4014fc <usart_reset+0x50>)
  4014e2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4014e4:	bf00      	nop
  4014e6:	3708      	adds	r7, #8
  4014e8:	46bd      	mov	sp, r7
  4014ea:	bd80      	pop	{r7, pc}
  4014ec:	0040168d 	.word	0x0040168d
  4014f0:	0040159f 	.word	0x0040159f
  4014f4:	004015d3 	.word	0x004015d3
  4014f8:	004015ed 	.word	0x004015ed
  4014fc:	00401609 	.word	0x00401609

00401500 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401500:	b580      	push	{r7, lr}
  401502:	b084      	sub	sp, #16
  401504:	af00      	add	r7, sp, #0
  401506:	60f8      	str	r0, [r7, #12]
  401508:	60b9      	str	r1, [r7, #8]
  40150a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40150c:	68f8      	ldr	r0, [r7, #12]
  40150e:	4b1a      	ldr	r3, [pc, #104]	; (401578 <usart_init_rs232+0x78>)
  401510:	4798      	blx	r3

	ul_reg_val = 0;
  401512:	4b1a      	ldr	r3, [pc, #104]	; (40157c <usart_init_rs232+0x7c>)
  401514:	2200      	movs	r2, #0
  401516:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401518:	68bb      	ldr	r3, [r7, #8]
  40151a:	2b00      	cmp	r3, #0
  40151c:	d009      	beq.n	401532 <usart_init_rs232+0x32>
  40151e:	68bb      	ldr	r3, [r7, #8]
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	687a      	ldr	r2, [r7, #4]
  401524:	4619      	mov	r1, r3
  401526:	68f8      	ldr	r0, [r7, #12]
  401528:	4b15      	ldr	r3, [pc, #84]	; (401580 <usart_init_rs232+0x80>)
  40152a:	4798      	blx	r3
  40152c:	4603      	mov	r3, r0
  40152e:	2b00      	cmp	r3, #0
  401530:	d001      	beq.n	401536 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401532:	2301      	movs	r3, #1
  401534:	e01b      	b.n	40156e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401536:	68bb      	ldr	r3, [r7, #8]
  401538:	685a      	ldr	r2, [r3, #4]
  40153a:	68bb      	ldr	r3, [r7, #8]
  40153c:	689b      	ldr	r3, [r3, #8]
  40153e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401540:	68bb      	ldr	r3, [r7, #8]
  401542:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401544:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401546:	68bb      	ldr	r3, [r7, #8]
  401548:	68db      	ldr	r3, [r3, #12]
  40154a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40154c:	4b0b      	ldr	r3, [pc, #44]	; (40157c <usart_init_rs232+0x7c>)
  40154e:	681b      	ldr	r3, [r3, #0]
  401550:	4313      	orrs	r3, r2
  401552:	4a0a      	ldr	r2, [pc, #40]	; (40157c <usart_init_rs232+0x7c>)
  401554:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401556:	4b09      	ldr	r3, [pc, #36]	; (40157c <usart_init_rs232+0x7c>)
  401558:	681b      	ldr	r3, [r3, #0]
  40155a:	4a08      	ldr	r2, [pc, #32]	; (40157c <usart_init_rs232+0x7c>)
  40155c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40155e:	68fb      	ldr	r3, [r7, #12]
  401560:	685a      	ldr	r2, [r3, #4]
  401562:	4b06      	ldr	r3, [pc, #24]	; (40157c <usart_init_rs232+0x7c>)
  401564:	681b      	ldr	r3, [r3, #0]
  401566:	431a      	orrs	r2, r3
  401568:	68fb      	ldr	r3, [r7, #12]
  40156a:	605a      	str	r2, [r3, #4]

	return 0;
  40156c:	2300      	movs	r3, #0
}
  40156e:	4618      	mov	r0, r3
  401570:	3710      	adds	r7, #16
  401572:	46bd      	mov	sp, r7
  401574:	bd80      	pop	{r7, pc}
  401576:	bf00      	nop
  401578:	004014ad 	.word	0x004014ad
  40157c:	20400a54 	.word	0x20400a54
  401580:	00401421 	.word	0x00401421

00401584 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401584:	b480      	push	{r7}
  401586:	b083      	sub	sp, #12
  401588:	af00      	add	r7, sp, #0
  40158a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  40158c:	687b      	ldr	r3, [r7, #4]
  40158e:	2240      	movs	r2, #64	; 0x40
  401590:	601a      	str	r2, [r3, #0]
}
  401592:	bf00      	nop
  401594:	370c      	adds	r7, #12
  401596:	46bd      	mov	sp, r7
  401598:	f85d 7b04 	ldr.w	r7, [sp], #4
  40159c:	4770      	bx	lr

0040159e <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40159e:	b480      	push	{r7}
  4015a0:	b083      	sub	sp, #12
  4015a2:	af00      	add	r7, sp, #0
  4015a4:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4015a6:	687b      	ldr	r3, [r7, #4]
  4015a8:	2288      	movs	r2, #136	; 0x88
  4015aa:	601a      	str	r2, [r3, #0]
}
  4015ac:	bf00      	nop
  4015ae:	370c      	adds	r7, #12
  4015b0:	46bd      	mov	sp, r7
  4015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015b6:	4770      	bx	lr

004015b8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4015b8:	b480      	push	{r7}
  4015ba:	b083      	sub	sp, #12
  4015bc:	af00      	add	r7, sp, #0
  4015be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4015c0:	687b      	ldr	r3, [r7, #4]
  4015c2:	2210      	movs	r2, #16
  4015c4:	601a      	str	r2, [r3, #0]
}
  4015c6:	bf00      	nop
  4015c8:	370c      	adds	r7, #12
  4015ca:	46bd      	mov	sp, r7
  4015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015d0:	4770      	bx	lr

004015d2 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4015d2:	b480      	push	{r7}
  4015d4:	b083      	sub	sp, #12
  4015d6:	af00      	add	r7, sp, #0
  4015d8:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4015da:	687b      	ldr	r3, [r7, #4]
  4015dc:	2224      	movs	r2, #36	; 0x24
  4015de:	601a      	str	r2, [r3, #0]
}
  4015e0:	bf00      	nop
  4015e2:	370c      	adds	r7, #12
  4015e4:	46bd      	mov	sp, r7
  4015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015ea:	4770      	bx	lr

004015ec <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4015f4:	687b      	ldr	r3, [r7, #4]
  4015f6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4015fa:	601a      	str	r2, [r3, #0]
}
  4015fc:	bf00      	nop
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	f85d 7b04 	ldr.w	r7, [sp], #4
  401606:	4770      	bx	lr

00401608 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401608:	b480      	push	{r7}
  40160a:	b083      	sub	sp, #12
  40160c:	af00      	add	r7, sp, #0
  40160e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401616:	601a      	str	r2, [r3, #0]
}
  401618:	bf00      	nop
  40161a:	370c      	adds	r7, #12
  40161c:	46bd      	mov	sp, r7
  40161e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401622:	4770      	bx	lr

00401624 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401624:	b480      	push	{r7}
  401626:	b083      	sub	sp, #12
  401628:	af00      	add	r7, sp, #0
  40162a:	6078      	str	r0, [r7, #4]
  40162c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40162e:	687b      	ldr	r3, [r7, #4]
  401630:	695b      	ldr	r3, [r3, #20]
  401632:	f003 0302 	and.w	r3, r3, #2
  401636:	2b00      	cmp	r3, #0
  401638:	d101      	bne.n	40163e <usart_write+0x1a>
		return 1;
  40163a:	2301      	movs	r3, #1
  40163c:	e005      	b.n	40164a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40163e:	683b      	ldr	r3, [r7, #0]
  401640:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401644:	687b      	ldr	r3, [r7, #4]
  401646:	61da      	str	r2, [r3, #28]
	return 0;
  401648:	2300      	movs	r3, #0
}
  40164a:	4618      	mov	r0, r3
  40164c:	370c      	adds	r7, #12
  40164e:	46bd      	mov	sp, r7
  401650:	f85d 7b04 	ldr.w	r7, [sp], #4
  401654:	4770      	bx	lr

00401656 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401656:	b480      	push	{r7}
  401658:	b083      	sub	sp, #12
  40165a:	af00      	add	r7, sp, #0
  40165c:	6078      	str	r0, [r7, #4]
  40165e:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401660:	687b      	ldr	r3, [r7, #4]
  401662:	695b      	ldr	r3, [r3, #20]
  401664:	f003 0301 	and.w	r3, r3, #1
  401668:	2b00      	cmp	r3, #0
  40166a:	d101      	bne.n	401670 <usart_read+0x1a>
		return 1;
  40166c:	2301      	movs	r3, #1
  40166e:	e006      	b.n	40167e <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401670:	687b      	ldr	r3, [r7, #4]
  401672:	699b      	ldr	r3, [r3, #24]
  401674:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401678:	683b      	ldr	r3, [r7, #0]
  40167a:	601a      	str	r2, [r3, #0]

	return 0;
  40167c:	2300      	movs	r3, #0
}
  40167e:	4618      	mov	r0, r3
  401680:	370c      	adds	r7, #12
  401682:	46bd      	mov	sp, r7
  401684:	f85d 7b04 	ldr.w	r7, [sp], #4
  401688:	4770      	bx	lr
	...

0040168c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  40168c:	b480      	push	{r7}
  40168e:	b083      	sub	sp, #12
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401694:	687b      	ldr	r3, [r7, #4]
  401696:	4a04      	ldr	r2, [pc, #16]	; (4016a8 <usart_disable_writeprotect+0x1c>)
  401698:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  40169c:	bf00      	nop
  40169e:	370c      	adds	r7, #12
  4016a0:	46bd      	mov	sp, r7
  4016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016a6:	4770      	bx	lr
  4016a8:	55534100 	.word	0x55534100

004016ac <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4016ac:	b480      	push	{r7}
  4016ae:	b083      	sub	sp, #12
  4016b0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4016b2:	f3ef 8310 	mrs	r3, PRIMASK
  4016b6:	607b      	str	r3, [r7, #4]
  return(result);
  4016b8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4016ba:	2b00      	cmp	r3, #0
  4016bc:	bf0c      	ite	eq
  4016be:	2301      	moveq	r3, #1
  4016c0:	2300      	movne	r3, #0
  4016c2:	b2db      	uxtb	r3, r3
  4016c4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4016c6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4016c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4016cc:	4b04      	ldr	r3, [pc, #16]	; (4016e0 <cpu_irq_save+0x34>)
  4016ce:	2200      	movs	r2, #0
  4016d0:	701a      	strb	r2, [r3, #0]
	return flags;
  4016d2:	683b      	ldr	r3, [r7, #0]
}
  4016d4:	4618      	mov	r0, r3
  4016d6:	370c      	adds	r7, #12
  4016d8:	46bd      	mov	sp, r7
  4016da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016de:	4770      	bx	lr
  4016e0:	20400000 	.word	0x20400000

004016e4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4016e4:	b480      	push	{r7}
  4016e6:	b083      	sub	sp, #12
  4016e8:	af00      	add	r7, sp, #0
  4016ea:	6078      	str	r0, [r7, #4]
	return (flags);
  4016ec:	687b      	ldr	r3, [r7, #4]
  4016ee:	2b00      	cmp	r3, #0
  4016f0:	bf14      	ite	ne
  4016f2:	2301      	movne	r3, #1
  4016f4:	2300      	moveq	r3, #0
  4016f6:	b2db      	uxtb	r3, r3
}
  4016f8:	4618      	mov	r0, r3
  4016fa:	370c      	adds	r7, #12
  4016fc:	46bd      	mov	sp, r7
  4016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401702:	4770      	bx	lr

00401704 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401704:	b580      	push	{r7, lr}
  401706:	b082      	sub	sp, #8
  401708:	af00      	add	r7, sp, #0
  40170a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40170c:	6878      	ldr	r0, [r7, #4]
  40170e:	4b07      	ldr	r3, [pc, #28]	; (40172c <cpu_irq_restore+0x28>)
  401710:	4798      	blx	r3
  401712:	4603      	mov	r3, r0
  401714:	2b00      	cmp	r3, #0
  401716:	d005      	beq.n	401724 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401718:	4b05      	ldr	r3, [pc, #20]	; (401730 <cpu_irq_restore+0x2c>)
  40171a:	2201      	movs	r2, #1
  40171c:	701a      	strb	r2, [r3, #0]
  40171e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401722:	b662      	cpsie	i
}
  401724:	bf00      	nop
  401726:	3708      	adds	r7, #8
  401728:	46bd      	mov	sp, r7
  40172a:	bd80      	pop	{r7, pc}
  40172c:	004016e5 	.word	0x004016e5
  401730:	20400000 	.word	0x20400000

00401734 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401734:	b580      	push	{r7, lr}
  401736:	b084      	sub	sp, #16
  401738:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40173a:	4b1e      	ldr	r3, [pc, #120]	; (4017b4 <Reset_Handler+0x80>)
  40173c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40173e:	4b1e      	ldr	r3, [pc, #120]	; (4017b8 <Reset_Handler+0x84>)
  401740:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401742:	68fa      	ldr	r2, [r7, #12]
  401744:	68bb      	ldr	r3, [r7, #8]
  401746:	429a      	cmp	r2, r3
  401748:	d00c      	beq.n	401764 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40174a:	e007      	b.n	40175c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40174c:	68bb      	ldr	r3, [r7, #8]
  40174e:	1d1a      	adds	r2, r3, #4
  401750:	60ba      	str	r2, [r7, #8]
  401752:	68fa      	ldr	r2, [r7, #12]
  401754:	1d11      	adds	r1, r2, #4
  401756:	60f9      	str	r1, [r7, #12]
  401758:	6812      	ldr	r2, [r2, #0]
  40175a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40175c:	68bb      	ldr	r3, [r7, #8]
  40175e:	4a17      	ldr	r2, [pc, #92]	; (4017bc <Reset_Handler+0x88>)
  401760:	4293      	cmp	r3, r2
  401762:	d3f3      	bcc.n	40174c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401764:	4b16      	ldr	r3, [pc, #88]	; (4017c0 <Reset_Handler+0x8c>)
  401766:	60bb      	str	r3, [r7, #8]
  401768:	e004      	b.n	401774 <Reset_Handler+0x40>
                *pDest++ = 0;
  40176a:	68bb      	ldr	r3, [r7, #8]
  40176c:	1d1a      	adds	r2, r3, #4
  40176e:	60ba      	str	r2, [r7, #8]
  401770:	2200      	movs	r2, #0
  401772:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401774:	68bb      	ldr	r3, [r7, #8]
  401776:	4a13      	ldr	r2, [pc, #76]	; (4017c4 <Reset_Handler+0x90>)
  401778:	4293      	cmp	r3, r2
  40177a:	d3f6      	bcc.n	40176a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  40177c:	4b12      	ldr	r3, [pc, #72]	; (4017c8 <Reset_Handler+0x94>)
  40177e:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401780:	4a12      	ldr	r2, [pc, #72]	; (4017cc <Reset_Handler+0x98>)
  401782:	68fb      	ldr	r3, [r7, #12]
  401784:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401788:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40178a:	4b11      	ldr	r3, [pc, #68]	; (4017d0 <Reset_Handler+0x9c>)
  40178c:	4798      	blx	r3
  40178e:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401790:	4a10      	ldr	r2, [pc, #64]	; (4017d4 <Reset_Handler+0xa0>)
  401792:	4b10      	ldr	r3, [pc, #64]	; (4017d4 <Reset_Handler+0xa0>)
  401794:	681b      	ldr	r3, [r3, #0]
  401796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40179a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40179c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017a0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4017a4:	6878      	ldr	r0, [r7, #4]
  4017a6:	4b0c      	ldr	r3, [pc, #48]	; (4017d8 <Reset_Handler+0xa4>)
  4017a8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4017aa:	4b0c      	ldr	r3, [pc, #48]	; (4017dc <Reset_Handler+0xa8>)
  4017ac:	4798      	blx	r3

        /* Branch to main function */
        main();
  4017ae:	4b0c      	ldr	r3, [pc, #48]	; (4017e0 <Reset_Handler+0xac>)
  4017b0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4017b2:	e7fe      	b.n	4017b2 <Reset_Handler+0x7e>
  4017b4:	004054c8 	.word	0x004054c8
  4017b8:	20400000 	.word	0x20400000
  4017bc:	204009c4 	.word	0x204009c4
  4017c0:	204009c4 	.word	0x204009c4
  4017c4:	20400ac0 	.word	0x20400ac0
  4017c8:	00400000 	.word	0x00400000
  4017cc:	e000ed00 	.word	0xe000ed00
  4017d0:	004016ad 	.word	0x004016ad
  4017d4:	e000ed88 	.word	0xe000ed88
  4017d8:	00401705 	.word	0x00401705
  4017dc:	004024e9 	.word	0x004024e9
  4017e0:	00402475 	.word	0x00402475

004017e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4017e4:	b480      	push	{r7}
  4017e6:	af00      	add	r7, sp, #0
        while (1) {
  4017e8:	e7fe      	b.n	4017e8 <Dummy_Handler+0x4>
	...

004017ec <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4017ec:	b480      	push	{r7}
  4017ee:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4017f0:	4b52      	ldr	r3, [pc, #328]	; (40193c <SystemCoreClockUpdate+0x150>)
  4017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017f4:	f003 0303 	and.w	r3, r3, #3
  4017f8:	2b01      	cmp	r3, #1
  4017fa:	d014      	beq.n	401826 <SystemCoreClockUpdate+0x3a>
  4017fc:	2b01      	cmp	r3, #1
  4017fe:	d302      	bcc.n	401806 <SystemCoreClockUpdate+0x1a>
  401800:	2b02      	cmp	r3, #2
  401802:	d038      	beq.n	401876 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401804:	e07a      	b.n	4018fc <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401806:	4b4e      	ldr	r3, [pc, #312]	; (401940 <SystemCoreClockUpdate+0x154>)
  401808:	695b      	ldr	r3, [r3, #20]
  40180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40180e:	2b00      	cmp	r3, #0
  401810:	d004      	beq.n	40181c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401812:	4b4c      	ldr	r3, [pc, #304]	; (401944 <SystemCoreClockUpdate+0x158>)
  401814:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401818:	601a      	str	r2, [r3, #0]
    break;
  40181a:	e06f      	b.n	4018fc <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40181c:	4b49      	ldr	r3, [pc, #292]	; (401944 <SystemCoreClockUpdate+0x158>)
  40181e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401822:	601a      	str	r2, [r3, #0]
    break;
  401824:	e06a      	b.n	4018fc <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401826:	4b45      	ldr	r3, [pc, #276]	; (40193c <SystemCoreClockUpdate+0x150>)
  401828:	6a1b      	ldr	r3, [r3, #32]
  40182a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40182e:	2b00      	cmp	r3, #0
  401830:	d003      	beq.n	40183a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401832:	4b44      	ldr	r3, [pc, #272]	; (401944 <SystemCoreClockUpdate+0x158>)
  401834:	4a44      	ldr	r2, [pc, #272]	; (401948 <SystemCoreClockUpdate+0x15c>)
  401836:	601a      	str	r2, [r3, #0]
    break;
  401838:	e060      	b.n	4018fc <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40183a:	4b42      	ldr	r3, [pc, #264]	; (401944 <SystemCoreClockUpdate+0x158>)
  40183c:	4a43      	ldr	r2, [pc, #268]	; (40194c <SystemCoreClockUpdate+0x160>)
  40183e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401840:	4b3e      	ldr	r3, [pc, #248]	; (40193c <SystemCoreClockUpdate+0x150>)
  401842:	6a1b      	ldr	r3, [r3, #32]
  401844:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401848:	2b10      	cmp	r3, #16
  40184a:	d004      	beq.n	401856 <SystemCoreClockUpdate+0x6a>
  40184c:	2b20      	cmp	r3, #32
  40184e:	d008      	beq.n	401862 <SystemCoreClockUpdate+0x76>
  401850:	2b00      	cmp	r3, #0
  401852:	d00e      	beq.n	401872 <SystemCoreClockUpdate+0x86>
          break;
  401854:	e00e      	b.n	401874 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401856:	4b3b      	ldr	r3, [pc, #236]	; (401944 <SystemCoreClockUpdate+0x158>)
  401858:	681b      	ldr	r3, [r3, #0]
  40185a:	005b      	lsls	r3, r3, #1
  40185c:	4a39      	ldr	r2, [pc, #228]	; (401944 <SystemCoreClockUpdate+0x158>)
  40185e:	6013      	str	r3, [r2, #0]
          break;
  401860:	e008      	b.n	401874 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401862:	4b38      	ldr	r3, [pc, #224]	; (401944 <SystemCoreClockUpdate+0x158>)
  401864:	681a      	ldr	r2, [r3, #0]
  401866:	4613      	mov	r3, r2
  401868:	005b      	lsls	r3, r3, #1
  40186a:	4413      	add	r3, r2
  40186c:	4a35      	ldr	r2, [pc, #212]	; (401944 <SystemCoreClockUpdate+0x158>)
  40186e:	6013      	str	r3, [r2, #0]
          break;
  401870:	e000      	b.n	401874 <SystemCoreClockUpdate+0x88>
          break;
  401872:	bf00      	nop
    break;
  401874:	e042      	b.n	4018fc <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401876:	4b31      	ldr	r3, [pc, #196]	; (40193c <SystemCoreClockUpdate+0x150>)
  401878:	6a1b      	ldr	r3, [r3, #32]
  40187a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40187e:	2b00      	cmp	r3, #0
  401880:	d003      	beq.n	40188a <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401882:	4b30      	ldr	r3, [pc, #192]	; (401944 <SystemCoreClockUpdate+0x158>)
  401884:	4a30      	ldr	r2, [pc, #192]	; (401948 <SystemCoreClockUpdate+0x15c>)
  401886:	601a      	str	r2, [r3, #0]
  401888:	e01c      	b.n	4018c4 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40188a:	4b2e      	ldr	r3, [pc, #184]	; (401944 <SystemCoreClockUpdate+0x158>)
  40188c:	4a2f      	ldr	r2, [pc, #188]	; (40194c <SystemCoreClockUpdate+0x160>)
  40188e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401890:	4b2a      	ldr	r3, [pc, #168]	; (40193c <SystemCoreClockUpdate+0x150>)
  401892:	6a1b      	ldr	r3, [r3, #32]
  401894:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401898:	2b10      	cmp	r3, #16
  40189a:	d004      	beq.n	4018a6 <SystemCoreClockUpdate+0xba>
  40189c:	2b20      	cmp	r3, #32
  40189e:	d008      	beq.n	4018b2 <SystemCoreClockUpdate+0xc6>
  4018a0:	2b00      	cmp	r3, #0
  4018a2:	d00e      	beq.n	4018c2 <SystemCoreClockUpdate+0xd6>
          break;
  4018a4:	e00e      	b.n	4018c4 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  4018a6:	4b27      	ldr	r3, [pc, #156]	; (401944 <SystemCoreClockUpdate+0x158>)
  4018a8:	681b      	ldr	r3, [r3, #0]
  4018aa:	005b      	lsls	r3, r3, #1
  4018ac:	4a25      	ldr	r2, [pc, #148]	; (401944 <SystemCoreClockUpdate+0x158>)
  4018ae:	6013      	str	r3, [r2, #0]
          break;
  4018b0:	e008      	b.n	4018c4 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  4018b2:	4b24      	ldr	r3, [pc, #144]	; (401944 <SystemCoreClockUpdate+0x158>)
  4018b4:	681a      	ldr	r2, [r3, #0]
  4018b6:	4613      	mov	r3, r2
  4018b8:	005b      	lsls	r3, r3, #1
  4018ba:	4413      	add	r3, r2
  4018bc:	4a21      	ldr	r2, [pc, #132]	; (401944 <SystemCoreClockUpdate+0x158>)
  4018be:	6013      	str	r3, [r2, #0]
          break;
  4018c0:	e000      	b.n	4018c4 <SystemCoreClockUpdate+0xd8>
          break;
  4018c2:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4018c4:	4b1d      	ldr	r3, [pc, #116]	; (40193c <SystemCoreClockUpdate+0x150>)
  4018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018c8:	f003 0303 	and.w	r3, r3, #3
  4018cc:	2b02      	cmp	r3, #2
  4018ce:	d114      	bne.n	4018fa <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018d0:	4b1a      	ldr	r3, [pc, #104]	; (40193c <SystemCoreClockUpdate+0x150>)
  4018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4018d4:	0c1b      	lsrs	r3, r3, #16
  4018d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4018da:	3301      	adds	r3, #1
  4018dc:	4a19      	ldr	r2, [pc, #100]	; (401944 <SystemCoreClockUpdate+0x158>)
  4018de:	6812      	ldr	r2, [r2, #0]
  4018e0:	fb02 f303 	mul.w	r3, r2, r3
  4018e4:	4a17      	ldr	r2, [pc, #92]	; (401944 <SystemCoreClockUpdate+0x158>)
  4018e6:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018e8:	4b14      	ldr	r3, [pc, #80]	; (40193c <SystemCoreClockUpdate+0x150>)
  4018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4018ec:	b2db      	uxtb	r3, r3
  4018ee:	4a15      	ldr	r2, [pc, #84]	; (401944 <SystemCoreClockUpdate+0x158>)
  4018f0:	6812      	ldr	r2, [r2, #0]
  4018f2:	fbb2 f3f3 	udiv	r3, r2, r3
  4018f6:	4a13      	ldr	r2, [pc, #76]	; (401944 <SystemCoreClockUpdate+0x158>)
  4018f8:	6013      	str	r3, [r2, #0]
    break;
  4018fa:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4018fc:	4b0f      	ldr	r3, [pc, #60]	; (40193c <SystemCoreClockUpdate+0x150>)
  4018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401900:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401904:	2b70      	cmp	r3, #112	; 0x70
  401906:	d108      	bne.n	40191a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401908:	4b0e      	ldr	r3, [pc, #56]	; (401944 <SystemCoreClockUpdate+0x158>)
  40190a:	681b      	ldr	r3, [r3, #0]
  40190c:	4a10      	ldr	r2, [pc, #64]	; (401950 <SystemCoreClockUpdate+0x164>)
  40190e:	fba2 2303 	umull	r2, r3, r2, r3
  401912:	085b      	lsrs	r3, r3, #1
  401914:	4a0b      	ldr	r2, [pc, #44]	; (401944 <SystemCoreClockUpdate+0x158>)
  401916:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401918:	e00a      	b.n	401930 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40191a:	4b08      	ldr	r3, [pc, #32]	; (40193c <SystemCoreClockUpdate+0x150>)
  40191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40191e:	091b      	lsrs	r3, r3, #4
  401920:	f003 0307 	and.w	r3, r3, #7
  401924:	4a07      	ldr	r2, [pc, #28]	; (401944 <SystemCoreClockUpdate+0x158>)
  401926:	6812      	ldr	r2, [r2, #0]
  401928:	fa22 f303 	lsr.w	r3, r2, r3
  40192c:	4a05      	ldr	r2, [pc, #20]	; (401944 <SystemCoreClockUpdate+0x158>)
  40192e:	6013      	str	r3, [r2, #0]
}
  401930:	bf00      	nop
  401932:	46bd      	mov	sp, r7
  401934:	f85d 7b04 	ldr.w	r7, [sp], #4
  401938:	4770      	bx	lr
  40193a:	bf00      	nop
  40193c:	400e0600 	.word	0x400e0600
  401940:	400e1810 	.word	0x400e1810
  401944:	20400004 	.word	0x20400004
  401948:	00b71b00 	.word	0x00b71b00
  40194c:	003d0900 	.word	0x003d0900
  401950:	aaaaaaab 	.word	0xaaaaaaab

00401954 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401954:	b480      	push	{r7}
  401956:	b083      	sub	sp, #12
  401958:	af00      	add	r7, sp, #0
  40195a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40195c:	687b      	ldr	r3, [r7, #4]
  40195e:	4a1d      	ldr	r2, [pc, #116]	; (4019d4 <system_init_flash+0x80>)
  401960:	4293      	cmp	r3, r2
  401962:	d804      	bhi.n	40196e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401964:	4b1c      	ldr	r3, [pc, #112]	; (4019d8 <system_init_flash+0x84>)
  401966:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40196a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  40196c:	e02b      	b.n	4019c6 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	4a1a      	ldr	r2, [pc, #104]	; (4019dc <system_init_flash+0x88>)
  401972:	4293      	cmp	r3, r2
  401974:	d803      	bhi.n	40197e <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401976:	4b18      	ldr	r3, [pc, #96]	; (4019d8 <system_init_flash+0x84>)
  401978:	4a19      	ldr	r2, [pc, #100]	; (4019e0 <system_init_flash+0x8c>)
  40197a:	601a      	str	r2, [r3, #0]
}
  40197c:	e023      	b.n	4019c6 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  40197e:	687b      	ldr	r3, [r7, #4]
  401980:	4a18      	ldr	r2, [pc, #96]	; (4019e4 <system_init_flash+0x90>)
  401982:	4293      	cmp	r3, r2
  401984:	d803      	bhi.n	40198e <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401986:	4b14      	ldr	r3, [pc, #80]	; (4019d8 <system_init_flash+0x84>)
  401988:	4a17      	ldr	r2, [pc, #92]	; (4019e8 <system_init_flash+0x94>)
  40198a:	601a      	str	r2, [r3, #0]
}
  40198c:	e01b      	b.n	4019c6 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40198e:	687b      	ldr	r3, [r7, #4]
  401990:	4a16      	ldr	r2, [pc, #88]	; (4019ec <system_init_flash+0x98>)
  401992:	4293      	cmp	r3, r2
  401994:	d803      	bhi.n	40199e <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401996:	4b10      	ldr	r3, [pc, #64]	; (4019d8 <system_init_flash+0x84>)
  401998:	4a15      	ldr	r2, [pc, #84]	; (4019f0 <system_init_flash+0x9c>)
  40199a:	601a      	str	r2, [r3, #0]
}
  40199c:	e013      	b.n	4019c6 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40199e:	687b      	ldr	r3, [r7, #4]
  4019a0:	4a14      	ldr	r2, [pc, #80]	; (4019f4 <system_init_flash+0xa0>)
  4019a2:	4293      	cmp	r3, r2
  4019a4:	d804      	bhi.n	4019b0 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019a6:	4b0c      	ldr	r3, [pc, #48]	; (4019d8 <system_init_flash+0x84>)
  4019a8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4019ac:	601a      	str	r2, [r3, #0]
}
  4019ae:	e00a      	b.n	4019c6 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4019b0:	687b      	ldr	r3, [r7, #4]
  4019b2:	4a11      	ldr	r2, [pc, #68]	; (4019f8 <system_init_flash+0xa4>)
  4019b4:	4293      	cmp	r3, r2
  4019b6:	d803      	bhi.n	4019c0 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4019b8:	4b07      	ldr	r3, [pc, #28]	; (4019d8 <system_init_flash+0x84>)
  4019ba:	4a10      	ldr	r2, [pc, #64]	; (4019fc <system_init_flash+0xa8>)
  4019bc:	601a      	str	r2, [r3, #0]
}
  4019be:	e002      	b.n	4019c6 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4019c0:	4b05      	ldr	r3, [pc, #20]	; (4019d8 <system_init_flash+0x84>)
  4019c2:	4a0f      	ldr	r2, [pc, #60]	; (401a00 <system_init_flash+0xac>)
  4019c4:	601a      	str	r2, [r3, #0]
}
  4019c6:	bf00      	nop
  4019c8:	370c      	adds	r7, #12
  4019ca:	46bd      	mov	sp, r7
  4019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019d0:	4770      	bx	lr
  4019d2:	bf00      	nop
  4019d4:	015ef3bf 	.word	0x015ef3bf
  4019d8:	400e0c00 	.word	0x400e0c00
  4019dc:	02bde77f 	.word	0x02bde77f
  4019e0:	04000100 	.word	0x04000100
  4019e4:	041cdb3f 	.word	0x041cdb3f
  4019e8:	04000200 	.word	0x04000200
  4019ec:	057bceff 	.word	0x057bceff
  4019f0:	04000300 	.word	0x04000300
  4019f4:	06dac2bf 	.word	0x06dac2bf
  4019f8:	0839b67f 	.word	0x0839b67f
  4019fc:	04000500 	.word	0x04000500
  401a00:	04000600 	.word	0x04000600

00401a04 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401a04:	b480      	push	{r7}
  401a06:	b085      	sub	sp, #20
  401a08:	af00      	add	r7, sp, #0
  401a0a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401a0c:	4b10      	ldr	r3, [pc, #64]	; (401a50 <_sbrk+0x4c>)
  401a0e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401a10:	4b10      	ldr	r3, [pc, #64]	; (401a54 <_sbrk+0x50>)
  401a12:	681b      	ldr	r3, [r3, #0]
  401a14:	2b00      	cmp	r3, #0
  401a16:	d102      	bne.n	401a1e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401a18:	4b0e      	ldr	r3, [pc, #56]	; (401a54 <_sbrk+0x50>)
  401a1a:	4a0f      	ldr	r2, [pc, #60]	; (401a58 <_sbrk+0x54>)
  401a1c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401a1e:	4b0d      	ldr	r3, [pc, #52]	; (401a54 <_sbrk+0x50>)
  401a20:	681b      	ldr	r3, [r3, #0]
  401a22:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401a24:	68ba      	ldr	r2, [r7, #8]
  401a26:	687b      	ldr	r3, [r7, #4]
  401a28:	441a      	add	r2, r3
  401a2a:	68fb      	ldr	r3, [r7, #12]
  401a2c:	429a      	cmp	r2, r3
  401a2e:	dd02      	ble.n	401a36 <_sbrk+0x32>
		return (caddr_t) -1;	
  401a30:	f04f 33ff 	mov.w	r3, #4294967295
  401a34:	e006      	b.n	401a44 <_sbrk+0x40>
	}

	heap += incr;
  401a36:	4b07      	ldr	r3, [pc, #28]	; (401a54 <_sbrk+0x50>)
  401a38:	681a      	ldr	r2, [r3, #0]
  401a3a:	687b      	ldr	r3, [r7, #4]
  401a3c:	4413      	add	r3, r2
  401a3e:	4a05      	ldr	r2, [pc, #20]	; (401a54 <_sbrk+0x50>)
  401a40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401a42:	68bb      	ldr	r3, [r7, #8]
}
  401a44:	4618      	mov	r0, r3
  401a46:	3714      	adds	r7, #20
  401a48:	46bd      	mov	sp, r7
  401a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a4e:	4770      	bx	lr
  401a50:	2045fffc 	.word	0x2045fffc
  401a54:	20400a58 	.word	0x20400a58
  401a58:	20402cc0 	.word	0x20402cc0

00401a5c <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401a5c:	b480      	push	{r7}
  401a5e:	b083      	sub	sp, #12
  401a60:	af00      	add	r7, sp, #0
  401a62:	6078      	str	r0, [r7, #4]
	return -1;
  401a64:	f04f 33ff 	mov.w	r3, #4294967295
}
  401a68:	4618      	mov	r0, r3
  401a6a:	370c      	adds	r7, #12
  401a6c:	46bd      	mov	sp, r7
  401a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a72:	4770      	bx	lr

00401a74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401a74:	b480      	push	{r7}
  401a76:	b083      	sub	sp, #12
  401a78:	af00      	add	r7, sp, #0
  401a7a:	6078      	str	r0, [r7, #4]
  401a7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401a7e:	683b      	ldr	r3, [r7, #0]
  401a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401a84:	605a      	str	r2, [r3, #4]

	return 0;
  401a86:	2300      	movs	r3, #0
}
  401a88:	4618      	mov	r0, r3
  401a8a:	370c      	adds	r7, #12
  401a8c:	46bd      	mov	sp, r7
  401a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a92:	4770      	bx	lr

00401a94 <_isatty>:

extern int _isatty(int file)
{
  401a94:	b480      	push	{r7}
  401a96:	b083      	sub	sp, #12
  401a98:	af00      	add	r7, sp, #0
  401a9a:	6078      	str	r0, [r7, #4]
	return 1;
  401a9c:	2301      	movs	r3, #1
}
  401a9e:	4618      	mov	r0, r3
  401aa0:	370c      	adds	r7, #12
  401aa2:	46bd      	mov	sp, r7
  401aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aa8:	4770      	bx	lr

00401aaa <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401aaa:	b480      	push	{r7}
  401aac:	b085      	sub	sp, #20
  401aae:	af00      	add	r7, sp, #0
  401ab0:	60f8      	str	r0, [r7, #12]
  401ab2:	60b9      	str	r1, [r7, #8]
  401ab4:	607a      	str	r2, [r7, #4]
	return 0;
  401ab6:	2300      	movs	r3, #0
}
  401ab8:	4618      	mov	r0, r3
  401aba:	3714      	adds	r7, #20
  401abc:	46bd      	mov	sp, r7
  401abe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ac2:	4770      	bx	lr

00401ac4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401ac4:	b480      	push	{r7}
  401ac6:	b083      	sub	sp, #12
  401ac8:	af00      	add	r7, sp, #0
  401aca:	4603      	mov	r3, r0
  401acc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401ace:	4909      	ldr	r1, [pc, #36]	; (401af4 <NVIC_EnableIRQ+0x30>)
  401ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401ad4:	095b      	lsrs	r3, r3, #5
  401ad6:	79fa      	ldrb	r2, [r7, #7]
  401ad8:	f002 021f 	and.w	r2, r2, #31
  401adc:	2001      	movs	r0, #1
  401ade:	fa00 f202 	lsl.w	r2, r0, r2
  401ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401ae6:	bf00      	nop
  401ae8:	370c      	adds	r7, #12
  401aea:	46bd      	mov	sp, r7
  401aec:	f85d 7b04 	ldr.w	r7, [sp], #4
  401af0:	4770      	bx	lr
  401af2:	bf00      	nop
  401af4:	e000e100 	.word	0xe000e100

00401af8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401af8:	b480      	push	{r7}
  401afa:	b083      	sub	sp, #12
  401afc:	af00      	add	r7, sp, #0
  401afe:	4603      	mov	r3, r0
  401b00:	6039      	str	r1, [r7, #0]
  401b02:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b08:	2b00      	cmp	r3, #0
  401b0a:	da0b      	bge.n	401b24 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401b0c:	490d      	ldr	r1, [pc, #52]	; (401b44 <NVIC_SetPriority+0x4c>)
  401b0e:	79fb      	ldrb	r3, [r7, #7]
  401b10:	f003 030f 	and.w	r3, r3, #15
  401b14:	3b04      	subs	r3, #4
  401b16:	683a      	ldr	r2, [r7, #0]
  401b18:	b2d2      	uxtb	r2, r2
  401b1a:	0152      	lsls	r2, r2, #5
  401b1c:	b2d2      	uxtb	r2, r2
  401b1e:	440b      	add	r3, r1
  401b20:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401b22:	e009      	b.n	401b38 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401b24:	4908      	ldr	r1, [pc, #32]	; (401b48 <NVIC_SetPriority+0x50>)
  401b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b2a:	683a      	ldr	r2, [r7, #0]
  401b2c:	b2d2      	uxtb	r2, r2
  401b2e:	0152      	lsls	r2, r2, #5
  401b30:	b2d2      	uxtb	r2, r2
  401b32:	440b      	add	r3, r1
  401b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401b38:	bf00      	nop
  401b3a:	370c      	adds	r7, #12
  401b3c:	46bd      	mov	sp, r7
  401b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b42:	4770      	bx	lr
  401b44:	e000ed00 	.word	0xe000ed00
  401b48:	e000e100 	.word	0xe000e100

00401b4c <osc_get_rate>:
{
  401b4c:	b480      	push	{r7}
  401b4e:	b083      	sub	sp, #12
  401b50:	af00      	add	r7, sp, #0
  401b52:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401b54:	687b      	ldr	r3, [r7, #4]
  401b56:	2b07      	cmp	r3, #7
  401b58:	d825      	bhi.n	401ba6 <osc_get_rate+0x5a>
  401b5a:	a201      	add	r2, pc, #4	; (adr r2, 401b60 <osc_get_rate+0x14>)
  401b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b60:	00401b81 	.word	0x00401b81
  401b64:	00401b87 	.word	0x00401b87
  401b68:	00401b8d 	.word	0x00401b8d
  401b6c:	00401b93 	.word	0x00401b93
  401b70:	00401b97 	.word	0x00401b97
  401b74:	00401b9b 	.word	0x00401b9b
  401b78:	00401b9f 	.word	0x00401b9f
  401b7c:	00401ba3 	.word	0x00401ba3
		return OSC_SLCK_32K_RC_HZ;
  401b80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401b84:	e010      	b.n	401ba8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b8a:	e00d      	b.n	401ba8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b90:	e00a      	b.n	401ba8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401b92:	4b08      	ldr	r3, [pc, #32]	; (401bb4 <osc_get_rate+0x68>)
  401b94:	e008      	b.n	401ba8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401b96:	4b08      	ldr	r3, [pc, #32]	; (401bb8 <osc_get_rate+0x6c>)
  401b98:	e006      	b.n	401ba8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401b9a:	4b08      	ldr	r3, [pc, #32]	; (401bbc <osc_get_rate+0x70>)
  401b9c:	e004      	b.n	401ba8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401b9e:	4b07      	ldr	r3, [pc, #28]	; (401bbc <osc_get_rate+0x70>)
  401ba0:	e002      	b.n	401ba8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401ba2:	4b06      	ldr	r3, [pc, #24]	; (401bbc <osc_get_rate+0x70>)
  401ba4:	e000      	b.n	401ba8 <osc_get_rate+0x5c>
	return 0;
  401ba6:	2300      	movs	r3, #0
}
  401ba8:	4618      	mov	r0, r3
  401baa:	370c      	adds	r7, #12
  401bac:	46bd      	mov	sp, r7
  401bae:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bb2:	4770      	bx	lr
  401bb4:	003d0900 	.word	0x003d0900
  401bb8:	007a1200 	.word	0x007a1200
  401bbc:	00b71b00 	.word	0x00b71b00

00401bc0 <sysclk_get_main_hz>:
{
  401bc0:	b580      	push	{r7, lr}
  401bc2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401bc4:	2006      	movs	r0, #6
  401bc6:	4b05      	ldr	r3, [pc, #20]	; (401bdc <sysclk_get_main_hz+0x1c>)
  401bc8:	4798      	blx	r3
  401bca:	4602      	mov	r2, r0
  401bcc:	4613      	mov	r3, r2
  401bce:	009b      	lsls	r3, r3, #2
  401bd0:	4413      	add	r3, r2
  401bd2:	009a      	lsls	r2, r3, #2
  401bd4:	4413      	add	r3, r2
}
  401bd6:	4618      	mov	r0, r3
  401bd8:	bd80      	pop	{r7, pc}
  401bda:	bf00      	nop
  401bdc:	00401b4d 	.word	0x00401b4d

00401be0 <sysclk_get_cpu_hz>:
{
  401be0:	b580      	push	{r7, lr}
  401be2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401be4:	4b02      	ldr	r3, [pc, #8]	; (401bf0 <sysclk_get_cpu_hz+0x10>)
  401be6:	4798      	blx	r3
  401be8:	4603      	mov	r3, r0
}
  401bea:	4618      	mov	r0, r3
  401bec:	bd80      	pop	{r7, pc}
  401bee:	bf00      	nop
  401bf0:	00401bc1 	.word	0x00401bc1

00401bf4 <sysclk_get_peripheral_hz>:
{
  401bf4:	b580      	push	{r7, lr}
  401bf6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401bf8:	4b02      	ldr	r3, [pc, #8]	; (401c04 <sysclk_get_peripheral_hz+0x10>)
  401bfa:	4798      	blx	r3
  401bfc:	4603      	mov	r3, r0
  401bfe:	085b      	lsrs	r3, r3, #1
}
  401c00:	4618      	mov	r0, r3
  401c02:	bd80      	pop	{r7, pc}
  401c04:	00401bc1 	.word	0x00401bc1

00401c08 <sysclk_enable_peripheral_clock>:
{
  401c08:	b580      	push	{r7, lr}
  401c0a:	b082      	sub	sp, #8
  401c0c:	af00      	add	r7, sp, #0
  401c0e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401c10:	6878      	ldr	r0, [r7, #4]
  401c12:	4b03      	ldr	r3, [pc, #12]	; (401c20 <sysclk_enable_peripheral_clock+0x18>)
  401c14:	4798      	blx	r3
}
  401c16:	bf00      	nop
  401c18:	3708      	adds	r7, #8
  401c1a:	46bd      	mov	sp, r7
  401c1c:	bd80      	pop	{r7, pc}
  401c1e:	bf00      	nop
  401c20:	0040139d 	.word	0x0040139d

00401c24 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401c24:	b580      	push	{r7, lr}
  401c26:	b08c      	sub	sp, #48	; 0x30
  401c28:	af00      	add	r7, sp, #0
  401c2a:	6078      	str	r0, [r7, #4]
  401c2c:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401c2e:	4b49      	ldr	r3, [pc, #292]	; (401d54 <usart_serial_init+0x130>)
  401c30:	4798      	blx	r3
  401c32:	4603      	mov	r3, r0
  401c34:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401c36:	683b      	ldr	r3, [r7, #0]
  401c38:	681b      	ldr	r3, [r3, #0]
  401c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401c3c:	683b      	ldr	r3, [r7, #0]
  401c3e:	689b      	ldr	r3, [r3, #8]
  401c40:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401c42:	683b      	ldr	r3, [r7, #0]
  401c44:	681b      	ldr	r3, [r3, #0]
  401c46:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401c48:	683b      	ldr	r3, [r7, #0]
  401c4a:	685b      	ldr	r3, [r3, #4]
  401c4c:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  401c4e:	683b      	ldr	r3, [r7, #0]
  401c50:	689b      	ldr	r3, [r3, #8]
  401c52:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  401c54:	683b      	ldr	r3, [r7, #0]
  401c56:	68db      	ldr	r3, [r3, #12]
  401c58:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401c5a:	2300      	movs	r3, #0
  401c5c:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c5e:	687b      	ldr	r3, [r7, #4]
  401c60:	4a3d      	ldr	r2, [pc, #244]	; (401d58 <usart_serial_init+0x134>)
  401c62:	4293      	cmp	r3, r2
  401c64:	d108      	bne.n	401c78 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  401c66:	2007      	movs	r0, #7
  401c68:	4b3c      	ldr	r3, [pc, #240]	; (401d5c <usart_serial_init+0x138>)
  401c6a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c70:	4619      	mov	r1, r3
  401c72:	6878      	ldr	r0, [r7, #4]
  401c74:	4b3a      	ldr	r3, [pc, #232]	; (401d60 <usart_serial_init+0x13c>)
  401c76:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c78:	687b      	ldr	r3, [r7, #4]
  401c7a:	4a3a      	ldr	r2, [pc, #232]	; (401d64 <usart_serial_init+0x140>)
  401c7c:	4293      	cmp	r3, r2
  401c7e:	d108      	bne.n	401c92 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  401c80:	2008      	movs	r0, #8
  401c82:	4b36      	ldr	r3, [pc, #216]	; (401d5c <usart_serial_init+0x138>)
  401c84:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401c8a:	4619      	mov	r1, r3
  401c8c:	6878      	ldr	r0, [r7, #4]
  401c8e:	4b34      	ldr	r3, [pc, #208]	; (401d60 <usart_serial_init+0x13c>)
  401c90:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401c92:	687b      	ldr	r3, [r7, #4]
  401c94:	4a34      	ldr	r2, [pc, #208]	; (401d68 <usart_serial_init+0x144>)
  401c96:	4293      	cmp	r3, r2
  401c98:	d108      	bne.n	401cac <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  401c9a:	202c      	movs	r0, #44	; 0x2c
  401c9c:	4b2f      	ldr	r3, [pc, #188]	; (401d5c <usart_serial_init+0x138>)
  401c9e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401ca4:	4619      	mov	r1, r3
  401ca6:	6878      	ldr	r0, [r7, #4]
  401ca8:	4b2d      	ldr	r3, [pc, #180]	; (401d60 <usart_serial_init+0x13c>)
  401caa:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401cac:	687b      	ldr	r3, [r7, #4]
  401cae:	4a2f      	ldr	r2, [pc, #188]	; (401d6c <usart_serial_init+0x148>)
  401cb0:	4293      	cmp	r3, r2
  401cb2:	d108      	bne.n	401cc6 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  401cb4:	202d      	movs	r0, #45	; 0x2d
  401cb6:	4b29      	ldr	r3, [pc, #164]	; (401d5c <usart_serial_init+0x138>)
  401cb8:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401cbe:	4619      	mov	r1, r3
  401cc0:	6878      	ldr	r0, [r7, #4]
  401cc2:	4b27      	ldr	r3, [pc, #156]	; (401d60 <usart_serial_init+0x13c>)
  401cc4:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401cc6:	687b      	ldr	r3, [r7, #4]
  401cc8:	4a29      	ldr	r2, [pc, #164]	; (401d70 <usart_serial_init+0x14c>)
  401cca:	4293      	cmp	r3, r2
  401ccc:	d111      	bne.n	401cf2 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  401cce:	200d      	movs	r0, #13
  401cd0:	4b22      	ldr	r3, [pc, #136]	; (401d5c <usart_serial_init+0x138>)
  401cd2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401cd4:	4b1f      	ldr	r3, [pc, #124]	; (401d54 <usart_serial_init+0x130>)
  401cd6:	4798      	blx	r3
  401cd8:	4602      	mov	r2, r0
  401cda:	f107 030c 	add.w	r3, r7, #12
  401cde:	4619      	mov	r1, r3
  401ce0:	6878      	ldr	r0, [r7, #4]
  401ce2:	4b24      	ldr	r3, [pc, #144]	; (401d74 <usart_serial_init+0x150>)
  401ce4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401ce6:	6878      	ldr	r0, [r7, #4]
  401ce8:	4b23      	ldr	r3, [pc, #140]	; (401d78 <usart_serial_init+0x154>)
  401cea:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401cec:	6878      	ldr	r0, [r7, #4]
  401cee:	4b23      	ldr	r3, [pc, #140]	; (401d7c <usart_serial_init+0x158>)
  401cf0:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401cf2:	687b      	ldr	r3, [r7, #4]
  401cf4:	4a22      	ldr	r2, [pc, #136]	; (401d80 <usart_serial_init+0x15c>)
  401cf6:	4293      	cmp	r3, r2
  401cf8:	d111      	bne.n	401d1e <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  401cfa:	200e      	movs	r0, #14
  401cfc:	4b17      	ldr	r3, [pc, #92]	; (401d5c <usart_serial_init+0x138>)
  401cfe:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401d00:	4b14      	ldr	r3, [pc, #80]	; (401d54 <usart_serial_init+0x130>)
  401d02:	4798      	blx	r3
  401d04:	4602      	mov	r2, r0
  401d06:	f107 030c 	add.w	r3, r7, #12
  401d0a:	4619      	mov	r1, r3
  401d0c:	6878      	ldr	r0, [r7, #4]
  401d0e:	4b19      	ldr	r3, [pc, #100]	; (401d74 <usart_serial_init+0x150>)
  401d10:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401d12:	6878      	ldr	r0, [r7, #4]
  401d14:	4b18      	ldr	r3, [pc, #96]	; (401d78 <usart_serial_init+0x154>)
  401d16:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d18:	6878      	ldr	r0, [r7, #4]
  401d1a:	4b18      	ldr	r3, [pc, #96]	; (401d7c <usart_serial_init+0x158>)
  401d1c:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401d1e:	687b      	ldr	r3, [r7, #4]
  401d20:	4a18      	ldr	r2, [pc, #96]	; (401d84 <usart_serial_init+0x160>)
  401d22:	4293      	cmp	r3, r2
  401d24:	d111      	bne.n	401d4a <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  401d26:	200f      	movs	r0, #15
  401d28:	4b0c      	ldr	r3, [pc, #48]	; (401d5c <usart_serial_init+0x138>)
  401d2a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  401d2c:	4b09      	ldr	r3, [pc, #36]	; (401d54 <usart_serial_init+0x130>)
  401d2e:	4798      	blx	r3
  401d30:	4602      	mov	r2, r0
  401d32:	f107 030c 	add.w	r3, r7, #12
  401d36:	4619      	mov	r1, r3
  401d38:	6878      	ldr	r0, [r7, #4]
  401d3a:	4b0e      	ldr	r3, [pc, #56]	; (401d74 <usart_serial_init+0x150>)
  401d3c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  401d3e:	6878      	ldr	r0, [r7, #4]
  401d40:	4b0d      	ldr	r3, [pc, #52]	; (401d78 <usart_serial_init+0x154>)
  401d42:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401d44:	6878      	ldr	r0, [r7, #4]
  401d46:	4b0d      	ldr	r3, [pc, #52]	; (401d7c <usart_serial_init+0x158>)
  401d48:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  401d4a:	bf00      	nop
  401d4c:	3730      	adds	r7, #48	; 0x30
  401d4e:	46bd      	mov	sp, r7
  401d50:	bd80      	pop	{r7, pc}
  401d52:	bf00      	nop
  401d54:	00401bf5 	.word	0x00401bf5
  401d58:	400e0800 	.word	0x400e0800
  401d5c:	00401c09 	.word	0x00401c09
  401d60:	004003e1 	.word	0x004003e1
  401d64:	400e0a00 	.word	0x400e0a00
  401d68:	400e1a00 	.word	0x400e1a00
  401d6c:	400e1c00 	.word	0x400e1c00
  401d70:	40024000 	.word	0x40024000
  401d74:	00401501 	.word	0x00401501
  401d78:	00401585 	.word	0x00401585
  401d7c:	004015b9 	.word	0x004015b9
  401d80:	40028000 	.word	0x40028000
  401d84:	4002c000 	.word	0x4002c000

00401d88 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  401d88:	b580      	push	{r7, lr}
  401d8a:	b082      	sub	sp, #8
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	6078      	str	r0, [r7, #4]
  401d90:	460b      	mov	r3, r1
  401d92:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401d94:	687b      	ldr	r3, [r7, #4]
  401d96:	4a36      	ldr	r2, [pc, #216]	; (401e70 <usart_serial_putchar+0xe8>)
  401d98:	4293      	cmp	r3, r2
  401d9a:	d10a      	bne.n	401db2 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  401d9c:	bf00      	nop
  401d9e:	78fb      	ldrb	r3, [r7, #3]
  401da0:	4619      	mov	r1, r3
  401da2:	6878      	ldr	r0, [r7, #4]
  401da4:	4b33      	ldr	r3, [pc, #204]	; (401e74 <usart_serial_putchar+0xec>)
  401da6:	4798      	blx	r3
  401da8:	4603      	mov	r3, r0
  401daa:	2b00      	cmp	r3, #0
  401dac:	d1f7      	bne.n	401d9e <usart_serial_putchar+0x16>
		return 1;
  401dae:	2301      	movs	r3, #1
  401db0:	e05a      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401db2:	687b      	ldr	r3, [r7, #4]
  401db4:	4a30      	ldr	r2, [pc, #192]	; (401e78 <usart_serial_putchar+0xf0>)
  401db6:	4293      	cmp	r3, r2
  401db8:	d10a      	bne.n	401dd0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  401dba:	bf00      	nop
  401dbc:	78fb      	ldrb	r3, [r7, #3]
  401dbe:	4619      	mov	r1, r3
  401dc0:	6878      	ldr	r0, [r7, #4]
  401dc2:	4b2c      	ldr	r3, [pc, #176]	; (401e74 <usart_serial_putchar+0xec>)
  401dc4:	4798      	blx	r3
  401dc6:	4603      	mov	r3, r0
  401dc8:	2b00      	cmp	r3, #0
  401dca:	d1f7      	bne.n	401dbc <usart_serial_putchar+0x34>
		return 1;
  401dcc:	2301      	movs	r3, #1
  401dce:	e04b      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401dd0:	687b      	ldr	r3, [r7, #4]
  401dd2:	4a2a      	ldr	r2, [pc, #168]	; (401e7c <usart_serial_putchar+0xf4>)
  401dd4:	4293      	cmp	r3, r2
  401dd6:	d10a      	bne.n	401dee <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  401dd8:	bf00      	nop
  401dda:	78fb      	ldrb	r3, [r7, #3]
  401ddc:	4619      	mov	r1, r3
  401dde:	6878      	ldr	r0, [r7, #4]
  401de0:	4b24      	ldr	r3, [pc, #144]	; (401e74 <usart_serial_putchar+0xec>)
  401de2:	4798      	blx	r3
  401de4:	4603      	mov	r3, r0
  401de6:	2b00      	cmp	r3, #0
  401de8:	d1f7      	bne.n	401dda <usart_serial_putchar+0x52>
		return 1;
  401dea:	2301      	movs	r3, #1
  401dec:	e03c      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401dee:	687b      	ldr	r3, [r7, #4]
  401df0:	4a23      	ldr	r2, [pc, #140]	; (401e80 <usart_serial_putchar+0xf8>)
  401df2:	4293      	cmp	r3, r2
  401df4:	d10a      	bne.n	401e0c <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  401df6:	bf00      	nop
  401df8:	78fb      	ldrb	r3, [r7, #3]
  401dfa:	4619      	mov	r1, r3
  401dfc:	6878      	ldr	r0, [r7, #4]
  401dfe:	4b1d      	ldr	r3, [pc, #116]	; (401e74 <usart_serial_putchar+0xec>)
  401e00:	4798      	blx	r3
  401e02:	4603      	mov	r3, r0
  401e04:	2b00      	cmp	r3, #0
  401e06:	d1f7      	bne.n	401df8 <usart_serial_putchar+0x70>
		return 1;
  401e08:	2301      	movs	r3, #1
  401e0a:	e02d      	b.n	401e68 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401e0c:	687b      	ldr	r3, [r7, #4]
  401e0e:	4a1d      	ldr	r2, [pc, #116]	; (401e84 <usart_serial_putchar+0xfc>)
  401e10:	4293      	cmp	r3, r2
  401e12:	d10a      	bne.n	401e2a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  401e14:	bf00      	nop
  401e16:	78fb      	ldrb	r3, [r7, #3]
  401e18:	4619      	mov	r1, r3
  401e1a:	6878      	ldr	r0, [r7, #4]
  401e1c:	4b1a      	ldr	r3, [pc, #104]	; (401e88 <usart_serial_putchar+0x100>)
  401e1e:	4798      	blx	r3
  401e20:	4603      	mov	r3, r0
  401e22:	2b00      	cmp	r3, #0
  401e24:	d1f7      	bne.n	401e16 <usart_serial_putchar+0x8e>
		return 1;
  401e26:	2301      	movs	r3, #1
  401e28:	e01e      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401e2a:	687b      	ldr	r3, [r7, #4]
  401e2c:	4a17      	ldr	r2, [pc, #92]	; (401e8c <usart_serial_putchar+0x104>)
  401e2e:	4293      	cmp	r3, r2
  401e30:	d10a      	bne.n	401e48 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  401e32:	bf00      	nop
  401e34:	78fb      	ldrb	r3, [r7, #3]
  401e36:	4619      	mov	r1, r3
  401e38:	6878      	ldr	r0, [r7, #4]
  401e3a:	4b13      	ldr	r3, [pc, #76]	; (401e88 <usart_serial_putchar+0x100>)
  401e3c:	4798      	blx	r3
  401e3e:	4603      	mov	r3, r0
  401e40:	2b00      	cmp	r3, #0
  401e42:	d1f7      	bne.n	401e34 <usart_serial_putchar+0xac>
		return 1;
  401e44:	2301      	movs	r3, #1
  401e46:	e00f      	b.n	401e68 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401e48:	687b      	ldr	r3, [r7, #4]
  401e4a:	4a11      	ldr	r2, [pc, #68]	; (401e90 <usart_serial_putchar+0x108>)
  401e4c:	4293      	cmp	r3, r2
  401e4e:	d10a      	bne.n	401e66 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  401e50:	bf00      	nop
  401e52:	78fb      	ldrb	r3, [r7, #3]
  401e54:	4619      	mov	r1, r3
  401e56:	6878      	ldr	r0, [r7, #4]
  401e58:	4b0b      	ldr	r3, [pc, #44]	; (401e88 <usart_serial_putchar+0x100>)
  401e5a:	4798      	blx	r3
  401e5c:	4603      	mov	r3, r0
  401e5e:	2b00      	cmp	r3, #0
  401e60:	d1f7      	bne.n	401e52 <usart_serial_putchar+0xca>
		return 1;
  401e62:	2301      	movs	r3, #1
  401e64:	e000      	b.n	401e68 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  401e66:	2300      	movs	r3, #0
}
  401e68:	4618      	mov	r0, r3
  401e6a:	3708      	adds	r7, #8
  401e6c:	46bd      	mov	sp, r7
  401e6e:	bd80      	pop	{r7, pc}
  401e70:	400e0800 	.word	0x400e0800
  401e74:	00400439 	.word	0x00400439
  401e78:	400e0a00 	.word	0x400e0a00
  401e7c:	400e1a00 	.word	0x400e1a00
  401e80:	400e1c00 	.word	0x400e1c00
  401e84:	40024000 	.word	0x40024000
  401e88:	00401625 	.word	0x00401625
  401e8c:	40028000 	.word	0x40028000
  401e90:	4002c000 	.word	0x4002c000

00401e94 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401e94:	b580      	push	{r7, lr}
  401e96:	b084      	sub	sp, #16
  401e98:	af00      	add	r7, sp, #0
  401e9a:	6078      	str	r0, [r7, #4]
  401e9c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  401e9e:	2300      	movs	r3, #0
  401ea0:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401ea2:	687b      	ldr	r3, [r7, #4]
  401ea4:	4a34      	ldr	r2, [pc, #208]	; (401f78 <usart_serial_getchar+0xe4>)
  401ea6:	4293      	cmp	r3, r2
  401ea8:	d107      	bne.n	401eba <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  401eaa:	bf00      	nop
  401eac:	6839      	ldr	r1, [r7, #0]
  401eae:	6878      	ldr	r0, [r7, #4]
  401eb0:	4b32      	ldr	r3, [pc, #200]	; (401f7c <usart_serial_getchar+0xe8>)
  401eb2:	4798      	blx	r3
  401eb4:	4603      	mov	r3, r0
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	d1f8      	bne.n	401eac <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401eba:	687b      	ldr	r3, [r7, #4]
  401ebc:	4a30      	ldr	r2, [pc, #192]	; (401f80 <usart_serial_getchar+0xec>)
  401ebe:	4293      	cmp	r3, r2
  401ec0:	d107      	bne.n	401ed2 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  401ec2:	bf00      	nop
  401ec4:	6839      	ldr	r1, [r7, #0]
  401ec6:	6878      	ldr	r0, [r7, #4]
  401ec8:	4b2c      	ldr	r3, [pc, #176]	; (401f7c <usart_serial_getchar+0xe8>)
  401eca:	4798      	blx	r3
  401ecc:	4603      	mov	r3, r0
  401ece:	2b00      	cmp	r3, #0
  401ed0:	d1f8      	bne.n	401ec4 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401ed2:	687b      	ldr	r3, [r7, #4]
  401ed4:	4a2b      	ldr	r2, [pc, #172]	; (401f84 <usart_serial_getchar+0xf0>)
  401ed6:	4293      	cmp	r3, r2
  401ed8:	d107      	bne.n	401eea <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  401eda:	bf00      	nop
  401edc:	6839      	ldr	r1, [r7, #0]
  401ede:	6878      	ldr	r0, [r7, #4]
  401ee0:	4b26      	ldr	r3, [pc, #152]	; (401f7c <usart_serial_getchar+0xe8>)
  401ee2:	4798      	blx	r3
  401ee4:	4603      	mov	r3, r0
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d1f8      	bne.n	401edc <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401eea:	687b      	ldr	r3, [r7, #4]
  401eec:	4a26      	ldr	r2, [pc, #152]	; (401f88 <usart_serial_getchar+0xf4>)
  401eee:	4293      	cmp	r3, r2
  401ef0:	d107      	bne.n	401f02 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  401ef2:	bf00      	nop
  401ef4:	6839      	ldr	r1, [r7, #0]
  401ef6:	6878      	ldr	r0, [r7, #4]
  401ef8:	4b20      	ldr	r3, [pc, #128]	; (401f7c <usart_serial_getchar+0xe8>)
  401efa:	4798      	blx	r3
  401efc:	4603      	mov	r3, r0
  401efe:	2b00      	cmp	r3, #0
  401f00:	d1f8      	bne.n	401ef4 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401f02:	687b      	ldr	r3, [r7, #4]
  401f04:	4a21      	ldr	r2, [pc, #132]	; (401f8c <usart_serial_getchar+0xf8>)
  401f06:	4293      	cmp	r3, r2
  401f08:	d10d      	bne.n	401f26 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  401f0a:	bf00      	nop
  401f0c:	f107 030c 	add.w	r3, r7, #12
  401f10:	4619      	mov	r1, r3
  401f12:	6878      	ldr	r0, [r7, #4]
  401f14:	4b1e      	ldr	r3, [pc, #120]	; (401f90 <usart_serial_getchar+0xfc>)
  401f16:	4798      	blx	r3
  401f18:	4603      	mov	r3, r0
  401f1a:	2b00      	cmp	r3, #0
  401f1c:	d1f6      	bne.n	401f0c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  401f1e:	68fb      	ldr	r3, [r7, #12]
  401f20:	b2da      	uxtb	r2, r3
  401f22:	683b      	ldr	r3, [r7, #0]
  401f24:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	4a1a      	ldr	r2, [pc, #104]	; (401f94 <usart_serial_getchar+0x100>)
  401f2a:	4293      	cmp	r3, r2
  401f2c:	d10d      	bne.n	401f4a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  401f2e:	bf00      	nop
  401f30:	f107 030c 	add.w	r3, r7, #12
  401f34:	4619      	mov	r1, r3
  401f36:	6878      	ldr	r0, [r7, #4]
  401f38:	4b15      	ldr	r3, [pc, #84]	; (401f90 <usart_serial_getchar+0xfc>)
  401f3a:	4798      	blx	r3
  401f3c:	4603      	mov	r3, r0
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d1f6      	bne.n	401f30 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  401f42:	68fb      	ldr	r3, [r7, #12]
  401f44:	b2da      	uxtb	r2, r3
  401f46:	683b      	ldr	r3, [r7, #0]
  401f48:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401f4a:	687b      	ldr	r3, [r7, #4]
  401f4c:	4a12      	ldr	r2, [pc, #72]	; (401f98 <usart_serial_getchar+0x104>)
  401f4e:	4293      	cmp	r3, r2
  401f50:	d10d      	bne.n	401f6e <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  401f52:	bf00      	nop
  401f54:	f107 030c 	add.w	r3, r7, #12
  401f58:	4619      	mov	r1, r3
  401f5a:	6878      	ldr	r0, [r7, #4]
  401f5c:	4b0c      	ldr	r3, [pc, #48]	; (401f90 <usart_serial_getchar+0xfc>)
  401f5e:	4798      	blx	r3
  401f60:	4603      	mov	r3, r0
  401f62:	2b00      	cmp	r3, #0
  401f64:	d1f6      	bne.n	401f54 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  401f66:	68fb      	ldr	r3, [r7, #12]
  401f68:	b2da      	uxtb	r2, r3
  401f6a:	683b      	ldr	r3, [r7, #0]
  401f6c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401f6e:	bf00      	nop
  401f70:	3710      	adds	r7, #16
  401f72:	46bd      	mov	sp, r7
  401f74:	bd80      	pop	{r7, pc}
  401f76:	bf00      	nop
  401f78:	400e0800 	.word	0x400e0800
  401f7c:	00400469 	.word	0x00400469
  401f80:	400e0a00 	.word	0x400e0a00
  401f84:	400e1a00 	.word	0x400e1a00
  401f88:	400e1c00 	.word	0x400e1c00
  401f8c:	40024000 	.word	0x40024000
  401f90:	00401657 	.word	0x00401657
  401f94:	40028000 	.word	0x40028000
  401f98:	4002c000 	.word	0x4002c000

00401f9c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  401f9c:	b580      	push	{r7, lr}
  401f9e:	b082      	sub	sp, #8
  401fa0:	af00      	add	r7, sp, #0
  401fa2:	6078      	str	r0, [r7, #4]
  401fa4:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  401fa6:	4a0f      	ldr	r2, [pc, #60]	; (401fe4 <stdio_serial_init+0x48>)
  401fa8:	687b      	ldr	r3, [r7, #4]
  401faa:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401fac:	4b0e      	ldr	r3, [pc, #56]	; (401fe8 <stdio_serial_init+0x4c>)
  401fae:	4a0f      	ldr	r2, [pc, #60]	; (401fec <stdio_serial_init+0x50>)
  401fb0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401fb2:	4b0f      	ldr	r3, [pc, #60]	; (401ff0 <stdio_serial_init+0x54>)
  401fb4:	4a0f      	ldr	r2, [pc, #60]	; (401ff4 <stdio_serial_init+0x58>)
  401fb6:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  401fb8:	6839      	ldr	r1, [r7, #0]
  401fba:	6878      	ldr	r0, [r7, #4]
  401fbc:	4b0e      	ldr	r3, [pc, #56]	; (401ff8 <stdio_serial_init+0x5c>)
  401fbe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401fc0:	4b0e      	ldr	r3, [pc, #56]	; (401ffc <stdio_serial_init+0x60>)
  401fc2:	681b      	ldr	r3, [r3, #0]
  401fc4:	689b      	ldr	r3, [r3, #8]
  401fc6:	2100      	movs	r1, #0
  401fc8:	4618      	mov	r0, r3
  401fca:	4b0d      	ldr	r3, [pc, #52]	; (402000 <stdio_serial_init+0x64>)
  401fcc:	4798      	blx	r3
	setbuf(stdin, NULL);
  401fce:	4b0b      	ldr	r3, [pc, #44]	; (401ffc <stdio_serial_init+0x60>)
  401fd0:	681b      	ldr	r3, [r3, #0]
  401fd2:	685b      	ldr	r3, [r3, #4]
  401fd4:	2100      	movs	r1, #0
  401fd6:	4618      	mov	r0, r3
  401fd8:	4b09      	ldr	r3, [pc, #36]	; (402000 <stdio_serial_init+0x64>)
  401fda:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  401fdc:	bf00      	nop
  401fde:	3708      	adds	r7, #8
  401fe0:	46bd      	mov	sp, r7
  401fe2:	bd80      	pop	{r7, pc}
  401fe4:	20400ab8 	.word	0x20400ab8
  401fe8:	20400ab4 	.word	0x20400ab4
  401fec:	00401d89 	.word	0x00401d89
  401ff0:	20400ab0 	.word	0x20400ab0
  401ff4:	00401e95 	.word	0x00401e95
  401ff8:	00401c25 	.word	0x00401c25
  401ffc:	2040001c 	.word	0x2040001c
  402000:	004025fd 	.word	0x004025fd

00402004 <LED_init>:
void BUTTON_handler();
void PRESENCE_handler();
static void pin_toggle(Pio *pio, uint32_t mask);
static void printv(uint32_t *v, uint32_t n);

static void LED_init(int state) {
  402004:	b590      	push	{r4, r7, lr}
  402006:	b085      	sub	sp, #20
  402008:	af02      	add	r7, sp, #8
  40200a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(LED_PIO_ID);
  40200c:	200c      	movs	r0, #12
  40200e:	4b0a      	ldr	r3, [pc, #40]	; (402038 <LED_init+0x34>)
  402010:	4798      	blx	r3
	pio_set_output(LED_PIO, LED_PIN_MASK, !state, 0, 0);
  402012:	687b      	ldr	r3, [r7, #4]
  402014:	2b00      	cmp	r3, #0
  402016:	bf0c      	ite	eq
  402018:	2301      	moveq	r3, #1
  40201a:	2300      	movne	r3, #0
  40201c:	b2db      	uxtb	r3, r3
  40201e:	461a      	mov	r2, r3
  402020:	2300      	movs	r3, #0
  402022:	9300      	str	r3, [sp, #0]
  402024:	2300      	movs	r3, #0
  402026:	f44f 7180 	mov.w	r1, #256	; 0x100
  40202a:	4804      	ldr	r0, [pc, #16]	; (40203c <LED_init+0x38>)
  40202c:	4c04      	ldr	r4, [pc, #16]	; (402040 <LED_init+0x3c>)
  40202e:	47a0      	blx	r4
};
  402030:	bf00      	nop
  402032:	370c      	adds	r7, #12
  402034:	46bd      	mov	sp, r7
  402036:	bd90      	pop	{r4, r7, pc}
  402038:	0040139d 	.word	0x0040139d
  40203c:	400e1200 	.word	0x400e1200
  402040:	00400da5 	.word	0x00400da5

00402044 <BUZZER_init>:

static void BUZZER_init(void) {
  402044:	b590      	push	{r4, r7, lr}
  402046:	b083      	sub	sp, #12
  402048:	af02      	add	r7, sp, #8
	pmc_enable_periph_clk(BUZZER_PIO_ID);
  40204a:	2010      	movs	r0, #16
  40204c:	4b0a      	ldr	r3, [pc, #40]	; (402078 <BUZZER_init+0x34>)
  40204e:	4798      	blx	r3
	pio_set_output(BUZZER_PIO, BUZZER_PIN_MASK, 0, 0, 0);
  402050:	2300      	movs	r3, #0
  402052:	9300      	str	r3, [sp, #0]
  402054:	2300      	movs	r3, #0
  402056:	2200      	movs	r2, #0
  402058:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40205c:	4807      	ldr	r0, [pc, #28]	; (40207c <BUZZER_init+0x38>)
  40205e:	4c08      	ldr	r4, [pc, #32]	; (402080 <BUZZER_init+0x3c>)
  402060:	47a0      	blx	r4
	pio_pull_down(BUZZER_PIO, BUZZER_PIN_MASK, ENABLE);
  402062:	2201      	movs	r2, #1
  402064:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402068:	4804      	ldr	r0, [pc, #16]	; (40207c <BUZZER_init+0x38>)
  40206a:	4b06      	ldr	r3, [pc, #24]	; (402084 <BUZZER_init+0x40>)
  40206c:	4798      	blx	r3
}
  40206e:	bf00      	nop
  402070:	3704      	adds	r7, #4
  402072:	46bd      	mov	sp, r7
  402074:	bd90      	pop	{r4, r7, pc}
  402076:	bf00      	nop
  402078:	0040139d 	.word	0x0040139d
  40207c:	400e1400 	.word	0x400e1400
  402080:	00400da5 	.word	0x00400da5
  402084:	00400e09 	.word	0x00400e09

00402088 <BUTTON_init>:

static void BUTTON_init(uint32_t pio_id, Pio *p_pio, uint32_t mask) {
  402088:	b590      	push	{r4, r7, lr}
  40208a:	b087      	sub	sp, #28
  40208c:	af02      	add	r7, sp, #8
  40208e:	60f8      	str	r0, [r7, #12]
  402090:	60b9      	str	r1, [r7, #8]
  402092:	607a      	str	r2, [r7, #4]
	pmc_enable_periph_clk(pio_id);
  402094:	68f8      	ldr	r0, [r7, #12]
  402096:	4b11      	ldr	r3, [pc, #68]	; (4020dc <BUTTON_init+0x54>)
  402098:	4798      	blx	r3
	pio_set_input(p_pio, mask, PIO_PULLUP | PIO_DEBOUNCE);
  40209a:	2209      	movs	r2, #9
  40209c:	6879      	ldr	r1, [r7, #4]
  40209e:	68b8      	ldr	r0, [r7, #8]
  4020a0:	4b0f      	ldr	r3, [pc, #60]	; (4020e0 <BUTTON_init+0x58>)
  4020a2:	4798      	blx	r3
	
	pio_enable_interrupt(p_pio, mask);
  4020a4:	6879      	ldr	r1, [r7, #4]
  4020a6:	68b8      	ldr	r0, [r7, #8]
  4020a8:	4b0e      	ldr	r3, [pc, #56]	; (4020e4 <BUTTON_init+0x5c>)
  4020aa:	4798      	blx	r3
	pio_handler_set(p_pio, pio_id, mask, PIO_IT_FALL_EDGE, BUTTON_handler);
  4020ac:	4b0e      	ldr	r3, [pc, #56]	; (4020e8 <BUTTON_init+0x60>)
  4020ae:	9300      	str	r3, [sp, #0]
  4020b0:	2350      	movs	r3, #80	; 0x50
  4020b2:	687a      	ldr	r2, [r7, #4]
  4020b4:	68f9      	ldr	r1, [r7, #12]
  4020b6:	68b8      	ldr	r0, [r7, #8]
  4020b8:	4c0c      	ldr	r4, [pc, #48]	; (4020ec <BUTTON_init+0x64>)
  4020ba:	47a0      	blx	r4
	    
	NVIC_EnableIRQ(pio_id);
  4020bc:	68fb      	ldr	r3, [r7, #12]
  4020be:	b25b      	sxtb	r3, r3
  4020c0:	4618      	mov	r0, r3
  4020c2:	4b0b      	ldr	r3, [pc, #44]	; (4020f0 <BUTTON_init+0x68>)
  4020c4:	4798      	blx	r3
	NVIC_SetPriority(pio_id, 1);
  4020c6:	68fb      	ldr	r3, [r7, #12]
  4020c8:	b25b      	sxtb	r3, r3
  4020ca:	2101      	movs	r1, #1
  4020cc:	4618      	mov	r0, r3
  4020ce:	4b09      	ldr	r3, [pc, #36]	; (4020f4 <BUTTON_init+0x6c>)
  4020d0:	4798      	blx	r3
}
  4020d2:	bf00      	nop
  4020d4:	3714      	adds	r7, #20
  4020d6:	46bd      	mov	sp, r7
  4020d8:	bd90      	pop	{r4, r7, pc}
  4020da:	bf00      	nop
  4020dc:	0040139d 	.word	0x0040139d
  4020e0:	00400d25 	.word	0x00400d25
  4020e4:	00400ea5 	.word	0x00400ea5
  4020e8:	00402301 	.word	0x00402301
  4020ec:	00400fc1 	.word	0x00400fc1
  4020f0:	00401ac5 	.word	0x00401ac5
  4020f4:	00401af9 	.word	0x00401af9

004020f8 <PRESENCE_init>:

static void PRESENCE_init(void) {
  4020f8:	b580      	push	{r7, lr}
  4020fa:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(PRESENCE_PIO_ID);
  4020fc:	2010      	movs	r0, #16
  4020fe:	4b05      	ldr	r3, [pc, #20]	; (402114 <PRESENCE_init+0x1c>)
  402100:	4798      	blx	r3
	pio_set_input(PRESENCE_PIO, PRESENCE_PIN_MASK, PIO_DEBOUNCE);
  402102:	2208      	movs	r2, #8
  402104:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402108:	4803      	ldr	r0, [pc, #12]	; (402118 <PRESENCE_init+0x20>)
  40210a:	4b04      	ldr	r3, [pc, #16]	; (40211c <PRESENCE_init+0x24>)
  40210c:	4798      	blx	r3
}
  40210e:	bf00      	nop
  402110:	bd80      	pop	{r7, pc}
  402112:	bf00      	nop
  402114:	0040139d 	.word	0x0040139d
  402118:	400e1400 	.word	0x400e1400
  40211c:	00400d25 	.word	0x00400d25

00402120 <TC1_init>:

static void TC1_init(uint32_t frequency) {
  402120:	b590      	push	{r4, r7, lr}
  402122:	b089      	sub	sp, #36	; 0x24
  402124:	af02      	add	r7, sp, #8
  402126:	6078      	str	r0, [r7, #4]
	uint32_t ul_div, ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  402128:	4b1a      	ldr	r3, [pc, #104]	; (402194 <TC1_init+0x74>)
  40212a:	4798      	blx	r3
  40212c:	6178      	str	r0, [r7, #20]

	pmc_enable_periph_clk(ID_TC1);
  40212e:	2018      	movs	r0, #24
  402130:	4b19      	ldr	r3, [pc, #100]	; (402198 <TC1_init+0x78>)
  402132:	4798      	blx	r3

	// Configura o TC para operar em 1S e interrupcao no RC compare
	tc_find_mck_divisor(frequency, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402134:	f107 010c 	add.w	r1, r7, #12
  402138:	f107 0210 	add.w	r2, r7, #16
  40213c:	697b      	ldr	r3, [r7, #20]
  40213e:	9300      	str	r3, [sp, #0]
  402140:	460b      	mov	r3, r1
  402142:	6979      	ldr	r1, [r7, #20]
  402144:	6878      	ldr	r0, [r7, #4]
  402146:	4c15      	ldr	r4, [pc, #84]	; (40219c <TC1_init+0x7c>)
  402148:	47a0      	blx	r4
	tc_init(TC0, 1, ul_tcclks | TC_CMR_CPCTRG);
  40214a:	68fb      	ldr	r3, [r7, #12]
  40214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  402150:	461a      	mov	r2, r3
  402152:	2101      	movs	r1, #1
  402154:	4812      	ldr	r0, [pc, #72]	; (4021a0 <TC1_init+0x80>)
  402156:	4b13      	ldr	r3, [pc, #76]	; (4021a4 <TC1_init+0x84>)
  402158:	4798      	blx	r3
	tc_write_rc(TC0, 1, (ul_sysclk / ul_div) / frequency);
  40215a:	693b      	ldr	r3, [r7, #16]
  40215c:	697a      	ldr	r2, [r7, #20]
  40215e:	fbb2 f2f3 	udiv	r2, r2, r3
  402162:	687b      	ldr	r3, [r7, #4]
  402164:	fbb2 f3f3 	udiv	r3, r2, r3
  402168:	461a      	mov	r2, r3
  40216a:	2101      	movs	r1, #1
  40216c:	480c      	ldr	r0, [pc, #48]	; (4021a0 <TC1_init+0x80>)
  40216e:	4b0e      	ldr	r3, [pc, #56]	; (4021a8 <TC1_init+0x88>)
  402170:	4798      	blx	r3

	NVIC_EnableIRQ((IRQn_Type) ID_TC1);
  402172:	2018      	movs	r0, #24
  402174:	4b0d      	ldr	r3, [pc, #52]	; (4021ac <TC1_init+0x8c>)
  402176:	4798      	blx	r3
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
  402178:	2210      	movs	r2, #16
  40217a:	2101      	movs	r1, #1
  40217c:	4808      	ldr	r0, [pc, #32]	; (4021a0 <TC1_init+0x80>)
  40217e:	4b0c      	ldr	r3, [pc, #48]	; (4021b0 <TC1_init+0x90>)
  402180:	4798      	blx	r3

	tc_start(TC0, 1);
  402182:	2101      	movs	r1, #1
  402184:	4806      	ldr	r0, [pc, #24]	; (4021a0 <TC1_init+0x80>)
  402186:	4b0b      	ldr	r3, [pc, #44]	; (4021b4 <TC1_init+0x94>)
  402188:	4798      	blx	r3
}
  40218a:	bf00      	nop
  40218c:	371c      	adds	r7, #28
  40218e:	46bd      	mov	sp, r7
  402190:	bd90      	pop	{r4, r7, pc}
  402192:	bf00      	nop
  402194:	00401be1 	.word	0x00401be1
  402198:	0040139d 	.word	0x0040139d
  40219c:	0040033b 	.word	0x0040033b
  4021a0:	4000c000 	.word	0x4000c000
  4021a4:	0040026d 	.word	0x0040026d
  4021a8:	004002c9 	.word	0x004002c9
  4021ac:	00401ac5 	.word	0x00401ac5
  4021b0:	004002ef 	.word	0x004002ef
  4021b4:	004002a7 	.word	0x004002a7

004021b8 <CONSOLE_init>:
// 	NVIC_EnableIRQ(RTC_IRQn);
// 	
// 	rtc_enable_interrupt(RTC, RTC_IER_ALREN); 
// }

static void CONSOLE_init(void) {
  4021b8:	b590      	push	{r4, r7, lr}
  4021ba:	b085      	sub	sp, #20
  4021bc:	af00      	add	r7, sp, #0
	
	const usart_serial_options_t uart_serial_options = {
  4021be:	4b08      	ldr	r3, [pc, #32]	; (4021e0 <CONSOLE_init+0x28>)
  4021c0:	463c      	mov	r4, r7
  4021c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4021c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  4021c8:	200e      	movs	r0, #14
  4021ca:	4b06      	ldr	r3, [pc, #24]	; (4021e4 <CONSOLE_init+0x2c>)
  4021cc:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  4021ce:	463b      	mov	r3, r7
  4021d0:	4619      	mov	r1, r3
  4021d2:	4805      	ldr	r0, [pc, #20]	; (4021e8 <CONSOLE_init+0x30>)
  4021d4:	4b05      	ldr	r3, [pc, #20]	; (4021ec <CONSOLE_init+0x34>)
  4021d6:	4798      	blx	r3
}
  4021d8:	bf00      	nop
  4021da:	3714      	adds	r7, #20
  4021dc:	46bd      	mov	sp, r7
  4021de:	bd90      	pop	{r4, r7, pc}
  4021e0:	004052e4 	.word	0x004052e4
  4021e4:	00401c09 	.word	0x00401c09
  4021e8:	40028000 	.word	0x40028000
  4021ec:	00401f9d 	.word	0x00401f9d

004021f0 <TC1_Handler>:

// Handlers
void TC1_Handler(void) {
  4021f0:	b580      	push	{r7, lr}
  4021f2:	b084      	sub	sp, #16
  4021f4:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;
	uint32_t found_presence, reed_is_closed;
	
	ul_dummy = tc_get_status(TC0, 1);
  4021f6:	2101      	movs	r1, #1
  4021f8:	4833      	ldr	r0, [pc, #204]	; (4022c8 <TC1_Handler+0xd8>)
  4021fa:	4b34      	ldr	r3, [pc, #208]	; (4022cc <TC1_Handler+0xdc>)
  4021fc:	4798      	blx	r3
  4021fe:	4603      	mov	r3, r0
  402200:	607b      	str	r3, [r7, #4]
	UNUSED(ul_dummy);
  402202:	687b      	ldr	r3, [r7, #4]
	
	found_presence = pio_get(PRESENCE_PIO, PIO_INPUT, PRESENCE_PIN_MASK);
  402204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402208:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40220c:	4830      	ldr	r0, [pc, #192]	; (4022d0 <TC1_Handler+0xe0>)
  40220e:	4b31      	ldr	r3, [pc, #196]	; (4022d4 <TC1_Handler+0xe4>)
  402210:	4798      	blx	r3
  402212:	60b8      	str	r0, [r7, #8]
	
	if(found_presence)
  402214:	68bb      	ldr	r3, [r7, #8]
  402216:	2b00      	cmp	r3, #0
  402218:	d002      	beq.n	402220 <TC1_Handler+0x30>
		has_presence = 1;
  40221a:	4b2f      	ldr	r3, [pc, #188]	; (4022d8 <TC1_Handler+0xe8>)
  40221c:	2201      	movs	r2, #1
  40221e:	701a      	strb	r2, [r3, #0]
	
	if(has_presence) {
  402220:	4b2d      	ldr	r3, [pc, #180]	; (4022d8 <TC1_Handler+0xe8>)
  402222:	781b      	ldrb	r3, [r3, #0]
  402224:	2b00      	cmp	r3, #0
  402226:	d00a      	beq.n	40223e <TC1_Handler+0x4e>
		pio_clear(LED_PIO, LED_PIN_MASK);
  402228:	f44f 7180 	mov.w	r1, #256	; 0x100
  40222c:	482b      	ldr	r0, [pc, #172]	; (4022dc <TC1_Handler+0xec>)
  40222e:	4b2c      	ldr	r3, [pc, #176]	; (4022e0 <TC1_Handler+0xf0>)
  402230:	4798      	blx	r3
		presence_to_buzzer_interval++;
  402232:	4b2c      	ldr	r3, [pc, #176]	; (4022e4 <TC1_Handler+0xf4>)
  402234:	781b      	ldrb	r3, [r3, #0]
  402236:	3301      	adds	r3, #1
  402238:	b2da      	uxtb	r2, r3
  40223a:	4b2a      	ldr	r3, [pc, #168]	; (4022e4 <TC1_Handler+0xf4>)
  40223c:	701a      	strb	r2, [r3, #0]
	}
	
	if(has_presence) {
  40223e:	4b26      	ldr	r3, [pc, #152]	; (4022d8 <TC1_Handler+0xe8>)
  402240:	781b      	ldrb	r3, [r3, #0]
  402242:	2b00      	cmp	r3, #0
  402244:	d019      	beq.n	40227a <TC1_Handler+0x8a>
		for(int i = 0; i < PASSWORD_LENGTH; i++) {
  402246:	2300      	movs	r3, #0
  402248:	60fb      	str	r3, [r7, #12]
  40224a:	e013      	b.n	402274 <TC1_Handler+0x84>
			if (correct_password[i] != input_password[i])
  40224c:	4a26      	ldr	r2, [pc, #152]	; (4022e8 <TC1_Handler+0xf8>)
  40224e:	68fb      	ldr	r3, [r7, #12]
  402250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  402254:	4925      	ldr	r1, [pc, #148]	; (4022ec <TC1_Handler+0xfc>)
  402256:	68fb      	ldr	r3, [r7, #12]
  402258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40225c:	429a      	cmp	r2, r3
  40225e:	d003      	beq.n	402268 <TC1_Handler+0x78>
				correct = 0;
  402260:	4b23      	ldr	r3, [pc, #140]	; (4022f0 <TC1_Handler+0x100>)
  402262:	2200      	movs	r2, #0
  402264:	601a      	str	r2, [r3, #0]
  402266:	e002      	b.n	40226e <TC1_Handler+0x7e>
			else
				correct = 1;
  402268:	4b21      	ldr	r3, [pc, #132]	; (4022f0 <TC1_Handler+0x100>)
  40226a:	2201      	movs	r2, #1
  40226c:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < PASSWORD_LENGTH; i++) {
  40226e:	68fb      	ldr	r3, [r7, #12]
  402270:	3301      	adds	r3, #1
  402272:	60fb      	str	r3, [r7, #12]
  402274:	68fb      	ldr	r3, [r7, #12]
  402276:	2b04      	cmp	r3, #4
  402278:	dde8      	ble.n	40224c <TC1_Handler+0x5c>
		}
	}

	printf("%d\n", presence_to_buzzer_interval);
  40227a:	4b1a      	ldr	r3, [pc, #104]	; (4022e4 <TC1_Handler+0xf4>)
  40227c:	781b      	ldrb	r3, [r3, #0]
  40227e:	4619      	mov	r1, r3
  402280:	481c      	ldr	r0, [pc, #112]	; (4022f4 <TC1_Handler+0x104>)
  402282:	4b1d      	ldr	r3, [pc, #116]	; (4022f8 <TC1_Handler+0x108>)
  402284:	4798      	blx	r3
	
	if(correct) {
  402286:	4b1a      	ldr	r3, [pc, #104]	; (4022f0 <TC1_Handler+0x100>)
  402288:	681b      	ldr	r3, [r3, #0]
  40228a:	2b00      	cmp	r3, #0
  40228c:	d00a      	beq.n	4022a4 <TC1_Handler+0xb4>
		presence_to_buzzer_interval = 0;
  40228e:	4b15      	ldr	r3, [pc, #84]	; (4022e4 <TC1_Handler+0xf4>)
  402290:	2200      	movs	r2, #0
  402292:	701a      	strb	r2, [r3, #0]
		has_presence = 0;
  402294:	4b10      	ldr	r3, [pc, #64]	; (4022d8 <TC1_Handler+0xe8>)
  402296:	2200      	movs	r2, #0
  402298:	701a      	strb	r2, [r3, #0]
		pio_clear(BUZZER_PIO, BUZZER_PIN_MASK);
  40229a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40229e:	480c      	ldr	r0, [pc, #48]	; (4022d0 <TC1_Handler+0xe0>)
  4022a0:	4b0f      	ldr	r3, [pc, #60]	; (4022e0 <TC1_Handler+0xf0>)
  4022a2:	4798      	blx	r3
	}
	
	if(presence_to_buzzer_interval >= ALARM_DELAY_MAX && !correct) {
  4022a4:	4b0f      	ldr	r3, [pc, #60]	; (4022e4 <TC1_Handler+0xf4>)
  4022a6:	781b      	ldrb	r3, [r3, #0]
  4022a8:	2b27      	cmp	r3, #39	; 0x27
  4022aa:	d908      	bls.n	4022be <TC1_Handler+0xce>
  4022ac:	4b10      	ldr	r3, [pc, #64]	; (4022f0 <TC1_Handler+0x100>)
  4022ae:	681b      	ldr	r3, [r3, #0]
  4022b0:	2b00      	cmp	r3, #0
  4022b2:	d104      	bne.n	4022be <TC1_Handler+0xce>
		pio_set(BUZZER_PIO, BUZZER_PIN_MASK);
  4022b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4022b8:	4805      	ldr	r0, [pc, #20]	; (4022d0 <TC1_Handler+0xe0>)
  4022ba:	4b10      	ldr	r3, [pc, #64]	; (4022fc <TC1_Handler+0x10c>)
  4022bc:	4798      	blx	r3
	}
	
}
  4022be:	bf00      	nop
  4022c0:	3710      	adds	r7, #16
  4022c2:	46bd      	mov	sp, r7
  4022c4:	bd80      	pop	{r7, pc}
  4022c6:	bf00      	nop
  4022c8:	4000c000 	.word	0x4000c000
  4022cc:	00400317 	.word	0x00400317
  4022d0:	400e1400 	.word	0x400e1400
  4022d4:	00400cdd 	.word	0x00400cdd
  4022d8:	20400a5c 	.word	0x20400a5c
  4022dc:	400e1200 	.word	0x400e1200
  4022e0:	00400cc1 	.word	0x00400cc1
  4022e4:	20400a76 	.word	0x20400a76
  4022e8:	20400008 	.word	0x20400008
  4022ec:	20400a60 	.word	0x20400a60
  4022f0:	20400a78 	.word	0x20400a78
  4022f4:	004052f4 	.word	0x004052f4
  4022f8:	00402539 	.word	0x00402539
  4022fc:	00400ca5 	.word	0x00400ca5

00402300 <BUTTON_handler>:

void BUTTON_handler() {
  402300:	b590      	push	{r4, r7, lr}
  402302:	b083      	sub	sp, #12
  402304:	af00      	add	r7, sp, #0
	uint32_t pioIntStatus;
	pioIntStatus =  pio_get_interrupt_status(BUTTON1_PIO) | pio_get_interrupt_status(BUTTON2_PIO) | pio_get_interrupt_status(BUTTON3_PIO);
  402306:	484f      	ldr	r0, [pc, #316]	; (402444 <BUTTON_handler+0x144>)
  402308:	4b4f      	ldr	r3, [pc, #316]	; (402448 <BUTTON_handler+0x148>)
  40230a:	4798      	blx	r3
  40230c:	4604      	mov	r4, r0
  40230e:	484f      	ldr	r0, [pc, #316]	; (40244c <BUTTON_handler+0x14c>)
  402310:	4b4d      	ldr	r3, [pc, #308]	; (402448 <BUTTON_handler+0x148>)
  402312:	4798      	blx	r3
  402314:	4603      	mov	r3, r0
  402316:	431c      	orrs	r4, r3
  402318:	484d      	ldr	r0, [pc, #308]	; (402450 <BUTTON_handler+0x150>)
  40231a:	4b4b      	ldr	r3, [pc, #300]	; (402448 <BUTTON_handler+0x148>)
  40231c:	4798      	blx	r3
  40231e:	4603      	mov	r3, r0
  402320:	4323      	orrs	r3, r4
  402322:	607b      	str	r3, [r7, #4]
	
	uint8_t button1_pressed = !pio_get(BUTTON1_PIO, PIO_INPUT, BUTTON1_PIN_MASK);
  402324:	2201      	movs	r2, #1
  402326:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40232a:	4846      	ldr	r0, [pc, #280]	; (402444 <BUTTON_handler+0x144>)
  40232c:	4b49      	ldr	r3, [pc, #292]	; (402454 <BUTTON_handler+0x154>)
  40232e:	4798      	blx	r3
  402330:	4603      	mov	r3, r0
  402332:	2b00      	cmp	r3, #0
  402334:	bf0c      	ite	eq
  402336:	2301      	moveq	r3, #1
  402338:	2300      	movne	r3, #0
  40233a:	b2db      	uxtb	r3, r3
  40233c:	70fb      	strb	r3, [r7, #3]
	uint8_t button2_pressed = !pio_get(BUTTON2_PIO, PIO_INPUT, BUTTON2_PIN_MASK);
  40233e:	2208      	movs	r2, #8
  402340:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402344:	4841      	ldr	r0, [pc, #260]	; (40244c <BUTTON_handler+0x14c>)
  402346:	4b43      	ldr	r3, [pc, #268]	; (402454 <BUTTON_handler+0x154>)
  402348:	4798      	blx	r3
  40234a:	4603      	mov	r3, r0
  40234c:	2b00      	cmp	r3, #0
  40234e:	bf0c      	ite	eq
  402350:	2301      	moveq	r3, #1
  402352:	2300      	movne	r3, #0
  402354:	b2db      	uxtb	r3, r3
  402356:	70bb      	strb	r3, [r7, #2]
	uint8_t button3_pressed = !pio_get(BUTTON3_PIO, PIO_INPUT, BUTTON3_PIN_MASK);
  402358:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40235c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402360:	483b      	ldr	r0, [pc, #236]	; (402450 <BUTTON_handler+0x150>)
  402362:	4b3c      	ldr	r3, [pc, #240]	; (402454 <BUTTON_handler+0x154>)
  402364:	4798      	blx	r3
  402366:	4603      	mov	r3, r0
  402368:	2b00      	cmp	r3, #0
  40236a:	bf0c      	ite	eq
  40236c:	2301      	moveq	r3, #1
  40236e:	2300      	movne	r3, #0
  402370:	b2db      	uxtb	r3, r3
  402372:	707b      	strb	r3, [r7, #1]
	
	if (button1_pressed && input_password_len < 5) {
  402374:	78fb      	ldrb	r3, [r7, #3]
  402376:	2b00      	cmp	r3, #0
  402378:	d01a      	beq.n	4023b0 <BUTTON_handler+0xb0>
  40237a:	4b37      	ldr	r3, [pc, #220]	; (402458 <BUTTON_handler+0x158>)
  40237c:	781b      	ldrb	r3, [r3, #0]
  40237e:	2b04      	cmp	r3, #4
  402380:	d816      	bhi.n	4023b0 <BUTTON_handler+0xb0>
		input_password[curr_index] = 1;
  402382:	4b36      	ldr	r3, [pc, #216]	; (40245c <BUTTON_handler+0x15c>)
  402384:	781b      	ldrb	r3, [r3, #0]
  402386:	4619      	mov	r1, r3
  402388:	4b35      	ldr	r3, [pc, #212]	; (402460 <BUTTON_handler+0x160>)
  40238a:	2201      	movs	r2, #1
  40238c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		curr_index++;
  402390:	4b32      	ldr	r3, [pc, #200]	; (40245c <BUTTON_handler+0x15c>)
  402392:	781b      	ldrb	r3, [r3, #0]
  402394:	3301      	adds	r3, #1
  402396:	b2da      	uxtb	r2, r3
  402398:	4b30      	ldr	r3, [pc, #192]	; (40245c <BUTTON_handler+0x15c>)
  40239a:	701a      	strb	r2, [r3, #0]
		input_password_len++;
  40239c:	4b2e      	ldr	r3, [pc, #184]	; (402458 <BUTTON_handler+0x158>)
  40239e:	781b      	ldrb	r3, [r3, #0]
  4023a0:	3301      	adds	r3, #1
  4023a2:	b2da      	uxtb	r2, r3
  4023a4:	4b2c      	ldr	r3, [pc, #176]	; (402458 <BUTTON_handler+0x158>)
  4023a6:	701a      	strb	r2, [r3, #0]
		printf("BUTTON 1\n");
  4023a8:	482e      	ldr	r0, [pc, #184]	; (402464 <BUTTON_handler+0x164>)
  4023aa:	4b2f      	ldr	r3, [pc, #188]	; (402468 <BUTTON_handler+0x168>)
  4023ac:	4798      	blx	r3
  4023ae:	e03a      	b.n	402426 <BUTTON_handler+0x126>
	}
	else if (button2_pressed && input_password_len < 5) {
  4023b0:	78bb      	ldrb	r3, [r7, #2]
  4023b2:	2b00      	cmp	r3, #0
  4023b4:	d01a      	beq.n	4023ec <BUTTON_handler+0xec>
  4023b6:	4b28      	ldr	r3, [pc, #160]	; (402458 <BUTTON_handler+0x158>)
  4023b8:	781b      	ldrb	r3, [r3, #0]
  4023ba:	2b04      	cmp	r3, #4
  4023bc:	d816      	bhi.n	4023ec <BUTTON_handler+0xec>
		input_password[curr_index] = 2;
  4023be:	4b27      	ldr	r3, [pc, #156]	; (40245c <BUTTON_handler+0x15c>)
  4023c0:	781b      	ldrb	r3, [r3, #0]
  4023c2:	4619      	mov	r1, r3
  4023c4:	4b26      	ldr	r3, [pc, #152]	; (402460 <BUTTON_handler+0x160>)
  4023c6:	2202      	movs	r2, #2
  4023c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		curr_index++;
  4023cc:	4b23      	ldr	r3, [pc, #140]	; (40245c <BUTTON_handler+0x15c>)
  4023ce:	781b      	ldrb	r3, [r3, #0]
  4023d0:	3301      	adds	r3, #1
  4023d2:	b2da      	uxtb	r2, r3
  4023d4:	4b21      	ldr	r3, [pc, #132]	; (40245c <BUTTON_handler+0x15c>)
  4023d6:	701a      	strb	r2, [r3, #0]
		input_password_len++;
  4023d8:	4b1f      	ldr	r3, [pc, #124]	; (402458 <BUTTON_handler+0x158>)
  4023da:	781b      	ldrb	r3, [r3, #0]
  4023dc:	3301      	adds	r3, #1
  4023de:	b2da      	uxtb	r2, r3
  4023e0:	4b1d      	ldr	r3, [pc, #116]	; (402458 <BUTTON_handler+0x158>)
  4023e2:	701a      	strb	r2, [r3, #0]
		printf("BUTTON 2\n");
  4023e4:	4821      	ldr	r0, [pc, #132]	; (40246c <BUTTON_handler+0x16c>)
  4023e6:	4b20      	ldr	r3, [pc, #128]	; (402468 <BUTTON_handler+0x168>)
  4023e8:	4798      	blx	r3
  4023ea:	e01c      	b.n	402426 <BUTTON_handler+0x126>
	}
	else if (button3_pressed && input_password_len < 5) {
  4023ec:	787b      	ldrb	r3, [r7, #1]
  4023ee:	2b00      	cmp	r3, #0
  4023f0:	d019      	beq.n	402426 <BUTTON_handler+0x126>
  4023f2:	4b19      	ldr	r3, [pc, #100]	; (402458 <BUTTON_handler+0x158>)
  4023f4:	781b      	ldrb	r3, [r3, #0]
  4023f6:	2b04      	cmp	r3, #4
  4023f8:	d815      	bhi.n	402426 <BUTTON_handler+0x126>
		input_password[curr_index] = 3;
  4023fa:	4b18      	ldr	r3, [pc, #96]	; (40245c <BUTTON_handler+0x15c>)
  4023fc:	781b      	ldrb	r3, [r3, #0]
  4023fe:	4619      	mov	r1, r3
  402400:	4b17      	ldr	r3, [pc, #92]	; (402460 <BUTTON_handler+0x160>)
  402402:	2203      	movs	r2, #3
  402404:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		curr_index++;
  402408:	4b14      	ldr	r3, [pc, #80]	; (40245c <BUTTON_handler+0x15c>)
  40240a:	781b      	ldrb	r3, [r3, #0]
  40240c:	3301      	adds	r3, #1
  40240e:	b2da      	uxtb	r2, r3
  402410:	4b12      	ldr	r3, [pc, #72]	; (40245c <BUTTON_handler+0x15c>)
  402412:	701a      	strb	r2, [r3, #0]
		input_password_len++;
  402414:	4b10      	ldr	r3, [pc, #64]	; (402458 <BUTTON_handler+0x158>)
  402416:	781b      	ldrb	r3, [r3, #0]
  402418:	3301      	adds	r3, #1
  40241a:	b2da      	uxtb	r2, r3
  40241c:	4b0e      	ldr	r3, [pc, #56]	; (402458 <BUTTON_handler+0x158>)
  40241e:	701a      	strb	r2, [r3, #0]
		printf("BUTTON 3\n");
  402420:	4813      	ldr	r0, [pc, #76]	; (402470 <BUTTON_handler+0x170>)
  402422:	4b11      	ldr	r3, [pc, #68]	; (402468 <BUTTON_handler+0x168>)
  402424:	4798      	blx	r3
	}
	
	if (input_password_len == 5) {
  402426:	4b0c      	ldr	r3, [pc, #48]	; (402458 <BUTTON_handler+0x158>)
  402428:	781b      	ldrb	r3, [r3, #0]
  40242a:	2b05      	cmp	r3, #5
  40242c:	d105      	bne.n	40243a <BUTTON_handler+0x13a>
		input_password_len = 0;
  40242e:	4b0a      	ldr	r3, [pc, #40]	; (402458 <BUTTON_handler+0x158>)
  402430:	2200      	movs	r2, #0
  402432:	701a      	strb	r2, [r3, #0]
		curr_index = 0;
  402434:	4b09      	ldr	r3, [pc, #36]	; (40245c <BUTTON_handler+0x15c>)
  402436:	2200      	movs	r2, #0
  402438:	701a      	strb	r2, [r3, #0]
	}
}
  40243a:	bf00      	nop
  40243c:	370c      	adds	r7, #12
  40243e:	46bd      	mov	sp, r7
  402440:	bd90      	pop	{r4, r7, pc}
  402442:	bf00      	nop
  402444:	400e0e00 	.word	0x400e0e00
  402448:	00400edd 	.word	0x00400edd
  40244c:	400e1000 	.word	0x400e1000
  402450:	400e1200 	.word	0x400e1200
  402454:	00400cdd 	.word	0x00400cdd
  402458:	20400a75 	.word	0x20400a75
  40245c:	20400a74 	.word	0x20400a74
  402460:	20400a60 	.word	0x20400a60
  402464:	004052f8 	.word	0x004052f8
  402468:	00402539 	.word	0x00402539
  40246c:	00405304 	.word	0x00405304
  402470:	00405310 	.word	0x00405310

00402474 <main>:
		}
	}
}

// Firmware routine
int main(void) {
  402474:	b580      	push	{r7, lr}
  402476:	af00      	add	r7, sp, #0
	
	sysclk_init();
  402478:	4b10      	ldr	r3, [pc, #64]	; (4024bc <main+0x48>)
  40247a:	4798      	blx	r3
	board_init();
  40247c:	4b10      	ldr	r3, [pc, #64]	; (4024c0 <main+0x4c>)
  40247e:	4798      	blx	r3
	
	CONSOLE_init();
  402480:	4b10      	ldr	r3, [pc, #64]	; (4024c4 <main+0x50>)
  402482:	4798      	blx	r3
	
	TC1_init(TC_FREQUENCY);
  402484:	2004      	movs	r0, #4
  402486:	4b10      	ldr	r3, [pc, #64]	; (4024c8 <main+0x54>)
  402488:	4798      	blx	r3
	//RTC_init(RTC_YEAR, RTC_MONTH, RTC_DAY, RTC_WEEK, RTC_HOUR, RTC_MINUTE, RTC_SECOND);
	LED_init(OFF);
  40248a:	2000      	movs	r0, #0
  40248c:	4b0f      	ldr	r3, [pc, #60]	; (4024cc <main+0x58>)
  40248e:	4798      	blx	r3
	BUTTON_init(BUTTON1_PIO_ID, BUTTON1_PIO, BUTTON1_PIN_MASK);
  402490:	2201      	movs	r2, #1
  402492:	490f      	ldr	r1, [pc, #60]	; (4024d0 <main+0x5c>)
  402494:	200a      	movs	r0, #10
  402496:	4b0f      	ldr	r3, [pc, #60]	; (4024d4 <main+0x60>)
  402498:	4798      	blx	r3
	BUTTON_init(BUTTON2_PIO_ID, BUTTON2_PIO, BUTTON2_PIN_MASK);
  40249a:	2208      	movs	r2, #8
  40249c:	490e      	ldr	r1, [pc, #56]	; (4024d8 <main+0x64>)
  40249e:	200b      	movs	r0, #11
  4024a0:	4b0c      	ldr	r3, [pc, #48]	; (4024d4 <main+0x60>)
  4024a2:	4798      	blx	r3
	BUTTON_init(BUTTON3_PIO_ID, BUTTON3_PIO, BUTTON3_PIN_MASK);
  4024a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4024a8:	490c      	ldr	r1, [pc, #48]	; (4024dc <main+0x68>)
  4024aa:	200c      	movs	r0, #12
  4024ac:	4b09      	ldr	r3, [pc, #36]	; (4024d4 <main+0x60>)
  4024ae:	4798      	blx	r3
	BUZZER_init();
  4024b0:	4b0b      	ldr	r3, [pc, #44]	; (4024e0 <main+0x6c>)
  4024b2:	4798      	blx	r3
	PRESENCE_init();
  4024b4:	4b0b      	ldr	r3, [pc, #44]	; (4024e4 <main+0x70>)
  4024b6:	4798      	blx	r3
	
	//rtc_set_time_alarm(RTC, 1, RTC_HOUR, 1, RTC_MINUTE, 1, RTC_SECOND + 5);
	
	while(1) {}
  4024b8:	e7fe      	b.n	4024b8 <main+0x44>
  4024ba:	bf00      	nop
  4024bc:	0040079d 	.word	0x0040079d
  4024c0:	00400bd1 	.word	0x00400bd1
  4024c4:	004021b9 	.word	0x004021b9
  4024c8:	00402121 	.word	0x00402121
  4024cc:	00402005 	.word	0x00402005
  4024d0:	400e0e00 	.word	0x400e0e00
  4024d4:	00402089 	.word	0x00402089
  4024d8:	400e1000 	.word	0x400e1000
  4024dc:	400e1200 	.word	0x400e1200
  4024e0:	00402045 	.word	0x00402045
  4024e4:	004020f9 	.word	0x004020f9

004024e8 <__libc_init_array>:
  4024e8:	b570      	push	{r4, r5, r6, lr}
  4024ea:	4e0f      	ldr	r6, [pc, #60]	; (402528 <__libc_init_array+0x40>)
  4024ec:	4d0f      	ldr	r5, [pc, #60]	; (40252c <__libc_init_array+0x44>)
  4024ee:	1b76      	subs	r6, r6, r5
  4024f0:	10b6      	asrs	r6, r6, #2
  4024f2:	bf18      	it	ne
  4024f4:	2400      	movne	r4, #0
  4024f6:	d005      	beq.n	402504 <__libc_init_array+0x1c>
  4024f8:	3401      	adds	r4, #1
  4024fa:	f855 3b04 	ldr.w	r3, [r5], #4
  4024fe:	4798      	blx	r3
  402500:	42a6      	cmp	r6, r4
  402502:	d1f9      	bne.n	4024f8 <__libc_init_array+0x10>
  402504:	4e0a      	ldr	r6, [pc, #40]	; (402530 <__libc_init_array+0x48>)
  402506:	4d0b      	ldr	r5, [pc, #44]	; (402534 <__libc_init_array+0x4c>)
  402508:	1b76      	subs	r6, r6, r5
  40250a:	f002 ffc7 	bl	40549c <_init>
  40250e:	10b6      	asrs	r6, r6, #2
  402510:	bf18      	it	ne
  402512:	2400      	movne	r4, #0
  402514:	d006      	beq.n	402524 <__libc_init_array+0x3c>
  402516:	3401      	adds	r4, #1
  402518:	f855 3b04 	ldr.w	r3, [r5], #4
  40251c:	4798      	blx	r3
  40251e:	42a6      	cmp	r6, r4
  402520:	d1f9      	bne.n	402516 <__libc_init_array+0x2e>
  402522:	bd70      	pop	{r4, r5, r6, pc}
  402524:	bd70      	pop	{r4, r5, r6, pc}
  402526:	bf00      	nop
  402528:	004054a8 	.word	0x004054a8
  40252c:	004054a8 	.word	0x004054a8
  402530:	004054b0 	.word	0x004054b0
  402534:	004054a8 	.word	0x004054a8

00402538 <iprintf>:
  402538:	b40f      	push	{r0, r1, r2, r3}
  40253a:	b500      	push	{lr}
  40253c:	4907      	ldr	r1, [pc, #28]	; (40255c <iprintf+0x24>)
  40253e:	b083      	sub	sp, #12
  402540:	ab04      	add	r3, sp, #16
  402542:	6808      	ldr	r0, [r1, #0]
  402544:	f853 2b04 	ldr.w	r2, [r3], #4
  402548:	6881      	ldr	r1, [r0, #8]
  40254a:	9301      	str	r3, [sp, #4]
  40254c:	f000 f944 	bl	4027d8 <_vfiprintf_r>
  402550:	b003      	add	sp, #12
  402552:	f85d eb04 	ldr.w	lr, [sp], #4
  402556:	b004      	add	sp, #16
  402558:	4770      	bx	lr
  40255a:	bf00      	nop
  40255c:	2040001c 	.word	0x2040001c

00402560 <memset>:
  402560:	b470      	push	{r4, r5, r6}
  402562:	0786      	lsls	r6, r0, #30
  402564:	d046      	beq.n	4025f4 <memset+0x94>
  402566:	1e54      	subs	r4, r2, #1
  402568:	2a00      	cmp	r2, #0
  40256a:	d041      	beq.n	4025f0 <memset+0x90>
  40256c:	b2ca      	uxtb	r2, r1
  40256e:	4603      	mov	r3, r0
  402570:	e002      	b.n	402578 <memset+0x18>
  402572:	f114 34ff 	adds.w	r4, r4, #4294967295
  402576:	d33b      	bcc.n	4025f0 <memset+0x90>
  402578:	f803 2b01 	strb.w	r2, [r3], #1
  40257c:	079d      	lsls	r5, r3, #30
  40257e:	d1f8      	bne.n	402572 <memset+0x12>
  402580:	2c03      	cmp	r4, #3
  402582:	d92e      	bls.n	4025e2 <memset+0x82>
  402584:	b2cd      	uxtb	r5, r1
  402586:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40258a:	2c0f      	cmp	r4, #15
  40258c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402590:	d919      	bls.n	4025c6 <memset+0x66>
  402592:	f103 0210 	add.w	r2, r3, #16
  402596:	4626      	mov	r6, r4
  402598:	3e10      	subs	r6, #16
  40259a:	2e0f      	cmp	r6, #15
  40259c:	f842 5c10 	str.w	r5, [r2, #-16]
  4025a0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4025a4:	f842 5c08 	str.w	r5, [r2, #-8]
  4025a8:	f842 5c04 	str.w	r5, [r2, #-4]
  4025ac:	f102 0210 	add.w	r2, r2, #16
  4025b0:	d8f2      	bhi.n	402598 <memset+0x38>
  4025b2:	f1a4 0210 	sub.w	r2, r4, #16
  4025b6:	f022 020f 	bic.w	r2, r2, #15
  4025ba:	f004 040f 	and.w	r4, r4, #15
  4025be:	3210      	adds	r2, #16
  4025c0:	2c03      	cmp	r4, #3
  4025c2:	4413      	add	r3, r2
  4025c4:	d90d      	bls.n	4025e2 <memset+0x82>
  4025c6:	461e      	mov	r6, r3
  4025c8:	4622      	mov	r2, r4
  4025ca:	3a04      	subs	r2, #4
  4025cc:	2a03      	cmp	r2, #3
  4025ce:	f846 5b04 	str.w	r5, [r6], #4
  4025d2:	d8fa      	bhi.n	4025ca <memset+0x6a>
  4025d4:	1f22      	subs	r2, r4, #4
  4025d6:	f022 0203 	bic.w	r2, r2, #3
  4025da:	3204      	adds	r2, #4
  4025dc:	4413      	add	r3, r2
  4025de:	f004 0403 	and.w	r4, r4, #3
  4025e2:	b12c      	cbz	r4, 4025f0 <memset+0x90>
  4025e4:	b2c9      	uxtb	r1, r1
  4025e6:	441c      	add	r4, r3
  4025e8:	f803 1b01 	strb.w	r1, [r3], #1
  4025ec:	429c      	cmp	r4, r3
  4025ee:	d1fb      	bne.n	4025e8 <memset+0x88>
  4025f0:	bc70      	pop	{r4, r5, r6}
  4025f2:	4770      	bx	lr
  4025f4:	4614      	mov	r4, r2
  4025f6:	4603      	mov	r3, r0
  4025f8:	e7c2      	b.n	402580 <memset+0x20>
  4025fa:	bf00      	nop

004025fc <setbuf>:
  4025fc:	2900      	cmp	r1, #0
  4025fe:	bf0c      	ite	eq
  402600:	2202      	moveq	r2, #2
  402602:	2200      	movne	r2, #0
  402604:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402608:	f000 b800 	b.w	40260c <setvbuf>

0040260c <setvbuf>:
  40260c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402610:	4c50      	ldr	r4, [pc, #320]	; (402754 <setvbuf+0x148>)
  402612:	6825      	ldr	r5, [r4, #0]
  402614:	b083      	sub	sp, #12
  402616:	4604      	mov	r4, r0
  402618:	460f      	mov	r7, r1
  40261a:	4690      	mov	r8, r2
  40261c:	461e      	mov	r6, r3
  40261e:	b115      	cbz	r5, 402626 <setvbuf+0x1a>
  402620:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402622:	2b00      	cmp	r3, #0
  402624:	d077      	beq.n	402716 <setvbuf+0x10a>
  402626:	f1b8 0f02 	cmp.w	r8, #2
  40262a:	d004      	beq.n	402636 <setvbuf+0x2a>
  40262c:	f1b8 0f01 	cmp.w	r8, #1
  402630:	d87d      	bhi.n	40272e <setvbuf+0x122>
  402632:	2e00      	cmp	r6, #0
  402634:	db7b      	blt.n	40272e <setvbuf+0x122>
  402636:	4621      	mov	r1, r4
  402638:	4628      	mov	r0, r5
  40263a:	f001 f817 	bl	40366c <_fflush_r>
  40263e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402640:	b141      	cbz	r1, 402654 <setvbuf+0x48>
  402642:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402646:	4299      	cmp	r1, r3
  402648:	d002      	beq.n	402650 <setvbuf+0x44>
  40264a:	4628      	mov	r0, r5
  40264c:	f001 f978 	bl	403940 <_free_r>
  402650:	2300      	movs	r3, #0
  402652:	6323      	str	r3, [r4, #48]	; 0x30
  402654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402658:	2200      	movs	r2, #0
  40265a:	61a2      	str	r2, [r4, #24]
  40265c:	6062      	str	r2, [r4, #4]
  40265e:	061a      	lsls	r2, r3, #24
  402660:	d452      	bmi.n	402708 <setvbuf+0xfc>
  402662:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402666:	f023 0303 	bic.w	r3, r3, #3
  40266a:	f1b8 0f02 	cmp.w	r8, #2
  40266e:	81a3      	strh	r3, [r4, #12]
  402670:	d037      	beq.n	4026e2 <setvbuf+0xd6>
  402672:	ab01      	add	r3, sp, #4
  402674:	466a      	mov	r2, sp
  402676:	4621      	mov	r1, r4
  402678:	4628      	mov	r0, r5
  40267a:	f001 fbf7 	bl	403e6c <__swhatbuf_r>
  40267e:	89a3      	ldrh	r3, [r4, #12]
  402680:	4318      	orrs	r0, r3
  402682:	81a0      	strh	r0, [r4, #12]
  402684:	b316      	cbz	r6, 4026cc <setvbuf+0xc0>
  402686:	b317      	cbz	r7, 4026ce <setvbuf+0xc2>
  402688:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40268a:	2b00      	cmp	r3, #0
  40268c:	d04b      	beq.n	402726 <setvbuf+0x11a>
  40268e:	9b00      	ldr	r3, [sp, #0]
  402690:	6027      	str	r7, [r4, #0]
  402692:	429e      	cmp	r6, r3
  402694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402698:	6127      	str	r7, [r4, #16]
  40269a:	bf1c      	itt	ne
  40269c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  4026a0:	81a3      	strhne	r3, [r4, #12]
  4026a2:	f1b8 0f01 	cmp.w	r8, #1
  4026a6:	bf04      	itt	eq
  4026a8:	f043 0301 	orreq.w	r3, r3, #1
  4026ac:	81a3      	strheq	r3, [r4, #12]
  4026ae:	b29b      	uxth	r3, r3
  4026b0:	f013 0008 	ands.w	r0, r3, #8
  4026b4:	6166      	str	r6, [r4, #20]
  4026b6:	d023      	beq.n	402700 <setvbuf+0xf4>
  4026b8:	f013 0001 	ands.w	r0, r3, #1
  4026bc:	d02f      	beq.n	40271e <setvbuf+0x112>
  4026be:	2000      	movs	r0, #0
  4026c0:	4276      	negs	r6, r6
  4026c2:	61a6      	str	r6, [r4, #24]
  4026c4:	60a0      	str	r0, [r4, #8]
  4026c6:	b003      	add	sp, #12
  4026c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4026cc:	9e00      	ldr	r6, [sp, #0]
  4026ce:	4630      	mov	r0, r6
  4026d0:	f001 fc3e 	bl	403f50 <malloc>
  4026d4:	4607      	mov	r7, r0
  4026d6:	b368      	cbz	r0, 402734 <setvbuf+0x128>
  4026d8:	89a3      	ldrh	r3, [r4, #12]
  4026da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4026de:	81a3      	strh	r3, [r4, #12]
  4026e0:	e7d2      	b.n	402688 <setvbuf+0x7c>
  4026e2:	2000      	movs	r0, #0
  4026e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4026e8:	f043 0302 	orr.w	r3, r3, #2
  4026ec:	2500      	movs	r5, #0
  4026ee:	2101      	movs	r1, #1
  4026f0:	81a3      	strh	r3, [r4, #12]
  4026f2:	60a5      	str	r5, [r4, #8]
  4026f4:	6022      	str	r2, [r4, #0]
  4026f6:	6122      	str	r2, [r4, #16]
  4026f8:	6161      	str	r1, [r4, #20]
  4026fa:	b003      	add	sp, #12
  4026fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402700:	60a0      	str	r0, [r4, #8]
  402702:	b003      	add	sp, #12
  402704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402708:	6921      	ldr	r1, [r4, #16]
  40270a:	4628      	mov	r0, r5
  40270c:	f001 f918 	bl	403940 <_free_r>
  402710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402714:	e7a5      	b.n	402662 <setvbuf+0x56>
  402716:	4628      	mov	r0, r5
  402718:	f001 f83c 	bl	403794 <__sinit>
  40271c:	e783      	b.n	402626 <setvbuf+0x1a>
  40271e:	60a6      	str	r6, [r4, #8]
  402720:	b003      	add	sp, #12
  402722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402726:	4628      	mov	r0, r5
  402728:	f001 f834 	bl	403794 <__sinit>
  40272c:	e7af      	b.n	40268e <setvbuf+0x82>
  40272e:	f04f 30ff 	mov.w	r0, #4294967295
  402732:	e7e2      	b.n	4026fa <setvbuf+0xee>
  402734:	f8dd 9000 	ldr.w	r9, [sp]
  402738:	45b1      	cmp	r9, r6
  40273a:	d006      	beq.n	40274a <setvbuf+0x13e>
  40273c:	4648      	mov	r0, r9
  40273e:	f001 fc07 	bl	403f50 <malloc>
  402742:	4607      	mov	r7, r0
  402744:	b108      	cbz	r0, 40274a <setvbuf+0x13e>
  402746:	464e      	mov	r6, r9
  402748:	e7c6      	b.n	4026d8 <setvbuf+0xcc>
  40274a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40274e:	f04f 30ff 	mov.w	r0, #4294967295
  402752:	e7c7      	b.n	4026e4 <setvbuf+0xd8>
  402754:	2040001c 	.word	0x2040001c

00402758 <__sprint_r.part.0>:
  402758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40275c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40275e:	049c      	lsls	r4, r3, #18
  402760:	4693      	mov	fp, r2
  402762:	d52f      	bpl.n	4027c4 <__sprint_r.part.0+0x6c>
  402764:	6893      	ldr	r3, [r2, #8]
  402766:	6812      	ldr	r2, [r2, #0]
  402768:	b353      	cbz	r3, 4027c0 <__sprint_r.part.0+0x68>
  40276a:	460e      	mov	r6, r1
  40276c:	4607      	mov	r7, r0
  40276e:	f102 0908 	add.w	r9, r2, #8
  402772:	e919 0420 	ldmdb	r9, {r5, sl}
  402776:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40277a:	d017      	beq.n	4027ac <__sprint_r.part.0+0x54>
  40277c:	3d04      	subs	r5, #4
  40277e:	2400      	movs	r4, #0
  402780:	e001      	b.n	402786 <__sprint_r.part.0+0x2e>
  402782:	45a0      	cmp	r8, r4
  402784:	d010      	beq.n	4027a8 <__sprint_r.part.0+0x50>
  402786:	4632      	mov	r2, r6
  402788:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40278c:	4638      	mov	r0, r7
  40278e:	f001 f875 	bl	40387c <_fputwc_r>
  402792:	1c43      	adds	r3, r0, #1
  402794:	f104 0401 	add.w	r4, r4, #1
  402798:	d1f3      	bne.n	402782 <__sprint_r.part.0+0x2a>
  40279a:	2300      	movs	r3, #0
  40279c:	f8cb 3008 	str.w	r3, [fp, #8]
  4027a0:	f8cb 3004 	str.w	r3, [fp, #4]
  4027a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027a8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4027ac:	f02a 0a03 	bic.w	sl, sl, #3
  4027b0:	eba3 030a 	sub.w	r3, r3, sl
  4027b4:	f8cb 3008 	str.w	r3, [fp, #8]
  4027b8:	f109 0908 	add.w	r9, r9, #8
  4027bc:	2b00      	cmp	r3, #0
  4027be:	d1d8      	bne.n	402772 <__sprint_r.part.0+0x1a>
  4027c0:	2000      	movs	r0, #0
  4027c2:	e7ea      	b.n	40279a <__sprint_r.part.0+0x42>
  4027c4:	f001 f9a2 	bl	403b0c <__sfvwrite_r>
  4027c8:	2300      	movs	r3, #0
  4027ca:	f8cb 3008 	str.w	r3, [fp, #8]
  4027ce:	f8cb 3004 	str.w	r3, [fp, #4]
  4027d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027d6:	bf00      	nop

004027d8 <_vfiprintf_r>:
  4027d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027dc:	b0ad      	sub	sp, #180	; 0xb4
  4027de:	461d      	mov	r5, r3
  4027e0:	9101      	str	r1, [sp, #4]
  4027e2:	4691      	mov	r9, r2
  4027e4:	9308      	str	r3, [sp, #32]
  4027e6:	9006      	str	r0, [sp, #24]
  4027e8:	b118      	cbz	r0, 4027f2 <_vfiprintf_r+0x1a>
  4027ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4027ec:	2b00      	cmp	r3, #0
  4027ee:	f000 80e0 	beq.w	4029b2 <_vfiprintf_r+0x1da>
  4027f2:	9c01      	ldr	r4, [sp, #4]
  4027f4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4027f8:	b281      	uxth	r1, r0
  4027fa:	048b      	lsls	r3, r1, #18
  4027fc:	d407      	bmi.n	40280e <_vfiprintf_r+0x36>
  4027fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402800:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402808:	81a1      	strh	r1, [r4, #12]
  40280a:	6663      	str	r3, [r4, #100]	; 0x64
  40280c:	b289      	uxth	r1, r1
  40280e:	070f      	lsls	r7, r1, #28
  402810:	f140 80b1 	bpl.w	402976 <_vfiprintf_r+0x19e>
  402814:	9b01      	ldr	r3, [sp, #4]
  402816:	691b      	ldr	r3, [r3, #16]
  402818:	2b00      	cmp	r3, #0
  40281a:	f000 80ac 	beq.w	402976 <_vfiprintf_r+0x19e>
  40281e:	f001 011a 	and.w	r1, r1, #26
  402822:	290a      	cmp	r1, #10
  402824:	f000 80b5 	beq.w	402992 <_vfiprintf_r+0x1ba>
  402828:	2300      	movs	r3, #0
  40282a:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  40282e:	930b      	str	r3, [sp, #44]	; 0x2c
  402830:	9311      	str	r3, [sp, #68]	; 0x44
  402832:	9310      	str	r3, [sp, #64]	; 0x40
  402834:	9304      	str	r3, [sp, #16]
  402836:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40283a:	46da      	mov	sl, fp
  40283c:	f899 3000 	ldrb.w	r3, [r9]
  402840:	464c      	mov	r4, r9
  402842:	b1fb      	cbz	r3, 402884 <_vfiprintf_r+0xac>
  402844:	2b25      	cmp	r3, #37	; 0x25
  402846:	d102      	bne.n	40284e <_vfiprintf_r+0x76>
  402848:	e01c      	b.n	402884 <_vfiprintf_r+0xac>
  40284a:	2b25      	cmp	r3, #37	; 0x25
  40284c:	d003      	beq.n	402856 <_vfiprintf_r+0x7e>
  40284e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402852:	2b00      	cmp	r3, #0
  402854:	d1f9      	bne.n	40284a <_vfiprintf_r+0x72>
  402856:	eba4 0509 	sub.w	r5, r4, r9
  40285a:	b19d      	cbz	r5, 402884 <_vfiprintf_r+0xac>
  40285c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40285e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402860:	f8ca 9000 	str.w	r9, [sl]
  402864:	3301      	adds	r3, #1
  402866:	442a      	add	r2, r5
  402868:	2b07      	cmp	r3, #7
  40286a:	f8ca 5004 	str.w	r5, [sl, #4]
  40286e:	9211      	str	r2, [sp, #68]	; 0x44
  402870:	9310      	str	r3, [sp, #64]	; 0x40
  402872:	dd7a      	ble.n	40296a <_vfiprintf_r+0x192>
  402874:	2a00      	cmp	r2, #0
  402876:	f040 848f 	bne.w	403198 <_vfiprintf_r+0x9c0>
  40287a:	9b04      	ldr	r3, [sp, #16]
  40287c:	9210      	str	r2, [sp, #64]	; 0x40
  40287e:	442b      	add	r3, r5
  402880:	46da      	mov	sl, fp
  402882:	9304      	str	r3, [sp, #16]
  402884:	7823      	ldrb	r3, [r4, #0]
  402886:	2b00      	cmp	r3, #0
  402888:	f000 83b1 	beq.w	402fee <_vfiprintf_r+0x816>
  40288c:	2000      	movs	r0, #0
  40288e:	f04f 0300 	mov.w	r3, #0
  402892:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402896:	f104 0901 	add.w	r9, r4, #1
  40289a:	7862      	ldrb	r2, [r4, #1]
  40289c:	4605      	mov	r5, r0
  40289e:	4606      	mov	r6, r0
  4028a0:	4603      	mov	r3, r0
  4028a2:	f04f 34ff 	mov.w	r4, #4294967295
  4028a6:	f109 0901 	add.w	r9, r9, #1
  4028aa:	f1a2 0120 	sub.w	r1, r2, #32
  4028ae:	2958      	cmp	r1, #88	; 0x58
  4028b0:	f200 830e 	bhi.w	402ed0 <_vfiprintf_r+0x6f8>
  4028b4:	e8df f011 	tbh	[pc, r1, lsl #1]
  4028b8:	030c0237 	.word	0x030c0237
  4028bc:	02eb030c 	.word	0x02eb030c
  4028c0:	030c030c 	.word	0x030c030c
  4028c4:	030c030c 	.word	0x030c030c
  4028c8:	030c030c 	.word	0x030c030c
  4028cc:	02f0029e 	.word	0x02f0029e
  4028d0:	0082030c 	.word	0x0082030c
  4028d4:	030c0277 	.word	0x030c0277
  4028d8:	01d401cf 	.word	0x01d401cf
  4028dc:	01d401d4 	.word	0x01d401d4
  4028e0:	01d401d4 	.word	0x01d401d4
  4028e4:	01d401d4 	.word	0x01d401d4
  4028e8:	01d401d4 	.word	0x01d401d4
  4028ec:	030c030c 	.word	0x030c030c
  4028f0:	030c030c 	.word	0x030c030c
  4028f4:	030c030c 	.word	0x030c030c
  4028f8:	030c030c 	.word	0x030c030c
  4028fc:	030c030c 	.word	0x030c030c
  402900:	030c023f 	.word	0x030c023f
  402904:	030c030c 	.word	0x030c030c
  402908:	030c030c 	.word	0x030c030c
  40290c:	030c030c 	.word	0x030c030c
  402910:	030c030c 	.word	0x030c030c
  402914:	0246030c 	.word	0x0246030c
  402918:	030c030c 	.word	0x030c030c
  40291c:	030c030c 	.word	0x030c030c
  402920:	024a030c 	.word	0x024a030c
  402924:	030c030c 	.word	0x030c030c
  402928:	030c0252 	.word	0x030c0252
  40292c:	030c030c 	.word	0x030c030c
  402930:	030c030c 	.word	0x030c030c
  402934:	030c030c 	.word	0x030c030c
  402938:	030c030c 	.word	0x030c030c
  40293c:	01e2030c 	.word	0x01e2030c
  402940:	030c01f6 	.word	0x030c01f6
  402944:	030c030c 	.word	0x030c030c
  402948:	01f60307 	.word	0x01f60307
  40294c:	030c030c 	.word	0x030c030c
  402950:	030c0291 	.word	0x030c0291
  402954:	008702f5 	.word	0x008702f5
  402958:	02c302b1 	.word	0x02c302b1
  40295c:	02c8030c 	.word	0x02c8030c
  402960:	01bd030c 	.word	0x01bd030c
  402964:	030c030c 	.word	0x030c030c
  402968:	02aa      	.short	0x02aa
  40296a:	f10a 0a08 	add.w	sl, sl, #8
  40296e:	9b04      	ldr	r3, [sp, #16]
  402970:	442b      	add	r3, r5
  402972:	9304      	str	r3, [sp, #16]
  402974:	e786      	b.n	402884 <_vfiprintf_r+0xac>
  402976:	9c01      	ldr	r4, [sp, #4]
  402978:	9806      	ldr	r0, [sp, #24]
  40297a:	4621      	mov	r1, r4
  40297c:	f000 fd62 	bl	403444 <__swsetup_r>
  402980:	2800      	cmp	r0, #0
  402982:	f040 8340 	bne.w	403006 <_vfiprintf_r+0x82e>
  402986:	89a1      	ldrh	r1, [r4, #12]
  402988:	f001 011a 	and.w	r1, r1, #26
  40298c:	290a      	cmp	r1, #10
  40298e:	f47f af4b 	bne.w	402828 <_vfiprintf_r+0x50>
  402992:	9901      	ldr	r1, [sp, #4]
  402994:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  402998:	2b00      	cmp	r3, #0
  40299a:	f6ff af45 	blt.w	402828 <_vfiprintf_r+0x50>
  40299e:	462b      	mov	r3, r5
  4029a0:	464a      	mov	r2, r9
  4029a2:	9806      	ldr	r0, [sp, #24]
  4029a4:	f000 fd18 	bl	4033d8 <__sbprintf>
  4029a8:	9004      	str	r0, [sp, #16]
  4029aa:	9804      	ldr	r0, [sp, #16]
  4029ac:	b02d      	add	sp, #180	; 0xb4
  4029ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029b2:	f000 feef 	bl	403794 <__sinit>
  4029b6:	e71c      	b.n	4027f2 <_vfiprintf_r+0x1a>
  4029b8:	4276      	negs	r6, r6
  4029ba:	9208      	str	r2, [sp, #32]
  4029bc:	f043 0304 	orr.w	r3, r3, #4
  4029c0:	f899 2000 	ldrb.w	r2, [r9]
  4029c4:	e76f      	b.n	4028a6 <_vfiprintf_r+0xce>
  4029c6:	9607      	str	r6, [sp, #28]
  4029c8:	f013 0220 	ands.w	r2, r3, #32
  4029cc:	f040 845a 	bne.w	403284 <_vfiprintf_r+0xaac>
  4029d0:	f013 0110 	ands.w	r1, r3, #16
  4029d4:	f040 83f1 	bne.w	4031ba <_vfiprintf_r+0x9e2>
  4029d8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4029dc:	f000 83ed 	beq.w	4031ba <_vfiprintf_r+0x9e2>
  4029e0:	9808      	ldr	r0, [sp, #32]
  4029e2:	460a      	mov	r2, r1
  4029e4:	4601      	mov	r1, r0
  4029e6:	3104      	adds	r1, #4
  4029e8:	8806      	ldrh	r6, [r0, #0]
  4029ea:	9108      	str	r1, [sp, #32]
  4029ec:	2700      	movs	r7, #0
  4029ee:	f04f 0100 	mov.w	r1, #0
  4029f2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4029f6:	2500      	movs	r5, #0
  4029f8:	1c61      	adds	r1, r4, #1
  4029fa:	f000 8175 	beq.w	402ce8 <_vfiprintf_r+0x510>
  4029fe:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402a02:	9103      	str	r1, [sp, #12]
  402a04:	ea56 0107 	orrs.w	r1, r6, r7
  402a08:	f040 8173 	bne.w	402cf2 <_vfiprintf_r+0x51a>
  402a0c:	2c00      	cmp	r4, #0
  402a0e:	f040 8356 	bne.w	4030be <_vfiprintf_r+0x8e6>
  402a12:	2a00      	cmp	r2, #0
  402a14:	f040 83b2 	bne.w	40317c <_vfiprintf_r+0x9a4>
  402a18:	f013 0301 	ands.w	r3, r3, #1
  402a1c:	9305      	str	r3, [sp, #20]
  402a1e:	f000 8447 	beq.w	4032b0 <_vfiprintf_r+0xad8>
  402a22:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  402a26:	2330      	movs	r3, #48	; 0x30
  402a28:	f808 3d41 	strb.w	r3, [r8, #-65]!
  402a2c:	9b05      	ldr	r3, [sp, #20]
  402a2e:	42a3      	cmp	r3, r4
  402a30:	bfb8      	it	lt
  402a32:	4623      	movlt	r3, r4
  402a34:	9302      	str	r3, [sp, #8]
  402a36:	b10d      	cbz	r5, 402a3c <_vfiprintf_r+0x264>
  402a38:	3301      	adds	r3, #1
  402a3a:	9302      	str	r3, [sp, #8]
  402a3c:	9b03      	ldr	r3, [sp, #12]
  402a3e:	f013 0302 	ands.w	r3, r3, #2
  402a42:	9309      	str	r3, [sp, #36]	; 0x24
  402a44:	d002      	beq.n	402a4c <_vfiprintf_r+0x274>
  402a46:	9b02      	ldr	r3, [sp, #8]
  402a48:	3302      	adds	r3, #2
  402a4a:	9302      	str	r3, [sp, #8]
  402a4c:	9b03      	ldr	r3, [sp, #12]
  402a4e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402a52:	930a      	str	r3, [sp, #40]	; 0x28
  402a54:	f040 8263 	bne.w	402f1e <_vfiprintf_r+0x746>
  402a58:	9b07      	ldr	r3, [sp, #28]
  402a5a:	9a02      	ldr	r2, [sp, #8]
  402a5c:	1a9d      	subs	r5, r3, r2
  402a5e:	2d00      	cmp	r5, #0
  402a60:	f340 825d 	ble.w	402f1e <_vfiprintf_r+0x746>
  402a64:	2d10      	cmp	r5, #16
  402a66:	f340 8477 	ble.w	403358 <_vfiprintf_r+0xb80>
  402a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402a6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a6e:	4eb9      	ldr	r6, [pc, #740]	; (402d54 <_vfiprintf_r+0x57c>)
  402a70:	46d6      	mov	lr, sl
  402a72:	2710      	movs	r7, #16
  402a74:	46a2      	mov	sl, r4
  402a76:	4619      	mov	r1, r3
  402a78:	9c06      	ldr	r4, [sp, #24]
  402a7a:	e007      	b.n	402a8c <_vfiprintf_r+0x2b4>
  402a7c:	f101 0c02 	add.w	ip, r1, #2
  402a80:	f10e 0e08 	add.w	lr, lr, #8
  402a84:	4601      	mov	r1, r0
  402a86:	3d10      	subs	r5, #16
  402a88:	2d10      	cmp	r5, #16
  402a8a:	dd11      	ble.n	402ab0 <_vfiprintf_r+0x2d8>
  402a8c:	1c48      	adds	r0, r1, #1
  402a8e:	3210      	adds	r2, #16
  402a90:	2807      	cmp	r0, #7
  402a92:	9211      	str	r2, [sp, #68]	; 0x44
  402a94:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402a98:	9010      	str	r0, [sp, #64]	; 0x40
  402a9a:	ddef      	ble.n	402a7c <_vfiprintf_r+0x2a4>
  402a9c:	2a00      	cmp	r2, #0
  402a9e:	f040 8231 	bne.w	402f04 <_vfiprintf_r+0x72c>
  402aa2:	3d10      	subs	r5, #16
  402aa4:	2d10      	cmp	r5, #16
  402aa6:	4611      	mov	r1, r2
  402aa8:	f04f 0c01 	mov.w	ip, #1
  402aac:	46de      	mov	lr, fp
  402aae:	dced      	bgt.n	402a8c <_vfiprintf_r+0x2b4>
  402ab0:	4654      	mov	r4, sl
  402ab2:	4661      	mov	r1, ip
  402ab4:	46f2      	mov	sl, lr
  402ab6:	442a      	add	r2, r5
  402ab8:	2907      	cmp	r1, #7
  402aba:	9211      	str	r2, [sp, #68]	; 0x44
  402abc:	f8ca 6000 	str.w	r6, [sl]
  402ac0:	f8ca 5004 	str.w	r5, [sl, #4]
  402ac4:	9110      	str	r1, [sp, #64]	; 0x40
  402ac6:	f300 82e6 	bgt.w	403096 <_vfiprintf_r+0x8be>
  402aca:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402ace:	f10a 0a08 	add.w	sl, sl, #8
  402ad2:	1c48      	adds	r0, r1, #1
  402ad4:	2d00      	cmp	r5, #0
  402ad6:	f040 822a 	bne.w	402f2e <_vfiprintf_r+0x756>
  402ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402adc:	2b00      	cmp	r3, #0
  402ade:	f000 8244 	beq.w	402f6a <_vfiprintf_r+0x792>
  402ae2:	3202      	adds	r2, #2
  402ae4:	a90e      	add	r1, sp, #56	; 0x38
  402ae6:	2302      	movs	r3, #2
  402ae8:	2807      	cmp	r0, #7
  402aea:	9211      	str	r2, [sp, #68]	; 0x44
  402aec:	9010      	str	r0, [sp, #64]	; 0x40
  402aee:	e88a 000a 	stmia.w	sl, {r1, r3}
  402af2:	f340 8236 	ble.w	402f62 <_vfiprintf_r+0x78a>
  402af6:	2a00      	cmp	r2, #0
  402af8:	f040 838b 	bne.w	403212 <_vfiprintf_r+0xa3a>
  402afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402afe:	2b80      	cmp	r3, #128	; 0x80
  402b00:	f04f 0001 	mov.w	r0, #1
  402b04:	4611      	mov	r1, r2
  402b06:	46da      	mov	sl, fp
  402b08:	f040 8233 	bne.w	402f72 <_vfiprintf_r+0x79a>
  402b0c:	9b07      	ldr	r3, [sp, #28]
  402b0e:	9d02      	ldr	r5, [sp, #8]
  402b10:	1b5e      	subs	r6, r3, r5
  402b12:	2e00      	cmp	r6, #0
  402b14:	f340 822d 	ble.w	402f72 <_vfiprintf_r+0x79a>
  402b18:	2e10      	cmp	r6, #16
  402b1a:	4d8f      	ldr	r5, [pc, #572]	; (402d58 <_vfiprintf_r+0x580>)
  402b1c:	f340 842f 	ble.w	40337e <_vfiprintf_r+0xba6>
  402b20:	46d4      	mov	ip, sl
  402b22:	2710      	movs	r7, #16
  402b24:	46a2      	mov	sl, r4
  402b26:	9c06      	ldr	r4, [sp, #24]
  402b28:	e007      	b.n	402b3a <_vfiprintf_r+0x362>
  402b2a:	f101 0e02 	add.w	lr, r1, #2
  402b2e:	f10c 0c08 	add.w	ip, ip, #8
  402b32:	4601      	mov	r1, r0
  402b34:	3e10      	subs	r6, #16
  402b36:	2e10      	cmp	r6, #16
  402b38:	dd11      	ble.n	402b5e <_vfiprintf_r+0x386>
  402b3a:	1c48      	adds	r0, r1, #1
  402b3c:	3210      	adds	r2, #16
  402b3e:	2807      	cmp	r0, #7
  402b40:	9211      	str	r2, [sp, #68]	; 0x44
  402b42:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402b46:	9010      	str	r0, [sp, #64]	; 0x40
  402b48:	ddef      	ble.n	402b2a <_vfiprintf_r+0x352>
  402b4a:	2a00      	cmp	r2, #0
  402b4c:	f040 8296 	bne.w	40307c <_vfiprintf_r+0x8a4>
  402b50:	3e10      	subs	r6, #16
  402b52:	2e10      	cmp	r6, #16
  402b54:	f04f 0e01 	mov.w	lr, #1
  402b58:	4611      	mov	r1, r2
  402b5a:	46dc      	mov	ip, fp
  402b5c:	dced      	bgt.n	402b3a <_vfiprintf_r+0x362>
  402b5e:	4654      	mov	r4, sl
  402b60:	46e2      	mov	sl, ip
  402b62:	4432      	add	r2, r6
  402b64:	f1be 0f07 	cmp.w	lr, #7
  402b68:	9211      	str	r2, [sp, #68]	; 0x44
  402b6a:	e88a 0060 	stmia.w	sl, {r5, r6}
  402b6e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402b72:	f300 835b 	bgt.w	40322c <_vfiprintf_r+0xa54>
  402b76:	9b05      	ldr	r3, [sp, #20]
  402b78:	1ae4      	subs	r4, r4, r3
  402b7a:	2c00      	cmp	r4, #0
  402b7c:	f10a 0a08 	add.w	sl, sl, #8
  402b80:	f10e 0001 	add.w	r0, lr, #1
  402b84:	4671      	mov	r1, lr
  402b86:	f300 81f9 	bgt.w	402f7c <_vfiprintf_r+0x7a4>
  402b8a:	9905      	ldr	r1, [sp, #20]
  402b8c:	f8ca 8000 	str.w	r8, [sl]
  402b90:	440a      	add	r2, r1
  402b92:	2807      	cmp	r0, #7
  402b94:	9211      	str	r2, [sp, #68]	; 0x44
  402b96:	f8ca 1004 	str.w	r1, [sl, #4]
  402b9a:	9010      	str	r0, [sp, #64]	; 0x40
  402b9c:	f340 8255 	ble.w	40304a <_vfiprintf_r+0x872>
  402ba0:	2a00      	cmp	r2, #0
  402ba2:	f040 82ee 	bne.w	403182 <_vfiprintf_r+0x9aa>
  402ba6:	9b03      	ldr	r3, [sp, #12]
  402ba8:	9210      	str	r2, [sp, #64]	; 0x40
  402baa:	0758      	lsls	r0, r3, #29
  402bac:	d538      	bpl.n	402c20 <_vfiprintf_r+0x448>
  402bae:	9b07      	ldr	r3, [sp, #28]
  402bb0:	9902      	ldr	r1, [sp, #8]
  402bb2:	1a5c      	subs	r4, r3, r1
  402bb4:	2c00      	cmp	r4, #0
  402bb6:	f340 82ba 	ble.w	40312e <_vfiprintf_r+0x956>
  402bba:	46da      	mov	sl, fp
  402bbc:	2c10      	cmp	r4, #16
  402bbe:	f340 83da 	ble.w	403376 <_vfiprintf_r+0xb9e>
  402bc2:	9910      	ldr	r1, [sp, #64]	; 0x40
  402bc4:	4e63      	ldr	r6, [pc, #396]	; (402d54 <_vfiprintf_r+0x57c>)
  402bc6:	9f06      	ldr	r7, [sp, #24]
  402bc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
  402bcc:	2510      	movs	r5, #16
  402bce:	e006      	b.n	402bde <_vfiprintf_r+0x406>
  402bd0:	1c88      	adds	r0, r1, #2
  402bd2:	f10a 0a08 	add.w	sl, sl, #8
  402bd6:	4619      	mov	r1, r3
  402bd8:	3c10      	subs	r4, #16
  402bda:	2c10      	cmp	r4, #16
  402bdc:	dd13      	ble.n	402c06 <_vfiprintf_r+0x42e>
  402bde:	1c4b      	adds	r3, r1, #1
  402be0:	3210      	adds	r2, #16
  402be2:	2b07      	cmp	r3, #7
  402be4:	9211      	str	r2, [sp, #68]	; 0x44
  402be6:	f8ca 6000 	str.w	r6, [sl]
  402bea:	f8ca 5004 	str.w	r5, [sl, #4]
  402bee:	9310      	str	r3, [sp, #64]	; 0x40
  402bf0:	ddee      	ble.n	402bd0 <_vfiprintf_r+0x3f8>
  402bf2:	2a00      	cmp	r2, #0
  402bf4:	f040 820b 	bne.w	40300e <_vfiprintf_r+0x836>
  402bf8:	3c10      	subs	r4, #16
  402bfa:	2c10      	cmp	r4, #16
  402bfc:	f04f 0001 	mov.w	r0, #1
  402c00:	4611      	mov	r1, r2
  402c02:	46da      	mov	sl, fp
  402c04:	dceb      	bgt.n	402bde <_vfiprintf_r+0x406>
  402c06:	4422      	add	r2, r4
  402c08:	2807      	cmp	r0, #7
  402c0a:	9211      	str	r2, [sp, #68]	; 0x44
  402c0c:	f8ca 6000 	str.w	r6, [sl]
  402c10:	f8ca 4004 	str.w	r4, [sl, #4]
  402c14:	9010      	str	r0, [sp, #64]	; 0x40
  402c16:	f340 8223 	ble.w	403060 <_vfiprintf_r+0x888>
  402c1a:	2a00      	cmp	r2, #0
  402c1c:	f040 8367 	bne.w	4032ee <_vfiprintf_r+0xb16>
  402c20:	9b04      	ldr	r3, [sp, #16]
  402c22:	9a07      	ldr	r2, [sp, #28]
  402c24:	9902      	ldr	r1, [sp, #8]
  402c26:	428a      	cmp	r2, r1
  402c28:	bfac      	ite	ge
  402c2a:	189b      	addge	r3, r3, r2
  402c2c:	185b      	addlt	r3, r3, r1
  402c2e:	9304      	str	r3, [sp, #16]
  402c30:	e21f      	b.n	403072 <_vfiprintf_r+0x89a>
  402c32:	9607      	str	r6, [sp, #28]
  402c34:	069e      	lsls	r6, r3, #26
  402c36:	f100 8319 	bmi.w	40326c <_vfiprintf_r+0xa94>
  402c3a:	9908      	ldr	r1, [sp, #32]
  402c3c:	06dd      	lsls	r5, r3, #27
  402c3e:	460a      	mov	r2, r1
  402c40:	f100 82b5 	bmi.w	4031ae <_vfiprintf_r+0x9d6>
  402c44:	0658      	lsls	r0, r3, #25
  402c46:	f140 82b2 	bpl.w	4031ae <_vfiprintf_r+0x9d6>
  402c4a:	880e      	ldrh	r6, [r1, #0]
  402c4c:	3104      	adds	r1, #4
  402c4e:	2700      	movs	r7, #0
  402c50:	2201      	movs	r2, #1
  402c52:	9108      	str	r1, [sp, #32]
  402c54:	e6cb      	b.n	4029ee <_vfiprintf_r+0x216>
  402c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402c5a:	f899 2000 	ldrb.w	r2, [r9]
  402c5e:	e622      	b.n	4028a6 <_vfiprintf_r+0xce>
  402c60:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402c64:	2600      	movs	r6, #0
  402c66:	f819 2b01 	ldrb.w	r2, [r9], #1
  402c6a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402c6e:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402c72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402c76:	2909      	cmp	r1, #9
  402c78:	d9f5      	bls.n	402c66 <_vfiprintf_r+0x48e>
  402c7a:	e616      	b.n	4028aa <_vfiprintf_r+0xd2>
  402c7c:	9908      	ldr	r1, [sp, #32]
  402c7e:	9607      	str	r6, [sp, #28]
  402c80:	680a      	ldr	r2, [r1, #0]
  402c82:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402c86:	f04f 0000 	mov.w	r0, #0
  402c8a:	460a      	mov	r2, r1
  402c8c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  402c90:	3204      	adds	r2, #4
  402c92:	2001      	movs	r0, #1
  402c94:	9002      	str	r0, [sp, #8]
  402c96:	9208      	str	r2, [sp, #32]
  402c98:	9005      	str	r0, [sp, #20]
  402c9a:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  402c9e:	9303      	str	r3, [sp, #12]
  402ca0:	2400      	movs	r4, #0
  402ca2:	e6cb      	b.n	402a3c <_vfiprintf_r+0x264>
  402ca4:	9607      	str	r6, [sp, #28]
  402ca6:	2800      	cmp	r0, #0
  402ca8:	f040 8382 	bne.w	4033b0 <_vfiprintf_r+0xbd8>
  402cac:	069e      	lsls	r6, r3, #26
  402cae:	f100 82d1 	bmi.w	403254 <_vfiprintf_r+0xa7c>
  402cb2:	06dd      	lsls	r5, r3, #27
  402cb4:	f100 828d 	bmi.w	4031d2 <_vfiprintf_r+0x9fa>
  402cb8:	0658      	lsls	r0, r3, #25
  402cba:	f140 828a 	bpl.w	4031d2 <_vfiprintf_r+0x9fa>
  402cbe:	9d08      	ldr	r5, [sp, #32]
  402cc0:	f9b5 6000 	ldrsh.w	r6, [r5]
  402cc4:	462a      	mov	r2, r5
  402cc6:	17f7      	asrs	r7, r6, #31
  402cc8:	3204      	adds	r2, #4
  402cca:	4630      	mov	r0, r6
  402ccc:	4639      	mov	r1, r7
  402cce:	9208      	str	r2, [sp, #32]
  402cd0:	2800      	cmp	r0, #0
  402cd2:	f171 0200 	sbcs.w	r2, r1, #0
  402cd6:	f2c0 82ee 	blt.w	4032b6 <_vfiprintf_r+0xade>
  402cda:	1c61      	adds	r1, r4, #1
  402cdc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402ce0:	f04f 0201 	mov.w	r2, #1
  402ce4:	f47f ae8b 	bne.w	4029fe <_vfiprintf_r+0x226>
  402ce8:	ea56 0107 	orrs.w	r1, r6, r7
  402cec:	f000 81e8 	beq.w	4030c0 <_vfiprintf_r+0x8e8>
  402cf0:	9303      	str	r3, [sp, #12]
  402cf2:	2a01      	cmp	r2, #1
  402cf4:	f000 8225 	beq.w	403142 <_vfiprintf_r+0x96a>
  402cf8:	2a02      	cmp	r2, #2
  402cfa:	f040 81f5 	bne.w	4030e8 <_vfiprintf_r+0x910>
  402cfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402d00:	46d8      	mov	r8, fp
  402d02:	0933      	lsrs	r3, r6, #4
  402d04:	f006 010f 	and.w	r1, r6, #15
  402d08:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402d0c:	093a      	lsrs	r2, r7, #4
  402d0e:	461e      	mov	r6, r3
  402d10:	4617      	mov	r7, r2
  402d12:	5c43      	ldrb	r3, [r0, r1]
  402d14:	f808 3d01 	strb.w	r3, [r8, #-1]!
  402d18:	ea56 0307 	orrs.w	r3, r6, r7
  402d1c:	d1f1      	bne.n	402d02 <_vfiprintf_r+0x52a>
  402d1e:	ebab 0308 	sub.w	r3, fp, r8
  402d22:	9305      	str	r3, [sp, #20]
  402d24:	e682      	b.n	402a2c <_vfiprintf_r+0x254>
  402d26:	f899 2000 	ldrb.w	r2, [r9]
  402d2a:	2d00      	cmp	r5, #0
  402d2c:	f47f adbb 	bne.w	4028a6 <_vfiprintf_r+0xce>
  402d30:	2001      	movs	r0, #1
  402d32:	2520      	movs	r5, #32
  402d34:	e5b7      	b.n	4028a6 <_vfiprintf_r+0xce>
  402d36:	9607      	str	r6, [sp, #28]
  402d38:	2800      	cmp	r0, #0
  402d3a:	f040 8336 	bne.w	4033aa <_vfiprintf_r+0xbd2>
  402d3e:	f043 0310 	orr.w	r3, r3, #16
  402d42:	e7b3      	b.n	402cac <_vfiprintf_r+0x4d4>
  402d44:	9607      	str	r6, [sp, #28]
  402d46:	f043 0310 	orr.w	r3, r3, #16
  402d4a:	e63d      	b.n	4029c8 <_vfiprintf_r+0x1f0>
  402d4c:	9607      	str	r6, [sp, #28]
  402d4e:	f043 0310 	orr.w	r3, r3, #16
  402d52:	e76f      	b.n	402c34 <_vfiprintf_r+0x45c>
  402d54:	00405368 	.word	0x00405368
  402d58:	00405378 	.word	0x00405378
  402d5c:	9607      	str	r6, [sp, #28]
  402d5e:	2800      	cmp	r0, #0
  402d60:	f040 832c 	bne.w	4033bc <_vfiprintf_r+0xbe4>
  402d64:	49b0      	ldr	r1, [pc, #704]	; (403028 <_vfiprintf_r+0x850>)
  402d66:	910b      	str	r1, [sp, #44]	; 0x2c
  402d68:	069f      	lsls	r7, r3, #26
  402d6a:	f100 8297 	bmi.w	40329c <_vfiprintf_r+0xac4>
  402d6e:	9808      	ldr	r0, [sp, #32]
  402d70:	06de      	lsls	r6, r3, #27
  402d72:	4601      	mov	r1, r0
  402d74:	f100 8228 	bmi.w	4031c8 <_vfiprintf_r+0x9f0>
  402d78:	065d      	lsls	r5, r3, #25
  402d7a:	f140 8225 	bpl.w	4031c8 <_vfiprintf_r+0x9f0>
  402d7e:	3104      	adds	r1, #4
  402d80:	8806      	ldrh	r6, [r0, #0]
  402d82:	9108      	str	r1, [sp, #32]
  402d84:	2700      	movs	r7, #0
  402d86:	07d8      	lsls	r0, r3, #31
  402d88:	f140 81d9 	bpl.w	40313e <_vfiprintf_r+0x966>
  402d8c:	ea56 0107 	orrs.w	r1, r6, r7
  402d90:	f000 81d5 	beq.w	40313e <_vfiprintf_r+0x966>
  402d94:	2130      	movs	r1, #48	; 0x30
  402d96:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402d9a:	f043 0302 	orr.w	r3, r3, #2
  402d9e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402da2:	2202      	movs	r2, #2
  402da4:	e623      	b.n	4029ee <_vfiprintf_r+0x216>
  402da6:	f899 2000 	ldrb.w	r2, [r9]
  402daa:	2a2a      	cmp	r2, #42	; 0x2a
  402dac:	f109 0701 	add.w	r7, r9, #1
  402db0:	f000 82f0 	beq.w	403394 <_vfiprintf_r+0xbbc>
  402db4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402db8:	2909      	cmp	r1, #9
  402dba:	46b9      	mov	r9, r7
  402dbc:	f04f 0400 	mov.w	r4, #0
  402dc0:	f63f ad73 	bhi.w	4028aa <_vfiprintf_r+0xd2>
  402dc4:	f819 2b01 	ldrb.w	r2, [r9], #1
  402dc8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402dcc:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402dd0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402dd4:	2909      	cmp	r1, #9
  402dd6:	d9f5      	bls.n	402dc4 <_vfiprintf_r+0x5ec>
  402dd8:	e567      	b.n	4028aa <_vfiprintf_r+0xd2>
  402dda:	f899 2000 	ldrb.w	r2, [r9]
  402dde:	2a6c      	cmp	r2, #108	; 0x6c
  402de0:	bf03      	ittte	eq
  402de2:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  402de6:	f043 0320 	orreq.w	r3, r3, #32
  402dea:	f109 0901 	addeq.w	r9, r9, #1
  402dee:	f043 0310 	orrne.w	r3, r3, #16
  402df2:	e558      	b.n	4028a6 <_vfiprintf_r+0xce>
  402df4:	9908      	ldr	r1, [sp, #32]
  402df6:	680e      	ldr	r6, [r1, #0]
  402df8:	460a      	mov	r2, r1
  402dfa:	2e00      	cmp	r6, #0
  402dfc:	f102 0204 	add.w	r2, r2, #4
  402e00:	f6ff adda 	blt.w	4029b8 <_vfiprintf_r+0x1e0>
  402e04:	9208      	str	r2, [sp, #32]
  402e06:	f899 2000 	ldrb.w	r2, [r9]
  402e0a:	e54c      	b.n	4028a6 <_vfiprintf_r+0xce>
  402e0c:	9607      	str	r6, [sp, #28]
  402e0e:	2800      	cmp	r0, #0
  402e10:	f040 82da 	bne.w	4033c8 <_vfiprintf_r+0xbf0>
  402e14:	4985      	ldr	r1, [pc, #532]	; (40302c <_vfiprintf_r+0x854>)
  402e16:	910b      	str	r1, [sp, #44]	; 0x2c
  402e18:	e7a6      	b.n	402d68 <_vfiprintf_r+0x590>
  402e1a:	9808      	ldr	r0, [sp, #32]
  402e1c:	4a83      	ldr	r2, [pc, #524]	; (40302c <_vfiprintf_r+0x854>)
  402e1e:	9607      	str	r6, [sp, #28]
  402e20:	920b      	str	r2, [sp, #44]	; 0x2c
  402e22:	6806      	ldr	r6, [r0, #0]
  402e24:	2278      	movs	r2, #120	; 0x78
  402e26:	2130      	movs	r1, #48	; 0x30
  402e28:	3004      	adds	r0, #4
  402e2a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402e2e:	f043 0302 	orr.w	r3, r3, #2
  402e32:	9008      	str	r0, [sp, #32]
  402e34:	2700      	movs	r7, #0
  402e36:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402e3a:	2202      	movs	r2, #2
  402e3c:	e5d7      	b.n	4029ee <_vfiprintf_r+0x216>
  402e3e:	f043 0320 	orr.w	r3, r3, #32
  402e42:	f899 2000 	ldrb.w	r2, [r9]
  402e46:	e52e      	b.n	4028a6 <_vfiprintf_r+0xce>
  402e48:	9908      	ldr	r1, [sp, #32]
  402e4a:	9607      	str	r6, [sp, #28]
  402e4c:	f8d1 8000 	ldr.w	r8, [r1]
  402e50:	f04f 0200 	mov.w	r2, #0
  402e54:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402e58:	1d0e      	adds	r6, r1, #4
  402e5a:	f1b8 0f00 	cmp.w	r8, #0
  402e5e:	f000 8281 	beq.w	403364 <_vfiprintf_r+0xb8c>
  402e62:	1c67      	adds	r7, r4, #1
  402e64:	f000 8260 	beq.w	403328 <_vfiprintf_r+0xb50>
  402e68:	4622      	mov	r2, r4
  402e6a:	2100      	movs	r1, #0
  402e6c:	4640      	mov	r0, r8
  402e6e:	9302      	str	r3, [sp, #8]
  402e70:	f001 fb3e 	bl	4044f0 <memchr>
  402e74:	9b02      	ldr	r3, [sp, #8]
  402e76:	2800      	cmp	r0, #0
  402e78:	f000 8284 	beq.w	403384 <_vfiprintf_r+0xbac>
  402e7c:	eba0 0208 	sub.w	r2, r0, r8
  402e80:	9205      	str	r2, [sp, #20]
  402e82:	9608      	str	r6, [sp, #32]
  402e84:	9303      	str	r3, [sp, #12]
  402e86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402e8a:	2400      	movs	r4, #0
  402e8c:	e5ce      	b.n	402a2c <_vfiprintf_r+0x254>
  402e8e:	f043 0301 	orr.w	r3, r3, #1
  402e92:	f899 2000 	ldrb.w	r2, [r9]
  402e96:	e506      	b.n	4028a6 <_vfiprintf_r+0xce>
  402e98:	f899 2000 	ldrb.w	r2, [r9]
  402e9c:	2001      	movs	r0, #1
  402e9e:	252b      	movs	r5, #43	; 0x2b
  402ea0:	e501      	b.n	4028a6 <_vfiprintf_r+0xce>
  402ea2:	2800      	cmp	r0, #0
  402ea4:	f040 8287 	bne.w	4033b6 <_vfiprintf_r+0xbde>
  402ea8:	0699      	lsls	r1, r3, #26
  402eaa:	f100 8231 	bmi.w	403310 <_vfiprintf_r+0xb38>
  402eae:	06da      	lsls	r2, r3, #27
  402eb0:	d421      	bmi.n	402ef6 <_vfiprintf_r+0x71e>
  402eb2:	065b      	lsls	r3, r3, #25
  402eb4:	d51f      	bpl.n	402ef6 <_vfiprintf_r+0x71e>
  402eb6:	9a08      	ldr	r2, [sp, #32]
  402eb8:	6813      	ldr	r3, [r2, #0]
  402eba:	3204      	adds	r2, #4
  402ebc:	9208      	str	r2, [sp, #32]
  402ebe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402ec2:	801a      	strh	r2, [r3, #0]
  402ec4:	e4ba      	b.n	40283c <_vfiprintf_r+0x64>
  402ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402eca:	f899 2000 	ldrb.w	r2, [r9]
  402ece:	e4ea      	b.n	4028a6 <_vfiprintf_r+0xce>
  402ed0:	9607      	str	r6, [sp, #28]
  402ed2:	2800      	cmp	r0, #0
  402ed4:	f040 8275 	bne.w	4033c2 <_vfiprintf_r+0xbea>
  402ed8:	2a00      	cmp	r2, #0
  402eda:	f000 8088 	beq.w	402fee <_vfiprintf_r+0x816>
  402ede:	2101      	movs	r1, #1
  402ee0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402ee4:	f04f 0200 	mov.w	r2, #0
  402ee8:	9102      	str	r1, [sp, #8]
  402eea:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402eee:	9105      	str	r1, [sp, #20]
  402ef0:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  402ef4:	e6d3      	b.n	402c9e <_vfiprintf_r+0x4c6>
  402ef6:	9a08      	ldr	r2, [sp, #32]
  402ef8:	6813      	ldr	r3, [r2, #0]
  402efa:	3204      	adds	r2, #4
  402efc:	9208      	str	r2, [sp, #32]
  402efe:	9a04      	ldr	r2, [sp, #16]
  402f00:	601a      	str	r2, [r3, #0]
  402f02:	e49b      	b.n	40283c <_vfiprintf_r+0x64>
  402f04:	aa0f      	add	r2, sp, #60	; 0x3c
  402f06:	9901      	ldr	r1, [sp, #4]
  402f08:	4620      	mov	r0, r4
  402f0a:	f7ff fc25 	bl	402758 <__sprint_r.part.0>
  402f0e:	2800      	cmp	r0, #0
  402f10:	d174      	bne.n	402ffc <_vfiprintf_r+0x824>
  402f12:	9910      	ldr	r1, [sp, #64]	; 0x40
  402f14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f16:	f101 0c01 	add.w	ip, r1, #1
  402f1a:	46de      	mov	lr, fp
  402f1c:	e5b3      	b.n	402a86 <_vfiprintf_r+0x2ae>
  402f1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402f20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f22:	1c48      	adds	r0, r1, #1
  402f24:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402f28:	2d00      	cmp	r5, #0
  402f2a:	f43f add6 	beq.w	402ada <_vfiprintf_r+0x302>
  402f2e:	3201      	adds	r2, #1
  402f30:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402f34:	2101      	movs	r1, #1
  402f36:	2807      	cmp	r0, #7
  402f38:	9211      	str	r2, [sp, #68]	; 0x44
  402f3a:	9010      	str	r0, [sp, #64]	; 0x40
  402f3c:	f8ca 5000 	str.w	r5, [sl]
  402f40:	f8ca 1004 	str.w	r1, [sl, #4]
  402f44:	f340 80b6 	ble.w	4030b4 <_vfiprintf_r+0x8dc>
  402f48:	2a00      	cmp	r2, #0
  402f4a:	f040 8155 	bne.w	4031f8 <_vfiprintf_r+0xa20>
  402f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402f50:	2b00      	cmp	r3, #0
  402f52:	f43f add3 	beq.w	402afc <_vfiprintf_r+0x324>
  402f56:	ab0e      	add	r3, sp, #56	; 0x38
  402f58:	2202      	movs	r2, #2
  402f5a:	4608      	mov	r0, r1
  402f5c:	931c      	str	r3, [sp, #112]	; 0x70
  402f5e:	921d      	str	r2, [sp, #116]	; 0x74
  402f60:	46da      	mov	sl, fp
  402f62:	4601      	mov	r1, r0
  402f64:	f10a 0a08 	add.w	sl, sl, #8
  402f68:	3001      	adds	r0, #1
  402f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402f6c:	2b80      	cmp	r3, #128	; 0x80
  402f6e:	f43f adcd 	beq.w	402b0c <_vfiprintf_r+0x334>
  402f72:	9b05      	ldr	r3, [sp, #20]
  402f74:	1ae4      	subs	r4, r4, r3
  402f76:	2c00      	cmp	r4, #0
  402f78:	f77f ae07 	ble.w	402b8a <_vfiprintf_r+0x3b2>
  402f7c:	2c10      	cmp	r4, #16
  402f7e:	4d2c      	ldr	r5, [pc, #176]	; (403030 <_vfiprintf_r+0x858>)
  402f80:	dd1d      	ble.n	402fbe <_vfiprintf_r+0x7e6>
  402f82:	46d6      	mov	lr, sl
  402f84:	2610      	movs	r6, #16
  402f86:	9f06      	ldr	r7, [sp, #24]
  402f88:	f8dd a004 	ldr.w	sl, [sp, #4]
  402f8c:	e006      	b.n	402f9c <_vfiprintf_r+0x7c4>
  402f8e:	1c88      	adds	r0, r1, #2
  402f90:	f10e 0e08 	add.w	lr, lr, #8
  402f94:	4619      	mov	r1, r3
  402f96:	3c10      	subs	r4, #16
  402f98:	2c10      	cmp	r4, #16
  402f9a:	dd0f      	ble.n	402fbc <_vfiprintf_r+0x7e4>
  402f9c:	1c4b      	adds	r3, r1, #1
  402f9e:	3210      	adds	r2, #16
  402fa0:	2b07      	cmp	r3, #7
  402fa2:	9211      	str	r2, [sp, #68]	; 0x44
  402fa4:	e88e 0060 	stmia.w	lr, {r5, r6}
  402fa8:	9310      	str	r3, [sp, #64]	; 0x40
  402faa:	ddf0      	ble.n	402f8e <_vfiprintf_r+0x7b6>
  402fac:	b9a2      	cbnz	r2, 402fd8 <_vfiprintf_r+0x800>
  402fae:	3c10      	subs	r4, #16
  402fb0:	2c10      	cmp	r4, #16
  402fb2:	f04f 0001 	mov.w	r0, #1
  402fb6:	4611      	mov	r1, r2
  402fb8:	46de      	mov	lr, fp
  402fba:	dcef      	bgt.n	402f9c <_vfiprintf_r+0x7c4>
  402fbc:	46f2      	mov	sl, lr
  402fbe:	4422      	add	r2, r4
  402fc0:	2807      	cmp	r0, #7
  402fc2:	9211      	str	r2, [sp, #68]	; 0x44
  402fc4:	f8ca 5000 	str.w	r5, [sl]
  402fc8:	f8ca 4004 	str.w	r4, [sl, #4]
  402fcc:	9010      	str	r0, [sp, #64]	; 0x40
  402fce:	dc31      	bgt.n	403034 <_vfiprintf_r+0x85c>
  402fd0:	f10a 0a08 	add.w	sl, sl, #8
  402fd4:	3001      	adds	r0, #1
  402fd6:	e5d8      	b.n	402b8a <_vfiprintf_r+0x3b2>
  402fd8:	aa0f      	add	r2, sp, #60	; 0x3c
  402fda:	4651      	mov	r1, sl
  402fdc:	4638      	mov	r0, r7
  402fde:	f7ff fbbb 	bl	402758 <__sprint_r.part.0>
  402fe2:	b958      	cbnz	r0, 402ffc <_vfiprintf_r+0x824>
  402fe4:	9910      	ldr	r1, [sp, #64]	; 0x40
  402fe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402fe8:	1c48      	adds	r0, r1, #1
  402fea:	46de      	mov	lr, fp
  402fec:	e7d3      	b.n	402f96 <_vfiprintf_r+0x7be>
  402fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402ff0:	b123      	cbz	r3, 402ffc <_vfiprintf_r+0x824>
  402ff2:	9806      	ldr	r0, [sp, #24]
  402ff4:	9901      	ldr	r1, [sp, #4]
  402ff6:	aa0f      	add	r2, sp, #60	; 0x3c
  402ff8:	f7ff fbae 	bl	402758 <__sprint_r.part.0>
  402ffc:	9b01      	ldr	r3, [sp, #4]
  402ffe:	899b      	ldrh	r3, [r3, #12]
  403000:	065b      	lsls	r3, r3, #25
  403002:	f57f acd2 	bpl.w	4029aa <_vfiprintf_r+0x1d2>
  403006:	f04f 33ff 	mov.w	r3, #4294967295
  40300a:	9304      	str	r3, [sp, #16]
  40300c:	e4cd      	b.n	4029aa <_vfiprintf_r+0x1d2>
  40300e:	aa0f      	add	r2, sp, #60	; 0x3c
  403010:	4641      	mov	r1, r8
  403012:	4638      	mov	r0, r7
  403014:	f7ff fba0 	bl	402758 <__sprint_r.part.0>
  403018:	2800      	cmp	r0, #0
  40301a:	d1ef      	bne.n	402ffc <_vfiprintf_r+0x824>
  40301c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40301e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403020:	1c48      	adds	r0, r1, #1
  403022:	46da      	mov	sl, fp
  403024:	e5d8      	b.n	402bd8 <_vfiprintf_r+0x400>
  403026:	bf00      	nop
  403028:	00405338 	.word	0x00405338
  40302c:	0040534c 	.word	0x0040534c
  403030:	00405378 	.word	0x00405378
  403034:	2a00      	cmp	r2, #0
  403036:	f040 8100 	bne.w	40323a <_vfiprintf_r+0xa62>
  40303a:	9a05      	ldr	r2, [sp, #20]
  40303c:	921d      	str	r2, [sp, #116]	; 0x74
  40303e:	2301      	movs	r3, #1
  403040:	9211      	str	r2, [sp, #68]	; 0x44
  403042:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  403046:	9310      	str	r3, [sp, #64]	; 0x40
  403048:	46da      	mov	sl, fp
  40304a:	f10a 0a08 	add.w	sl, sl, #8
  40304e:	9b03      	ldr	r3, [sp, #12]
  403050:	0759      	lsls	r1, r3, #29
  403052:	d505      	bpl.n	403060 <_vfiprintf_r+0x888>
  403054:	9b07      	ldr	r3, [sp, #28]
  403056:	9902      	ldr	r1, [sp, #8]
  403058:	1a5c      	subs	r4, r3, r1
  40305a:	2c00      	cmp	r4, #0
  40305c:	f73f adae 	bgt.w	402bbc <_vfiprintf_r+0x3e4>
  403060:	9b04      	ldr	r3, [sp, #16]
  403062:	9907      	ldr	r1, [sp, #28]
  403064:	9802      	ldr	r0, [sp, #8]
  403066:	4281      	cmp	r1, r0
  403068:	bfac      	ite	ge
  40306a:	185b      	addge	r3, r3, r1
  40306c:	181b      	addlt	r3, r3, r0
  40306e:	9304      	str	r3, [sp, #16]
  403070:	bb7a      	cbnz	r2, 4030d2 <_vfiprintf_r+0x8fa>
  403072:	2300      	movs	r3, #0
  403074:	9310      	str	r3, [sp, #64]	; 0x40
  403076:	46da      	mov	sl, fp
  403078:	f7ff bbe0 	b.w	40283c <_vfiprintf_r+0x64>
  40307c:	aa0f      	add	r2, sp, #60	; 0x3c
  40307e:	9901      	ldr	r1, [sp, #4]
  403080:	4620      	mov	r0, r4
  403082:	f7ff fb69 	bl	402758 <__sprint_r.part.0>
  403086:	2800      	cmp	r0, #0
  403088:	d1b8      	bne.n	402ffc <_vfiprintf_r+0x824>
  40308a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40308c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40308e:	f101 0e01 	add.w	lr, r1, #1
  403092:	46dc      	mov	ip, fp
  403094:	e54e      	b.n	402b34 <_vfiprintf_r+0x35c>
  403096:	2a00      	cmp	r2, #0
  403098:	f040 811c 	bne.w	4032d4 <_vfiprintf_r+0xafc>
  40309c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4030a0:	2900      	cmp	r1, #0
  4030a2:	f000 8111 	beq.w	4032c8 <_vfiprintf_r+0xaf0>
  4030a6:	2201      	movs	r2, #1
  4030a8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4030ac:	4610      	mov	r0, r2
  4030ae:	921d      	str	r2, [sp, #116]	; 0x74
  4030b0:	911c      	str	r1, [sp, #112]	; 0x70
  4030b2:	46da      	mov	sl, fp
  4030b4:	4601      	mov	r1, r0
  4030b6:	f10a 0a08 	add.w	sl, sl, #8
  4030ba:	3001      	adds	r0, #1
  4030bc:	e50d      	b.n	402ada <_vfiprintf_r+0x302>
  4030be:	9b03      	ldr	r3, [sp, #12]
  4030c0:	2a01      	cmp	r2, #1
  4030c2:	f000 8090 	beq.w	4031e6 <_vfiprintf_r+0xa0e>
  4030c6:	2a02      	cmp	r2, #2
  4030c8:	d10b      	bne.n	4030e2 <_vfiprintf_r+0x90a>
  4030ca:	9303      	str	r3, [sp, #12]
  4030cc:	2600      	movs	r6, #0
  4030ce:	2700      	movs	r7, #0
  4030d0:	e615      	b.n	402cfe <_vfiprintf_r+0x526>
  4030d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4030d4:	9901      	ldr	r1, [sp, #4]
  4030d6:	9806      	ldr	r0, [sp, #24]
  4030d8:	f7ff fb3e 	bl	402758 <__sprint_r.part.0>
  4030dc:	2800      	cmp	r0, #0
  4030de:	d0c8      	beq.n	403072 <_vfiprintf_r+0x89a>
  4030e0:	e78c      	b.n	402ffc <_vfiprintf_r+0x824>
  4030e2:	9303      	str	r3, [sp, #12]
  4030e4:	2600      	movs	r6, #0
  4030e6:	2700      	movs	r7, #0
  4030e8:	4659      	mov	r1, fp
  4030ea:	e000      	b.n	4030ee <_vfiprintf_r+0x916>
  4030ec:	4641      	mov	r1, r8
  4030ee:	08f2      	lsrs	r2, r6, #3
  4030f0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4030f4:	08f8      	lsrs	r0, r7, #3
  4030f6:	f006 0307 	and.w	r3, r6, #7
  4030fa:	4607      	mov	r7, r0
  4030fc:	4616      	mov	r6, r2
  4030fe:	3330      	adds	r3, #48	; 0x30
  403100:	ea56 0207 	orrs.w	r2, r6, r7
  403104:	f801 3c01 	strb.w	r3, [r1, #-1]
  403108:	f101 38ff 	add.w	r8, r1, #4294967295
  40310c:	d1ee      	bne.n	4030ec <_vfiprintf_r+0x914>
  40310e:	9a03      	ldr	r2, [sp, #12]
  403110:	07d6      	lsls	r6, r2, #31
  403112:	f57f ae04 	bpl.w	402d1e <_vfiprintf_r+0x546>
  403116:	2b30      	cmp	r3, #48	; 0x30
  403118:	f43f ae01 	beq.w	402d1e <_vfiprintf_r+0x546>
  40311c:	3902      	subs	r1, #2
  40311e:	2330      	movs	r3, #48	; 0x30
  403120:	f808 3c01 	strb.w	r3, [r8, #-1]
  403124:	ebab 0301 	sub.w	r3, fp, r1
  403128:	9305      	str	r3, [sp, #20]
  40312a:	4688      	mov	r8, r1
  40312c:	e47e      	b.n	402a2c <_vfiprintf_r+0x254>
  40312e:	9b04      	ldr	r3, [sp, #16]
  403130:	9a07      	ldr	r2, [sp, #28]
  403132:	428a      	cmp	r2, r1
  403134:	bfac      	ite	ge
  403136:	189b      	addge	r3, r3, r2
  403138:	185b      	addlt	r3, r3, r1
  40313a:	9304      	str	r3, [sp, #16]
  40313c:	e799      	b.n	403072 <_vfiprintf_r+0x89a>
  40313e:	2202      	movs	r2, #2
  403140:	e455      	b.n	4029ee <_vfiprintf_r+0x216>
  403142:	2f00      	cmp	r7, #0
  403144:	bf08      	it	eq
  403146:	2e0a      	cmpeq	r6, #10
  403148:	d34c      	bcc.n	4031e4 <_vfiprintf_r+0xa0c>
  40314a:	46d8      	mov	r8, fp
  40314c:	4630      	mov	r0, r6
  40314e:	4639      	mov	r1, r7
  403150:	220a      	movs	r2, #10
  403152:	2300      	movs	r3, #0
  403154:	f001 ff3e 	bl	404fd4 <__aeabi_uldivmod>
  403158:	3230      	adds	r2, #48	; 0x30
  40315a:	f808 2d01 	strb.w	r2, [r8, #-1]!
  40315e:	4630      	mov	r0, r6
  403160:	4639      	mov	r1, r7
  403162:	2300      	movs	r3, #0
  403164:	220a      	movs	r2, #10
  403166:	f001 ff35 	bl	404fd4 <__aeabi_uldivmod>
  40316a:	4606      	mov	r6, r0
  40316c:	460f      	mov	r7, r1
  40316e:	ea56 0307 	orrs.w	r3, r6, r7
  403172:	d1eb      	bne.n	40314c <_vfiprintf_r+0x974>
  403174:	ebab 0308 	sub.w	r3, fp, r8
  403178:	9305      	str	r3, [sp, #20]
  40317a:	e457      	b.n	402a2c <_vfiprintf_r+0x254>
  40317c:	9405      	str	r4, [sp, #20]
  40317e:	46d8      	mov	r8, fp
  403180:	e454      	b.n	402a2c <_vfiprintf_r+0x254>
  403182:	aa0f      	add	r2, sp, #60	; 0x3c
  403184:	9901      	ldr	r1, [sp, #4]
  403186:	9806      	ldr	r0, [sp, #24]
  403188:	f7ff fae6 	bl	402758 <__sprint_r.part.0>
  40318c:	2800      	cmp	r0, #0
  40318e:	f47f af35 	bne.w	402ffc <_vfiprintf_r+0x824>
  403192:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403194:	46da      	mov	sl, fp
  403196:	e75a      	b.n	40304e <_vfiprintf_r+0x876>
  403198:	aa0f      	add	r2, sp, #60	; 0x3c
  40319a:	9901      	ldr	r1, [sp, #4]
  40319c:	9806      	ldr	r0, [sp, #24]
  40319e:	f7ff fadb 	bl	402758 <__sprint_r.part.0>
  4031a2:	2800      	cmp	r0, #0
  4031a4:	f47f af2a 	bne.w	402ffc <_vfiprintf_r+0x824>
  4031a8:	46da      	mov	sl, fp
  4031aa:	f7ff bbe0 	b.w	40296e <_vfiprintf_r+0x196>
  4031ae:	3104      	adds	r1, #4
  4031b0:	6816      	ldr	r6, [r2, #0]
  4031b2:	9108      	str	r1, [sp, #32]
  4031b4:	2201      	movs	r2, #1
  4031b6:	2700      	movs	r7, #0
  4031b8:	e419      	b.n	4029ee <_vfiprintf_r+0x216>
  4031ba:	9808      	ldr	r0, [sp, #32]
  4031bc:	4601      	mov	r1, r0
  4031be:	3104      	adds	r1, #4
  4031c0:	6806      	ldr	r6, [r0, #0]
  4031c2:	9108      	str	r1, [sp, #32]
  4031c4:	2700      	movs	r7, #0
  4031c6:	e412      	b.n	4029ee <_vfiprintf_r+0x216>
  4031c8:	680e      	ldr	r6, [r1, #0]
  4031ca:	3104      	adds	r1, #4
  4031cc:	9108      	str	r1, [sp, #32]
  4031ce:	2700      	movs	r7, #0
  4031d0:	e5d9      	b.n	402d86 <_vfiprintf_r+0x5ae>
  4031d2:	9908      	ldr	r1, [sp, #32]
  4031d4:	680e      	ldr	r6, [r1, #0]
  4031d6:	460a      	mov	r2, r1
  4031d8:	17f7      	asrs	r7, r6, #31
  4031da:	3204      	adds	r2, #4
  4031dc:	9208      	str	r2, [sp, #32]
  4031de:	4630      	mov	r0, r6
  4031e0:	4639      	mov	r1, r7
  4031e2:	e575      	b.n	402cd0 <_vfiprintf_r+0x4f8>
  4031e4:	9b03      	ldr	r3, [sp, #12]
  4031e6:	9303      	str	r3, [sp, #12]
  4031e8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  4031ec:	3630      	adds	r6, #48	; 0x30
  4031ee:	2301      	movs	r3, #1
  4031f0:	f808 6d41 	strb.w	r6, [r8, #-65]!
  4031f4:	9305      	str	r3, [sp, #20]
  4031f6:	e419      	b.n	402a2c <_vfiprintf_r+0x254>
  4031f8:	aa0f      	add	r2, sp, #60	; 0x3c
  4031fa:	9901      	ldr	r1, [sp, #4]
  4031fc:	9806      	ldr	r0, [sp, #24]
  4031fe:	f7ff faab 	bl	402758 <__sprint_r.part.0>
  403202:	2800      	cmp	r0, #0
  403204:	f47f aefa 	bne.w	402ffc <_vfiprintf_r+0x824>
  403208:	9910      	ldr	r1, [sp, #64]	; 0x40
  40320a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40320c:	1c48      	adds	r0, r1, #1
  40320e:	46da      	mov	sl, fp
  403210:	e463      	b.n	402ada <_vfiprintf_r+0x302>
  403212:	aa0f      	add	r2, sp, #60	; 0x3c
  403214:	9901      	ldr	r1, [sp, #4]
  403216:	9806      	ldr	r0, [sp, #24]
  403218:	f7ff fa9e 	bl	402758 <__sprint_r.part.0>
  40321c:	2800      	cmp	r0, #0
  40321e:	f47f aeed 	bne.w	402ffc <_vfiprintf_r+0x824>
  403222:	9910      	ldr	r1, [sp, #64]	; 0x40
  403224:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403226:	1c48      	adds	r0, r1, #1
  403228:	46da      	mov	sl, fp
  40322a:	e69e      	b.n	402f6a <_vfiprintf_r+0x792>
  40322c:	2a00      	cmp	r2, #0
  40322e:	f040 8086 	bne.w	40333e <_vfiprintf_r+0xb66>
  403232:	2001      	movs	r0, #1
  403234:	4611      	mov	r1, r2
  403236:	46da      	mov	sl, fp
  403238:	e69b      	b.n	402f72 <_vfiprintf_r+0x79a>
  40323a:	aa0f      	add	r2, sp, #60	; 0x3c
  40323c:	9901      	ldr	r1, [sp, #4]
  40323e:	9806      	ldr	r0, [sp, #24]
  403240:	f7ff fa8a 	bl	402758 <__sprint_r.part.0>
  403244:	2800      	cmp	r0, #0
  403246:	f47f aed9 	bne.w	402ffc <_vfiprintf_r+0x824>
  40324a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40324c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40324e:	3001      	adds	r0, #1
  403250:	46da      	mov	sl, fp
  403252:	e49a      	b.n	402b8a <_vfiprintf_r+0x3b2>
  403254:	9e08      	ldr	r6, [sp, #32]
  403256:	3607      	adds	r6, #7
  403258:	f026 0607 	bic.w	r6, r6, #7
  40325c:	e9d6 0100 	ldrd	r0, r1, [r6]
  403260:	f106 0208 	add.w	r2, r6, #8
  403264:	9208      	str	r2, [sp, #32]
  403266:	4606      	mov	r6, r0
  403268:	460f      	mov	r7, r1
  40326a:	e531      	b.n	402cd0 <_vfiprintf_r+0x4f8>
  40326c:	9e08      	ldr	r6, [sp, #32]
  40326e:	3607      	adds	r6, #7
  403270:	f026 0207 	bic.w	r2, r6, #7
  403274:	f102 0108 	add.w	r1, r2, #8
  403278:	e9d2 6700 	ldrd	r6, r7, [r2]
  40327c:	9108      	str	r1, [sp, #32]
  40327e:	2201      	movs	r2, #1
  403280:	f7ff bbb5 	b.w	4029ee <_vfiprintf_r+0x216>
  403284:	9e08      	ldr	r6, [sp, #32]
  403286:	3607      	adds	r6, #7
  403288:	f026 0207 	bic.w	r2, r6, #7
  40328c:	f102 0108 	add.w	r1, r2, #8
  403290:	e9d2 6700 	ldrd	r6, r7, [r2]
  403294:	9108      	str	r1, [sp, #32]
  403296:	2200      	movs	r2, #0
  403298:	f7ff bba9 	b.w	4029ee <_vfiprintf_r+0x216>
  40329c:	9e08      	ldr	r6, [sp, #32]
  40329e:	3607      	adds	r6, #7
  4032a0:	f026 0107 	bic.w	r1, r6, #7
  4032a4:	f101 0008 	add.w	r0, r1, #8
  4032a8:	9008      	str	r0, [sp, #32]
  4032aa:	e9d1 6700 	ldrd	r6, r7, [r1]
  4032ae:	e56a      	b.n	402d86 <_vfiprintf_r+0x5ae>
  4032b0:	46d8      	mov	r8, fp
  4032b2:	f7ff bbbb 	b.w	402a2c <_vfiprintf_r+0x254>
  4032b6:	252d      	movs	r5, #45	; 0x2d
  4032b8:	4276      	negs	r6, r6
  4032ba:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4032be:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4032c2:	2201      	movs	r2, #1
  4032c4:	f7ff bb98 	b.w	4029f8 <_vfiprintf_r+0x220>
  4032c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4032ca:	b9d3      	cbnz	r3, 403302 <_vfiprintf_r+0xb2a>
  4032cc:	4611      	mov	r1, r2
  4032ce:	2001      	movs	r0, #1
  4032d0:	46da      	mov	sl, fp
  4032d2:	e64e      	b.n	402f72 <_vfiprintf_r+0x79a>
  4032d4:	aa0f      	add	r2, sp, #60	; 0x3c
  4032d6:	9901      	ldr	r1, [sp, #4]
  4032d8:	9806      	ldr	r0, [sp, #24]
  4032da:	f7ff fa3d 	bl	402758 <__sprint_r.part.0>
  4032de:	2800      	cmp	r0, #0
  4032e0:	f47f ae8c 	bne.w	402ffc <_vfiprintf_r+0x824>
  4032e4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4032e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4032e8:	1c48      	adds	r0, r1, #1
  4032ea:	46da      	mov	sl, fp
  4032ec:	e61a      	b.n	402f24 <_vfiprintf_r+0x74c>
  4032ee:	aa0f      	add	r2, sp, #60	; 0x3c
  4032f0:	9901      	ldr	r1, [sp, #4]
  4032f2:	9806      	ldr	r0, [sp, #24]
  4032f4:	f7ff fa30 	bl	402758 <__sprint_r.part.0>
  4032f8:	2800      	cmp	r0, #0
  4032fa:	f47f ae7f 	bne.w	402ffc <_vfiprintf_r+0x824>
  4032fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403300:	e6ae      	b.n	403060 <_vfiprintf_r+0x888>
  403302:	ab0e      	add	r3, sp, #56	; 0x38
  403304:	2202      	movs	r2, #2
  403306:	931c      	str	r3, [sp, #112]	; 0x70
  403308:	921d      	str	r2, [sp, #116]	; 0x74
  40330a:	2001      	movs	r0, #1
  40330c:	46da      	mov	sl, fp
  40330e:	e628      	b.n	402f62 <_vfiprintf_r+0x78a>
  403310:	9a08      	ldr	r2, [sp, #32]
  403312:	9904      	ldr	r1, [sp, #16]
  403314:	6813      	ldr	r3, [r2, #0]
  403316:	17cd      	asrs	r5, r1, #31
  403318:	4608      	mov	r0, r1
  40331a:	3204      	adds	r2, #4
  40331c:	4629      	mov	r1, r5
  40331e:	9208      	str	r2, [sp, #32]
  403320:	e9c3 0100 	strd	r0, r1, [r3]
  403324:	f7ff ba8a 	b.w	40283c <_vfiprintf_r+0x64>
  403328:	4640      	mov	r0, r8
  40332a:	9608      	str	r6, [sp, #32]
  40332c:	9303      	str	r3, [sp, #12]
  40332e:	f001 fc47 	bl	404bc0 <strlen>
  403332:	2400      	movs	r4, #0
  403334:	9005      	str	r0, [sp, #20]
  403336:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40333a:	f7ff bb77 	b.w	402a2c <_vfiprintf_r+0x254>
  40333e:	aa0f      	add	r2, sp, #60	; 0x3c
  403340:	9901      	ldr	r1, [sp, #4]
  403342:	9806      	ldr	r0, [sp, #24]
  403344:	f7ff fa08 	bl	402758 <__sprint_r.part.0>
  403348:	2800      	cmp	r0, #0
  40334a:	f47f ae57 	bne.w	402ffc <_vfiprintf_r+0x824>
  40334e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403350:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403352:	1c48      	adds	r0, r1, #1
  403354:	46da      	mov	sl, fp
  403356:	e60c      	b.n	402f72 <_vfiprintf_r+0x79a>
  403358:	9910      	ldr	r1, [sp, #64]	; 0x40
  40335a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40335c:	4e1c      	ldr	r6, [pc, #112]	; (4033d0 <_vfiprintf_r+0xbf8>)
  40335e:	3101      	adds	r1, #1
  403360:	f7ff bba9 	b.w	402ab6 <_vfiprintf_r+0x2de>
  403364:	2c06      	cmp	r4, #6
  403366:	bf28      	it	cs
  403368:	2406      	movcs	r4, #6
  40336a:	9405      	str	r4, [sp, #20]
  40336c:	9608      	str	r6, [sp, #32]
  40336e:	9402      	str	r4, [sp, #8]
  403370:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4033d4 <_vfiprintf_r+0xbfc>
  403374:	e493      	b.n	402c9e <_vfiprintf_r+0x4c6>
  403376:	9810      	ldr	r0, [sp, #64]	; 0x40
  403378:	4e15      	ldr	r6, [pc, #84]	; (4033d0 <_vfiprintf_r+0xbf8>)
  40337a:	3001      	adds	r0, #1
  40337c:	e443      	b.n	402c06 <_vfiprintf_r+0x42e>
  40337e:	4686      	mov	lr, r0
  403380:	f7ff bbef 	b.w	402b62 <_vfiprintf_r+0x38a>
  403384:	9405      	str	r4, [sp, #20]
  403386:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40338a:	9608      	str	r6, [sp, #32]
  40338c:	9303      	str	r3, [sp, #12]
  40338e:	4604      	mov	r4, r0
  403390:	f7ff bb4c 	b.w	402a2c <_vfiprintf_r+0x254>
  403394:	9908      	ldr	r1, [sp, #32]
  403396:	f899 2001 	ldrb.w	r2, [r9, #1]
  40339a:	680c      	ldr	r4, [r1, #0]
  40339c:	3104      	adds	r1, #4
  40339e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4033a2:	46b9      	mov	r9, r7
  4033a4:	9108      	str	r1, [sp, #32]
  4033a6:	f7ff ba7e 	b.w	4028a6 <_vfiprintf_r+0xce>
  4033aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4033ae:	e4c6      	b.n	402d3e <_vfiprintf_r+0x566>
  4033b0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4033b4:	e47a      	b.n	402cac <_vfiprintf_r+0x4d4>
  4033b6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4033ba:	e575      	b.n	402ea8 <_vfiprintf_r+0x6d0>
  4033bc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4033c0:	e4d0      	b.n	402d64 <_vfiprintf_r+0x58c>
  4033c2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4033c6:	e587      	b.n	402ed8 <_vfiprintf_r+0x700>
  4033c8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4033cc:	e522      	b.n	402e14 <_vfiprintf_r+0x63c>
  4033ce:	bf00      	nop
  4033d0:	00405368 	.word	0x00405368
  4033d4:	00405360 	.word	0x00405360

004033d8 <__sbprintf>:
  4033d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033da:	460c      	mov	r4, r1
  4033dc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  4033e0:	8989      	ldrh	r1, [r1, #12]
  4033e2:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4033e4:	89e5      	ldrh	r5, [r4, #14]
  4033e6:	9619      	str	r6, [sp, #100]	; 0x64
  4033e8:	f021 0102 	bic.w	r1, r1, #2
  4033ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4033ee:	f8ad 500e 	strh.w	r5, [sp, #14]
  4033f2:	2500      	movs	r5, #0
  4033f4:	69e7      	ldr	r7, [r4, #28]
  4033f6:	f8ad 100c 	strh.w	r1, [sp, #12]
  4033fa:	9609      	str	r6, [sp, #36]	; 0x24
  4033fc:	9506      	str	r5, [sp, #24]
  4033fe:	ae1a      	add	r6, sp, #104	; 0x68
  403400:	f44f 6580 	mov.w	r5, #1024	; 0x400
  403404:	4669      	mov	r1, sp
  403406:	9600      	str	r6, [sp, #0]
  403408:	9604      	str	r6, [sp, #16]
  40340a:	9502      	str	r5, [sp, #8]
  40340c:	9505      	str	r5, [sp, #20]
  40340e:	9707      	str	r7, [sp, #28]
  403410:	4606      	mov	r6, r0
  403412:	f7ff f9e1 	bl	4027d8 <_vfiprintf_r>
  403416:	1e05      	subs	r5, r0, #0
  403418:	db07      	blt.n	40342a <__sbprintf+0x52>
  40341a:	4630      	mov	r0, r6
  40341c:	4669      	mov	r1, sp
  40341e:	f000 f925 	bl	40366c <_fflush_r>
  403422:	2800      	cmp	r0, #0
  403424:	bf18      	it	ne
  403426:	f04f 35ff 	movne.w	r5, #4294967295
  40342a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40342e:	065b      	lsls	r3, r3, #25
  403430:	d503      	bpl.n	40343a <__sbprintf+0x62>
  403432:	89a3      	ldrh	r3, [r4, #12]
  403434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403438:	81a3      	strh	r3, [r4, #12]
  40343a:	4628      	mov	r0, r5
  40343c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  403440:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403442:	bf00      	nop

00403444 <__swsetup_r>:
  403444:	b538      	push	{r3, r4, r5, lr}
  403446:	4b30      	ldr	r3, [pc, #192]	; (403508 <__swsetup_r+0xc4>)
  403448:	681b      	ldr	r3, [r3, #0]
  40344a:	4605      	mov	r5, r0
  40344c:	460c      	mov	r4, r1
  40344e:	b113      	cbz	r3, 403456 <__swsetup_r+0x12>
  403450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403452:	2a00      	cmp	r2, #0
  403454:	d038      	beq.n	4034c8 <__swsetup_r+0x84>
  403456:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40345a:	b293      	uxth	r3, r2
  40345c:	0718      	lsls	r0, r3, #28
  40345e:	d50c      	bpl.n	40347a <__swsetup_r+0x36>
  403460:	6920      	ldr	r0, [r4, #16]
  403462:	b1a8      	cbz	r0, 403490 <__swsetup_r+0x4c>
  403464:	f013 0201 	ands.w	r2, r3, #1
  403468:	d01e      	beq.n	4034a8 <__swsetup_r+0x64>
  40346a:	6963      	ldr	r3, [r4, #20]
  40346c:	2200      	movs	r2, #0
  40346e:	425b      	negs	r3, r3
  403470:	61a3      	str	r3, [r4, #24]
  403472:	60a2      	str	r2, [r4, #8]
  403474:	b1f0      	cbz	r0, 4034b4 <__swsetup_r+0x70>
  403476:	2000      	movs	r0, #0
  403478:	bd38      	pop	{r3, r4, r5, pc}
  40347a:	06d9      	lsls	r1, r3, #27
  40347c:	d53c      	bpl.n	4034f8 <__swsetup_r+0xb4>
  40347e:	0758      	lsls	r0, r3, #29
  403480:	d426      	bmi.n	4034d0 <__swsetup_r+0x8c>
  403482:	6920      	ldr	r0, [r4, #16]
  403484:	f042 0308 	orr.w	r3, r2, #8
  403488:	81a3      	strh	r3, [r4, #12]
  40348a:	b29b      	uxth	r3, r3
  40348c:	2800      	cmp	r0, #0
  40348e:	d1e9      	bne.n	403464 <__swsetup_r+0x20>
  403490:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403494:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403498:	d0e4      	beq.n	403464 <__swsetup_r+0x20>
  40349a:	4628      	mov	r0, r5
  40349c:	4621      	mov	r1, r4
  40349e:	f000 fd13 	bl	403ec8 <__smakebuf_r>
  4034a2:	89a3      	ldrh	r3, [r4, #12]
  4034a4:	6920      	ldr	r0, [r4, #16]
  4034a6:	e7dd      	b.n	403464 <__swsetup_r+0x20>
  4034a8:	0799      	lsls	r1, r3, #30
  4034aa:	bf58      	it	pl
  4034ac:	6962      	ldrpl	r2, [r4, #20]
  4034ae:	60a2      	str	r2, [r4, #8]
  4034b0:	2800      	cmp	r0, #0
  4034b2:	d1e0      	bne.n	403476 <__swsetup_r+0x32>
  4034b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4034b8:	061a      	lsls	r2, r3, #24
  4034ba:	d5dd      	bpl.n	403478 <__swsetup_r+0x34>
  4034bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4034c0:	81a3      	strh	r3, [r4, #12]
  4034c2:	f04f 30ff 	mov.w	r0, #4294967295
  4034c6:	bd38      	pop	{r3, r4, r5, pc}
  4034c8:	4618      	mov	r0, r3
  4034ca:	f000 f963 	bl	403794 <__sinit>
  4034ce:	e7c2      	b.n	403456 <__swsetup_r+0x12>
  4034d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4034d2:	b151      	cbz	r1, 4034ea <__swsetup_r+0xa6>
  4034d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4034d8:	4299      	cmp	r1, r3
  4034da:	d004      	beq.n	4034e6 <__swsetup_r+0xa2>
  4034dc:	4628      	mov	r0, r5
  4034de:	f000 fa2f 	bl	403940 <_free_r>
  4034e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4034e6:	2300      	movs	r3, #0
  4034e8:	6323      	str	r3, [r4, #48]	; 0x30
  4034ea:	2300      	movs	r3, #0
  4034ec:	6920      	ldr	r0, [r4, #16]
  4034ee:	6063      	str	r3, [r4, #4]
  4034f0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4034f4:	6020      	str	r0, [r4, #0]
  4034f6:	e7c5      	b.n	403484 <__swsetup_r+0x40>
  4034f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4034fc:	2309      	movs	r3, #9
  4034fe:	602b      	str	r3, [r5, #0]
  403500:	f04f 30ff 	mov.w	r0, #4294967295
  403504:	81a2      	strh	r2, [r4, #12]
  403506:	bd38      	pop	{r3, r4, r5, pc}
  403508:	2040001c 	.word	0x2040001c

0040350c <register_fini>:
  40350c:	4b02      	ldr	r3, [pc, #8]	; (403518 <register_fini+0xc>)
  40350e:	b113      	cbz	r3, 403516 <register_fini+0xa>
  403510:	4802      	ldr	r0, [pc, #8]	; (40351c <register_fini+0x10>)
  403512:	f000 b805 	b.w	403520 <atexit>
  403516:	4770      	bx	lr
  403518:	00000000 	.word	0x00000000
  40351c:	004037a9 	.word	0x004037a9

00403520 <atexit>:
  403520:	2300      	movs	r3, #0
  403522:	4601      	mov	r1, r0
  403524:	461a      	mov	r2, r3
  403526:	4618      	mov	r0, r3
  403528:	f001 bc5e 	b.w	404de8 <__register_exitproc>

0040352c <__sflush_r>:
  40352c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403530:	b29a      	uxth	r2, r3
  403532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403536:	460d      	mov	r5, r1
  403538:	0711      	lsls	r1, r2, #28
  40353a:	4680      	mov	r8, r0
  40353c:	d43a      	bmi.n	4035b4 <__sflush_r+0x88>
  40353e:	686a      	ldr	r2, [r5, #4]
  403540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403544:	2a00      	cmp	r2, #0
  403546:	81ab      	strh	r3, [r5, #12]
  403548:	dd6f      	ble.n	40362a <__sflush_r+0xfe>
  40354a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40354c:	2c00      	cmp	r4, #0
  40354e:	d049      	beq.n	4035e4 <__sflush_r+0xb8>
  403550:	2200      	movs	r2, #0
  403552:	b29b      	uxth	r3, r3
  403554:	f8d8 6000 	ldr.w	r6, [r8]
  403558:	f8c8 2000 	str.w	r2, [r8]
  40355c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403560:	d067      	beq.n	403632 <__sflush_r+0x106>
  403562:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403564:	075f      	lsls	r7, r3, #29
  403566:	d505      	bpl.n	403574 <__sflush_r+0x48>
  403568:	6869      	ldr	r1, [r5, #4]
  40356a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40356c:	1a52      	subs	r2, r2, r1
  40356e:	b10b      	cbz	r3, 403574 <__sflush_r+0x48>
  403570:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403572:	1ad2      	subs	r2, r2, r3
  403574:	2300      	movs	r3, #0
  403576:	69e9      	ldr	r1, [r5, #28]
  403578:	4640      	mov	r0, r8
  40357a:	47a0      	blx	r4
  40357c:	1c44      	adds	r4, r0, #1
  40357e:	d03c      	beq.n	4035fa <__sflush_r+0xce>
  403580:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403584:	692a      	ldr	r2, [r5, #16]
  403586:	602a      	str	r2, [r5, #0]
  403588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40358c:	2200      	movs	r2, #0
  40358e:	81ab      	strh	r3, [r5, #12]
  403590:	04db      	lsls	r3, r3, #19
  403592:	606a      	str	r2, [r5, #4]
  403594:	d447      	bmi.n	403626 <__sflush_r+0xfa>
  403596:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403598:	f8c8 6000 	str.w	r6, [r8]
  40359c:	b311      	cbz	r1, 4035e4 <__sflush_r+0xb8>
  40359e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4035a2:	4299      	cmp	r1, r3
  4035a4:	d002      	beq.n	4035ac <__sflush_r+0x80>
  4035a6:	4640      	mov	r0, r8
  4035a8:	f000 f9ca 	bl	403940 <_free_r>
  4035ac:	2000      	movs	r0, #0
  4035ae:	6328      	str	r0, [r5, #48]	; 0x30
  4035b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4035b4:	692e      	ldr	r6, [r5, #16]
  4035b6:	b1ae      	cbz	r6, 4035e4 <__sflush_r+0xb8>
  4035b8:	682c      	ldr	r4, [r5, #0]
  4035ba:	602e      	str	r6, [r5, #0]
  4035bc:	0791      	lsls	r1, r2, #30
  4035be:	bf0c      	ite	eq
  4035c0:	696b      	ldreq	r3, [r5, #20]
  4035c2:	2300      	movne	r3, #0
  4035c4:	1ba4      	subs	r4, r4, r6
  4035c6:	60ab      	str	r3, [r5, #8]
  4035c8:	e00a      	b.n	4035e0 <__sflush_r+0xb4>
  4035ca:	4623      	mov	r3, r4
  4035cc:	4632      	mov	r2, r6
  4035ce:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4035d0:	69e9      	ldr	r1, [r5, #28]
  4035d2:	4640      	mov	r0, r8
  4035d4:	47b8      	blx	r7
  4035d6:	2800      	cmp	r0, #0
  4035d8:	eba4 0400 	sub.w	r4, r4, r0
  4035dc:	4406      	add	r6, r0
  4035de:	dd04      	ble.n	4035ea <__sflush_r+0xbe>
  4035e0:	2c00      	cmp	r4, #0
  4035e2:	dcf2      	bgt.n	4035ca <__sflush_r+0x9e>
  4035e4:	2000      	movs	r0, #0
  4035e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4035ea:	89ab      	ldrh	r3, [r5, #12]
  4035ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4035f0:	81ab      	strh	r3, [r5, #12]
  4035f2:	f04f 30ff 	mov.w	r0, #4294967295
  4035f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4035fa:	f8d8 4000 	ldr.w	r4, [r8]
  4035fe:	2c1d      	cmp	r4, #29
  403600:	d8f3      	bhi.n	4035ea <__sflush_r+0xbe>
  403602:	4b19      	ldr	r3, [pc, #100]	; (403668 <__sflush_r+0x13c>)
  403604:	40e3      	lsrs	r3, r4
  403606:	43db      	mvns	r3, r3
  403608:	f013 0301 	ands.w	r3, r3, #1
  40360c:	d1ed      	bne.n	4035ea <__sflush_r+0xbe>
  40360e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403612:	606b      	str	r3, [r5, #4]
  403614:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403618:	6929      	ldr	r1, [r5, #16]
  40361a:	81ab      	strh	r3, [r5, #12]
  40361c:	04da      	lsls	r2, r3, #19
  40361e:	6029      	str	r1, [r5, #0]
  403620:	d5b9      	bpl.n	403596 <__sflush_r+0x6a>
  403622:	2c00      	cmp	r4, #0
  403624:	d1b7      	bne.n	403596 <__sflush_r+0x6a>
  403626:	6528      	str	r0, [r5, #80]	; 0x50
  403628:	e7b5      	b.n	403596 <__sflush_r+0x6a>
  40362a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40362c:	2a00      	cmp	r2, #0
  40362e:	dc8c      	bgt.n	40354a <__sflush_r+0x1e>
  403630:	e7d8      	b.n	4035e4 <__sflush_r+0xb8>
  403632:	2301      	movs	r3, #1
  403634:	69e9      	ldr	r1, [r5, #28]
  403636:	4640      	mov	r0, r8
  403638:	47a0      	blx	r4
  40363a:	1c43      	adds	r3, r0, #1
  40363c:	4602      	mov	r2, r0
  40363e:	d002      	beq.n	403646 <__sflush_r+0x11a>
  403640:	89ab      	ldrh	r3, [r5, #12]
  403642:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403644:	e78e      	b.n	403564 <__sflush_r+0x38>
  403646:	f8d8 3000 	ldr.w	r3, [r8]
  40364a:	2b00      	cmp	r3, #0
  40364c:	d0f8      	beq.n	403640 <__sflush_r+0x114>
  40364e:	2b1d      	cmp	r3, #29
  403650:	d001      	beq.n	403656 <__sflush_r+0x12a>
  403652:	2b16      	cmp	r3, #22
  403654:	d102      	bne.n	40365c <__sflush_r+0x130>
  403656:	f8c8 6000 	str.w	r6, [r8]
  40365a:	e7c3      	b.n	4035e4 <__sflush_r+0xb8>
  40365c:	89ab      	ldrh	r3, [r5, #12]
  40365e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403662:	81ab      	strh	r3, [r5, #12]
  403664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403668:	20400001 	.word	0x20400001

0040366c <_fflush_r>:
  40366c:	b510      	push	{r4, lr}
  40366e:	4604      	mov	r4, r0
  403670:	b082      	sub	sp, #8
  403672:	b108      	cbz	r0, 403678 <_fflush_r+0xc>
  403674:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403676:	b153      	cbz	r3, 40368e <_fflush_r+0x22>
  403678:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40367c:	b908      	cbnz	r0, 403682 <_fflush_r+0x16>
  40367e:	b002      	add	sp, #8
  403680:	bd10      	pop	{r4, pc}
  403682:	4620      	mov	r0, r4
  403684:	b002      	add	sp, #8
  403686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40368a:	f7ff bf4f 	b.w	40352c <__sflush_r>
  40368e:	9101      	str	r1, [sp, #4]
  403690:	f000 f880 	bl	403794 <__sinit>
  403694:	9901      	ldr	r1, [sp, #4]
  403696:	e7ef      	b.n	403678 <_fflush_r+0xc>

00403698 <_cleanup_r>:
  403698:	4901      	ldr	r1, [pc, #4]	; (4036a0 <_cleanup_r+0x8>)
  40369a:	f000 bbaf 	b.w	403dfc <_fwalk_reent>
  40369e:	bf00      	nop
  4036a0:	00404eb1 	.word	0x00404eb1

004036a4 <__sinit.part.1>:
  4036a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036a8:	4b35      	ldr	r3, [pc, #212]	; (403780 <__sinit.part.1+0xdc>)
  4036aa:	6845      	ldr	r5, [r0, #4]
  4036ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  4036ae:	2400      	movs	r4, #0
  4036b0:	4607      	mov	r7, r0
  4036b2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4036b6:	2304      	movs	r3, #4
  4036b8:	2103      	movs	r1, #3
  4036ba:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4036be:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4036c2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4036c6:	b083      	sub	sp, #12
  4036c8:	602c      	str	r4, [r5, #0]
  4036ca:	606c      	str	r4, [r5, #4]
  4036cc:	60ac      	str	r4, [r5, #8]
  4036ce:	666c      	str	r4, [r5, #100]	; 0x64
  4036d0:	81ec      	strh	r4, [r5, #14]
  4036d2:	612c      	str	r4, [r5, #16]
  4036d4:	616c      	str	r4, [r5, #20]
  4036d6:	61ac      	str	r4, [r5, #24]
  4036d8:	81ab      	strh	r3, [r5, #12]
  4036da:	4621      	mov	r1, r4
  4036dc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4036e0:	2208      	movs	r2, #8
  4036e2:	f7fe ff3d 	bl	402560 <memset>
  4036e6:	68be      	ldr	r6, [r7, #8]
  4036e8:	f8df b098 	ldr.w	fp, [pc, #152]	; 403784 <__sinit.part.1+0xe0>
  4036ec:	f8df a098 	ldr.w	sl, [pc, #152]	; 403788 <__sinit.part.1+0xe4>
  4036f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40378c <__sinit.part.1+0xe8>
  4036f4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403790 <__sinit.part.1+0xec>
  4036f8:	f8c5 b020 	str.w	fp, [r5, #32]
  4036fc:	2301      	movs	r3, #1
  4036fe:	2209      	movs	r2, #9
  403700:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403704:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403708:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40370c:	61ed      	str	r5, [r5, #28]
  40370e:	4621      	mov	r1, r4
  403710:	81f3      	strh	r3, [r6, #14]
  403712:	81b2      	strh	r2, [r6, #12]
  403714:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  403718:	6034      	str	r4, [r6, #0]
  40371a:	6074      	str	r4, [r6, #4]
  40371c:	60b4      	str	r4, [r6, #8]
  40371e:	6674      	str	r4, [r6, #100]	; 0x64
  403720:	6134      	str	r4, [r6, #16]
  403722:	6174      	str	r4, [r6, #20]
  403724:	61b4      	str	r4, [r6, #24]
  403726:	2208      	movs	r2, #8
  403728:	9301      	str	r3, [sp, #4]
  40372a:	f7fe ff19 	bl	402560 <memset>
  40372e:	68fd      	ldr	r5, [r7, #12]
  403730:	61f6      	str	r6, [r6, #28]
  403732:	2012      	movs	r0, #18
  403734:	2202      	movs	r2, #2
  403736:	f8c6 b020 	str.w	fp, [r6, #32]
  40373a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40373e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  403742:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  403746:	4621      	mov	r1, r4
  403748:	81a8      	strh	r0, [r5, #12]
  40374a:	81ea      	strh	r2, [r5, #14]
  40374c:	602c      	str	r4, [r5, #0]
  40374e:	606c      	str	r4, [r5, #4]
  403750:	60ac      	str	r4, [r5, #8]
  403752:	666c      	str	r4, [r5, #100]	; 0x64
  403754:	612c      	str	r4, [r5, #16]
  403756:	616c      	str	r4, [r5, #20]
  403758:	61ac      	str	r4, [r5, #24]
  40375a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40375e:	2208      	movs	r2, #8
  403760:	f7fe fefe 	bl	402560 <memset>
  403764:	9b01      	ldr	r3, [sp, #4]
  403766:	61ed      	str	r5, [r5, #28]
  403768:	f8c5 b020 	str.w	fp, [r5, #32]
  40376c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403770:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403774:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403778:	63bb      	str	r3, [r7, #56]	; 0x38
  40377a:	b003      	add	sp, #12
  40377c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403780:	00403699 	.word	0x00403699
  403784:	00404b05 	.word	0x00404b05
  403788:	00404b29 	.word	0x00404b29
  40378c:	00404b65 	.word	0x00404b65
  403790:	00404b85 	.word	0x00404b85

00403794 <__sinit>:
  403794:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403796:	b103      	cbz	r3, 40379a <__sinit+0x6>
  403798:	4770      	bx	lr
  40379a:	f7ff bf83 	b.w	4036a4 <__sinit.part.1>
  40379e:	bf00      	nop

004037a0 <__sfp_lock_acquire>:
  4037a0:	4770      	bx	lr
  4037a2:	bf00      	nop

004037a4 <__sfp_lock_release>:
  4037a4:	4770      	bx	lr
  4037a6:	bf00      	nop

004037a8 <__libc_fini_array>:
  4037a8:	b538      	push	{r3, r4, r5, lr}
  4037aa:	4c0a      	ldr	r4, [pc, #40]	; (4037d4 <__libc_fini_array+0x2c>)
  4037ac:	4d0a      	ldr	r5, [pc, #40]	; (4037d8 <__libc_fini_array+0x30>)
  4037ae:	1b64      	subs	r4, r4, r5
  4037b0:	10a4      	asrs	r4, r4, #2
  4037b2:	d00a      	beq.n	4037ca <__libc_fini_array+0x22>
  4037b4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4037b8:	3b01      	subs	r3, #1
  4037ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4037be:	3c01      	subs	r4, #1
  4037c0:	f855 3904 	ldr.w	r3, [r5], #-4
  4037c4:	4798      	blx	r3
  4037c6:	2c00      	cmp	r4, #0
  4037c8:	d1f9      	bne.n	4037be <__libc_fini_array+0x16>
  4037ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4037ce:	f001 be6f 	b.w	4054b0 <_fini>
  4037d2:	bf00      	nop
  4037d4:	004054c0 	.word	0x004054c0
  4037d8:	004054bc 	.word	0x004054bc

004037dc <__fputwc>:
  4037dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4037e0:	b082      	sub	sp, #8
  4037e2:	4680      	mov	r8, r0
  4037e4:	4689      	mov	r9, r1
  4037e6:	4614      	mov	r4, r2
  4037e8:	f000 fb32 	bl	403e50 <__locale_mb_cur_max>
  4037ec:	2801      	cmp	r0, #1
  4037ee:	d036      	beq.n	40385e <__fputwc+0x82>
  4037f0:	464a      	mov	r2, r9
  4037f2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4037f6:	a901      	add	r1, sp, #4
  4037f8:	4640      	mov	r0, r8
  4037fa:	f001 faa7 	bl	404d4c <_wcrtomb_r>
  4037fe:	1c42      	adds	r2, r0, #1
  403800:	4606      	mov	r6, r0
  403802:	d025      	beq.n	403850 <__fputwc+0x74>
  403804:	b3a8      	cbz	r0, 403872 <__fputwc+0x96>
  403806:	f89d e004 	ldrb.w	lr, [sp, #4]
  40380a:	2500      	movs	r5, #0
  40380c:	f10d 0a04 	add.w	sl, sp, #4
  403810:	e009      	b.n	403826 <__fputwc+0x4a>
  403812:	6823      	ldr	r3, [r4, #0]
  403814:	1c5a      	adds	r2, r3, #1
  403816:	6022      	str	r2, [r4, #0]
  403818:	f883 e000 	strb.w	lr, [r3]
  40381c:	3501      	adds	r5, #1
  40381e:	42b5      	cmp	r5, r6
  403820:	d227      	bcs.n	403872 <__fputwc+0x96>
  403822:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403826:	68a3      	ldr	r3, [r4, #8]
  403828:	3b01      	subs	r3, #1
  40382a:	2b00      	cmp	r3, #0
  40382c:	60a3      	str	r3, [r4, #8]
  40382e:	daf0      	bge.n	403812 <__fputwc+0x36>
  403830:	69a7      	ldr	r7, [r4, #24]
  403832:	42bb      	cmp	r3, r7
  403834:	4671      	mov	r1, lr
  403836:	4622      	mov	r2, r4
  403838:	4640      	mov	r0, r8
  40383a:	db02      	blt.n	403842 <__fputwc+0x66>
  40383c:	f1be 0f0a 	cmp.w	lr, #10
  403840:	d1e7      	bne.n	403812 <__fputwc+0x36>
  403842:	f001 fa2b 	bl	404c9c <__swbuf_r>
  403846:	1c43      	adds	r3, r0, #1
  403848:	d1e8      	bne.n	40381c <__fputwc+0x40>
  40384a:	b002      	add	sp, #8
  40384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403850:	89a3      	ldrh	r3, [r4, #12]
  403852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403856:	81a3      	strh	r3, [r4, #12]
  403858:	b002      	add	sp, #8
  40385a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40385e:	f109 33ff 	add.w	r3, r9, #4294967295
  403862:	2bfe      	cmp	r3, #254	; 0xfe
  403864:	d8c4      	bhi.n	4037f0 <__fputwc+0x14>
  403866:	fa5f fe89 	uxtb.w	lr, r9
  40386a:	4606      	mov	r6, r0
  40386c:	f88d e004 	strb.w	lr, [sp, #4]
  403870:	e7cb      	b.n	40380a <__fputwc+0x2e>
  403872:	4648      	mov	r0, r9
  403874:	b002      	add	sp, #8
  403876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40387a:	bf00      	nop

0040387c <_fputwc_r>:
  40387c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403880:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403884:	d10a      	bne.n	40389c <_fputwc_r+0x20>
  403886:	b410      	push	{r4}
  403888:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40388a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40388e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  403892:	6654      	str	r4, [r2, #100]	; 0x64
  403894:	8193      	strh	r3, [r2, #12]
  403896:	bc10      	pop	{r4}
  403898:	f7ff bfa0 	b.w	4037dc <__fputwc>
  40389c:	f7ff bf9e 	b.w	4037dc <__fputwc>

004038a0 <_malloc_trim_r>:
  4038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4038a2:	4f24      	ldr	r7, [pc, #144]	; (403934 <_malloc_trim_r+0x94>)
  4038a4:	460c      	mov	r4, r1
  4038a6:	4606      	mov	r6, r0
  4038a8:	f000 ff70 	bl	40478c <__malloc_lock>
  4038ac:	68bb      	ldr	r3, [r7, #8]
  4038ae:	685d      	ldr	r5, [r3, #4]
  4038b0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4038b4:	310f      	adds	r1, #15
  4038b6:	f025 0503 	bic.w	r5, r5, #3
  4038ba:	4429      	add	r1, r5
  4038bc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4038c0:	f021 010f 	bic.w	r1, r1, #15
  4038c4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4038c8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4038cc:	db07      	blt.n	4038de <_malloc_trim_r+0x3e>
  4038ce:	2100      	movs	r1, #0
  4038d0:	4630      	mov	r0, r6
  4038d2:	f001 f905 	bl	404ae0 <_sbrk_r>
  4038d6:	68bb      	ldr	r3, [r7, #8]
  4038d8:	442b      	add	r3, r5
  4038da:	4298      	cmp	r0, r3
  4038dc:	d004      	beq.n	4038e8 <_malloc_trim_r+0x48>
  4038de:	4630      	mov	r0, r6
  4038e0:	f000 ff56 	bl	404790 <__malloc_unlock>
  4038e4:	2000      	movs	r0, #0
  4038e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4038e8:	4261      	negs	r1, r4
  4038ea:	4630      	mov	r0, r6
  4038ec:	f001 f8f8 	bl	404ae0 <_sbrk_r>
  4038f0:	3001      	adds	r0, #1
  4038f2:	d00d      	beq.n	403910 <_malloc_trim_r+0x70>
  4038f4:	4b10      	ldr	r3, [pc, #64]	; (403938 <_malloc_trim_r+0x98>)
  4038f6:	68ba      	ldr	r2, [r7, #8]
  4038f8:	6819      	ldr	r1, [r3, #0]
  4038fa:	1b2d      	subs	r5, r5, r4
  4038fc:	f045 0501 	orr.w	r5, r5, #1
  403900:	4630      	mov	r0, r6
  403902:	1b09      	subs	r1, r1, r4
  403904:	6055      	str	r5, [r2, #4]
  403906:	6019      	str	r1, [r3, #0]
  403908:	f000 ff42 	bl	404790 <__malloc_unlock>
  40390c:	2001      	movs	r0, #1
  40390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403910:	2100      	movs	r1, #0
  403912:	4630      	mov	r0, r6
  403914:	f001 f8e4 	bl	404ae0 <_sbrk_r>
  403918:	68ba      	ldr	r2, [r7, #8]
  40391a:	1a83      	subs	r3, r0, r2
  40391c:	2b0f      	cmp	r3, #15
  40391e:	ddde      	ble.n	4038de <_malloc_trim_r+0x3e>
  403920:	4c06      	ldr	r4, [pc, #24]	; (40393c <_malloc_trim_r+0x9c>)
  403922:	4905      	ldr	r1, [pc, #20]	; (403938 <_malloc_trim_r+0x98>)
  403924:	6824      	ldr	r4, [r4, #0]
  403926:	f043 0301 	orr.w	r3, r3, #1
  40392a:	1b00      	subs	r0, r0, r4
  40392c:	6053      	str	r3, [r2, #4]
  40392e:	6008      	str	r0, [r1, #0]
  403930:	e7d5      	b.n	4038de <_malloc_trim_r+0x3e>
  403932:	bf00      	nop
  403934:	204005b4 	.word	0x204005b4
  403938:	20400a7c 	.word	0x20400a7c
  40393c:	204009bc 	.word	0x204009bc

00403940 <_free_r>:
  403940:	2900      	cmp	r1, #0
  403942:	d044      	beq.n	4039ce <_free_r+0x8e>
  403944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403948:	460d      	mov	r5, r1
  40394a:	4680      	mov	r8, r0
  40394c:	f000 ff1e 	bl	40478c <__malloc_lock>
  403950:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403954:	4969      	ldr	r1, [pc, #420]	; (403afc <_free_r+0x1bc>)
  403956:	f027 0301 	bic.w	r3, r7, #1
  40395a:	f1a5 0408 	sub.w	r4, r5, #8
  40395e:	18e2      	adds	r2, r4, r3
  403960:	688e      	ldr	r6, [r1, #8]
  403962:	6850      	ldr	r0, [r2, #4]
  403964:	42b2      	cmp	r2, r6
  403966:	f020 0003 	bic.w	r0, r0, #3
  40396a:	d05e      	beq.n	403a2a <_free_r+0xea>
  40396c:	07fe      	lsls	r6, r7, #31
  40396e:	6050      	str	r0, [r2, #4]
  403970:	d40b      	bmi.n	40398a <_free_r+0x4a>
  403972:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403976:	1be4      	subs	r4, r4, r7
  403978:	f101 0e08 	add.w	lr, r1, #8
  40397c:	68a5      	ldr	r5, [r4, #8]
  40397e:	4575      	cmp	r5, lr
  403980:	443b      	add	r3, r7
  403982:	d06d      	beq.n	403a60 <_free_r+0x120>
  403984:	68e7      	ldr	r7, [r4, #12]
  403986:	60ef      	str	r7, [r5, #12]
  403988:	60bd      	str	r5, [r7, #8]
  40398a:	1815      	adds	r5, r2, r0
  40398c:	686d      	ldr	r5, [r5, #4]
  40398e:	07ed      	lsls	r5, r5, #31
  403990:	d53e      	bpl.n	403a10 <_free_r+0xd0>
  403992:	f043 0201 	orr.w	r2, r3, #1
  403996:	6062      	str	r2, [r4, #4]
  403998:	50e3      	str	r3, [r4, r3]
  40399a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40399e:	d217      	bcs.n	4039d0 <_free_r+0x90>
  4039a0:	08db      	lsrs	r3, r3, #3
  4039a2:	1c58      	adds	r0, r3, #1
  4039a4:	109a      	asrs	r2, r3, #2
  4039a6:	684d      	ldr	r5, [r1, #4]
  4039a8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4039ac:	60a7      	str	r7, [r4, #8]
  4039ae:	2301      	movs	r3, #1
  4039b0:	4093      	lsls	r3, r2
  4039b2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4039b6:	432b      	orrs	r3, r5
  4039b8:	3a08      	subs	r2, #8
  4039ba:	60e2      	str	r2, [r4, #12]
  4039bc:	604b      	str	r3, [r1, #4]
  4039be:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4039c2:	60fc      	str	r4, [r7, #12]
  4039c4:	4640      	mov	r0, r8
  4039c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4039ca:	f000 bee1 	b.w	404790 <__malloc_unlock>
  4039ce:	4770      	bx	lr
  4039d0:	0a5a      	lsrs	r2, r3, #9
  4039d2:	2a04      	cmp	r2, #4
  4039d4:	d852      	bhi.n	403a7c <_free_r+0x13c>
  4039d6:	099a      	lsrs	r2, r3, #6
  4039d8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4039dc:	00ff      	lsls	r7, r7, #3
  4039de:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4039e2:	19c8      	adds	r0, r1, r7
  4039e4:	59ca      	ldr	r2, [r1, r7]
  4039e6:	3808      	subs	r0, #8
  4039e8:	4290      	cmp	r0, r2
  4039ea:	d04f      	beq.n	403a8c <_free_r+0x14c>
  4039ec:	6851      	ldr	r1, [r2, #4]
  4039ee:	f021 0103 	bic.w	r1, r1, #3
  4039f2:	428b      	cmp	r3, r1
  4039f4:	d232      	bcs.n	403a5c <_free_r+0x11c>
  4039f6:	6892      	ldr	r2, [r2, #8]
  4039f8:	4290      	cmp	r0, r2
  4039fa:	d1f7      	bne.n	4039ec <_free_r+0xac>
  4039fc:	68c3      	ldr	r3, [r0, #12]
  4039fe:	60a0      	str	r0, [r4, #8]
  403a00:	60e3      	str	r3, [r4, #12]
  403a02:	609c      	str	r4, [r3, #8]
  403a04:	60c4      	str	r4, [r0, #12]
  403a06:	4640      	mov	r0, r8
  403a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403a0c:	f000 bec0 	b.w	404790 <__malloc_unlock>
  403a10:	6895      	ldr	r5, [r2, #8]
  403a12:	4f3b      	ldr	r7, [pc, #236]	; (403b00 <_free_r+0x1c0>)
  403a14:	42bd      	cmp	r5, r7
  403a16:	4403      	add	r3, r0
  403a18:	d040      	beq.n	403a9c <_free_r+0x15c>
  403a1a:	68d0      	ldr	r0, [r2, #12]
  403a1c:	60e8      	str	r0, [r5, #12]
  403a1e:	f043 0201 	orr.w	r2, r3, #1
  403a22:	6085      	str	r5, [r0, #8]
  403a24:	6062      	str	r2, [r4, #4]
  403a26:	50e3      	str	r3, [r4, r3]
  403a28:	e7b7      	b.n	40399a <_free_r+0x5a>
  403a2a:	07ff      	lsls	r7, r7, #31
  403a2c:	4403      	add	r3, r0
  403a2e:	d407      	bmi.n	403a40 <_free_r+0x100>
  403a30:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403a34:	1aa4      	subs	r4, r4, r2
  403a36:	4413      	add	r3, r2
  403a38:	68a0      	ldr	r0, [r4, #8]
  403a3a:	68e2      	ldr	r2, [r4, #12]
  403a3c:	60c2      	str	r2, [r0, #12]
  403a3e:	6090      	str	r0, [r2, #8]
  403a40:	4a30      	ldr	r2, [pc, #192]	; (403b04 <_free_r+0x1c4>)
  403a42:	6812      	ldr	r2, [r2, #0]
  403a44:	f043 0001 	orr.w	r0, r3, #1
  403a48:	4293      	cmp	r3, r2
  403a4a:	6060      	str	r0, [r4, #4]
  403a4c:	608c      	str	r4, [r1, #8]
  403a4e:	d3b9      	bcc.n	4039c4 <_free_r+0x84>
  403a50:	4b2d      	ldr	r3, [pc, #180]	; (403b08 <_free_r+0x1c8>)
  403a52:	4640      	mov	r0, r8
  403a54:	6819      	ldr	r1, [r3, #0]
  403a56:	f7ff ff23 	bl	4038a0 <_malloc_trim_r>
  403a5a:	e7b3      	b.n	4039c4 <_free_r+0x84>
  403a5c:	4610      	mov	r0, r2
  403a5e:	e7cd      	b.n	4039fc <_free_r+0xbc>
  403a60:	1811      	adds	r1, r2, r0
  403a62:	6849      	ldr	r1, [r1, #4]
  403a64:	07c9      	lsls	r1, r1, #31
  403a66:	d444      	bmi.n	403af2 <_free_r+0x1b2>
  403a68:	6891      	ldr	r1, [r2, #8]
  403a6a:	68d2      	ldr	r2, [r2, #12]
  403a6c:	60ca      	str	r2, [r1, #12]
  403a6e:	4403      	add	r3, r0
  403a70:	f043 0001 	orr.w	r0, r3, #1
  403a74:	6091      	str	r1, [r2, #8]
  403a76:	6060      	str	r0, [r4, #4]
  403a78:	50e3      	str	r3, [r4, r3]
  403a7a:	e7a3      	b.n	4039c4 <_free_r+0x84>
  403a7c:	2a14      	cmp	r2, #20
  403a7e:	d816      	bhi.n	403aae <_free_r+0x16e>
  403a80:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403a84:	00ff      	lsls	r7, r7, #3
  403a86:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403a8a:	e7aa      	b.n	4039e2 <_free_r+0xa2>
  403a8c:	10aa      	asrs	r2, r5, #2
  403a8e:	2301      	movs	r3, #1
  403a90:	684d      	ldr	r5, [r1, #4]
  403a92:	4093      	lsls	r3, r2
  403a94:	432b      	orrs	r3, r5
  403a96:	604b      	str	r3, [r1, #4]
  403a98:	4603      	mov	r3, r0
  403a9a:	e7b0      	b.n	4039fe <_free_r+0xbe>
  403a9c:	f043 0201 	orr.w	r2, r3, #1
  403aa0:	614c      	str	r4, [r1, #20]
  403aa2:	610c      	str	r4, [r1, #16]
  403aa4:	60e5      	str	r5, [r4, #12]
  403aa6:	60a5      	str	r5, [r4, #8]
  403aa8:	6062      	str	r2, [r4, #4]
  403aaa:	50e3      	str	r3, [r4, r3]
  403aac:	e78a      	b.n	4039c4 <_free_r+0x84>
  403aae:	2a54      	cmp	r2, #84	; 0x54
  403ab0:	d806      	bhi.n	403ac0 <_free_r+0x180>
  403ab2:	0b1a      	lsrs	r2, r3, #12
  403ab4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403ab8:	00ff      	lsls	r7, r7, #3
  403aba:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403abe:	e790      	b.n	4039e2 <_free_r+0xa2>
  403ac0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403ac4:	d806      	bhi.n	403ad4 <_free_r+0x194>
  403ac6:	0bda      	lsrs	r2, r3, #15
  403ac8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403acc:	00ff      	lsls	r7, r7, #3
  403ace:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403ad2:	e786      	b.n	4039e2 <_free_r+0xa2>
  403ad4:	f240 5054 	movw	r0, #1364	; 0x554
  403ad8:	4282      	cmp	r2, r0
  403ada:	d806      	bhi.n	403aea <_free_r+0x1aa>
  403adc:	0c9a      	lsrs	r2, r3, #18
  403ade:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403ae2:	00ff      	lsls	r7, r7, #3
  403ae4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403ae8:	e77b      	b.n	4039e2 <_free_r+0xa2>
  403aea:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403aee:	257e      	movs	r5, #126	; 0x7e
  403af0:	e777      	b.n	4039e2 <_free_r+0xa2>
  403af2:	f043 0101 	orr.w	r1, r3, #1
  403af6:	6061      	str	r1, [r4, #4]
  403af8:	6013      	str	r3, [r2, #0]
  403afa:	e763      	b.n	4039c4 <_free_r+0x84>
  403afc:	204005b4 	.word	0x204005b4
  403b00:	204005bc 	.word	0x204005bc
  403b04:	204009c0 	.word	0x204009c0
  403b08:	20400aac 	.word	0x20400aac

00403b0c <__sfvwrite_r>:
  403b0c:	6893      	ldr	r3, [r2, #8]
  403b0e:	2b00      	cmp	r3, #0
  403b10:	d073      	beq.n	403bfa <__sfvwrite_r+0xee>
  403b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b16:	898b      	ldrh	r3, [r1, #12]
  403b18:	b083      	sub	sp, #12
  403b1a:	460c      	mov	r4, r1
  403b1c:	0719      	lsls	r1, r3, #28
  403b1e:	9000      	str	r0, [sp, #0]
  403b20:	4616      	mov	r6, r2
  403b22:	d526      	bpl.n	403b72 <__sfvwrite_r+0x66>
  403b24:	6922      	ldr	r2, [r4, #16]
  403b26:	b322      	cbz	r2, 403b72 <__sfvwrite_r+0x66>
  403b28:	f013 0002 	ands.w	r0, r3, #2
  403b2c:	6835      	ldr	r5, [r6, #0]
  403b2e:	d02c      	beq.n	403b8a <__sfvwrite_r+0x7e>
  403b30:	f04f 0900 	mov.w	r9, #0
  403b34:	4fb0      	ldr	r7, [pc, #704]	; (403df8 <__sfvwrite_r+0x2ec>)
  403b36:	46c8      	mov	r8, r9
  403b38:	46b2      	mov	sl, r6
  403b3a:	45b8      	cmp	r8, r7
  403b3c:	4643      	mov	r3, r8
  403b3e:	464a      	mov	r2, r9
  403b40:	bf28      	it	cs
  403b42:	463b      	movcs	r3, r7
  403b44:	9800      	ldr	r0, [sp, #0]
  403b46:	f1b8 0f00 	cmp.w	r8, #0
  403b4a:	d050      	beq.n	403bee <__sfvwrite_r+0xe2>
  403b4c:	69e1      	ldr	r1, [r4, #28]
  403b4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403b50:	47b0      	blx	r6
  403b52:	2800      	cmp	r0, #0
  403b54:	dd58      	ble.n	403c08 <__sfvwrite_r+0xfc>
  403b56:	f8da 3008 	ldr.w	r3, [sl, #8]
  403b5a:	1a1b      	subs	r3, r3, r0
  403b5c:	4481      	add	r9, r0
  403b5e:	eba8 0800 	sub.w	r8, r8, r0
  403b62:	f8ca 3008 	str.w	r3, [sl, #8]
  403b66:	2b00      	cmp	r3, #0
  403b68:	d1e7      	bne.n	403b3a <__sfvwrite_r+0x2e>
  403b6a:	2000      	movs	r0, #0
  403b6c:	b003      	add	sp, #12
  403b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b72:	4621      	mov	r1, r4
  403b74:	9800      	ldr	r0, [sp, #0]
  403b76:	f7ff fc65 	bl	403444 <__swsetup_r>
  403b7a:	2800      	cmp	r0, #0
  403b7c:	f040 8133 	bne.w	403de6 <__sfvwrite_r+0x2da>
  403b80:	89a3      	ldrh	r3, [r4, #12]
  403b82:	6835      	ldr	r5, [r6, #0]
  403b84:	f013 0002 	ands.w	r0, r3, #2
  403b88:	d1d2      	bne.n	403b30 <__sfvwrite_r+0x24>
  403b8a:	f013 0901 	ands.w	r9, r3, #1
  403b8e:	d145      	bne.n	403c1c <__sfvwrite_r+0x110>
  403b90:	464f      	mov	r7, r9
  403b92:	9601      	str	r6, [sp, #4]
  403b94:	b337      	cbz	r7, 403be4 <__sfvwrite_r+0xd8>
  403b96:	059a      	lsls	r2, r3, #22
  403b98:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403b9c:	f140 8083 	bpl.w	403ca6 <__sfvwrite_r+0x19a>
  403ba0:	4547      	cmp	r7, r8
  403ba2:	46c3      	mov	fp, r8
  403ba4:	f0c0 80ab 	bcc.w	403cfe <__sfvwrite_r+0x1f2>
  403ba8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403bac:	f040 80ac 	bne.w	403d08 <__sfvwrite_r+0x1fc>
  403bb0:	6820      	ldr	r0, [r4, #0]
  403bb2:	46ba      	mov	sl, r7
  403bb4:	465a      	mov	r2, fp
  403bb6:	4649      	mov	r1, r9
  403bb8:	f000 fd84 	bl	4046c4 <memmove>
  403bbc:	68a2      	ldr	r2, [r4, #8]
  403bbe:	6823      	ldr	r3, [r4, #0]
  403bc0:	eba2 0208 	sub.w	r2, r2, r8
  403bc4:	445b      	add	r3, fp
  403bc6:	60a2      	str	r2, [r4, #8]
  403bc8:	6023      	str	r3, [r4, #0]
  403bca:	9a01      	ldr	r2, [sp, #4]
  403bcc:	6893      	ldr	r3, [r2, #8]
  403bce:	eba3 030a 	sub.w	r3, r3, sl
  403bd2:	44d1      	add	r9, sl
  403bd4:	eba7 070a 	sub.w	r7, r7, sl
  403bd8:	6093      	str	r3, [r2, #8]
  403bda:	2b00      	cmp	r3, #0
  403bdc:	d0c5      	beq.n	403b6a <__sfvwrite_r+0x5e>
  403bde:	89a3      	ldrh	r3, [r4, #12]
  403be0:	2f00      	cmp	r7, #0
  403be2:	d1d8      	bne.n	403b96 <__sfvwrite_r+0x8a>
  403be4:	f8d5 9000 	ldr.w	r9, [r5]
  403be8:	686f      	ldr	r7, [r5, #4]
  403bea:	3508      	adds	r5, #8
  403bec:	e7d2      	b.n	403b94 <__sfvwrite_r+0x88>
  403bee:	f8d5 9000 	ldr.w	r9, [r5]
  403bf2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403bf6:	3508      	adds	r5, #8
  403bf8:	e79f      	b.n	403b3a <__sfvwrite_r+0x2e>
  403bfa:	2000      	movs	r0, #0
  403bfc:	4770      	bx	lr
  403bfe:	4621      	mov	r1, r4
  403c00:	9800      	ldr	r0, [sp, #0]
  403c02:	f7ff fd33 	bl	40366c <_fflush_r>
  403c06:	b370      	cbz	r0, 403c66 <__sfvwrite_r+0x15a>
  403c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c10:	f04f 30ff 	mov.w	r0, #4294967295
  403c14:	81a3      	strh	r3, [r4, #12]
  403c16:	b003      	add	sp, #12
  403c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c1c:	4681      	mov	r9, r0
  403c1e:	4633      	mov	r3, r6
  403c20:	464e      	mov	r6, r9
  403c22:	46a8      	mov	r8, r5
  403c24:	469a      	mov	sl, r3
  403c26:	464d      	mov	r5, r9
  403c28:	b34e      	cbz	r6, 403c7e <__sfvwrite_r+0x172>
  403c2a:	b380      	cbz	r0, 403c8e <__sfvwrite_r+0x182>
  403c2c:	6820      	ldr	r0, [r4, #0]
  403c2e:	6923      	ldr	r3, [r4, #16]
  403c30:	6962      	ldr	r2, [r4, #20]
  403c32:	45b1      	cmp	r9, r6
  403c34:	46cb      	mov	fp, r9
  403c36:	bf28      	it	cs
  403c38:	46b3      	movcs	fp, r6
  403c3a:	4298      	cmp	r0, r3
  403c3c:	465f      	mov	r7, fp
  403c3e:	d904      	bls.n	403c4a <__sfvwrite_r+0x13e>
  403c40:	68a3      	ldr	r3, [r4, #8]
  403c42:	4413      	add	r3, r2
  403c44:	459b      	cmp	fp, r3
  403c46:	f300 80a6 	bgt.w	403d96 <__sfvwrite_r+0x28a>
  403c4a:	4593      	cmp	fp, r2
  403c4c:	db4b      	blt.n	403ce6 <__sfvwrite_r+0x1da>
  403c4e:	4613      	mov	r3, r2
  403c50:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403c52:	69e1      	ldr	r1, [r4, #28]
  403c54:	9800      	ldr	r0, [sp, #0]
  403c56:	462a      	mov	r2, r5
  403c58:	47b8      	blx	r7
  403c5a:	1e07      	subs	r7, r0, #0
  403c5c:	ddd4      	ble.n	403c08 <__sfvwrite_r+0xfc>
  403c5e:	ebb9 0907 	subs.w	r9, r9, r7
  403c62:	d0cc      	beq.n	403bfe <__sfvwrite_r+0xf2>
  403c64:	2001      	movs	r0, #1
  403c66:	f8da 3008 	ldr.w	r3, [sl, #8]
  403c6a:	1bdb      	subs	r3, r3, r7
  403c6c:	443d      	add	r5, r7
  403c6e:	1bf6      	subs	r6, r6, r7
  403c70:	f8ca 3008 	str.w	r3, [sl, #8]
  403c74:	2b00      	cmp	r3, #0
  403c76:	f43f af78 	beq.w	403b6a <__sfvwrite_r+0x5e>
  403c7a:	2e00      	cmp	r6, #0
  403c7c:	d1d5      	bne.n	403c2a <__sfvwrite_r+0x11e>
  403c7e:	f108 0308 	add.w	r3, r8, #8
  403c82:	e913 0060 	ldmdb	r3, {r5, r6}
  403c86:	4698      	mov	r8, r3
  403c88:	3308      	adds	r3, #8
  403c8a:	2e00      	cmp	r6, #0
  403c8c:	d0f9      	beq.n	403c82 <__sfvwrite_r+0x176>
  403c8e:	4632      	mov	r2, r6
  403c90:	210a      	movs	r1, #10
  403c92:	4628      	mov	r0, r5
  403c94:	f000 fc2c 	bl	4044f0 <memchr>
  403c98:	2800      	cmp	r0, #0
  403c9a:	f000 80a1 	beq.w	403de0 <__sfvwrite_r+0x2d4>
  403c9e:	3001      	adds	r0, #1
  403ca0:	eba0 0905 	sub.w	r9, r0, r5
  403ca4:	e7c2      	b.n	403c2c <__sfvwrite_r+0x120>
  403ca6:	6820      	ldr	r0, [r4, #0]
  403ca8:	6923      	ldr	r3, [r4, #16]
  403caa:	4298      	cmp	r0, r3
  403cac:	d802      	bhi.n	403cb4 <__sfvwrite_r+0x1a8>
  403cae:	6963      	ldr	r3, [r4, #20]
  403cb0:	429f      	cmp	r7, r3
  403cb2:	d25d      	bcs.n	403d70 <__sfvwrite_r+0x264>
  403cb4:	45b8      	cmp	r8, r7
  403cb6:	bf28      	it	cs
  403cb8:	46b8      	movcs	r8, r7
  403cba:	4642      	mov	r2, r8
  403cbc:	4649      	mov	r1, r9
  403cbe:	f000 fd01 	bl	4046c4 <memmove>
  403cc2:	68a3      	ldr	r3, [r4, #8]
  403cc4:	6822      	ldr	r2, [r4, #0]
  403cc6:	eba3 0308 	sub.w	r3, r3, r8
  403cca:	4442      	add	r2, r8
  403ccc:	60a3      	str	r3, [r4, #8]
  403cce:	6022      	str	r2, [r4, #0]
  403cd0:	b10b      	cbz	r3, 403cd6 <__sfvwrite_r+0x1ca>
  403cd2:	46c2      	mov	sl, r8
  403cd4:	e779      	b.n	403bca <__sfvwrite_r+0xbe>
  403cd6:	4621      	mov	r1, r4
  403cd8:	9800      	ldr	r0, [sp, #0]
  403cda:	f7ff fcc7 	bl	40366c <_fflush_r>
  403cde:	2800      	cmp	r0, #0
  403ce0:	d192      	bne.n	403c08 <__sfvwrite_r+0xfc>
  403ce2:	46c2      	mov	sl, r8
  403ce4:	e771      	b.n	403bca <__sfvwrite_r+0xbe>
  403ce6:	465a      	mov	r2, fp
  403ce8:	4629      	mov	r1, r5
  403cea:	f000 fceb 	bl	4046c4 <memmove>
  403cee:	68a2      	ldr	r2, [r4, #8]
  403cf0:	6823      	ldr	r3, [r4, #0]
  403cf2:	eba2 020b 	sub.w	r2, r2, fp
  403cf6:	445b      	add	r3, fp
  403cf8:	60a2      	str	r2, [r4, #8]
  403cfa:	6023      	str	r3, [r4, #0]
  403cfc:	e7af      	b.n	403c5e <__sfvwrite_r+0x152>
  403cfe:	6820      	ldr	r0, [r4, #0]
  403d00:	46b8      	mov	r8, r7
  403d02:	46ba      	mov	sl, r7
  403d04:	46bb      	mov	fp, r7
  403d06:	e755      	b.n	403bb4 <__sfvwrite_r+0xa8>
  403d08:	6962      	ldr	r2, [r4, #20]
  403d0a:	6820      	ldr	r0, [r4, #0]
  403d0c:	6921      	ldr	r1, [r4, #16]
  403d0e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403d12:	eba0 0a01 	sub.w	sl, r0, r1
  403d16:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403d1a:	f10a 0001 	add.w	r0, sl, #1
  403d1e:	ea4f 0868 	mov.w	r8, r8, asr #1
  403d22:	4438      	add	r0, r7
  403d24:	4540      	cmp	r0, r8
  403d26:	4642      	mov	r2, r8
  403d28:	bf84      	itt	hi
  403d2a:	4680      	movhi	r8, r0
  403d2c:	4642      	movhi	r2, r8
  403d2e:	055b      	lsls	r3, r3, #21
  403d30:	d544      	bpl.n	403dbc <__sfvwrite_r+0x2b0>
  403d32:	4611      	mov	r1, r2
  403d34:	9800      	ldr	r0, [sp, #0]
  403d36:	f000 f913 	bl	403f60 <_malloc_r>
  403d3a:	4683      	mov	fp, r0
  403d3c:	2800      	cmp	r0, #0
  403d3e:	d055      	beq.n	403dec <__sfvwrite_r+0x2e0>
  403d40:	4652      	mov	r2, sl
  403d42:	6921      	ldr	r1, [r4, #16]
  403d44:	f000 fc24 	bl	404590 <memcpy>
  403d48:	89a3      	ldrh	r3, [r4, #12]
  403d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403d52:	81a3      	strh	r3, [r4, #12]
  403d54:	eb0b 000a 	add.w	r0, fp, sl
  403d58:	eba8 030a 	sub.w	r3, r8, sl
  403d5c:	f8c4 b010 	str.w	fp, [r4, #16]
  403d60:	f8c4 8014 	str.w	r8, [r4, #20]
  403d64:	6020      	str	r0, [r4, #0]
  403d66:	60a3      	str	r3, [r4, #8]
  403d68:	46b8      	mov	r8, r7
  403d6a:	46ba      	mov	sl, r7
  403d6c:	46bb      	mov	fp, r7
  403d6e:	e721      	b.n	403bb4 <__sfvwrite_r+0xa8>
  403d70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403d74:	42b9      	cmp	r1, r7
  403d76:	bf28      	it	cs
  403d78:	4639      	movcs	r1, r7
  403d7a:	464a      	mov	r2, r9
  403d7c:	fb91 f1f3 	sdiv	r1, r1, r3
  403d80:	9800      	ldr	r0, [sp, #0]
  403d82:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403d84:	fb03 f301 	mul.w	r3, r3, r1
  403d88:	69e1      	ldr	r1, [r4, #28]
  403d8a:	47b0      	blx	r6
  403d8c:	f1b0 0a00 	subs.w	sl, r0, #0
  403d90:	f73f af1b 	bgt.w	403bca <__sfvwrite_r+0xbe>
  403d94:	e738      	b.n	403c08 <__sfvwrite_r+0xfc>
  403d96:	461a      	mov	r2, r3
  403d98:	4629      	mov	r1, r5
  403d9a:	9301      	str	r3, [sp, #4]
  403d9c:	f000 fc92 	bl	4046c4 <memmove>
  403da0:	6822      	ldr	r2, [r4, #0]
  403da2:	9b01      	ldr	r3, [sp, #4]
  403da4:	9800      	ldr	r0, [sp, #0]
  403da6:	441a      	add	r2, r3
  403da8:	6022      	str	r2, [r4, #0]
  403daa:	4621      	mov	r1, r4
  403dac:	f7ff fc5e 	bl	40366c <_fflush_r>
  403db0:	9b01      	ldr	r3, [sp, #4]
  403db2:	2800      	cmp	r0, #0
  403db4:	f47f af28 	bne.w	403c08 <__sfvwrite_r+0xfc>
  403db8:	461f      	mov	r7, r3
  403dba:	e750      	b.n	403c5e <__sfvwrite_r+0x152>
  403dbc:	9800      	ldr	r0, [sp, #0]
  403dbe:	f000 fce9 	bl	404794 <_realloc_r>
  403dc2:	4683      	mov	fp, r0
  403dc4:	2800      	cmp	r0, #0
  403dc6:	d1c5      	bne.n	403d54 <__sfvwrite_r+0x248>
  403dc8:	9d00      	ldr	r5, [sp, #0]
  403dca:	6921      	ldr	r1, [r4, #16]
  403dcc:	4628      	mov	r0, r5
  403dce:	f7ff fdb7 	bl	403940 <_free_r>
  403dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403dd6:	220c      	movs	r2, #12
  403dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403ddc:	602a      	str	r2, [r5, #0]
  403dde:	e715      	b.n	403c0c <__sfvwrite_r+0x100>
  403de0:	f106 0901 	add.w	r9, r6, #1
  403de4:	e722      	b.n	403c2c <__sfvwrite_r+0x120>
  403de6:	f04f 30ff 	mov.w	r0, #4294967295
  403dea:	e6bf      	b.n	403b6c <__sfvwrite_r+0x60>
  403dec:	9a00      	ldr	r2, [sp, #0]
  403dee:	230c      	movs	r3, #12
  403df0:	6013      	str	r3, [r2, #0]
  403df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403df6:	e709      	b.n	403c0c <__sfvwrite_r+0x100>
  403df8:	7ffffc00 	.word	0x7ffffc00

00403dfc <_fwalk_reent>:
  403dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403e00:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403e04:	d01f      	beq.n	403e46 <_fwalk_reent+0x4a>
  403e06:	4688      	mov	r8, r1
  403e08:	4606      	mov	r6, r0
  403e0a:	f04f 0900 	mov.w	r9, #0
  403e0e:	687d      	ldr	r5, [r7, #4]
  403e10:	68bc      	ldr	r4, [r7, #8]
  403e12:	3d01      	subs	r5, #1
  403e14:	d411      	bmi.n	403e3a <_fwalk_reent+0x3e>
  403e16:	89a3      	ldrh	r3, [r4, #12]
  403e18:	2b01      	cmp	r3, #1
  403e1a:	f105 35ff 	add.w	r5, r5, #4294967295
  403e1e:	d908      	bls.n	403e32 <_fwalk_reent+0x36>
  403e20:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403e24:	3301      	adds	r3, #1
  403e26:	4621      	mov	r1, r4
  403e28:	4630      	mov	r0, r6
  403e2a:	d002      	beq.n	403e32 <_fwalk_reent+0x36>
  403e2c:	47c0      	blx	r8
  403e2e:	ea49 0900 	orr.w	r9, r9, r0
  403e32:	1c6b      	adds	r3, r5, #1
  403e34:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403e38:	d1ed      	bne.n	403e16 <_fwalk_reent+0x1a>
  403e3a:	683f      	ldr	r7, [r7, #0]
  403e3c:	2f00      	cmp	r7, #0
  403e3e:	d1e6      	bne.n	403e0e <_fwalk_reent+0x12>
  403e40:	4648      	mov	r0, r9
  403e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403e46:	46b9      	mov	r9, r7
  403e48:	4648      	mov	r0, r9
  403e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403e4e:	bf00      	nop

00403e50 <__locale_mb_cur_max>:
  403e50:	4b04      	ldr	r3, [pc, #16]	; (403e64 <__locale_mb_cur_max+0x14>)
  403e52:	4a05      	ldr	r2, [pc, #20]	; (403e68 <__locale_mb_cur_max+0x18>)
  403e54:	681b      	ldr	r3, [r3, #0]
  403e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403e58:	2b00      	cmp	r3, #0
  403e5a:	bf08      	it	eq
  403e5c:	4613      	moveq	r3, r2
  403e5e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  403e62:	4770      	bx	lr
  403e64:	2040001c 	.word	0x2040001c
  403e68:	20400448 	.word	0x20400448

00403e6c <__swhatbuf_r>:
  403e6c:	b570      	push	{r4, r5, r6, lr}
  403e6e:	460c      	mov	r4, r1
  403e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403e74:	2900      	cmp	r1, #0
  403e76:	b090      	sub	sp, #64	; 0x40
  403e78:	4615      	mov	r5, r2
  403e7a:	461e      	mov	r6, r3
  403e7c:	db14      	blt.n	403ea8 <__swhatbuf_r+0x3c>
  403e7e:	aa01      	add	r2, sp, #4
  403e80:	f001 f856 	bl	404f30 <_fstat_r>
  403e84:	2800      	cmp	r0, #0
  403e86:	db0f      	blt.n	403ea8 <__swhatbuf_r+0x3c>
  403e88:	9a02      	ldr	r2, [sp, #8]
  403e8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403e8e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403e92:	fab2 f282 	clz	r2, r2
  403e96:	0952      	lsrs	r2, r2, #5
  403e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403e9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403ea0:	6032      	str	r2, [r6, #0]
  403ea2:	602b      	str	r3, [r5, #0]
  403ea4:	b010      	add	sp, #64	; 0x40
  403ea6:	bd70      	pop	{r4, r5, r6, pc}
  403ea8:	89a2      	ldrh	r2, [r4, #12]
  403eaa:	2300      	movs	r3, #0
  403eac:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403eb0:	6033      	str	r3, [r6, #0]
  403eb2:	d004      	beq.n	403ebe <__swhatbuf_r+0x52>
  403eb4:	2240      	movs	r2, #64	; 0x40
  403eb6:	4618      	mov	r0, r3
  403eb8:	602a      	str	r2, [r5, #0]
  403eba:	b010      	add	sp, #64	; 0x40
  403ebc:	bd70      	pop	{r4, r5, r6, pc}
  403ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403ec2:	602b      	str	r3, [r5, #0]
  403ec4:	b010      	add	sp, #64	; 0x40
  403ec6:	bd70      	pop	{r4, r5, r6, pc}

00403ec8 <__smakebuf_r>:
  403ec8:	898a      	ldrh	r2, [r1, #12]
  403eca:	0792      	lsls	r2, r2, #30
  403ecc:	460b      	mov	r3, r1
  403ece:	d506      	bpl.n	403ede <__smakebuf_r+0x16>
  403ed0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  403ed4:	2101      	movs	r1, #1
  403ed6:	601a      	str	r2, [r3, #0]
  403ed8:	611a      	str	r2, [r3, #16]
  403eda:	6159      	str	r1, [r3, #20]
  403edc:	4770      	bx	lr
  403ede:	b5f0      	push	{r4, r5, r6, r7, lr}
  403ee0:	b083      	sub	sp, #12
  403ee2:	ab01      	add	r3, sp, #4
  403ee4:	466a      	mov	r2, sp
  403ee6:	460c      	mov	r4, r1
  403ee8:	4605      	mov	r5, r0
  403eea:	f7ff ffbf 	bl	403e6c <__swhatbuf_r>
  403eee:	9900      	ldr	r1, [sp, #0]
  403ef0:	4606      	mov	r6, r0
  403ef2:	4628      	mov	r0, r5
  403ef4:	f000 f834 	bl	403f60 <_malloc_r>
  403ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403efc:	b1d0      	cbz	r0, 403f34 <__smakebuf_r+0x6c>
  403efe:	9a01      	ldr	r2, [sp, #4]
  403f00:	4f12      	ldr	r7, [pc, #72]	; (403f4c <__smakebuf_r+0x84>)
  403f02:	9900      	ldr	r1, [sp, #0]
  403f04:	63ef      	str	r7, [r5, #60]	; 0x3c
  403f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403f0a:	81a3      	strh	r3, [r4, #12]
  403f0c:	6020      	str	r0, [r4, #0]
  403f0e:	6120      	str	r0, [r4, #16]
  403f10:	6161      	str	r1, [r4, #20]
  403f12:	b91a      	cbnz	r2, 403f1c <__smakebuf_r+0x54>
  403f14:	4333      	orrs	r3, r6
  403f16:	81a3      	strh	r3, [r4, #12]
  403f18:	b003      	add	sp, #12
  403f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f1c:	4628      	mov	r0, r5
  403f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403f22:	f001 f819 	bl	404f58 <_isatty_r>
  403f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f2a:	2800      	cmp	r0, #0
  403f2c:	d0f2      	beq.n	403f14 <__smakebuf_r+0x4c>
  403f2e:	f043 0301 	orr.w	r3, r3, #1
  403f32:	e7ef      	b.n	403f14 <__smakebuf_r+0x4c>
  403f34:	059a      	lsls	r2, r3, #22
  403f36:	d4ef      	bmi.n	403f18 <__smakebuf_r+0x50>
  403f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403f3c:	f043 0302 	orr.w	r3, r3, #2
  403f40:	2101      	movs	r1, #1
  403f42:	81a3      	strh	r3, [r4, #12]
  403f44:	6022      	str	r2, [r4, #0]
  403f46:	6122      	str	r2, [r4, #16]
  403f48:	6161      	str	r1, [r4, #20]
  403f4a:	e7e5      	b.n	403f18 <__smakebuf_r+0x50>
  403f4c:	00403699 	.word	0x00403699

00403f50 <malloc>:
  403f50:	4b02      	ldr	r3, [pc, #8]	; (403f5c <malloc+0xc>)
  403f52:	4601      	mov	r1, r0
  403f54:	6818      	ldr	r0, [r3, #0]
  403f56:	f000 b803 	b.w	403f60 <_malloc_r>
  403f5a:	bf00      	nop
  403f5c:	2040001c 	.word	0x2040001c

00403f60 <_malloc_r>:
  403f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f64:	f101 060b 	add.w	r6, r1, #11
  403f68:	2e16      	cmp	r6, #22
  403f6a:	b083      	sub	sp, #12
  403f6c:	4605      	mov	r5, r0
  403f6e:	f240 809e 	bls.w	4040ae <_malloc_r+0x14e>
  403f72:	f036 0607 	bics.w	r6, r6, #7
  403f76:	f100 80bd 	bmi.w	4040f4 <_malloc_r+0x194>
  403f7a:	42b1      	cmp	r1, r6
  403f7c:	f200 80ba 	bhi.w	4040f4 <_malloc_r+0x194>
  403f80:	f000 fc04 	bl	40478c <__malloc_lock>
  403f84:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403f88:	f0c0 8293 	bcc.w	4044b2 <_malloc_r+0x552>
  403f8c:	0a73      	lsrs	r3, r6, #9
  403f8e:	f000 80b8 	beq.w	404102 <_malloc_r+0x1a2>
  403f92:	2b04      	cmp	r3, #4
  403f94:	f200 8179 	bhi.w	40428a <_malloc_r+0x32a>
  403f98:	09b3      	lsrs	r3, r6, #6
  403f9a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403f9e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403fa2:	00c3      	lsls	r3, r0, #3
  403fa4:	4fbf      	ldr	r7, [pc, #764]	; (4042a4 <_malloc_r+0x344>)
  403fa6:	443b      	add	r3, r7
  403fa8:	f1a3 0108 	sub.w	r1, r3, #8
  403fac:	685c      	ldr	r4, [r3, #4]
  403fae:	42a1      	cmp	r1, r4
  403fb0:	d106      	bne.n	403fc0 <_malloc_r+0x60>
  403fb2:	e00c      	b.n	403fce <_malloc_r+0x6e>
  403fb4:	2a00      	cmp	r2, #0
  403fb6:	f280 80aa 	bge.w	40410e <_malloc_r+0x1ae>
  403fba:	68e4      	ldr	r4, [r4, #12]
  403fbc:	42a1      	cmp	r1, r4
  403fbe:	d006      	beq.n	403fce <_malloc_r+0x6e>
  403fc0:	6863      	ldr	r3, [r4, #4]
  403fc2:	f023 0303 	bic.w	r3, r3, #3
  403fc6:	1b9a      	subs	r2, r3, r6
  403fc8:	2a0f      	cmp	r2, #15
  403fca:	ddf3      	ble.n	403fb4 <_malloc_r+0x54>
  403fcc:	4670      	mov	r0, lr
  403fce:	693c      	ldr	r4, [r7, #16]
  403fd0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4042b8 <_malloc_r+0x358>
  403fd4:	4574      	cmp	r4, lr
  403fd6:	f000 81ab 	beq.w	404330 <_malloc_r+0x3d0>
  403fda:	6863      	ldr	r3, [r4, #4]
  403fdc:	f023 0303 	bic.w	r3, r3, #3
  403fe0:	1b9a      	subs	r2, r3, r6
  403fe2:	2a0f      	cmp	r2, #15
  403fe4:	f300 8190 	bgt.w	404308 <_malloc_r+0x3a8>
  403fe8:	2a00      	cmp	r2, #0
  403fea:	f8c7 e014 	str.w	lr, [r7, #20]
  403fee:	f8c7 e010 	str.w	lr, [r7, #16]
  403ff2:	f280 809d 	bge.w	404130 <_malloc_r+0x1d0>
  403ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403ffa:	f080 8161 	bcs.w	4042c0 <_malloc_r+0x360>
  403ffe:	08db      	lsrs	r3, r3, #3
  404000:	f103 0c01 	add.w	ip, r3, #1
  404004:	1099      	asrs	r1, r3, #2
  404006:	687a      	ldr	r2, [r7, #4]
  404008:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40400c:	f8c4 8008 	str.w	r8, [r4, #8]
  404010:	2301      	movs	r3, #1
  404012:	408b      	lsls	r3, r1
  404014:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404018:	4313      	orrs	r3, r2
  40401a:	3908      	subs	r1, #8
  40401c:	60e1      	str	r1, [r4, #12]
  40401e:	607b      	str	r3, [r7, #4]
  404020:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404024:	f8c8 400c 	str.w	r4, [r8, #12]
  404028:	1082      	asrs	r2, r0, #2
  40402a:	2401      	movs	r4, #1
  40402c:	4094      	lsls	r4, r2
  40402e:	429c      	cmp	r4, r3
  404030:	f200 808b 	bhi.w	40414a <_malloc_r+0x1ea>
  404034:	421c      	tst	r4, r3
  404036:	d106      	bne.n	404046 <_malloc_r+0xe6>
  404038:	f020 0003 	bic.w	r0, r0, #3
  40403c:	0064      	lsls	r4, r4, #1
  40403e:	421c      	tst	r4, r3
  404040:	f100 0004 	add.w	r0, r0, #4
  404044:	d0fa      	beq.n	40403c <_malloc_r+0xdc>
  404046:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40404a:	46cc      	mov	ip, r9
  40404c:	4680      	mov	r8, r0
  40404e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404052:	459c      	cmp	ip, r3
  404054:	d107      	bne.n	404066 <_malloc_r+0x106>
  404056:	e16d      	b.n	404334 <_malloc_r+0x3d4>
  404058:	2a00      	cmp	r2, #0
  40405a:	f280 817b 	bge.w	404354 <_malloc_r+0x3f4>
  40405e:	68db      	ldr	r3, [r3, #12]
  404060:	459c      	cmp	ip, r3
  404062:	f000 8167 	beq.w	404334 <_malloc_r+0x3d4>
  404066:	6859      	ldr	r1, [r3, #4]
  404068:	f021 0103 	bic.w	r1, r1, #3
  40406c:	1b8a      	subs	r2, r1, r6
  40406e:	2a0f      	cmp	r2, #15
  404070:	ddf2      	ble.n	404058 <_malloc_r+0xf8>
  404072:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404076:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40407a:	9300      	str	r3, [sp, #0]
  40407c:	199c      	adds	r4, r3, r6
  40407e:	4628      	mov	r0, r5
  404080:	f046 0601 	orr.w	r6, r6, #1
  404084:	f042 0501 	orr.w	r5, r2, #1
  404088:	605e      	str	r6, [r3, #4]
  40408a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40408e:	f8cc 8008 	str.w	r8, [ip, #8]
  404092:	617c      	str	r4, [r7, #20]
  404094:	613c      	str	r4, [r7, #16]
  404096:	f8c4 e00c 	str.w	lr, [r4, #12]
  40409a:	f8c4 e008 	str.w	lr, [r4, #8]
  40409e:	6065      	str	r5, [r4, #4]
  4040a0:	505a      	str	r2, [r3, r1]
  4040a2:	f000 fb75 	bl	404790 <__malloc_unlock>
  4040a6:	9b00      	ldr	r3, [sp, #0]
  4040a8:	f103 0408 	add.w	r4, r3, #8
  4040ac:	e01e      	b.n	4040ec <_malloc_r+0x18c>
  4040ae:	2910      	cmp	r1, #16
  4040b0:	d820      	bhi.n	4040f4 <_malloc_r+0x194>
  4040b2:	f000 fb6b 	bl	40478c <__malloc_lock>
  4040b6:	2610      	movs	r6, #16
  4040b8:	2318      	movs	r3, #24
  4040ba:	2002      	movs	r0, #2
  4040bc:	4f79      	ldr	r7, [pc, #484]	; (4042a4 <_malloc_r+0x344>)
  4040be:	443b      	add	r3, r7
  4040c0:	f1a3 0208 	sub.w	r2, r3, #8
  4040c4:	685c      	ldr	r4, [r3, #4]
  4040c6:	4294      	cmp	r4, r2
  4040c8:	f000 813d 	beq.w	404346 <_malloc_r+0x3e6>
  4040cc:	6863      	ldr	r3, [r4, #4]
  4040ce:	68e1      	ldr	r1, [r4, #12]
  4040d0:	68a6      	ldr	r6, [r4, #8]
  4040d2:	f023 0303 	bic.w	r3, r3, #3
  4040d6:	4423      	add	r3, r4
  4040d8:	4628      	mov	r0, r5
  4040da:	685a      	ldr	r2, [r3, #4]
  4040dc:	60f1      	str	r1, [r6, #12]
  4040de:	f042 0201 	orr.w	r2, r2, #1
  4040e2:	608e      	str	r6, [r1, #8]
  4040e4:	605a      	str	r2, [r3, #4]
  4040e6:	f000 fb53 	bl	404790 <__malloc_unlock>
  4040ea:	3408      	adds	r4, #8
  4040ec:	4620      	mov	r0, r4
  4040ee:	b003      	add	sp, #12
  4040f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040f4:	2400      	movs	r4, #0
  4040f6:	230c      	movs	r3, #12
  4040f8:	4620      	mov	r0, r4
  4040fa:	602b      	str	r3, [r5, #0]
  4040fc:	b003      	add	sp, #12
  4040fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404102:	2040      	movs	r0, #64	; 0x40
  404104:	f44f 7300 	mov.w	r3, #512	; 0x200
  404108:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40410c:	e74a      	b.n	403fa4 <_malloc_r+0x44>
  40410e:	4423      	add	r3, r4
  404110:	68e1      	ldr	r1, [r4, #12]
  404112:	685a      	ldr	r2, [r3, #4]
  404114:	68a6      	ldr	r6, [r4, #8]
  404116:	f042 0201 	orr.w	r2, r2, #1
  40411a:	60f1      	str	r1, [r6, #12]
  40411c:	4628      	mov	r0, r5
  40411e:	608e      	str	r6, [r1, #8]
  404120:	605a      	str	r2, [r3, #4]
  404122:	f000 fb35 	bl	404790 <__malloc_unlock>
  404126:	3408      	adds	r4, #8
  404128:	4620      	mov	r0, r4
  40412a:	b003      	add	sp, #12
  40412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404130:	4423      	add	r3, r4
  404132:	4628      	mov	r0, r5
  404134:	685a      	ldr	r2, [r3, #4]
  404136:	f042 0201 	orr.w	r2, r2, #1
  40413a:	605a      	str	r2, [r3, #4]
  40413c:	f000 fb28 	bl	404790 <__malloc_unlock>
  404140:	3408      	adds	r4, #8
  404142:	4620      	mov	r0, r4
  404144:	b003      	add	sp, #12
  404146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40414a:	68bc      	ldr	r4, [r7, #8]
  40414c:	6863      	ldr	r3, [r4, #4]
  40414e:	f023 0803 	bic.w	r8, r3, #3
  404152:	45b0      	cmp	r8, r6
  404154:	d304      	bcc.n	404160 <_malloc_r+0x200>
  404156:	eba8 0306 	sub.w	r3, r8, r6
  40415a:	2b0f      	cmp	r3, #15
  40415c:	f300 8085 	bgt.w	40426a <_malloc_r+0x30a>
  404160:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4042bc <_malloc_r+0x35c>
  404164:	4b50      	ldr	r3, [pc, #320]	; (4042a8 <_malloc_r+0x348>)
  404166:	f8d9 2000 	ldr.w	r2, [r9]
  40416a:	681b      	ldr	r3, [r3, #0]
  40416c:	3201      	adds	r2, #1
  40416e:	4433      	add	r3, r6
  404170:	eb04 0a08 	add.w	sl, r4, r8
  404174:	f000 8155 	beq.w	404422 <_malloc_r+0x4c2>
  404178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40417c:	330f      	adds	r3, #15
  40417e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404182:	f02b 0b0f 	bic.w	fp, fp, #15
  404186:	4659      	mov	r1, fp
  404188:	4628      	mov	r0, r5
  40418a:	f000 fca9 	bl	404ae0 <_sbrk_r>
  40418e:	1c41      	adds	r1, r0, #1
  404190:	4602      	mov	r2, r0
  404192:	f000 80fc 	beq.w	40438e <_malloc_r+0x42e>
  404196:	4582      	cmp	sl, r0
  404198:	f200 80f7 	bhi.w	40438a <_malloc_r+0x42a>
  40419c:	4b43      	ldr	r3, [pc, #268]	; (4042ac <_malloc_r+0x34c>)
  40419e:	6819      	ldr	r1, [r3, #0]
  4041a0:	4459      	add	r1, fp
  4041a2:	6019      	str	r1, [r3, #0]
  4041a4:	f000 814d 	beq.w	404442 <_malloc_r+0x4e2>
  4041a8:	f8d9 0000 	ldr.w	r0, [r9]
  4041ac:	3001      	adds	r0, #1
  4041ae:	bf1b      	ittet	ne
  4041b0:	eba2 0a0a 	subne.w	sl, r2, sl
  4041b4:	4451      	addne	r1, sl
  4041b6:	f8c9 2000 	streq.w	r2, [r9]
  4041ba:	6019      	strne	r1, [r3, #0]
  4041bc:	f012 0107 	ands.w	r1, r2, #7
  4041c0:	f000 8115 	beq.w	4043ee <_malloc_r+0x48e>
  4041c4:	f1c1 0008 	rsb	r0, r1, #8
  4041c8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4041cc:	4402      	add	r2, r0
  4041ce:	3108      	adds	r1, #8
  4041d0:	eb02 090b 	add.w	r9, r2, fp
  4041d4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4041d8:	eba1 0909 	sub.w	r9, r1, r9
  4041dc:	4649      	mov	r1, r9
  4041de:	4628      	mov	r0, r5
  4041e0:	9301      	str	r3, [sp, #4]
  4041e2:	9200      	str	r2, [sp, #0]
  4041e4:	f000 fc7c 	bl	404ae0 <_sbrk_r>
  4041e8:	1c43      	adds	r3, r0, #1
  4041ea:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4041ee:	f000 8143 	beq.w	404478 <_malloc_r+0x518>
  4041f2:	1a80      	subs	r0, r0, r2
  4041f4:	4448      	add	r0, r9
  4041f6:	f040 0001 	orr.w	r0, r0, #1
  4041fa:	6819      	ldr	r1, [r3, #0]
  4041fc:	60ba      	str	r2, [r7, #8]
  4041fe:	4449      	add	r1, r9
  404200:	42bc      	cmp	r4, r7
  404202:	6050      	str	r0, [r2, #4]
  404204:	6019      	str	r1, [r3, #0]
  404206:	d017      	beq.n	404238 <_malloc_r+0x2d8>
  404208:	f1b8 0f0f 	cmp.w	r8, #15
  40420c:	f240 80fb 	bls.w	404406 <_malloc_r+0x4a6>
  404210:	6860      	ldr	r0, [r4, #4]
  404212:	f1a8 020c 	sub.w	r2, r8, #12
  404216:	f022 0207 	bic.w	r2, r2, #7
  40421a:	eb04 0e02 	add.w	lr, r4, r2
  40421e:	f000 0001 	and.w	r0, r0, #1
  404222:	f04f 0c05 	mov.w	ip, #5
  404226:	4310      	orrs	r0, r2
  404228:	2a0f      	cmp	r2, #15
  40422a:	6060      	str	r0, [r4, #4]
  40422c:	f8ce c004 	str.w	ip, [lr, #4]
  404230:	f8ce c008 	str.w	ip, [lr, #8]
  404234:	f200 8117 	bhi.w	404466 <_malloc_r+0x506>
  404238:	4b1d      	ldr	r3, [pc, #116]	; (4042b0 <_malloc_r+0x350>)
  40423a:	68bc      	ldr	r4, [r7, #8]
  40423c:	681a      	ldr	r2, [r3, #0]
  40423e:	4291      	cmp	r1, r2
  404240:	bf88      	it	hi
  404242:	6019      	strhi	r1, [r3, #0]
  404244:	4b1b      	ldr	r3, [pc, #108]	; (4042b4 <_malloc_r+0x354>)
  404246:	681a      	ldr	r2, [r3, #0]
  404248:	4291      	cmp	r1, r2
  40424a:	6862      	ldr	r2, [r4, #4]
  40424c:	bf88      	it	hi
  40424e:	6019      	strhi	r1, [r3, #0]
  404250:	f022 0203 	bic.w	r2, r2, #3
  404254:	4296      	cmp	r6, r2
  404256:	eba2 0306 	sub.w	r3, r2, r6
  40425a:	d801      	bhi.n	404260 <_malloc_r+0x300>
  40425c:	2b0f      	cmp	r3, #15
  40425e:	dc04      	bgt.n	40426a <_malloc_r+0x30a>
  404260:	4628      	mov	r0, r5
  404262:	f000 fa95 	bl	404790 <__malloc_unlock>
  404266:	2400      	movs	r4, #0
  404268:	e740      	b.n	4040ec <_malloc_r+0x18c>
  40426a:	19a2      	adds	r2, r4, r6
  40426c:	f043 0301 	orr.w	r3, r3, #1
  404270:	f046 0601 	orr.w	r6, r6, #1
  404274:	6066      	str	r6, [r4, #4]
  404276:	4628      	mov	r0, r5
  404278:	60ba      	str	r2, [r7, #8]
  40427a:	6053      	str	r3, [r2, #4]
  40427c:	f000 fa88 	bl	404790 <__malloc_unlock>
  404280:	3408      	adds	r4, #8
  404282:	4620      	mov	r0, r4
  404284:	b003      	add	sp, #12
  404286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40428a:	2b14      	cmp	r3, #20
  40428c:	d971      	bls.n	404372 <_malloc_r+0x412>
  40428e:	2b54      	cmp	r3, #84	; 0x54
  404290:	f200 80a3 	bhi.w	4043da <_malloc_r+0x47a>
  404294:	0b33      	lsrs	r3, r6, #12
  404296:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40429a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40429e:	00c3      	lsls	r3, r0, #3
  4042a0:	e680      	b.n	403fa4 <_malloc_r+0x44>
  4042a2:	bf00      	nop
  4042a4:	204005b4 	.word	0x204005b4
  4042a8:	20400aac 	.word	0x20400aac
  4042ac:	20400a7c 	.word	0x20400a7c
  4042b0:	20400aa4 	.word	0x20400aa4
  4042b4:	20400aa8 	.word	0x20400aa8
  4042b8:	204005bc 	.word	0x204005bc
  4042bc:	204009bc 	.word	0x204009bc
  4042c0:	0a5a      	lsrs	r2, r3, #9
  4042c2:	2a04      	cmp	r2, #4
  4042c4:	d95b      	bls.n	40437e <_malloc_r+0x41e>
  4042c6:	2a14      	cmp	r2, #20
  4042c8:	f200 80ae 	bhi.w	404428 <_malloc_r+0x4c8>
  4042cc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4042d0:	00c9      	lsls	r1, r1, #3
  4042d2:	325b      	adds	r2, #91	; 0x5b
  4042d4:	eb07 0c01 	add.w	ip, r7, r1
  4042d8:	5879      	ldr	r1, [r7, r1]
  4042da:	f1ac 0c08 	sub.w	ip, ip, #8
  4042de:	458c      	cmp	ip, r1
  4042e0:	f000 8088 	beq.w	4043f4 <_malloc_r+0x494>
  4042e4:	684a      	ldr	r2, [r1, #4]
  4042e6:	f022 0203 	bic.w	r2, r2, #3
  4042ea:	4293      	cmp	r3, r2
  4042ec:	d273      	bcs.n	4043d6 <_malloc_r+0x476>
  4042ee:	6889      	ldr	r1, [r1, #8]
  4042f0:	458c      	cmp	ip, r1
  4042f2:	d1f7      	bne.n	4042e4 <_malloc_r+0x384>
  4042f4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4042f8:	687b      	ldr	r3, [r7, #4]
  4042fa:	60e2      	str	r2, [r4, #12]
  4042fc:	f8c4 c008 	str.w	ip, [r4, #8]
  404300:	6094      	str	r4, [r2, #8]
  404302:	f8cc 400c 	str.w	r4, [ip, #12]
  404306:	e68f      	b.n	404028 <_malloc_r+0xc8>
  404308:	19a1      	adds	r1, r4, r6
  40430a:	f046 0c01 	orr.w	ip, r6, #1
  40430e:	f042 0601 	orr.w	r6, r2, #1
  404312:	f8c4 c004 	str.w	ip, [r4, #4]
  404316:	4628      	mov	r0, r5
  404318:	6179      	str	r1, [r7, #20]
  40431a:	6139      	str	r1, [r7, #16]
  40431c:	f8c1 e00c 	str.w	lr, [r1, #12]
  404320:	f8c1 e008 	str.w	lr, [r1, #8]
  404324:	604e      	str	r6, [r1, #4]
  404326:	50e2      	str	r2, [r4, r3]
  404328:	f000 fa32 	bl	404790 <__malloc_unlock>
  40432c:	3408      	adds	r4, #8
  40432e:	e6dd      	b.n	4040ec <_malloc_r+0x18c>
  404330:	687b      	ldr	r3, [r7, #4]
  404332:	e679      	b.n	404028 <_malloc_r+0xc8>
  404334:	f108 0801 	add.w	r8, r8, #1
  404338:	f018 0f03 	tst.w	r8, #3
  40433c:	f10c 0c08 	add.w	ip, ip, #8
  404340:	f47f ae85 	bne.w	40404e <_malloc_r+0xee>
  404344:	e02d      	b.n	4043a2 <_malloc_r+0x442>
  404346:	68dc      	ldr	r4, [r3, #12]
  404348:	42a3      	cmp	r3, r4
  40434a:	bf08      	it	eq
  40434c:	3002      	addeq	r0, #2
  40434e:	f43f ae3e 	beq.w	403fce <_malloc_r+0x6e>
  404352:	e6bb      	b.n	4040cc <_malloc_r+0x16c>
  404354:	4419      	add	r1, r3
  404356:	461c      	mov	r4, r3
  404358:	684a      	ldr	r2, [r1, #4]
  40435a:	68db      	ldr	r3, [r3, #12]
  40435c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404360:	f042 0201 	orr.w	r2, r2, #1
  404364:	604a      	str	r2, [r1, #4]
  404366:	4628      	mov	r0, r5
  404368:	60f3      	str	r3, [r6, #12]
  40436a:	609e      	str	r6, [r3, #8]
  40436c:	f000 fa10 	bl	404790 <__malloc_unlock>
  404370:	e6bc      	b.n	4040ec <_malloc_r+0x18c>
  404372:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404376:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40437a:	00c3      	lsls	r3, r0, #3
  40437c:	e612      	b.n	403fa4 <_malloc_r+0x44>
  40437e:	099a      	lsrs	r2, r3, #6
  404380:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404384:	00c9      	lsls	r1, r1, #3
  404386:	3238      	adds	r2, #56	; 0x38
  404388:	e7a4      	b.n	4042d4 <_malloc_r+0x374>
  40438a:	42bc      	cmp	r4, r7
  40438c:	d054      	beq.n	404438 <_malloc_r+0x4d8>
  40438e:	68bc      	ldr	r4, [r7, #8]
  404390:	6862      	ldr	r2, [r4, #4]
  404392:	f022 0203 	bic.w	r2, r2, #3
  404396:	e75d      	b.n	404254 <_malloc_r+0x2f4>
  404398:	f859 3908 	ldr.w	r3, [r9], #-8
  40439c:	4599      	cmp	r9, r3
  40439e:	f040 8086 	bne.w	4044ae <_malloc_r+0x54e>
  4043a2:	f010 0f03 	tst.w	r0, #3
  4043a6:	f100 30ff 	add.w	r0, r0, #4294967295
  4043aa:	d1f5      	bne.n	404398 <_malloc_r+0x438>
  4043ac:	687b      	ldr	r3, [r7, #4]
  4043ae:	ea23 0304 	bic.w	r3, r3, r4
  4043b2:	607b      	str	r3, [r7, #4]
  4043b4:	0064      	lsls	r4, r4, #1
  4043b6:	429c      	cmp	r4, r3
  4043b8:	f63f aec7 	bhi.w	40414a <_malloc_r+0x1ea>
  4043bc:	2c00      	cmp	r4, #0
  4043be:	f43f aec4 	beq.w	40414a <_malloc_r+0x1ea>
  4043c2:	421c      	tst	r4, r3
  4043c4:	4640      	mov	r0, r8
  4043c6:	f47f ae3e 	bne.w	404046 <_malloc_r+0xe6>
  4043ca:	0064      	lsls	r4, r4, #1
  4043cc:	421c      	tst	r4, r3
  4043ce:	f100 0004 	add.w	r0, r0, #4
  4043d2:	d0fa      	beq.n	4043ca <_malloc_r+0x46a>
  4043d4:	e637      	b.n	404046 <_malloc_r+0xe6>
  4043d6:	468c      	mov	ip, r1
  4043d8:	e78c      	b.n	4042f4 <_malloc_r+0x394>
  4043da:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4043de:	d815      	bhi.n	40440c <_malloc_r+0x4ac>
  4043e0:	0bf3      	lsrs	r3, r6, #15
  4043e2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4043e6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4043ea:	00c3      	lsls	r3, r0, #3
  4043ec:	e5da      	b.n	403fa4 <_malloc_r+0x44>
  4043ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4043f2:	e6ed      	b.n	4041d0 <_malloc_r+0x270>
  4043f4:	687b      	ldr	r3, [r7, #4]
  4043f6:	1092      	asrs	r2, r2, #2
  4043f8:	2101      	movs	r1, #1
  4043fa:	fa01 f202 	lsl.w	r2, r1, r2
  4043fe:	4313      	orrs	r3, r2
  404400:	607b      	str	r3, [r7, #4]
  404402:	4662      	mov	r2, ip
  404404:	e779      	b.n	4042fa <_malloc_r+0x39a>
  404406:	2301      	movs	r3, #1
  404408:	6053      	str	r3, [r2, #4]
  40440a:	e729      	b.n	404260 <_malloc_r+0x300>
  40440c:	f240 5254 	movw	r2, #1364	; 0x554
  404410:	4293      	cmp	r3, r2
  404412:	d822      	bhi.n	40445a <_malloc_r+0x4fa>
  404414:	0cb3      	lsrs	r3, r6, #18
  404416:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40441a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40441e:	00c3      	lsls	r3, r0, #3
  404420:	e5c0      	b.n	403fa4 <_malloc_r+0x44>
  404422:	f103 0b10 	add.w	fp, r3, #16
  404426:	e6ae      	b.n	404186 <_malloc_r+0x226>
  404428:	2a54      	cmp	r2, #84	; 0x54
  40442a:	d829      	bhi.n	404480 <_malloc_r+0x520>
  40442c:	0b1a      	lsrs	r2, r3, #12
  40442e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404432:	00c9      	lsls	r1, r1, #3
  404434:	326e      	adds	r2, #110	; 0x6e
  404436:	e74d      	b.n	4042d4 <_malloc_r+0x374>
  404438:	4b20      	ldr	r3, [pc, #128]	; (4044bc <_malloc_r+0x55c>)
  40443a:	6819      	ldr	r1, [r3, #0]
  40443c:	4459      	add	r1, fp
  40443e:	6019      	str	r1, [r3, #0]
  404440:	e6b2      	b.n	4041a8 <_malloc_r+0x248>
  404442:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404446:	2800      	cmp	r0, #0
  404448:	f47f aeae 	bne.w	4041a8 <_malloc_r+0x248>
  40444c:	eb08 030b 	add.w	r3, r8, fp
  404450:	68ba      	ldr	r2, [r7, #8]
  404452:	f043 0301 	orr.w	r3, r3, #1
  404456:	6053      	str	r3, [r2, #4]
  404458:	e6ee      	b.n	404238 <_malloc_r+0x2d8>
  40445a:	207f      	movs	r0, #127	; 0x7f
  40445c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404460:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404464:	e59e      	b.n	403fa4 <_malloc_r+0x44>
  404466:	f104 0108 	add.w	r1, r4, #8
  40446a:	4628      	mov	r0, r5
  40446c:	9300      	str	r3, [sp, #0]
  40446e:	f7ff fa67 	bl	403940 <_free_r>
  404472:	9b00      	ldr	r3, [sp, #0]
  404474:	6819      	ldr	r1, [r3, #0]
  404476:	e6df      	b.n	404238 <_malloc_r+0x2d8>
  404478:	2001      	movs	r0, #1
  40447a:	f04f 0900 	mov.w	r9, #0
  40447e:	e6bc      	b.n	4041fa <_malloc_r+0x29a>
  404480:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404484:	d805      	bhi.n	404492 <_malloc_r+0x532>
  404486:	0bda      	lsrs	r2, r3, #15
  404488:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40448c:	00c9      	lsls	r1, r1, #3
  40448e:	3277      	adds	r2, #119	; 0x77
  404490:	e720      	b.n	4042d4 <_malloc_r+0x374>
  404492:	f240 5154 	movw	r1, #1364	; 0x554
  404496:	428a      	cmp	r2, r1
  404498:	d805      	bhi.n	4044a6 <_malloc_r+0x546>
  40449a:	0c9a      	lsrs	r2, r3, #18
  40449c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4044a0:	00c9      	lsls	r1, r1, #3
  4044a2:	327c      	adds	r2, #124	; 0x7c
  4044a4:	e716      	b.n	4042d4 <_malloc_r+0x374>
  4044a6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4044aa:	227e      	movs	r2, #126	; 0x7e
  4044ac:	e712      	b.n	4042d4 <_malloc_r+0x374>
  4044ae:	687b      	ldr	r3, [r7, #4]
  4044b0:	e780      	b.n	4043b4 <_malloc_r+0x454>
  4044b2:	08f0      	lsrs	r0, r6, #3
  4044b4:	f106 0308 	add.w	r3, r6, #8
  4044b8:	e600      	b.n	4040bc <_malloc_r+0x15c>
  4044ba:	bf00      	nop
  4044bc:	20400a7c 	.word	0x20400a7c

004044c0 <__ascii_mbtowc>:
  4044c0:	b082      	sub	sp, #8
  4044c2:	b149      	cbz	r1, 4044d8 <__ascii_mbtowc+0x18>
  4044c4:	b15a      	cbz	r2, 4044de <__ascii_mbtowc+0x1e>
  4044c6:	b16b      	cbz	r3, 4044e4 <__ascii_mbtowc+0x24>
  4044c8:	7813      	ldrb	r3, [r2, #0]
  4044ca:	600b      	str	r3, [r1, #0]
  4044cc:	7812      	ldrb	r2, [r2, #0]
  4044ce:	1c10      	adds	r0, r2, #0
  4044d0:	bf18      	it	ne
  4044d2:	2001      	movne	r0, #1
  4044d4:	b002      	add	sp, #8
  4044d6:	4770      	bx	lr
  4044d8:	a901      	add	r1, sp, #4
  4044da:	2a00      	cmp	r2, #0
  4044dc:	d1f3      	bne.n	4044c6 <__ascii_mbtowc+0x6>
  4044de:	4610      	mov	r0, r2
  4044e0:	b002      	add	sp, #8
  4044e2:	4770      	bx	lr
  4044e4:	f06f 0001 	mvn.w	r0, #1
  4044e8:	e7f4      	b.n	4044d4 <__ascii_mbtowc+0x14>
  4044ea:	bf00      	nop
  4044ec:	0000      	movs	r0, r0
	...

004044f0 <memchr>:
  4044f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4044f4:	2a10      	cmp	r2, #16
  4044f6:	db2b      	blt.n	404550 <memchr+0x60>
  4044f8:	f010 0f07 	tst.w	r0, #7
  4044fc:	d008      	beq.n	404510 <memchr+0x20>
  4044fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  404502:	3a01      	subs	r2, #1
  404504:	428b      	cmp	r3, r1
  404506:	d02d      	beq.n	404564 <memchr+0x74>
  404508:	f010 0f07 	tst.w	r0, #7
  40450c:	b342      	cbz	r2, 404560 <memchr+0x70>
  40450e:	d1f6      	bne.n	4044fe <memchr+0xe>
  404510:	b4f0      	push	{r4, r5, r6, r7}
  404512:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404516:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40451a:	f022 0407 	bic.w	r4, r2, #7
  40451e:	f07f 0700 	mvns.w	r7, #0
  404522:	2300      	movs	r3, #0
  404524:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404528:	3c08      	subs	r4, #8
  40452a:	ea85 0501 	eor.w	r5, r5, r1
  40452e:	ea86 0601 	eor.w	r6, r6, r1
  404532:	fa85 f547 	uadd8	r5, r5, r7
  404536:	faa3 f587 	sel	r5, r3, r7
  40453a:	fa86 f647 	uadd8	r6, r6, r7
  40453e:	faa5 f687 	sel	r6, r5, r7
  404542:	b98e      	cbnz	r6, 404568 <memchr+0x78>
  404544:	d1ee      	bne.n	404524 <memchr+0x34>
  404546:	bcf0      	pop	{r4, r5, r6, r7}
  404548:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40454c:	f002 0207 	and.w	r2, r2, #7
  404550:	b132      	cbz	r2, 404560 <memchr+0x70>
  404552:	f810 3b01 	ldrb.w	r3, [r0], #1
  404556:	3a01      	subs	r2, #1
  404558:	ea83 0301 	eor.w	r3, r3, r1
  40455c:	b113      	cbz	r3, 404564 <memchr+0x74>
  40455e:	d1f8      	bne.n	404552 <memchr+0x62>
  404560:	2000      	movs	r0, #0
  404562:	4770      	bx	lr
  404564:	3801      	subs	r0, #1
  404566:	4770      	bx	lr
  404568:	2d00      	cmp	r5, #0
  40456a:	bf06      	itte	eq
  40456c:	4635      	moveq	r5, r6
  40456e:	3803      	subeq	r0, #3
  404570:	3807      	subne	r0, #7
  404572:	f015 0f01 	tst.w	r5, #1
  404576:	d107      	bne.n	404588 <memchr+0x98>
  404578:	3001      	adds	r0, #1
  40457a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40457e:	bf02      	ittt	eq
  404580:	3001      	addeq	r0, #1
  404582:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404586:	3001      	addeq	r0, #1
  404588:	bcf0      	pop	{r4, r5, r6, r7}
  40458a:	3801      	subs	r0, #1
  40458c:	4770      	bx	lr
  40458e:	bf00      	nop

00404590 <memcpy>:
  404590:	4684      	mov	ip, r0
  404592:	ea41 0300 	orr.w	r3, r1, r0
  404596:	f013 0303 	ands.w	r3, r3, #3
  40459a:	d16d      	bne.n	404678 <memcpy+0xe8>
  40459c:	3a40      	subs	r2, #64	; 0x40
  40459e:	d341      	bcc.n	404624 <memcpy+0x94>
  4045a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045a4:	f840 3b04 	str.w	r3, [r0], #4
  4045a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045ac:	f840 3b04 	str.w	r3, [r0], #4
  4045b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045b4:	f840 3b04 	str.w	r3, [r0], #4
  4045b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045bc:	f840 3b04 	str.w	r3, [r0], #4
  4045c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045c4:	f840 3b04 	str.w	r3, [r0], #4
  4045c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045cc:	f840 3b04 	str.w	r3, [r0], #4
  4045d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d4:	f840 3b04 	str.w	r3, [r0], #4
  4045d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045dc:	f840 3b04 	str.w	r3, [r0], #4
  4045e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045e4:	f840 3b04 	str.w	r3, [r0], #4
  4045e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045ec:	f840 3b04 	str.w	r3, [r0], #4
  4045f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045f4:	f840 3b04 	str.w	r3, [r0], #4
  4045f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045fc:	f840 3b04 	str.w	r3, [r0], #4
  404600:	f851 3b04 	ldr.w	r3, [r1], #4
  404604:	f840 3b04 	str.w	r3, [r0], #4
  404608:	f851 3b04 	ldr.w	r3, [r1], #4
  40460c:	f840 3b04 	str.w	r3, [r0], #4
  404610:	f851 3b04 	ldr.w	r3, [r1], #4
  404614:	f840 3b04 	str.w	r3, [r0], #4
  404618:	f851 3b04 	ldr.w	r3, [r1], #4
  40461c:	f840 3b04 	str.w	r3, [r0], #4
  404620:	3a40      	subs	r2, #64	; 0x40
  404622:	d2bd      	bcs.n	4045a0 <memcpy+0x10>
  404624:	3230      	adds	r2, #48	; 0x30
  404626:	d311      	bcc.n	40464c <memcpy+0xbc>
  404628:	f851 3b04 	ldr.w	r3, [r1], #4
  40462c:	f840 3b04 	str.w	r3, [r0], #4
  404630:	f851 3b04 	ldr.w	r3, [r1], #4
  404634:	f840 3b04 	str.w	r3, [r0], #4
  404638:	f851 3b04 	ldr.w	r3, [r1], #4
  40463c:	f840 3b04 	str.w	r3, [r0], #4
  404640:	f851 3b04 	ldr.w	r3, [r1], #4
  404644:	f840 3b04 	str.w	r3, [r0], #4
  404648:	3a10      	subs	r2, #16
  40464a:	d2ed      	bcs.n	404628 <memcpy+0x98>
  40464c:	320c      	adds	r2, #12
  40464e:	d305      	bcc.n	40465c <memcpy+0xcc>
  404650:	f851 3b04 	ldr.w	r3, [r1], #4
  404654:	f840 3b04 	str.w	r3, [r0], #4
  404658:	3a04      	subs	r2, #4
  40465a:	d2f9      	bcs.n	404650 <memcpy+0xc0>
  40465c:	3204      	adds	r2, #4
  40465e:	d008      	beq.n	404672 <memcpy+0xe2>
  404660:	07d2      	lsls	r2, r2, #31
  404662:	bf1c      	itt	ne
  404664:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404668:	f800 3b01 	strbne.w	r3, [r0], #1
  40466c:	d301      	bcc.n	404672 <memcpy+0xe2>
  40466e:	880b      	ldrh	r3, [r1, #0]
  404670:	8003      	strh	r3, [r0, #0]
  404672:	4660      	mov	r0, ip
  404674:	4770      	bx	lr
  404676:	bf00      	nop
  404678:	2a08      	cmp	r2, #8
  40467a:	d313      	bcc.n	4046a4 <memcpy+0x114>
  40467c:	078b      	lsls	r3, r1, #30
  40467e:	d08d      	beq.n	40459c <memcpy+0xc>
  404680:	f010 0303 	ands.w	r3, r0, #3
  404684:	d08a      	beq.n	40459c <memcpy+0xc>
  404686:	f1c3 0304 	rsb	r3, r3, #4
  40468a:	1ad2      	subs	r2, r2, r3
  40468c:	07db      	lsls	r3, r3, #31
  40468e:	bf1c      	itt	ne
  404690:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404694:	f800 3b01 	strbne.w	r3, [r0], #1
  404698:	d380      	bcc.n	40459c <memcpy+0xc>
  40469a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40469e:	f820 3b02 	strh.w	r3, [r0], #2
  4046a2:	e77b      	b.n	40459c <memcpy+0xc>
  4046a4:	3a04      	subs	r2, #4
  4046a6:	d3d9      	bcc.n	40465c <memcpy+0xcc>
  4046a8:	3a01      	subs	r2, #1
  4046aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4046ae:	f800 3b01 	strb.w	r3, [r0], #1
  4046b2:	d2f9      	bcs.n	4046a8 <memcpy+0x118>
  4046b4:	780b      	ldrb	r3, [r1, #0]
  4046b6:	7003      	strb	r3, [r0, #0]
  4046b8:	784b      	ldrb	r3, [r1, #1]
  4046ba:	7043      	strb	r3, [r0, #1]
  4046bc:	788b      	ldrb	r3, [r1, #2]
  4046be:	7083      	strb	r3, [r0, #2]
  4046c0:	4660      	mov	r0, ip
  4046c2:	4770      	bx	lr

004046c4 <memmove>:
  4046c4:	4288      	cmp	r0, r1
  4046c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4046c8:	d90d      	bls.n	4046e6 <memmove+0x22>
  4046ca:	188b      	adds	r3, r1, r2
  4046cc:	4298      	cmp	r0, r3
  4046ce:	d20a      	bcs.n	4046e6 <memmove+0x22>
  4046d0:	1884      	adds	r4, r0, r2
  4046d2:	2a00      	cmp	r2, #0
  4046d4:	d051      	beq.n	40477a <memmove+0xb6>
  4046d6:	4622      	mov	r2, r4
  4046d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4046dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4046e0:	4299      	cmp	r1, r3
  4046e2:	d1f9      	bne.n	4046d8 <memmove+0x14>
  4046e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4046e6:	2a0f      	cmp	r2, #15
  4046e8:	d948      	bls.n	40477c <memmove+0xb8>
  4046ea:	ea41 0300 	orr.w	r3, r1, r0
  4046ee:	079b      	lsls	r3, r3, #30
  4046f0:	d146      	bne.n	404780 <memmove+0xbc>
  4046f2:	f100 0410 	add.w	r4, r0, #16
  4046f6:	f101 0310 	add.w	r3, r1, #16
  4046fa:	4615      	mov	r5, r2
  4046fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404700:	f844 6c10 	str.w	r6, [r4, #-16]
  404704:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404708:	f844 6c0c 	str.w	r6, [r4, #-12]
  40470c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404710:	f844 6c08 	str.w	r6, [r4, #-8]
  404714:	3d10      	subs	r5, #16
  404716:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40471a:	f844 6c04 	str.w	r6, [r4, #-4]
  40471e:	2d0f      	cmp	r5, #15
  404720:	f103 0310 	add.w	r3, r3, #16
  404724:	f104 0410 	add.w	r4, r4, #16
  404728:	d8e8      	bhi.n	4046fc <memmove+0x38>
  40472a:	f1a2 0310 	sub.w	r3, r2, #16
  40472e:	f023 030f 	bic.w	r3, r3, #15
  404732:	f002 0e0f 	and.w	lr, r2, #15
  404736:	3310      	adds	r3, #16
  404738:	f1be 0f03 	cmp.w	lr, #3
  40473c:	4419      	add	r1, r3
  40473e:	4403      	add	r3, r0
  404740:	d921      	bls.n	404786 <memmove+0xc2>
  404742:	1f1e      	subs	r6, r3, #4
  404744:	460d      	mov	r5, r1
  404746:	4674      	mov	r4, lr
  404748:	3c04      	subs	r4, #4
  40474a:	f855 7b04 	ldr.w	r7, [r5], #4
  40474e:	f846 7f04 	str.w	r7, [r6, #4]!
  404752:	2c03      	cmp	r4, #3
  404754:	d8f8      	bhi.n	404748 <memmove+0x84>
  404756:	f1ae 0404 	sub.w	r4, lr, #4
  40475a:	f024 0403 	bic.w	r4, r4, #3
  40475e:	3404      	adds	r4, #4
  404760:	4421      	add	r1, r4
  404762:	4423      	add	r3, r4
  404764:	f002 0203 	and.w	r2, r2, #3
  404768:	b162      	cbz	r2, 404784 <memmove+0xc0>
  40476a:	3b01      	subs	r3, #1
  40476c:	440a      	add	r2, r1
  40476e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404772:	f803 4f01 	strb.w	r4, [r3, #1]!
  404776:	428a      	cmp	r2, r1
  404778:	d1f9      	bne.n	40476e <memmove+0xaa>
  40477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40477c:	4603      	mov	r3, r0
  40477e:	e7f3      	b.n	404768 <memmove+0xa4>
  404780:	4603      	mov	r3, r0
  404782:	e7f2      	b.n	40476a <memmove+0xa6>
  404784:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404786:	4672      	mov	r2, lr
  404788:	e7ee      	b.n	404768 <memmove+0xa4>
  40478a:	bf00      	nop

0040478c <__malloc_lock>:
  40478c:	4770      	bx	lr
  40478e:	bf00      	nop

00404790 <__malloc_unlock>:
  404790:	4770      	bx	lr
  404792:	bf00      	nop

00404794 <_realloc_r>:
  404794:	2900      	cmp	r1, #0
  404796:	f000 8095 	beq.w	4048c4 <_realloc_r+0x130>
  40479a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40479e:	460d      	mov	r5, r1
  4047a0:	4616      	mov	r6, r2
  4047a2:	b083      	sub	sp, #12
  4047a4:	4680      	mov	r8, r0
  4047a6:	f106 070b 	add.w	r7, r6, #11
  4047aa:	f7ff ffef 	bl	40478c <__malloc_lock>
  4047ae:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4047b2:	2f16      	cmp	r7, #22
  4047b4:	f02e 0403 	bic.w	r4, lr, #3
  4047b8:	f1a5 0908 	sub.w	r9, r5, #8
  4047bc:	d83c      	bhi.n	404838 <_realloc_r+0xa4>
  4047be:	2210      	movs	r2, #16
  4047c0:	4617      	mov	r7, r2
  4047c2:	42be      	cmp	r6, r7
  4047c4:	d83d      	bhi.n	404842 <_realloc_r+0xae>
  4047c6:	4294      	cmp	r4, r2
  4047c8:	da43      	bge.n	404852 <_realloc_r+0xbe>
  4047ca:	4bc4      	ldr	r3, [pc, #784]	; (404adc <_realloc_r+0x348>)
  4047cc:	6899      	ldr	r1, [r3, #8]
  4047ce:	eb09 0004 	add.w	r0, r9, r4
  4047d2:	4288      	cmp	r0, r1
  4047d4:	f000 80b4 	beq.w	404940 <_realloc_r+0x1ac>
  4047d8:	6843      	ldr	r3, [r0, #4]
  4047da:	f023 0101 	bic.w	r1, r3, #1
  4047de:	4401      	add	r1, r0
  4047e0:	6849      	ldr	r1, [r1, #4]
  4047e2:	07c9      	lsls	r1, r1, #31
  4047e4:	d54c      	bpl.n	404880 <_realloc_r+0xec>
  4047e6:	f01e 0f01 	tst.w	lr, #1
  4047ea:	f000 809b 	beq.w	404924 <_realloc_r+0x190>
  4047ee:	4631      	mov	r1, r6
  4047f0:	4640      	mov	r0, r8
  4047f2:	f7ff fbb5 	bl	403f60 <_malloc_r>
  4047f6:	4606      	mov	r6, r0
  4047f8:	2800      	cmp	r0, #0
  4047fa:	d03a      	beq.n	404872 <_realloc_r+0xde>
  4047fc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404800:	f023 0301 	bic.w	r3, r3, #1
  404804:	444b      	add	r3, r9
  404806:	f1a0 0208 	sub.w	r2, r0, #8
  40480a:	429a      	cmp	r2, r3
  40480c:	f000 8121 	beq.w	404a52 <_realloc_r+0x2be>
  404810:	1f22      	subs	r2, r4, #4
  404812:	2a24      	cmp	r2, #36	; 0x24
  404814:	f200 8107 	bhi.w	404a26 <_realloc_r+0x292>
  404818:	2a13      	cmp	r2, #19
  40481a:	f200 80db 	bhi.w	4049d4 <_realloc_r+0x240>
  40481e:	4603      	mov	r3, r0
  404820:	462a      	mov	r2, r5
  404822:	6811      	ldr	r1, [r2, #0]
  404824:	6019      	str	r1, [r3, #0]
  404826:	6851      	ldr	r1, [r2, #4]
  404828:	6059      	str	r1, [r3, #4]
  40482a:	6892      	ldr	r2, [r2, #8]
  40482c:	609a      	str	r2, [r3, #8]
  40482e:	4629      	mov	r1, r5
  404830:	4640      	mov	r0, r8
  404832:	f7ff f885 	bl	403940 <_free_r>
  404836:	e01c      	b.n	404872 <_realloc_r+0xde>
  404838:	f027 0707 	bic.w	r7, r7, #7
  40483c:	2f00      	cmp	r7, #0
  40483e:	463a      	mov	r2, r7
  404840:	dabf      	bge.n	4047c2 <_realloc_r+0x2e>
  404842:	2600      	movs	r6, #0
  404844:	230c      	movs	r3, #12
  404846:	4630      	mov	r0, r6
  404848:	f8c8 3000 	str.w	r3, [r8]
  40484c:	b003      	add	sp, #12
  40484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404852:	462e      	mov	r6, r5
  404854:	1be3      	subs	r3, r4, r7
  404856:	2b0f      	cmp	r3, #15
  404858:	d81e      	bhi.n	404898 <_realloc_r+0x104>
  40485a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40485e:	f003 0301 	and.w	r3, r3, #1
  404862:	4323      	orrs	r3, r4
  404864:	444c      	add	r4, r9
  404866:	f8c9 3004 	str.w	r3, [r9, #4]
  40486a:	6863      	ldr	r3, [r4, #4]
  40486c:	f043 0301 	orr.w	r3, r3, #1
  404870:	6063      	str	r3, [r4, #4]
  404872:	4640      	mov	r0, r8
  404874:	f7ff ff8c 	bl	404790 <__malloc_unlock>
  404878:	4630      	mov	r0, r6
  40487a:	b003      	add	sp, #12
  40487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404880:	f023 0303 	bic.w	r3, r3, #3
  404884:	18e1      	adds	r1, r4, r3
  404886:	4291      	cmp	r1, r2
  404888:	db1f      	blt.n	4048ca <_realloc_r+0x136>
  40488a:	68c3      	ldr	r3, [r0, #12]
  40488c:	6882      	ldr	r2, [r0, #8]
  40488e:	462e      	mov	r6, r5
  404890:	60d3      	str	r3, [r2, #12]
  404892:	460c      	mov	r4, r1
  404894:	609a      	str	r2, [r3, #8]
  404896:	e7dd      	b.n	404854 <_realloc_r+0xc0>
  404898:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40489c:	eb09 0107 	add.w	r1, r9, r7
  4048a0:	f002 0201 	and.w	r2, r2, #1
  4048a4:	444c      	add	r4, r9
  4048a6:	f043 0301 	orr.w	r3, r3, #1
  4048aa:	4317      	orrs	r7, r2
  4048ac:	f8c9 7004 	str.w	r7, [r9, #4]
  4048b0:	604b      	str	r3, [r1, #4]
  4048b2:	6863      	ldr	r3, [r4, #4]
  4048b4:	f043 0301 	orr.w	r3, r3, #1
  4048b8:	3108      	adds	r1, #8
  4048ba:	6063      	str	r3, [r4, #4]
  4048bc:	4640      	mov	r0, r8
  4048be:	f7ff f83f 	bl	403940 <_free_r>
  4048c2:	e7d6      	b.n	404872 <_realloc_r+0xde>
  4048c4:	4611      	mov	r1, r2
  4048c6:	f7ff bb4b 	b.w	403f60 <_malloc_r>
  4048ca:	f01e 0f01 	tst.w	lr, #1
  4048ce:	d18e      	bne.n	4047ee <_realloc_r+0x5a>
  4048d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4048d4:	eba9 0a01 	sub.w	sl, r9, r1
  4048d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4048dc:	f021 0103 	bic.w	r1, r1, #3
  4048e0:	440b      	add	r3, r1
  4048e2:	4423      	add	r3, r4
  4048e4:	4293      	cmp	r3, r2
  4048e6:	db25      	blt.n	404934 <_realloc_r+0x1a0>
  4048e8:	68c2      	ldr	r2, [r0, #12]
  4048ea:	6881      	ldr	r1, [r0, #8]
  4048ec:	4656      	mov	r6, sl
  4048ee:	60ca      	str	r2, [r1, #12]
  4048f0:	6091      	str	r1, [r2, #8]
  4048f2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4048f6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4048fa:	1f22      	subs	r2, r4, #4
  4048fc:	2a24      	cmp	r2, #36	; 0x24
  4048fe:	60c1      	str	r1, [r0, #12]
  404900:	6088      	str	r0, [r1, #8]
  404902:	f200 8094 	bhi.w	404a2e <_realloc_r+0x29a>
  404906:	2a13      	cmp	r2, #19
  404908:	d96f      	bls.n	4049ea <_realloc_r+0x256>
  40490a:	6829      	ldr	r1, [r5, #0]
  40490c:	f8ca 1008 	str.w	r1, [sl, #8]
  404910:	6869      	ldr	r1, [r5, #4]
  404912:	f8ca 100c 	str.w	r1, [sl, #12]
  404916:	2a1b      	cmp	r2, #27
  404918:	f200 80a2 	bhi.w	404a60 <_realloc_r+0x2cc>
  40491c:	3508      	adds	r5, #8
  40491e:	f10a 0210 	add.w	r2, sl, #16
  404922:	e063      	b.n	4049ec <_realloc_r+0x258>
  404924:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404928:	eba9 0a03 	sub.w	sl, r9, r3
  40492c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404930:	f021 0103 	bic.w	r1, r1, #3
  404934:	1863      	adds	r3, r4, r1
  404936:	4293      	cmp	r3, r2
  404938:	f6ff af59 	blt.w	4047ee <_realloc_r+0x5a>
  40493c:	4656      	mov	r6, sl
  40493e:	e7d8      	b.n	4048f2 <_realloc_r+0x15e>
  404940:	6841      	ldr	r1, [r0, #4]
  404942:	f021 0b03 	bic.w	fp, r1, #3
  404946:	44a3      	add	fp, r4
  404948:	f107 0010 	add.w	r0, r7, #16
  40494c:	4583      	cmp	fp, r0
  40494e:	da56      	bge.n	4049fe <_realloc_r+0x26a>
  404950:	f01e 0f01 	tst.w	lr, #1
  404954:	f47f af4b 	bne.w	4047ee <_realloc_r+0x5a>
  404958:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40495c:	eba9 0a01 	sub.w	sl, r9, r1
  404960:	f8da 1004 	ldr.w	r1, [sl, #4]
  404964:	f021 0103 	bic.w	r1, r1, #3
  404968:	448b      	add	fp, r1
  40496a:	4558      	cmp	r0, fp
  40496c:	dce2      	bgt.n	404934 <_realloc_r+0x1a0>
  40496e:	4656      	mov	r6, sl
  404970:	f8da 100c 	ldr.w	r1, [sl, #12]
  404974:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404978:	1f22      	subs	r2, r4, #4
  40497a:	2a24      	cmp	r2, #36	; 0x24
  40497c:	60c1      	str	r1, [r0, #12]
  40497e:	6088      	str	r0, [r1, #8]
  404980:	f200 808f 	bhi.w	404aa2 <_realloc_r+0x30e>
  404984:	2a13      	cmp	r2, #19
  404986:	f240 808a 	bls.w	404a9e <_realloc_r+0x30a>
  40498a:	6829      	ldr	r1, [r5, #0]
  40498c:	f8ca 1008 	str.w	r1, [sl, #8]
  404990:	6869      	ldr	r1, [r5, #4]
  404992:	f8ca 100c 	str.w	r1, [sl, #12]
  404996:	2a1b      	cmp	r2, #27
  404998:	f200 808a 	bhi.w	404ab0 <_realloc_r+0x31c>
  40499c:	3508      	adds	r5, #8
  40499e:	f10a 0210 	add.w	r2, sl, #16
  4049a2:	6829      	ldr	r1, [r5, #0]
  4049a4:	6011      	str	r1, [r2, #0]
  4049a6:	6869      	ldr	r1, [r5, #4]
  4049a8:	6051      	str	r1, [r2, #4]
  4049aa:	68a9      	ldr	r1, [r5, #8]
  4049ac:	6091      	str	r1, [r2, #8]
  4049ae:	eb0a 0107 	add.w	r1, sl, r7
  4049b2:	ebab 0207 	sub.w	r2, fp, r7
  4049b6:	f042 0201 	orr.w	r2, r2, #1
  4049ba:	6099      	str	r1, [r3, #8]
  4049bc:	604a      	str	r2, [r1, #4]
  4049be:	f8da 3004 	ldr.w	r3, [sl, #4]
  4049c2:	f003 0301 	and.w	r3, r3, #1
  4049c6:	431f      	orrs	r7, r3
  4049c8:	4640      	mov	r0, r8
  4049ca:	f8ca 7004 	str.w	r7, [sl, #4]
  4049ce:	f7ff fedf 	bl	404790 <__malloc_unlock>
  4049d2:	e751      	b.n	404878 <_realloc_r+0xe4>
  4049d4:	682b      	ldr	r3, [r5, #0]
  4049d6:	6003      	str	r3, [r0, #0]
  4049d8:	686b      	ldr	r3, [r5, #4]
  4049da:	6043      	str	r3, [r0, #4]
  4049dc:	2a1b      	cmp	r2, #27
  4049de:	d82d      	bhi.n	404a3c <_realloc_r+0x2a8>
  4049e0:	f100 0308 	add.w	r3, r0, #8
  4049e4:	f105 0208 	add.w	r2, r5, #8
  4049e8:	e71b      	b.n	404822 <_realloc_r+0x8e>
  4049ea:	4632      	mov	r2, r6
  4049ec:	6829      	ldr	r1, [r5, #0]
  4049ee:	6011      	str	r1, [r2, #0]
  4049f0:	6869      	ldr	r1, [r5, #4]
  4049f2:	6051      	str	r1, [r2, #4]
  4049f4:	68a9      	ldr	r1, [r5, #8]
  4049f6:	6091      	str	r1, [r2, #8]
  4049f8:	461c      	mov	r4, r3
  4049fa:	46d1      	mov	r9, sl
  4049fc:	e72a      	b.n	404854 <_realloc_r+0xc0>
  4049fe:	eb09 0107 	add.w	r1, r9, r7
  404a02:	ebab 0b07 	sub.w	fp, fp, r7
  404a06:	f04b 0201 	orr.w	r2, fp, #1
  404a0a:	6099      	str	r1, [r3, #8]
  404a0c:	604a      	str	r2, [r1, #4]
  404a0e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404a12:	f003 0301 	and.w	r3, r3, #1
  404a16:	431f      	orrs	r7, r3
  404a18:	4640      	mov	r0, r8
  404a1a:	f845 7c04 	str.w	r7, [r5, #-4]
  404a1e:	f7ff feb7 	bl	404790 <__malloc_unlock>
  404a22:	462e      	mov	r6, r5
  404a24:	e728      	b.n	404878 <_realloc_r+0xe4>
  404a26:	4629      	mov	r1, r5
  404a28:	f7ff fe4c 	bl	4046c4 <memmove>
  404a2c:	e6ff      	b.n	40482e <_realloc_r+0x9a>
  404a2e:	4629      	mov	r1, r5
  404a30:	4630      	mov	r0, r6
  404a32:	461c      	mov	r4, r3
  404a34:	46d1      	mov	r9, sl
  404a36:	f7ff fe45 	bl	4046c4 <memmove>
  404a3a:	e70b      	b.n	404854 <_realloc_r+0xc0>
  404a3c:	68ab      	ldr	r3, [r5, #8]
  404a3e:	6083      	str	r3, [r0, #8]
  404a40:	68eb      	ldr	r3, [r5, #12]
  404a42:	60c3      	str	r3, [r0, #12]
  404a44:	2a24      	cmp	r2, #36	; 0x24
  404a46:	d017      	beq.n	404a78 <_realloc_r+0x2e4>
  404a48:	f100 0310 	add.w	r3, r0, #16
  404a4c:	f105 0210 	add.w	r2, r5, #16
  404a50:	e6e7      	b.n	404822 <_realloc_r+0x8e>
  404a52:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404a56:	f023 0303 	bic.w	r3, r3, #3
  404a5a:	441c      	add	r4, r3
  404a5c:	462e      	mov	r6, r5
  404a5e:	e6f9      	b.n	404854 <_realloc_r+0xc0>
  404a60:	68a9      	ldr	r1, [r5, #8]
  404a62:	f8ca 1010 	str.w	r1, [sl, #16]
  404a66:	68e9      	ldr	r1, [r5, #12]
  404a68:	f8ca 1014 	str.w	r1, [sl, #20]
  404a6c:	2a24      	cmp	r2, #36	; 0x24
  404a6e:	d00c      	beq.n	404a8a <_realloc_r+0x2f6>
  404a70:	3510      	adds	r5, #16
  404a72:	f10a 0218 	add.w	r2, sl, #24
  404a76:	e7b9      	b.n	4049ec <_realloc_r+0x258>
  404a78:	692b      	ldr	r3, [r5, #16]
  404a7a:	6103      	str	r3, [r0, #16]
  404a7c:	696b      	ldr	r3, [r5, #20]
  404a7e:	6143      	str	r3, [r0, #20]
  404a80:	f105 0218 	add.w	r2, r5, #24
  404a84:	f100 0318 	add.w	r3, r0, #24
  404a88:	e6cb      	b.n	404822 <_realloc_r+0x8e>
  404a8a:	692a      	ldr	r2, [r5, #16]
  404a8c:	f8ca 2018 	str.w	r2, [sl, #24]
  404a90:	696a      	ldr	r2, [r5, #20]
  404a92:	f8ca 201c 	str.w	r2, [sl, #28]
  404a96:	3518      	adds	r5, #24
  404a98:	f10a 0220 	add.w	r2, sl, #32
  404a9c:	e7a6      	b.n	4049ec <_realloc_r+0x258>
  404a9e:	4632      	mov	r2, r6
  404aa0:	e77f      	b.n	4049a2 <_realloc_r+0x20e>
  404aa2:	4629      	mov	r1, r5
  404aa4:	4630      	mov	r0, r6
  404aa6:	9301      	str	r3, [sp, #4]
  404aa8:	f7ff fe0c 	bl	4046c4 <memmove>
  404aac:	9b01      	ldr	r3, [sp, #4]
  404aae:	e77e      	b.n	4049ae <_realloc_r+0x21a>
  404ab0:	68a9      	ldr	r1, [r5, #8]
  404ab2:	f8ca 1010 	str.w	r1, [sl, #16]
  404ab6:	68e9      	ldr	r1, [r5, #12]
  404ab8:	f8ca 1014 	str.w	r1, [sl, #20]
  404abc:	2a24      	cmp	r2, #36	; 0x24
  404abe:	d003      	beq.n	404ac8 <_realloc_r+0x334>
  404ac0:	3510      	adds	r5, #16
  404ac2:	f10a 0218 	add.w	r2, sl, #24
  404ac6:	e76c      	b.n	4049a2 <_realloc_r+0x20e>
  404ac8:	692a      	ldr	r2, [r5, #16]
  404aca:	f8ca 2018 	str.w	r2, [sl, #24]
  404ace:	696a      	ldr	r2, [r5, #20]
  404ad0:	f8ca 201c 	str.w	r2, [sl, #28]
  404ad4:	3518      	adds	r5, #24
  404ad6:	f10a 0220 	add.w	r2, sl, #32
  404ada:	e762      	b.n	4049a2 <_realloc_r+0x20e>
  404adc:	204005b4 	.word	0x204005b4

00404ae0 <_sbrk_r>:
  404ae0:	b538      	push	{r3, r4, r5, lr}
  404ae2:	4c07      	ldr	r4, [pc, #28]	; (404b00 <_sbrk_r+0x20>)
  404ae4:	2300      	movs	r3, #0
  404ae6:	4605      	mov	r5, r0
  404ae8:	4608      	mov	r0, r1
  404aea:	6023      	str	r3, [r4, #0]
  404aec:	f7fc ff8a 	bl	401a04 <_sbrk>
  404af0:	1c43      	adds	r3, r0, #1
  404af2:	d000      	beq.n	404af6 <_sbrk_r+0x16>
  404af4:	bd38      	pop	{r3, r4, r5, pc}
  404af6:	6823      	ldr	r3, [r4, #0]
  404af8:	2b00      	cmp	r3, #0
  404afa:	d0fb      	beq.n	404af4 <_sbrk_r+0x14>
  404afc:	602b      	str	r3, [r5, #0]
  404afe:	bd38      	pop	{r3, r4, r5, pc}
  404b00:	20400abc 	.word	0x20400abc

00404b04 <__sread>:
  404b04:	b510      	push	{r4, lr}
  404b06:	460c      	mov	r4, r1
  404b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404b0c:	f000 fa4c 	bl	404fa8 <_read_r>
  404b10:	2800      	cmp	r0, #0
  404b12:	db03      	blt.n	404b1c <__sread+0x18>
  404b14:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404b16:	4403      	add	r3, r0
  404b18:	6523      	str	r3, [r4, #80]	; 0x50
  404b1a:	bd10      	pop	{r4, pc}
  404b1c:	89a3      	ldrh	r3, [r4, #12]
  404b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404b22:	81a3      	strh	r3, [r4, #12]
  404b24:	bd10      	pop	{r4, pc}
  404b26:	bf00      	nop

00404b28 <__swrite>:
  404b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b2c:	4616      	mov	r6, r2
  404b2e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404b32:	461f      	mov	r7, r3
  404b34:	05d3      	lsls	r3, r2, #23
  404b36:	460c      	mov	r4, r1
  404b38:	4605      	mov	r5, r0
  404b3a:	d507      	bpl.n	404b4c <__swrite+0x24>
  404b3c:	2200      	movs	r2, #0
  404b3e:	2302      	movs	r3, #2
  404b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404b44:	f000 fa1a 	bl	404f7c <_lseek_r>
  404b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404b50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404b54:	81a2      	strh	r2, [r4, #12]
  404b56:	463b      	mov	r3, r7
  404b58:	4632      	mov	r2, r6
  404b5a:	4628      	mov	r0, r5
  404b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404b60:	f000 b92c 	b.w	404dbc <_write_r>

00404b64 <__sseek>:
  404b64:	b510      	push	{r4, lr}
  404b66:	460c      	mov	r4, r1
  404b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404b6c:	f000 fa06 	bl	404f7c <_lseek_r>
  404b70:	89a3      	ldrh	r3, [r4, #12]
  404b72:	1c42      	adds	r2, r0, #1
  404b74:	bf0e      	itee	eq
  404b76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404b7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404b7e:	6520      	strne	r0, [r4, #80]	; 0x50
  404b80:	81a3      	strh	r3, [r4, #12]
  404b82:	bd10      	pop	{r4, pc}

00404b84 <__sclose>:
  404b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404b88:	f000 b980 	b.w	404e8c <_close_r>
	...

00404bc0 <strlen>:
  404bc0:	f890 f000 	pld	[r0]
  404bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404bc8:	f020 0107 	bic.w	r1, r0, #7
  404bcc:	f06f 0c00 	mvn.w	ip, #0
  404bd0:	f010 0407 	ands.w	r4, r0, #7
  404bd4:	f891 f020 	pld	[r1, #32]
  404bd8:	f040 8049 	bne.w	404c6e <strlen+0xae>
  404bdc:	f04f 0400 	mov.w	r4, #0
  404be0:	f06f 0007 	mvn.w	r0, #7
  404be4:	e9d1 2300 	ldrd	r2, r3, [r1]
  404be8:	f891 f040 	pld	[r1, #64]	; 0x40
  404bec:	f100 0008 	add.w	r0, r0, #8
  404bf0:	fa82 f24c 	uadd8	r2, r2, ip
  404bf4:	faa4 f28c 	sel	r2, r4, ip
  404bf8:	fa83 f34c 	uadd8	r3, r3, ip
  404bfc:	faa2 f38c 	sel	r3, r2, ip
  404c00:	bb4b      	cbnz	r3, 404c56 <strlen+0x96>
  404c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404c06:	fa82 f24c 	uadd8	r2, r2, ip
  404c0a:	f100 0008 	add.w	r0, r0, #8
  404c0e:	faa4 f28c 	sel	r2, r4, ip
  404c12:	fa83 f34c 	uadd8	r3, r3, ip
  404c16:	faa2 f38c 	sel	r3, r2, ip
  404c1a:	b9e3      	cbnz	r3, 404c56 <strlen+0x96>
  404c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404c20:	fa82 f24c 	uadd8	r2, r2, ip
  404c24:	f100 0008 	add.w	r0, r0, #8
  404c28:	faa4 f28c 	sel	r2, r4, ip
  404c2c:	fa83 f34c 	uadd8	r3, r3, ip
  404c30:	faa2 f38c 	sel	r3, r2, ip
  404c34:	b97b      	cbnz	r3, 404c56 <strlen+0x96>
  404c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404c3a:	f101 0120 	add.w	r1, r1, #32
  404c3e:	fa82 f24c 	uadd8	r2, r2, ip
  404c42:	f100 0008 	add.w	r0, r0, #8
  404c46:	faa4 f28c 	sel	r2, r4, ip
  404c4a:	fa83 f34c 	uadd8	r3, r3, ip
  404c4e:	faa2 f38c 	sel	r3, r2, ip
  404c52:	2b00      	cmp	r3, #0
  404c54:	d0c6      	beq.n	404be4 <strlen+0x24>
  404c56:	2a00      	cmp	r2, #0
  404c58:	bf04      	itt	eq
  404c5a:	3004      	addeq	r0, #4
  404c5c:	461a      	moveq	r2, r3
  404c5e:	ba12      	rev	r2, r2
  404c60:	fab2 f282 	clz	r2, r2
  404c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404c6c:	4770      	bx	lr
  404c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404c72:	f004 0503 	and.w	r5, r4, #3
  404c76:	f1c4 0000 	rsb	r0, r4, #0
  404c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404c7e:	f014 0f04 	tst.w	r4, #4
  404c82:	f891 f040 	pld	[r1, #64]	; 0x40
  404c86:	fa0c f505 	lsl.w	r5, ip, r5
  404c8a:	ea62 0205 	orn	r2, r2, r5
  404c8e:	bf1c      	itt	ne
  404c90:	ea63 0305 	ornne	r3, r3, r5
  404c94:	4662      	movne	r2, ip
  404c96:	f04f 0400 	mov.w	r4, #0
  404c9a:	e7a9      	b.n	404bf0 <strlen+0x30>

00404c9c <__swbuf_r>:
  404c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c9e:	460d      	mov	r5, r1
  404ca0:	4614      	mov	r4, r2
  404ca2:	4606      	mov	r6, r0
  404ca4:	b110      	cbz	r0, 404cac <__swbuf_r+0x10>
  404ca6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404ca8:	2b00      	cmp	r3, #0
  404caa:	d04b      	beq.n	404d44 <__swbuf_r+0xa8>
  404cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404cb0:	69a3      	ldr	r3, [r4, #24]
  404cb2:	60a3      	str	r3, [r4, #8]
  404cb4:	b291      	uxth	r1, r2
  404cb6:	0708      	lsls	r0, r1, #28
  404cb8:	d539      	bpl.n	404d2e <__swbuf_r+0x92>
  404cba:	6923      	ldr	r3, [r4, #16]
  404cbc:	2b00      	cmp	r3, #0
  404cbe:	d036      	beq.n	404d2e <__swbuf_r+0x92>
  404cc0:	b2ed      	uxtb	r5, r5
  404cc2:	0489      	lsls	r1, r1, #18
  404cc4:	462f      	mov	r7, r5
  404cc6:	d515      	bpl.n	404cf4 <__swbuf_r+0x58>
  404cc8:	6822      	ldr	r2, [r4, #0]
  404cca:	6961      	ldr	r1, [r4, #20]
  404ccc:	1ad3      	subs	r3, r2, r3
  404cce:	428b      	cmp	r3, r1
  404cd0:	da1c      	bge.n	404d0c <__swbuf_r+0x70>
  404cd2:	3301      	adds	r3, #1
  404cd4:	68a1      	ldr	r1, [r4, #8]
  404cd6:	1c50      	adds	r0, r2, #1
  404cd8:	3901      	subs	r1, #1
  404cda:	60a1      	str	r1, [r4, #8]
  404cdc:	6020      	str	r0, [r4, #0]
  404cde:	7015      	strb	r5, [r2, #0]
  404ce0:	6962      	ldr	r2, [r4, #20]
  404ce2:	429a      	cmp	r2, r3
  404ce4:	d01a      	beq.n	404d1c <__swbuf_r+0x80>
  404ce6:	89a3      	ldrh	r3, [r4, #12]
  404ce8:	07db      	lsls	r3, r3, #31
  404cea:	d501      	bpl.n	404cf0 <__swbuf_r+0x54>
  404cec:	2d0a      	cmp	r5, #10
  404cee:	d015      	beq.n	404d1c <__swbuf_r+0x80>
  404cf0:	4638      	mov	r0, r7
  404cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cf4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404cf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404cfa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404cfe:	81a2      	strh	r2, [r4, #12]
  404d00:	6822      	ldr	r2, [r4, #0]
  404d02:	6661      	str	r1, [r4, #100]	; 0x64
  404d04:	6961      	ldr	r1, [r4, #20]
  404d06:	1ad3      	subs	r3, r2, r3
  404d08:	428b      	cmp	r3, r1
  404d0a:	dbe2      	blt.n	404cd2 <__swbuf_r+0x36>
  404d0c:	4621      	mov	r1, r4
  404d0e:	4630      	mov	r0, r6
  404d10:	f7fe fcac 	bl	40366c <_fflush_r>
  404d14:	b940      	cbnz	r0, 404d28 <__swbuf_r+0x8c>
  404d16:	6822      	ldr	r2, [r4, #0]
  404d18:	2301      	movs	r3, #1
  404d1a:	e7db      	b.n	404cd4 <__swbuf_r+0x38>
  404d1c:	4621      	mov	r1, r4
  404d1e:	4630      	mov	r0, r6
  404d20:	f7fe fca4 	bl	40366c <_fflush_r>
  404d24:	2800      	cmp	r0, #0
  404d26:	d0e3      	beq.n	404cf0 <__swbuf_r+0x54>
  404d28:	f04f 37ff 	mov.w	r7, #4294967295
  404d2c:	e7e0      	b.n	404cf0 <__swbuf_r+0x54>
  404d2e:	4621      	mov	r1, r4
  404d30:	4630      	mov	r0, r6
  404d32:	f7fe fb87 	bl	403444 <__swsetup_r>
  404d36:	2800      	cmp	r0, #0
  404d38:	d1f6      	bne.n	404d28 <__swbuf_r+0x8c>
  404d3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404d3e:	6923      	ldr	r3, [r4, #16]
  404d40:	b291      	uxth	r1, r2
  404d42:	e7bd      	b.n	404cc0 <__swbuf_r+0x24>
  404d44:	f7fe fd26 	bl	403794 <__sinit>
  404d48:	e7b0      	b.n	404cac <__swbuf_r+0x10>
  404d4a:	bf00      	nop

00404d4c <_wcrtomb_r>:
  404d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404d4e:	4606      	mov	r6, r0
  404d50:	b085      	sub	sp, #20
  404d52:	461f      	mov	r7, r3
  404d54:	b189      	cbz	r1, 404d7a <_wcrtomb_r+0x2e>
  404d56:	4c10      	ldr	r4, [pc, #64]	; (404d98 <_wcrtomb_r+0x4c>)
  404d58:	4d10      	ldr	r5, [pc, #64]	; (404d9c <_wcrtomb_r+0x50>)
  404d5a:	6824      	ldr	r4, [r4, #0]
  404d5c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  404d5e:	2c00      	cmp	r4, #0
  404d60:	bf08      	it	eq
  404d62:	462c      	moveq	r4, r5
  404d64:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404d68:	47a0      	blx	r4
  404d6a:	1c43      	adds	r3, r0, #1
  404d6c:	d103      	bne.n	404d76 <_wcrtomb_r+0x2a>
  404d6e:	2200      	movs	r2, #0
  404d70:	238a      	movs	r3, #138	; 0x8a
  404d72:	603a      	str	r2, [r7, #0]
  404d74:	6033      	str	r3, [r6, #0]
  404d76:	b005      	add	sp, #20
  404d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404d7a:	460c      	mov	r4, r1
  404d7c:	4906      	ldr	r1, [pc, #24]	; (404d98 <_wcrtomb_r+0x4c>)
  404d7e:	4a07      	ldr	r2, [pc, #28]	; (404d9c <_wcrtomb_r+0x50>)
  404d80:	6809      	ldr	r1, [r1, #0]
  404d82:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404d84:	2900      	cmp	r1, #0
  404d86:	bf08      	it	eq
  404d88:	4611      	moveq	r1, r2
  404d8a:	4622      	mov	r2, r4
  404d8c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404d90:	a901      	add	r1, sp, #4
  404d92:	47a0      	blx	r4
  404d94:	e7e9      	b.n	404d6a <_wcrtomb_r+0x1e>
  404d96:	bf00      	nop
  404d98:	2040001c 	.word	0x2040001c
  404d9c:	20400448 	.word	0x20400448

00404da0 <__ascii_wctomb>:
  404da0:	b121      	cbz	r1, 404dac <__ascii_wctomb+0xc>
  404da2:	2aff      	cmp	r2, #255	; 0xff
  404da4:	d804      	bhi.n	404db0 <__ascii_wctomb+0x10>
  404da6:	700a      	strb	r2, [r1, #0]
  404da8:	2001      	movs	r0, #1
  404daa:	4770      	bx	lr
  404dac:	4608      	mov	r0, r1
  404dae:	4770      	bx	lr
  404db0:	238a      	movs	r3, #138	; 0x8a
  404db2:	6003      	str	r3, [r0, #0]
  404db4:	f04f 30ff 	mov.w	r0, #4294967295
  404db8:	4770      	bx	lr
  404dba:	bf00      	nop

00404dbc <_write_r>:
  404dbc:	b570      	push	{r4, r5, r6, lr}
  404dbe:	460d      	mov	r5, r1
  404dc0:	4c08      	ldr	r4, [pc, #32]	; (404de4 <_write_r+0x28>)
  404dc2:	4611      	mov	r1, r2
  404dc4:	4606      	mov	r6, r0
  404dc6:	461a      	mov	r2, r3
  404dc8:	4628      	mov	r0, r5
  404dca:	2300      	movs	r3, #0
  404dcc:	6023      	str	r3, [r4, #0]
  404dce:	f7fb fa17 	bl	400200 <_write>
  404dd2:	1c43      	adds	r3, r0, #1
  404dd4:	d000      	beq.n	404dd8 <_write_r+0x1c>
  404dd6:	bd70      	pop	{r4, r5, r6, pc}
  404dd8:	6823      	ldr	r3, [r4, #0]
  404dda:	2b00      	cmp	r3, #0
  404ddc:	d0fb      	beq.n	404dd6 <_write_r+0x1a>
  404dde:	6033      	str	r3, [r6, #0]
  404de0:	bd70      	pop	{r4, r5, r6, pc}
  404de2:	bf00      	nop
  404de4:	20400abc 	.word	0x20400abc

00404de8 <__register_exitproc>:
  404de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404dec:	4c25      	ldr	r4, [pc, #148]	; (404e84 <__register_exitproc+0x9c>)
  404dee:	6825      	ldr	r5, [r4, #0]
  404df0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404df4:	4606      	mov	r6, r0
  404df6:	4688      	mov	r8, r1
  404df8:	4692      	mov	sl, r2
  404dfa:	4699      	mov	r9, r3
  404dfc:	b3c4      	cbz	r4, 404e70 <__register_exitproc+0x88>
  404dfe:	6860      	ldr	r0, [r4, #4]
  404e00:	281f      	cmp	r0, #31
  404e02:	dc17      	bgt.n	404e34 <__register_exitproc+0x4c>
  404e04:	1c43      	adds	r3, r0, #1
  404e06:	b176      	cbz	r6, 404e26 <__register_exitproc+0x3e>
  404e08:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  404e0c:	2201      	movs	r2, #1
  404e0e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404e12:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  404e16:	4082      	lsls	r2, r0
  404e18:	4311      	orrs	r1, r2
  404e1a:	2e02      	cmp	r6, #2
  404e1c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  404e20:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404e24:	d01e      	beq.n	404e64 <__register_exitproc+0x7c>
  404e26:	3002      	adds	r0, #2
  404e28:	6063      	str	r3, [r4, #4]
  404e2a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  404e2e:	2000      	movs	r0, #0
  404e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e34:	4b14      	ldr	r3, [pc, #80]	; (404e88 <__register_exitproc+0xa0>)
  404e36:	b303      	cbz	r3, 404e7a <__register_exitproc+0x92>
  404e38:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404e3c:	f7ff f888 	bl	403f50 <malloc>
  404e40:	4604      	mov	r4, r0
  404e42:	b1d0      	cbz	r0, 404e7a <__register_exitproc+0x92>
  404e44:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404e48:	2700      	movs	r7, #0
  404e4a:	e880 0088 	stmia.w	r0, {r3, r7}
  404e4e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404e52:	4638      	mov	r0, r7
  404e54:	2301      	movs	r3, #1
  404e56:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404e5a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  404e5e:	2e00      	cmp	r6, #0
  404e60:	d0e1      	beq.n	404e26 <__register_exitproc+0x3e>
  404e62:	e7d1      	b.n	404e08 <__register_exitproc+0x20>
  404e64:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404e68:	430a      	orrs	r2, r1
  404e6a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  404e6e:	e7da      	b.n	404e26 <__register_exitproc+0x3e>
  404e70:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404e74:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404e78:	e7c1      	b.n	404dfe <__register_exitproc+0x16>
  404e7a:	f04f 30ff 	mov.w	r0, #4294967295
  404e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e82:	bf00      	nop
  404e84:	00405334 	.word	0x00405334
  404e88:	00403f51 	.word	0x00403f51

00404e8c <_close_r>:
  404e8c:	b538      	push	{r3, r4, r5, lr}
  404e8e:	4c07      	ldr	r4, [pc, #28]	; (404eac <_close_r+0x20>)
  404e90:	2300      	movs	r3, #0
  404e92:	4605      	mov	r5, r0
  404e94:	4608      	mov	r0, r1
  404e96:	6023      	str	r3, [r4, #0]
  404e98:	f7fc fde0 	bl	401a5c <_close>
  404e9c:	1c43      	adds	r3, r0, #1
  404e9e:	d000      	beq.n	404ea2 <_close_r+0x16>
  404ea0:	bd38      	pop	{r3, r4, r5, pc}
  404ea2:	6823      	ldr	r3, [r4, #0]
  404ea4:	2b00      	cmp	r3, #0
  404ea6:	d0fb      	beq.n	404ea0 <_close_r+0x14>
  404ea8:	602b      	str	r3, [r5, #0]
  404eaa:	bd38      	pop	{r3, r4, r5, pc}
  404eac:	20400abc 	.word	0x20400abc

00404eb0 <_fclose_r>:
  404eb0:	b570      	push	{r4, r5, r6, lr}
  404eb2:	b139      	cbz	r1, 404ec4 <_fclose_r+0x14>
  404eb4:	4605      	mov	r5, r0
  404eb6:	460c      	mov	r4, r1
  404eb8:	b108      	cbz	r0, 404ebe <_fclose_r+0xe>
  404eba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404ebc:	b383      	cbz	r3, 404f20 <_fclose_r+0x70>
  404ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404ec2:	b913      	cbnz	r3, 404eca <_fclose_r+0x1a>
  404ec4:	2600      	movs	r6, #0
  404ec6:	4630      	mov	r0, r6
  404ec8:	bd70      	pop	{r4, r5, r6, pc}
  404eca:	4621      	mov	r1, r4
  404ecc:	4628      	mov	r0, r5
  404ece:	f7fe fb2d 	bl	40352c <__sflush_r>
  404ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404ed4:	4606      	mov	r6, r0
  404ed6:	b133      	cbz	r3, 404ee6 <_fclose_r+0x36>
  404ed8:	69e1      	ldr	r1, [r4, #28]
  404eda:	4628      	mov	r0, r5
  404edc:	4798      	blx	r3
  404ede:	2800      	cmp	r0, #0
  404ee0:	bfb8      	it	lt
  404ee2:	f04f 36ff 	movlt.w	r6, #4294967295
  404ee6:	89a3      	ldrh	r3, [r4, #12]
  404ee8:	061b      	lsls	r3, r3, #24
  404eea:	d41c      	bmi.n	404f26 <_fclose_r+0x76>
  404eec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404eee:	b141      	cbz	r1, 404f02 <_fclose_r+0x52>
  404ef0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404ef4:	4299      	cmp	r1, r3
  404ef6:	d002      	beq.n	404efe <_fclose_r+0x4e>
  404ef8:	4628      	mov	r0, r5
  404efa:	f7fe fd21 	bl	403940 <_free_r>
  404efe:	2300      	movs	r3, #0
  404f00:	6323      	str	r3, [r4, #48]	; 0x30
  404f02:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404f04:	b121      	cbz	r1, 404f10 <_fclose_r+0x60>
  404f06:	4628      	mov	r0, r5
  404f08:	f7fe fd1a 	bl	403940 <_free_r>
  404f0c:	2300      	movs	r3, #0
  404f0e:	6463      	str	r3, [r4, #68]	; 0x44
  404f10:	f7fe fc46 	bl	4037a0 <__sfp_lock_acquire>
  404f14:	2300      	movs	r3, #0
  404f16:	81a3      	strh	r3, [r4, #12]
  404f18:	f7fe fc44 	bl	4037a4 <__sfp_lock_release>
  404f1c:	4630      	mov	r0, r6
  404f1e:	bd70      	pop	{r4, r5, r6, pc}
  404f20:	f7fe fc38 	bl	403794 <__sinit>
  404f24:	e7cb      	b.n	404ebe <_fclose_r+0xe>
  404f26:	6921      	ldr	r1, [r4, #16]
  404f28:	4628      	mov	r0, r5
  404f2a:	f7fe fd09 	bl	403940 <_free_r>
  404f2e:	e7dd      	b.n	404eec <_fclose_r+0x3c>

00404f30 <_fstat_r>:
  404f30:	b538      	push	{r3, r4, r5, lr}
  404f32:	460b      	mov	r3, r1
  404f34:	4c07      	ldr	r4, [pc, #28]	; (404f54 <_fstat_r+0x24>)
  404f36:	4605      	mov	r5, r0
  404f38:	4611      	mov	r1, r2
  404f3a:	4618      	mov	r0, r3
  404f3c:	2300      	movs	r3, #0
  404f3e:	6023      	str	r3, [r4, #0]
  404f40:	f7fc fd98 	bl	401a74 <_fstat>
  404f44:	1c43      	adds	r3, r0, #1
  404f46:	d000      	beq.n	404f4a <_fstat_r+0x1a>
  404f48:	bd38      	pop	{r3, r4, r5, pc}
  404f4a:	6823      	ldr	r3, [r4, #0]
  404f4c:	2b00      	cmp	r3, #0
  404f4e:	d0fb      	beq.n	404f48 <_fstat_r+0x18>
  404f50:	602b      	str	r3, [r5, #0]
  404f52:	bd38      	pop	{r3, r4, r5, pc}
  404f54:	20400abc 	.word	0x20400abc

00404f58 <_isatty_r>:
  404f58:	b538      	push	{r3, r4, r5, lr}
  404f5a:	4c07      	ldr	r4, [pc, #28]	; (404f78 <_isatty_r+0x20>)
  404f5c:	2300      	movs	r3, #0
  404f5e:	4605      	mov	r5, r0
  404f60:	4608      	mov	r0, r1
  404f62:	6023      	str	r3, [r4, #0]
  404f64:	f7fc fd96 	bl	401a94 <_isatty>
  404f68:	1c43      	adds	r3, r0, #1
  404f6a:	d000      	beq.n	404f6e <_isatty_r+0x16>
  404f6c:	bd38      	pop	{r3, r4, r5, pc}
  404f6e:	6823      	ldr	r3, [r4, #0]
  404f70:	2b00      	cmp	r3, #0
  404f72:	d0fb      	beq.n	404f6c <_isatty_r+0x14>
  404f74:	602b      	str	r3, [r5, #0]
  404f76:	bd38      	pop	{r3, r4, r5, pc}
  404f78:	20400abc 	.word	0x20400abc

00404f7c <_lseek_r>:
  404f7c:	b570      	push	{r4, r5, r6, lr}
  404f7e:	460d      	mov	r5, r1
  404f80:	4c08      	ldr	r4, [pc, #32]	; (404fa4 <_lseek_r+0x28>)
  404f82:	4611      	mov	r1, r2
  404f84:	4606      	mov	r6, r0
  404f86:	461a      	mov	r2, r3
  404f88:	4628      	mov	r0, r5
  404f8a:	2300      	movs	r3, #0
  404f8c:	6023      	str	r3, [r4, #0]
  404f8e:	f7fc fd8c 	bl	401aaa <_lseek>
  404f92:	1c43      	adds	r3, r0, #1
  404f94:	d000      	beq.n	404f98 <_lseek_r+0x1c>
  404f96:	bd70      	pop	{r4, r5, r6, pc}
  404f98:	6823      	ldr	r3, [r4, #0]
  404f9a:	2b00      	cmp	r3, #0
  404f9c:	d0fb      	beq.n	404f96 <_lseek_r+0x1a>
  404f9e:	6033      	str	r3, [r6, #0]
  404fa0:	bd70      	pop	{r4, r5, r6, pc}
  404fa2:	bf00      	nop
  404fa4:	20400abc 	.word	0x20400abc

00404fa8 <_read_r>:
  404fa8:	b570      	push	{r4, r5, r6, lr}
  404faa:	460d      	mov	r5, r1
  404fac:	4c08      	ldr	r4, [pc, #32]	; (404fd0 <_read_r+0x28>)
  404fae:	4611      	mov	r1, r2
  404fb0:	4606      	mov	r6, r0
  404fb2:	461a      	mov	r2, r3
  404fb4:	4628      	mov	r0, r5
  404fb6:	2300      	movs	r3, #0
  404fb8:	6023      	str	r3, [r4, #0]
  404fba:	f7fb f8f7 	bl	4001ac <_read>
  404fbe:	1c43      	adds	r3, r0, #1
  404fc0:	d000      	beq.n	404fc4 <_read_r+0x1c>
  404fc2:	bd70      	pop	{r4, r5, r6, pc}
  404fc4:	6823      	ldr	r3, [r4, #0]
  404fc6:	2b00      	cmp	r3, #0
  404fc8:	d0fb      	beq.n	404fc2 <_read_r+0x1a>
  404fca:	6033      	str	r3, [r6, #0]
  404fcc:	bd70      	pop	{r4, r5, r6, pc}
  404fce:	bf00      	nop
  404fd0:	20400abc 	.word	0x20400abc

00404fd4 <__aeabi_uldivmod>:
  404fd4:	b953      	cbnz	r3, 404fec <__aeabi_uldivmod+0x18>
  404fd6:	b94a      	cbnz	r2, 404fec <__aeabi_uldivmod+0x18>
  404fd8:	2900      	cmp	r1, #0
  404fda:	bf08      	it	eq
  404fdc:	2800      	cmpeq	r0, #0
  404fde:	bf1c      	itt	ne
  404fe0:	f04f 31ff 	movne.w	r1, #4294967295
  404fe4:	f04f 30ff 	movne.w	r0, #4294967295
  404fe8:	f000 b97a 	b.w	4052e0 <__aeabi_idiv0>
  404fec:	f1ad 0c08 	sub.w	ip, sp, #8
  404ff0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404ff4:	f000 f806 	bl	405004 <__udivmoddi4>
  404ff8:	f8dd e004 	ldr.w	lr, [sp, #4]
  404ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405000:	b004      	add	sp, #16
  405002:	4770      	bx	lr

00405004 <__udivmoddi4>:
  405004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405008:	468c      	mov	ip, r1
  40500a:	460d      	mov	r5, r1
  40500c:	4604      	mov	r4, r0
  40500e:	9e08      	ldr	r6, [sp, #32]
  405010:	2b00      	cmp	r3, #0
  405012:	d151      	bne.n	4050b8 <__udivmoddi4+0xb4>
  405014:	428a      	cmp	r2, r1
  405016:	4617      	mov	r7, r2
  405018:	d96d      	bls.n	4050f6 <__udivmoddi4+0xf2>
  40501a:	fab2 fe82 	clz	lr, r2
  40501e:	f1be 0f00 	cmp.w	lr, #0
  405022:	d00b      	beq.n	40503c <__udivmoddi4+0x38>
  405024:	f1ce 0c20 	rsb	ip, lr, #32
  405028:	fa01 f50e 	lsl.w	r5, r1, lr
  40502c:	fa20 fc0c 	lsr.w	ip, r0, ip
  405030:	fa02 f70e 	lsl.w	r7, r2, lr
  405034:	ea4c 0c05 	orr.w	ip, ip, r5
  405038:	fa00 f40e 	lsl.w	r4, r0, lr
  40503c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405040:	0c25      	lsrs	r5, r4, #16
  405042:	fbbc f8fa 	udiv	r8, ip, sl
  405046:	fa1f f987 	uxth.w	r9, r7
  40504a:	fb0a cc18 	mls	ip, sl, r8, ip
  40504e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405052:	fb08 f309 	mul.w	r3, r8, r9
  405056:	42ab      	cmp	r3, r5
  405058:	d90a      	bls.n	405070 <__udivmoddi4+0x6c>
  40505a:	19ed      	adds	r5, r5, r7
  40505c:	f108 32ff 	add.w	r2, r8, #4294967295
  405060:	f080 8123 	bcs.w	4052aa <__udivmoddi4+0x2a6>
  405064:	42ab      	cmp	r3, r5
  405066:	f240 8120 	bls.w	4052aa <__udivmoddi4+0x2a6>
  40506a:	f1a8 0802 	sub.w	r8, r8, #2
  40506e:	443d      	add	r5, r7
  405070:	1aed      	subs	r5, r5, r3
  405072:	b2a4      	uxth	r4, r4
  405074:	fbb5 f0fa 	udiv	r0, r5, sl
  405078:	fb0a 5510 	mls	r5, sl, r0, r5
  40507c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405080:	fb00 f909 	mul.w	r9, r0, r9
  405084:	45a1      	cmp	r9, r4
  405086:	d909      	bls.n	40509c <__udivmoddi4+0x98>
  405088:	19e4      	adds	r4, r4, r7
  40508a:	f100 33ff 	add.w	r3, r0, #4294967295
  40508e:	f080 810a 	bcs.w	4052a6 <__udivmoddi4+0x2a2>
  405092:	45a1      	cmp	r9, r4
  405094:	f240 8107 	bls.w	4052a6 <__udivmoddi4+0x2a2>
  405098:	3802      	subs	r0, #2
  40509a:	443c      	add	r4, r7
  40509c:	eba4 0409 	sub.w	r4, r4, r9
  4050a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4050a4:	2100      	movs	r1, #0
  4050a6:	2e00      	cmp	r6, #0
  4050a8:	d061      	beq.n	40516e <__udivmoddi4+0x16a>
  4050aa:	fa24 f40e 	lsr.w	r4, r4, lr
  4050ae:	2300      	movs	r3, #0
  4050b0:	6034      	str	r4, [r6, #0]
  4050b2:	6073      	str	r3, [r6, #4]
  4050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4050b8:	428b      	cmp	r3, r1
  4050ba:	d907      	bls.n	4050cc <__udivmoddi4+0xc8>
  4050bc:	2e00      	cmp	r6, #0
  4050be:	d054      	beq.n	40516a <__udivmoddi4+0x166>
  4050c0:	2100      	movs	r1, #0
  4050c2:	e886 0021 	stmia.w	r6, {r0, r5}
  4050c6:	4608      	mov	r0, r1
  4050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4050cc:	fab3 f183 	clz	r1, r3
  4050d0:	2900      	cmp	r1, #0
  4050d2:	f040 808e 	bne.w	4051f2 <__udivmoddi4+0x1ee>
  4050d6:	42ab      	cmp	r3, r5
  4050d8:	d302      	bcc.n	4050e0 <__udivmoddi4+0xdc>
  4050da:	4282      	cmp	r2, r0
  4050dc:	f200 80fa 	bhi.w	4052d4 <__udivmoddi4+0x2d0>
  4050e0:	1a84      	subs	r4, r0, r2
  4050e2:	eb65 0503 	sbc.w	r5, r5, r3
  4050e6:	2001      	movs	r0, #1
  4050e8:	46ac      	mov	ip, r5
  4050ea:	2e00      	cmp	r6, #0
  4050ec:	d03f      	beq.n	40516e <__udivmoddi4+0x16a>
  4050ee:	e886 1010 	stmia.w	r6, {r4, ip}
  4050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4050f6:	b912      	cbnz	r2, 4050fe <__udivmoddi4+0xfa>
  4050f8:	2701      	movs	r7, #1
  4050fa:	fbb7 f7f2 	udiv	r7, r7, r2
  4050fe:	fab7 fe87 	clz	lr, r7
  405102:	f1be 0f00 	cmp.w	lr, #0
  405106:	d134      	bne.n	405172 <__udivmoddi4+0x16e>
  405108:	1beb      	subs	r3, r5, r7
  40510a:	0c3a      	lsrs	r2, r7, #16
  40510c:	fa1f fc87 	uxth.w	ip, r7
  405110:	2101      	movs	r1, #1
  405112:	fbb3 f8f2 	udiv	r8, r3, r2
  405116:	0c25      	lsrs	r5, r4, #16
  405118:	fb02 3318 	mls	r3, r2, r8, r3
  40511c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405120:	fb0c f308 	mul.w	r3, ip, r8
  405124:	42ab      	cmp	r3, r5
  405126:	d907      	bls.n	405138 <__udivmoddi4+0x134>
  405128:	19ed      	adds	r5, r5, r7
  40512a:	f108 30ff 	add.w	r0, r8, #4294967295
  40512e:	d202      	bcs.n	405136 <__udivmoddi4+0x132>
  405130:	42ab      	cmp	r3, r5
  405132:	f200 80d1 	bhi.w	4052d8 <__udivmoddi4+0x2d4>
  405136:	4680      	mov	r8, r0
  405138:	1aed      	subs	r5, r5, r3
  40513a:	b2a3      	uxth	r3, r4
  40513c:	fbb5 f0f2 	udiv	r0, r5, r2
  405140:	fb02 5510 	mls	r5, r2, r0, r5
  405144:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  405148:	fb0c fc00 	mul.w	ip, ip, r0
  40514c:	45a4      	cmp	ip, r4
  40514e:	d907      	bls.n	405160 <__udivmoddi4+0x15c>
  405150:	19e4      	adds	r4, r4, r7
  405152:	f100 33ff 	add.w	r3, r0, #4294967295
  405156:	d202      	bcs.n	40515e <__udivmoddi4+0x15a>
  405158:	45a4      	cmp	ip, r4
  40515a:	f200 80b8 	bhi.w	4052ce <__udivmoddi4+0x2ca>
  40515e:	4618      	mov	r0, r3
  405160:	eba4 040c 	sub.w	r4, r4, ip
  405164:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405168:	e79d      	b.n	4050a6 <__udivmoddi4+0xa2>
  40516a:	4631      	mov	r1, r6
  40516c:	4630      	mov	r0, r6
  40516e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405172:	f1ce 0420 	rsb	r4, lr, #32
  405176:	fa05 f30e 	lsl.w	r3, r5, lr
  40517a:	fa07 f70e 	lsl.w	r7, r7, lr
  40517e:	fa20 f804 	lsr.w	r8, r0, r4
  405182:	0c3a      	lsrs	r2, r7, #16
  405184:	fa25 f404 	lsr.w	r4, r5, r4
  405188:	ea48 0803 	orr.w	r8, r8, r3
  40518c:	fbb4 f1f2 	udiv	r1, r4, r2
  405190:	ea4f 4518 	mov.w	r5, r8, lsr #16
  405194:	fb02 4411 	mls	r4, r2, r1, r4
  405198:	fa1f fc87 	uxth.w	ip, r7
  40519c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4051a0:	fb01 f30c 	mul.w	r3, r1, ip
  4051a4:	42ab      	cmp	r3, r5
  4051a6:	fa00 f40e 	lsl.w	r4, r0, lr
  4051aa:	d909      	bls.n	4051c0 <__udivmoddi4+0x1bc>
  4051ac:	19ed      	adds	r5, r5, r7
  4051ae:	f101 30ff 	add.w	r0, r1, #4294967295
  4051b2:	f080 808a 	bcs.w	4052ca <__udivmoddi4+0x2c6>
  4051b6:	42ab      	cmp	r3, r5
  4051b8:	f240 8087 	bls.w	4052ca <__udivmoddi4+0x2c6>
  4051bc:	3902      	subs	r1, #2
  4051be:	443d      	add	r5, r7
  4051c0:	1aeb      	subs	r3, r5, r3
  4051c2:	fa1f f588 	uxth.w	r5, r8
  4051c6:	fbb3 f0f2 	udiv	r0, r3, r2
  4051ca:	fb02 3310 	mls	r3, r2, r0, r3
  4051ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4051d2:	fb00 f30c 	mul.w	r3, r0, ip
  4051d6:	42ab      	cmp	r3, r5
  4051d8:	d907      	bls.n	4051ea <__udivmoddi4+0x1e6>
  4051da:	19ed      	adds	r5, r5, r7
  4051dc:	f100 38ff 	add.w	r8, r0, #4294967295
  4051e0:	d26f      	bcs.n	4052c2 <__udivmoddi4+0x2be>
  4051e2:	42ab      	cmp	r3, r5
  4051e4:	d96d      	bls.n	4052c2 <__udivmoddi4+0x2be>
  4051e6:	3802      	subs	r0, #2
  4051e8:	443d      	add	r5, r7
  4051ea:	1aeb      	subs	r3, r5, r3
  4051ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4051f0:	e78f      	b.n	405112 <__udivmoddi4+0x10e>
  4051f2:	f1c1 0720 	rsb	r7, r1, #32
  4051f6:	fa22 f807 	lsr.w	r8, r2, r7
  4051fa:	408b      	lsls	r3, r1
  4051fc:	fa05 f401 	lsl.w	r4, r5, r1
  405200:	ea48 0303 	orr.w	r3, r8, r3
  405204:	fa20 fe07 	lsr.w	lr, r0, r7
  405208:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40520c:	40fd      	lsrs	r5, r7
  40520e:	ea4e 0e04 	orr.w	lr, lr, r4
  405212:	fbb5 f9fc 	udiv	r9, r5, ip
  405216:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40521a:	fb0c 5519 	mls	r5, ip, r9, r5
  40521e:	fa1f f883 	uxth.w	r8, r3
  405222:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  405226:	fb09 f408 	mul.w	r4, r9, r8
  40522a:	42ac      	cmp	r4, r5
  40522c:	fa02 f201 	lsl.w	r2, r2, r1
  405230:	fa00 fa01 	lsl.w	sl, r0, r1
  405234:	d908      	bls.n	405248 <__udivmoddi4+0x244>
  405236:	18ed      	adds	r5, r5, r3
  405238:	f109 30ff 	add.w	r0, r9, #4294967295
  40523c:	d243      	bcs.n	4052c6 <__udivmoddi4+0x2c2>
  40523e:	42ac      	cmp	r4, r5
  405240:	d941      	bls.n	4052c6 <__udivmoddi4+0x2c2>
  405242:	f1a9 0902 	sub.w	r9, r9, #2
  405246:	441d      	add	r5, r3
  405248:	1b2d      	subs	r5, r5, r4
  40524a:	fa1f fe8e 	uxth.w	lr, lr
  40524e:	fbb5 f0fc 	udiv	r0, r5, ip
  405252:	fb0c 5510 	mls	r5, ip, r0, r5
  405256:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40525a:	fb00 f808 	mul.w	r8, r0, r8
  40525e:	45a0      	cmp	r8, r4
  405260:	d907      	bls.n	405272 <__udivmoddi4+0x26e>
  405262:	18e4      	adds	r4, r4, r3
  405264:	f100 35ff 	add.w	r5, r0, #4294967295
  405268:	d229      	bcs.n	4052be <__udivmoddi4+0x2ba>
  40526a:	45a0      	cmp	r8, r4
  40526c:	d927      	bls.n	4052be <__udivmoddi4+0x2ba>
  40526e:	3802      	subs	r0, #2
  405270:	441c      	add	r4, r3
  405272:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405276:	eba4 0408 	sub.w	r4, r4, r8
  40527a:	fba0 8902 	umull	r8, r9, r0, r2
  40527e:	454c      	cmp	r4, r9
  405280:	46c6      	mov	lr, r8
  405282:	464d      	mov	r5, r9
  405284:	d315      	bcc.n	4052b2 <__udivmoddi4+0x2ae>
  405286:	d012      	beq.n	4052ae <__udivmoddi4+0x2aa>
  405288:	b156      	cbz	r6, 4052a0 <__udivmoddi4+0x29c>
  40528a:	ebba 030e 	subs.w	r3, sl, lr
  40528e:	eb64 0405 	sbc.w	r4, r4, r5
  405292:	fa04 f707 	lsl.w	r7, r4, r7
  405296:	40cb      	lsrs	r3, r1
  405298:	431f      	orrs	r7, r3
  40529a:	40cc      	lsrs	r4, r1
  40529c:	6037      	str	r7, [r6, #0]
  40529e:	6074      	str	r4, [r6, #4]
  4052a0:	2100      	movs	r1, #0
  4052a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4052a6:	4618      	mov	r0, r3
  4052a8:	e6f8      	b.n	40509c <__udivmoddi4+0x98>
  4052aa:	4690      	mov	r8, r2
  4052ac:	e6e0      	b.n	405070 <__udivmoddi4+0x6c>
  4052ae:	45c2      	cmp	sl, r8
  4052b0:	d2ea      	bcs.n	405288 <__udivmoddi4+0x284>
  4052b2:	ebb8 0e02 	subs.w	lr, r8, r2
  4052b6:	eb69 0503 	sbc.w	r5, r9, r3
  4052ba:	3801      	subs	r0, #1
  4052bc:	e7e4      	b.n	405288 <__udivmoddi4+0x284>
  4052be:	4628      	mov	r0, r5
  4052c0:	e7d7      	b.n	405272 <__udivmoddi4+0x26e>
  4052c2:	4640      	mov	r0, r8
  4052c4:	e791      	b.n	4051ea <__udivmoddi4+0x1e6>
  4052c6:	4681      	mov	r9, r0
  4052c8:	e7be      	b.n	405248 <__udivmoddi4+0x244>
  4052ca:	4601      	mov	r1, r0
  4052cc:	e778      	b.n	4051c0 <__udivmoddi4+0x1bc>
  4052ce:	3802      	subs	r0, #2
  4052d0:	443c      	add	r4, r7
  4052d2:	e745      	b.n	405160 <__udivmoddi4+0x15c>
  4052d4:	4608      	mov	r0, r1
  4052d6:	e708      	b.n	4050ea <__udivmoddi4+0xe6>
  4052d8:	f1a8 0802 	sub.w	r8, r8, #2
  4052dc:	443d      	add	r5, r7
  4052de:	e72b      	b.n	405138 <__udivmoddi4+0x134>

004052e0 <__aeabi_idiv0>:
  4052e0:	4770      	bx	lr
  4052e2:	bf00      	nop
  4052e4:	0001c200 	.word	0x0001c200
  4052e8:	000000c0 	.word	0x000000c0
  4052ec:	00000800 	.word	0x00000800
  4052f0:	00000000 	.word	0x00000000
  4052f4:	000a6425 	.word	0x000a6425
  4052f8:	54545542 	.word	0x54545542
  4052fc:	31204e4f 	.word	0x31204e4f
  405300:	0000000a 	.word	0x0000000a
  405304:	54545542 	.word	0x54545542
  405308:	32204e4f 	.word	0x32204e4f
  40530c:	0000000a 	.word	0x0000000a
  405310:	54545542 	.word	0x54545542
  405314:	33204e4f 	.word	0x33204e4f
  405318:	0000000a 	.word	0x0000000a
  40531c:	2c64255b 	.word	0x2c64255b
  405320:	00000020 	.word	0x00000020
  405324:	0a5d6425 	.word	0x0a5d6425
  405328:	00000000 	.word	0x00000000
  40532c:	202c6425 	.word	0x202c6425
  405330:	00000000 	.word	0x00000000

00405334 <_global_impure_ptr>:
  405334:	20400020 33323130 37363534 42413938      .@ 0123456789AB
  405344:	46454443 00000000 33323130 37363534     CDEF....01234567
  405354:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405364:	0000296c                                l)..

00405368 <blanks.7202>:
  405368:	20202020 20202020 20202020 20202020                     

00405378 <zeroes.7203>:
  405378:	30303030 30303030 30303030 30303030     0000000000000000
  405388:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405398 <_ctype_>:
  405398:	20202000 20202020 28282020 20282828     .         ((((( 
  4053a8:	20202020 20202020 20202020 20202020                     
  4053b8:	10108820 10101010 10101010 10101010      ...............
  4053c8:	04040410 04040404 10040404 10101010     ................
  4053d8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4053e8:	01010101 01010101 01010101 10101010     ................
  4053f8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405408:	02020202 02020202 02020202 10101010     ................
  405418:	00000020 00000000 00000000 00000000      ...............
	...

0040549c <_init>:
  40549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40549e:	bf00      	nop
  4054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4054a2:	bc08      	pop	{r3}
  4054a4:	469e      	mov	lr, r3
  4054a6:	4770      	bx	lr

004054a8 <__init_array_start>:
  4054a8:	0040350d 	.word	0x0040350d

004054ac <__frame_dummy_init_array_entry>:
  4054ac:	00400165                                e.@.

004054b0 <_fini>:
  4054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4054b2:	bf00      	nop
  4054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4054b6:	bc08      	pop	{r3}
  4054b8:	469e      	mov	lr, r3
  4054ba:	4770      	bx	lr

004054bc <__fini_array_start>:
  4054bc:	00400141 	.word	0x00400141
